(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\Users\\Swapnil Desai\\AppData\\Roaming\\npm\\node_modules\\watchify\\node_modules\\browserify\\node_modules\\process\\browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\analytics.js":[function(require,module,exports){
'use strict';

//Dependent Modules
var angular                 = require('third-party-modules/angular');
var uiRouter                = require('third-party-modules/angular-ui-router');
var resolvers               = require('../manage/resolvers');

//Directives
var chartService            = require('./services/chart');
var analyticsGraphView      = require('./directives/analytics-graph-view');

//Templates
var overviewTemplate        = require('./controllers/overview/partials/overview.html');
var eventsTemplate          = require('./controllers/events/partials/events.html');
var funnelsTemplate         = require('./controllers/funnels/partials/funnels.html');
var createFunnelTemplate    = require('./controllers/funnels/partials/create.html');
var editFunnelTemplate      = require('./controllers/funnels/partials/edit.html');
var segmentationTemplate    = require('./controllers/segmentation/partials/segmentation.html');

//Controllers
var overviewCtrl            = require('./controllers/overview/overview-ctrl');
var eventsCtrl              = require('./controllers/events/events-ctrl');
var funnelsCtrl             = require('./controllers/funnels/funnel-ctrl');
var createFunnelCtrl        = require('./controllers/funnels/create-ctrl');
var editFunnelCtrl          = require('./controllers/funnels/edit-ctrl');
var segmentationCtrl        = require('./controllers/segmentation/segmentation-ctrl');



module.exports = angular.module('built.analytics', ['ui.router'])
  .controller('overviewCtrl', overviewCtrl)
  .controller('eventsCtrl', eventsCtrl)
  .controller('funnelsCtrl', funnelsCtrl)
  .controller('createFunnelCtrl', createFunnelCtrl)
  .controller('editFunnelCtrl', editFunnelCtrl)
  .controller('segmentationCtrl', segmentationCtrl)
  .directive('analyticsGraphView', analyticsGraphView)
  .service('chartService', chartService)
  .config([
    '$stateProvider',
    function($stateProvider) {
      $stateProvider
        .state('app.dashboard.analytics-overview', {
          url: '/analytics/overview',
          template: overviewTemplate,
          controller: 'overviewCtrl',
          data: {
            breadcrumbs: [{
              name: "Analytics"
            }, {
              name: 'Overview'
            }]
          }
        })
        .state('app.dashboard.analytics-segmentation', {
          url: '/analytics/segmentation',
          template: segmentationTemplate,
          resolve: resolvers.resolve(['events', 'segBookmarks']),
          controller: 'segmentationCtrl',
          data: {
            breadcrumbs: [{
              name: "Analytics"
            }, {
              name: 'Segmentation'
            }]
          }
        })
        .state('app.dashboard.analytics-funnels', {
          url: '/analytics/funnels?funnel_uid',
          template: funnelsTemplate,
          reloadOnSearch : false,
          resolve: resolvers.resolve(['funnels']),
          controller: 'funnelsCtrl',
          data: {
            breadcrumbs: [{
              name: "Analytics"
            }, {
              name: 'Funnels'
            }]
          }
        })
        .state('app.dashboard.analytics-events', {
          url: '/analytics/events',
          template: eventsTemplate,
          resolve: resolvers.resolve(['events']),
          controller: 'eventsCtrl',
          data: {
            breadcrumbs: [{
              name: "Analytics"
            }, {
              name: 'events'
            }]
          }
        })
        .state('app.dashboard.analytics-funnels-create', {
          url: '/analytics/funnels/create',
          template: createFunnelTemplate,
          resolve: resolvers.resolve(['events']),
          controller: 'createFunnelCtrl',
          data: {
            breadcrumbs: [{
              name: "Analytics"
            }, {
              name: 'Funnels'
            }, {
              name: 'create'
            }]
          }
        })
        .state('app.dashboard.analytics-funnels-edit', {
          url: '/analytics/funnels/edit/:funnel_uid',
          template: editFunnelTemplate,
          resolve: resolvers.resolve(['funnels', 'events']),
          controller: 'editFunnelCtrl',
          data: {
            breadcrumbs: [{
              name: "Analytics"
            }, {
              name: 'Funnels'
            }, {
              name: 'edit'
            }]
          }
        })
    }
  ]).run([
    'libraryService',
    'menuService',
    function(LIB, menu) {
      var menuItem = {
        id: 'analytics',
        title: 'Analytics',
        order: 7,
        icon: 'fa-bar-chart-o',
        sub_menu: [{
          id: 'overview',
          title: 'Overview',
          state: 'app.dashboard.analytics-overview'
        }, {
          id: 'segmentation',
          title: 'Segmentation',
          state: 'app.dashboard.analytics-segmentation'
        }, {
          id: 'funnels',
          title: 'Funnels',
          state: 'app.dashboard.analytics-funnels'
        }, {
          id: 'events',
          title: 'Events',
          state: 'app.dashboard.analytics-events'
        }]
      }
      menu.add(menuItem);

      LIB.register('charts');
    }
  ])
},{"../manage/resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/events/events-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\events\\events-ctrl.js","./controllers/events/partials/events.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\events\\partials\\events.html","./controllers/funnels/create-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\create-ctrl.js","./controllers/funnels/edit-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\edit-ctrl.js","./controllers/funnels/funnel-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\funnel-ctrl.js","./controllers/funnels/partials/create.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\partials\\create.html","./controllers/funnels/partials/edit.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\partials\\edit.html","./controllers/funnels/partials/funnels.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\partials\\funnels.html","./controllers/overview/overview-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\overview\\overview-ctrl.js","./controllers/overview/partials/overview.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\overview\\partials\\overview.html","./controllers/segmentation/partials/segmentation.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\segmentation\\partials\\segmentation.html","./controllers/segmentation/segmentation-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\segmentation\\segmentation-ctrl.js","./directives/analytics-graph-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\directives\\analytics-graph-view.js","./services/chart":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\services\\chart.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-router\\release\\angular-ui-router.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\events\\events-ctrl.js":[function(require,module,exports){
'use strict';
var eventModal = require('./partials/event-modal.html');

module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  'events',
  'modalService',
  '$timeout',
  function($scope, $location, $state, builtApi, Alert, Utils, events, Modal, $timeout) {
    $scope.events = events;
    $scope.actions = ['edit', 'delete'];
    var apiKey = $state.params.api_key;
    $scope.selectedRows = [];
    $scope.classColumns = [];

    //Set Default Columns of objects Table
    $scope.classColumns.push({
      'label': 'UID',
      'key': 'uid'
    }, {
      'label': 'Name',
      'key': 'name'
    }, {
      'label': 'Category',
      'key': 'category'
    }, {
      'label': 'description',
      'key': 'description'
    })

    $scope.action = function(act, event) {
      if (act === 'delete') {
        deleteEvent(event);
        return;
      }
      if (act === 'edit') {
        editEvent(event);
        return;
      }
      if (act === 'create') {
        createNewEvent();
        return;
      }
    }

    function editEvent(event) {
      var index = $scope.events.indexOf(event);
      Modal.openModal({
          uid: event.uid,
          name: event.name,
          description: event.description,
          category: event.category
        }, eventModal, editEventModalCtrl)
        .then(function(res) {
          $scope.events[index] = res.event;
          Alert.notify({
            title: 'Success',
            content: res.notice,
            type: 'success'
          });
        })
    }

    var editEventModalCtrl = function($scope, $modalInstance, data) {
      $scope.isEventPresent = _.isEmpty(data.uid.trim()) ? false : true;
      $scope.data = data;
      $scope.btnStatus = false;
      $timeout(function() {
        $('#js-category-selector').val($scope.data.category).select2({
          tags: $scope.data.category,
          tokenSeparators: [',']
        });

      });

      $scope.ok = function() {
        $scope.data.name = $scope.data.name ? $scope.data.name.trim() : "";
        if ($scope.data.name) {
          $scope.btnStatus = true;
          $scope.data['category'] = $('#js-category-selector').select2('data').map(function(data) {
            return data.text;
          });
          builtApi.Analytics.editEvents({
              options: {
                eventUid: $scope.data.uid
              },
              body: {
                app_api_key: apiKey,
                event: $scope.data,
                event_uid: $scope.data.uid
              }
            })
            .then(function(res) {
              $scope.btnStatus = false;
              $modalInstance.close(res);
            }, function(xhr) {
              $scope.btnStatus = false;
              xhr = xhr.entity;
              Alert.notify({
                title: xhr.error_message,
                content: Utils.parseError(xhr),
                type: 'error'
              });
            });
        } else {
          Alert.notify({
            title: "Invalid Event Name",
            content: "",
            type: 'error'
          });
        }
      }

      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      };
    }

    $scope.categoryArrayToString = function(arr) {
      return arr.join();
    }

    function deleteEvent(event) {
      var index = $scope.events.indexOf(event);
      var uid = event.uid;

      Alert.confirm({
          title: 'Delete event',
          content: 'Are you sure you want to delete this event?'
        })
        .then(function() {
          builtApi.Analytics.deleteEvents({
              options: {
                eventUid: uid
              }
            })
            .then(function(data) {
              $scope.events.splice(index, 1);
              Alert.notify({
                title: data.notice,
                content: 'Success',
                type: 'success'
              });
            }, function(xhr) {
              Alert.notify({
                title: xhr.entity.error_message,
                content: Utils.parseError(xhr.entity),
                type: 'error'
              });
            });
        });

    }

    function getCategoryList(events) {
      var categoryArray = [];
      if (!_.isEmpty(events)) {
        var tempCategoryArray = events.map(function(event) {
          event.category.map(function(category) {
            categoryArray.push(category);
          })
        })
        return categoryArray;
      } else {
        return [];
      }
    }

    function createNewEvent() {

      Modal.openModal({
          uid: "",
          name: "",
          description: "",
          category: getCategoryList($scope.events)
        }, eventModal, newEventModalCtrl)
        .then(function(res) {
          $scope.events.push(res.event);
          Alert.notify({
            title: 'Success',
            content: res.notice,
            type: 'success'
          });
        })
    }

    var newEventModalCtrl = function($scope, $modalInstance, data) {
      $scope.isEventPresent = _.isEmpty(data.uid.trim()) ? false : true;
      $scope.data = data;
      $scope.btnStatus = false;
      $timeout(function() {
        $('#js-category-selector').select2({
          tags: $scope.data.category,
          tokenSeparators: [',']
        });
      })

      $scope.ok = function() {
        $scope.btnStatus = true;
        $scope.data.name = $scope.data.name ? $scope.data.name.trim() : "";

        if (_.isEmpty($scope.data.name)) {
          Alert.notify({
            title: "Please enter a valid event name.",
            content: "",
            type: 'error'
          });
          return;
        }

        $scope.data['category'] = $('#js-category-selector').select2('data').map(function(data) {
          return data.text;
        });

        builtApi.Analytics.getPropAnalytics({
            body: {
              app_api_key: apiKey,
              event: $scope.data
            }
          })
          .then(function(res) {
            $scope.btnStatus = false;
            res["data"] = $scope.data;
            $modalInstance.close(res);
          }, function(xhr) {
            $scope.btnStatus = false;
            xhr = xhr.entity;
            Alert.notify({
              title: xhr.error_message,
              content: Utils.parseError(xhr),
              type: 'error'
            });
          });
      }

      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      };
    }
  }
]
},{"./partials/event-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\events\\partials\\event-modal.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\events\\partials\\event-modal.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="cancel()">\n' +
    '        ×\n' +
    '    </button>\n' +
    '    <h3 class="modal-title">\n' +
    '        <span ng-if="!isEventPresent">Add New Event</span>\n' +
    '        <span ng-if="isEventPresent">Edit Event</span>\n' +
    '    </h3>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '  <div class="form-horizontal">\n' +
    '      <fieldset>\n' +
    '          <div class="form-group">\n' +
    '              <label class="col-md-2 control-label">UID</label>\n' +
    '              <div class="col-md-10">\n' +
    '                <input type="text" class="form-control" ng-model="data.uid" ng-value="data.uid" ng-disabled="isEventPresent">\n' +
    '              </div>\n' +
    '          </div>\n' +
    '          <div class="form-group">\n' +
    '              <label class="col-md-2 control-label">Name</label>\n' +
    '              <div class="col-md-10">\n' +
    '                  <input class="form-control" ng-model="data.name" ng-value="data.name" required>\n' +
    '              </div>\n' +
    '          </div>\n' +
    '          <div class="form-group">\n' +
    '              <label class="col-md-2 control-label">Categories</label>\n' +
    '              <div class="col-md-10">\n' +
    '                  <input type="hidden" id="js-category-selector">\n' +
    '              </div>\n' +
    '          </div>\n' +
    '          <div class="form-group">\n' +
    '              <label class="col-md-2 control-label">Description</label>\n' +
    '              <div class="col-md-10">\n' +
    '                  <textarea ng-model="data.description" ng-value="data.description" class="form-control"></textarea>\n' +
    '              </div>\n' +
    '          </div>\n' +
    '      </fieldset>\n' +
    '  </div>\n' +
    '</div>\n' +
    '\n' +
    '<div class="modal-footer">\n' +
    '    <div class="button-wrap">\n' +
    '        <button btn-loader="btnStatus" loading-text="Saving..." class="btn btn-labeled btn-primary btn-sm pull-right" ng-click="ok()">\n' +
    '            <span class="btn-label">\n' +
    '              <i class="fa fa-check"></i>\n' +
    '            </span>\n' +
    '            <span class="js-btn-text">\n' +
    '              Done\n' +
    '            </span>\n' +
    '        </button>\n' +
    '        <button ng-click=\'cancel()\'  class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '            </span>Cancel\n' +
    '        </button>\n' +
    '    </div>\n' +
    '</div>\n' +
    '    \n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\events\\partials\\events.html":[function(require,module,exports){
module.exports = '<div class="">\n' +
    '    <div class=\'button-wrap mb10\'>\n' +
    '        <a ng-click="action(\'create\')" class="pull-left btn-labeled btn btn-primary">\n' +
    '            <span class="btn-label"><i class="fa fa-exchange"></i>\n' +
    '            </span>Create New Event\n' +
    '        </a>\n' +
    '    </div>\n' +
    '    <div class="data-tbl-wrap">\n' +
    '        <table class="table data-tbl log-table table-bordered table-hover">\n' +
    '            <thead>\n' +
    '                <tr class=\'dt-head-tr\'>\n' +
    '                    <th>UID</th>\n' +
    '                    <th>Name</th>\n' +
    '                    <th>Category</th>\n' +
    '                    <th>Description</th>\n' +
    '                    <th>Actions</th>\n' +
    '                </tr>\n' +
    '            </thead>\n' +
    '            <tbody>\n' +
    '                <tr ng-repeat = "event in events">\n' +
    '                    <td>{{event.uid}}</td>\n' +
    '                    <td>{{event.name}}</td>\n' +
    '                    <td>{{categoryArrayToString(event.category)}}</td>\n' +
    '                    <td>{{event.description}}</td>\n' +
    '                    <td>\n' +
    '                        <span title="{{act}}" ng-repeat=\'act in actions\' ng-click=\'action(act, event)\' class="hand fa fa-lg edit_evnt ml10 dt-action-item" ng-class="{\'fa-pencil\' : act == \'edit\', \'fa-trash-o\' : act == \'delete\'}"></span>\n' +
    '                    </td>\n' +
    '                </tr>\n' +
    '            </tbody>\n' +
    '        </table>\n' +
    '    </div>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\create-ctrl.js":[function(require,module,exports){
'use strict';

module.exports = [
  '$scope',
  '$state',
  'constants',
  'builtApi',
  'alertService',
  'utilsService',
  'libraryService',
  'events',
  'previousStateService',
  function($scope, $state, constants, builtApi, Alert, Utils, LIB, events, previousState) {
    var apiKey = $state.params.api_key;

    $scope.funnel = _.cloneDeep(constants.analytics.defaults.funnelQuery);
    $scope.btnStatus =false;
    $scope.events = events;
    $scope.getFunnelNow = false;
    var apiKey = $state.params.api_key;

    //create new funnel
    $scope.createFunnel = function() {
      $scope.btnStatus =true;
      builtApi.Analytics.addFunnel({
        body: {
          funnel: $scope.funnel
        }
      }).then(function(res) {
        $scope.funnel = res.funnel;
        Alert.notify({
          title: 'Success',
          content: res.notice,
          type: 'success'
        });
        navigateToList();
      }, function(xhr) {
        Alert.notify({
          title: xhr.entity.error_message,
          content: Utils.parseError(xhr.entity),
          type: 'error'
        })
      }).finally(function(){
        $scope.btnStatus =false;
      });
    }


    $scope.getFunnel = function() {
      $scope.getFunnelNow = true;
    }

    $scope.getFunnelCallback = function(getFunnel) {
      getFunnel
        .then(function(funnel) {
          $scope.funnel = funnel;
          $scope.createFunnel();
        }, function(err) {
          console.log("Funnel: Validation failed.")
        }).finally(function() {
          $scope.getFunnelNow = false;
        });
    }

    $scope.cancel = function() {
      navigateToList();
    }

    function navigateToList() {
      $state.go("app.dashboard.analytics-funnels", {
        api_key: apiKey,
        funnel_uid: $scope.funnel.uid
      });
    }

  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\edit-ctrl.js":[function(require,module,exports){
'use strict';

module.exports = [
  '$scope',
  'constants',
  'builtApi',
  'alertService',
  'utilsService',
  '$state',
  'funnels',
  'events',
  'previousStateService',
  function($scope, constants, builtApi, Alert, Utils, $state, funnels, events, previousState) {
    var apiKey = $state.params.api_key;
    var funnelUid = $state.params.funnel_uid;

    $scope.events = events;
    $scope.getFunnelNow = false;
    $scope.btnStatus =false;
    $scope.funnel = (_.find(funnels.funnels, {
      'uid': funnelUid
    }) || []);

    $scope.updateFunnel = function() {
      $scope.getFunnelNow = true;
    }

    $scope.getFunnelCallback = function(getFunnel) {
      getFunnel
        .then(function(funnel) {
          $scope.funnel = funnel;
          updateFunnel();
        }, function(err) {
          console.log("Funnel: Validation failed.")
        }).finally(function() {
          $scope.getFunnelNow = false;
        });
    }

    $scope.cancel = function() {
      previousState.go("app.dashboard.analytics-funnels", {
        api_key: apiKey
      });
    }

    function updateFunnel() {
      $scope.btnStatus =true;
      builtApi.Analytics.editFunnel({
        options: {
          funnelUid: funnelUid
        },
        body: {
          funnel: $scope.funnel
        }
      }).then(function(res) {
        Alert.notify({
          title: 'Success',
          content: res.notice,
          type: 'success'
        });
        navigateToList();
      }, function(xhr) {
        Alert.notify({
          title: xhr.entity.error_message,
          content: Utils.parseError(xhr.entity),
          type: 'error'
        })
      }).finally(function(){
        $scope.btnStatus =false;
      })
    }

    function navigateToList() {
      previousState.go("app.dashboard.analytics-funnels", {
        api_key: apiKey,
        funnel_uid: funnelUid
      });
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\funnel-ctrl.js":[function(require,module,exports){
'use strict';

module.exports = [
	'$scope',
	'constants',
	'builtApi',
	'alertService',
	'utilsService',
	'libraryService',
	'funnels',
	'$state',
	'$location',
	'$rootScope',
	'$stateParams',
	'$timeout',
	function($scope, constants, builtApi, Alert, Utils, LIB, funnels, $state, $location, $rootScope, $stateParams, $timeout) {
		var funnelSelect = $('#js-funnel-select');
		var funnelChartWrap = $('.funnel-chart-wrap');
		var apiKey = $state.params.api_key;

		$scope.loading = false;
		$scope.noDataFound = false;

		$scope.funnelSteps = [];
		$scope.overallConvRatio = 0;



		//OnSave we get funnelUid on List page
		$scope.selectedFunnelUid = $state.params.funnel_uid || "";

		//funnel params for get funnel call
		$scope.funnelParams = {};

		//date Range for Date picker
		$scope.dateRange = {
			startDate: moment().subtract(30, 'day').format('YYYY-MM-DD'),
			endDate: moment().format('YYYY-MM-DD'),
			options: {
				opens: 'left'
			}
		};


		//Initial funnel check
		initialFunnelCheck();


		//funnel creation view navigator
		$scope.createNewFunnel = function() {
			$state.go('app.dashboard.analytics-funnels-create', {});
		}

		//edit funnel view navigator
		$scope.editFunnel = function() {
			$state.go('app.dashboard.analytics-funnels-edit', {
				funnel_uid: $scope.funnelParams.funnel_uid
			});
		}

		//Delete funnel call
		$scope.deleteFunnel = function() {
			Alert.confirm({
					title: 'Delete Funnel',
					content: 'Are you sure you want to delete this funnel?'
				})
				.then(function() {
					builtApi.Analytics.deleteFunnel({
							options: {
								funnelUid: $scope.funnelParams.funnel_uid
							}
						})
						.then(function(res) {

							funnels.funnels.splice(_.findIndex(funnels.funnels, {
								uid: $scope.funnelParams.funnel_uid
							}), 1);
							$location.search({
								funnel_uid: ''
							})
							initialFunnelCheck();
						})
				});
		}

		//On date range change callback
		$scope.onDateRangeChange = function() {
			getFunnel();
		}

		$scope.getProgress = function(num) {
			return Utils.roundOff(num) + '%';
		}

		function initialFunnelCheck() {
			if (!_.isEmpty($scope.selectedFunnelUid)) {
				if (_.findIndex(funnels.funnels, {
						uid: $scope.selectedFunnelUid
					}) != -1) {
					getFunnel($scope.selectedFunnelUid);
				} else {
					$scope.selectedFunnelUid = "";
					$scope.funnelParams = {};
				}
			}
			initFunnelSelect();
		}

		//Initiliazing select2
		function initFunnelSelect() {
			funnelSelect.val($scope.selectedFunnelUid).select2({
					placeholder: "Select a funnel...",
					data: funnels.funnels.map(function(funnel) {
						funnel['id'] = funnel.uid;
						funnel['text'] = funnel.name;
						return funnel;
					})
				})
				.on('change', function(e) {
					console.log("changed!", e.val);
					onFunnelSelect(e.val);
				});
		}

		//On funnel select
		function onFunnelSelect(uid) {
			$location.search({
				funnel_uid: uid
			});
			$scope.selectedFunnelUid = uid;
			getFunnel();
		}

		//Get funnel data call
		function getFunnel() {
			$scope.funnelParams.from_date = $scope.dateRange.startDate;
			$scope.funnelParams.to_date = $scope.dateRange.endDate;
			if ($scope.selectedFunnelUid)
				$scope.funnelParams.funnel_uid = $scope.selectedFunnelUid;

			$scope.loading = true;
			builtApi.Analytics.postAnalytics({
					options: {
						eventType: "analytics/funneling"
					},
					body: $scope.funnelParams
				})
				.then(function(res) {
					onGetFunnel(res.funnel);
				})
				.finally(function() {
					$scope.loading = false;
				});
		}



		//Post funnel select changes
		function onGetFunnel(funnelData) {
			$scope.maxCount = funnelData.analysis.max || 0;
			$scope.minCount = funnelData.analysis.min || 0;
			$scope.overallConvRatio = ($scope.minCount / $scope.maxCount) || 0
			
			if (!$scope.maxCount) {
				$scope.funnelSteps = [];
				$scope.noDataFound = true;
				return
			}

			$scope.funnelSteps = funnelData.steps;
			$scope.noDataFound = false;
			$timeout(function() {
				calculateStepWidth();
			}, 500);

		}

		/* Manually calculating step width in order to show animation. */

		function calculateStepWidth() {
			var pBars = funnelChartWrap.find('.fc-step .progress-bar');
			_.forEach($scope.funnelSteps, function(step, i) {
				pBars.eq(i).css({
					width: $scope.getProgress(step.overall_conv_ratio)
				})
			});
		}
	}
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\partials\\create.html":[function(require,module,exports){
module.exports = '<div class="well well-sm upsert-funnel-wrap max-width-1000">\n' +
    '	<div funnel-builder funnel="funnel" events="events" get-funnel-now="getFunnelNow" get-funnel-callback="getFunnelCallback"></div>\n' +
    '	<div class="button-wrap form-actions">\n' +
    '        <button ng-click=\'getFunnel()\' btn-loader="btnStatus" loading-text="Creating..." class="btn btn-labeled btn-primary btn-sm pull-right">\n' +
    '            <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '            </span> \n' +
    '            <span  class="js-btn-text">Create</span>\n' +
    '        </button>\n' +
    '        <button ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '            </span> Cancel\n' +
    '        </button>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\partials\\edit.html":[function(require,module,exports){
module.exports = '<div class="well well-sm upsert-funnel-wrap max-width-1000">\n' +
    '    <div funnel-builder funnel="funnel" events="events" get-funnel-now="getFunnelNow" get-funnel-callback="getFunnelCallback"></div>\n' +
    '    <div class="button-wrap form-actions">\n' +
    '        <button btn-loader="btnStatus" loading-text="Saving..." ng-click=\'updateFunnel()\' class="btn btn-labeled btn-primary btn-sm pull-right">\n' +
    '            <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '            </span> \n' +
    '            <span  class="js-btn-text">Done</span>\n' +
    '        </button>\n' +
    '        <button ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '            </span> Cancel\n' +
    '        </button>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\funnels\\partials\\funnels.html":[function(require,module,exports){
module.exports = '<div class="well well-sm analytics-wrap funnel-analytics" ng-class="{\'analytics-initial-load\': !funnelParams.funnel_uid}">\n' +
    '    <div class="funnel-tools-wrap">\n' +
    '      <div class="funnel-tools gray-h-bar">\n' +
    '        <div class="row">\n' +
    '          <div class="col-sm-12">\n' +
    '            <div class="pull-left">\n' +
    '                <div type="hidden" id="js-funnel-select"></div>\n' +
    '            </div>\n' +
    '            <div class="btn-group pull-left ml10">\n' +
    '                <button rel="tooltip" class="btn btn-default btn-sm" ng-click="createNewFunnel()" title="" data-placement="bottom" data-original-title="Create funnel"><i class="fa fa-plus"></i>\n' +
    '                </button>\n' +
    '                <button rel="tooltip" class="btn btn-default btn-sm" ng-click="editFunnel()" title="" data-placement="bottom" data-original-title="Edit funnel" ng-disabled="!funnelParams.funnel_uid"><i class="fa fa-pencil"></i>\n' +
    '                </button>\n' +
    '            </div>\n' +
    '            <button rel="tooltip" ng-click="deleteFunnel()" class="pull-left btn btn-danger btn-sm ml10" title="" data-placement="bottom" data-original-title="Delete funnel" ng-disabled="!funnelParams.funnel_uid"><i class="fa fa-trash-o"></i>\n' +
    '            </button>\n' +
    '          </div>\n' +
    '      </div>\n' +
    '    </div>\n' +
    '    <div ng-show="!funnelParams.funnel_uid" class="analytics-init-msg">\n' +
    '        Funnels allow you to analyze the sequence of steps taken by a user. Get started by creating a new funnel by clicking the \'+\' icon above.\n' +
    '    </div>\n' +
    '    <div ng-show="funnelParams.funnel_uid" class="funnel-chart-wrap max-width-800">\n' +
    '      <div class="fc-header clearfix">\n' +
    '        <div ng-if="!loading && !noDataFound" class="pull-left">\n' +
    '          <span class="fc-conv-rate">\n' +
    '            {{getProgress(overallConvRatio)}} \n' +
    '          </span>\n' +
    '          <span class="fc-caption">\n' +
    '            Completion rate\n' +
    '          </span>\n' +
    '        </div>\n' +
    '        <div bootstrap-daterangepicker class="date-range-picker" date-range="dateRange" on-date-range-change="onDateRangeChange"></div>\n' +
    '      </div>\n' +
    '      <div class="fc-body animated fadeIn" ng-if="!loading && !noDataFound">\n' +
    '        <div class="fc-step" ng-repeat="step in funnelSteps" ng-class="{\'d-conv\': $index == 0}">\n' +
    '          <div class="media-box">\n' +
    '            <div class="media-image pull-right">\n' +
    '              <p class="fc-ev-count">{{step.count}}</p>\n' +
    '            </div>\n' +
    '            <div class="media-body">\n' +
    '              <div ng-if="$index != 0" class="fc-conv-rate-wrap ">\n' +
    '                <i class="fa fa-sort-amount-desc"></i>\n' +
    '                <span class="fc-conv-rate">\n' +
    '                  ({{getProgress(step.step_conv_ratio)}})\n' +
    '                </span>\n' +
    '                <span class="fc-caption">\n' +
    '                  Conversion rate\n' +
    '                </span>\n' +
    '              </div>\n' +
    '\n' +
    '              <div class="fc-ev-name">\n' +
    '                  {{step.name}}\n' +
    '              </div>\n' +
    '              <div class="progress progress-striped">\n' +
    '                <div class="progress-bar progress-bar-success"></div>\n' +
    '              </div>\n' +
    '            </div>\n' +
    '          </div>\n' +
    '        </div>\n' +
    '      </div>\n' +
    '      <div class="no-msg" ng-if="!loading && noDataFound">\n' +
    '          No events triggered between the selected date range.\n' +
    '      </div>\n' +
    '      <div class="tab-loader clearfix" ng-if="loading">\n' +
    '          <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '      </div>\n' +
    '    </div>\n' +
    '  </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\overview\\overview-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  'constants',
  '$timeout',
  function($scope, $location, $state, builtApi, Alert, Utils, constants, $timeout) {

    var eventSelector = $('#js-event-selection');

    // flag to check previous category and current category. Used to check weather to clear events when category is changed.
    var categoryChanged = false;

    $scope.overviewData = {};
    $scope.searchParams = _.cloneDeep(constants.analytics.defaults.eventSearchParams);
    $scope.loading = false;
    $scope.hasGraphData = false;
    $scope.initialLoadDone = false;
    $scope.noMsg = 'There are no events recorded within the selected date range. Try changing the date range from above.';
    $scope.unit = {
      unit: $scope.searchParams.unit
    };
    $scope.dateRange = {
      startDate: moment().subtract(30, 'day').format('YYYY-MM-DD'),
      endDate: moment().format('YYYY-MM-DD'),
      options: {
        opens: 'right'
      }
    };

    $scope.modifiedDataCallback = function() {
      getAnalytics();
    }

    $scope.clear = function() {
      eventSelector.select2("val", "");
      $scope.searchParams.event.only.name = [];
      getAnalytics();
    }

    //Compare Events
    $scope.compare = function() {
      if (eventSelector.val())
        $scope.searchParams.event.only.name = eventSelector.val().split(',');
      getAnalytics();
    }

    function getAnalytics() {
      $scope.searchParams.from_date = $scope.dateRange.startDate;
      $scope.searchParams.to_date = $scope.dateRange.endDate;

      $scope.loading = true;
      builtApi.Analytics.postAnalytics({
          options: {
            eventType: "analytics"
          },
          body: $scope.searchParams
        })
        .then(function(res) {
          $scope.overviewData = res;
          onGetAnalytics();
          categoryChanged = false;
        })
        .finally(function() {
          $scope.loading = false;
        });
    }

    function onGetAnalytics() {
      $scope.hasGraphData = !_.isEmpty($scope.overviewData.data);

      if (!$scope.initialLoadDone) {
        setCategoryList();
        initEventSelect();
        $scope.initialLoadDone = true;
      }

      if ($scope.initialLoadDone && categoryChanged)
        initEventSelect();

    }


    function setCategoryList() {
      $('#js-category-selection').select2({
          placeholder: "Pick a category",
          allowClear: true,
          data: $scope.overviewData.categories.map(function(category) {
            return {
              id: category,
              text: category
            }
          })
        })
        .off("change").on("change", function(e) {
          categoryChanged = true;
          eventSelector.select2("val", "");
          $scope.searchParams.event.only.name = [];
          $scope.searchParams.event.only.category = e.val ? [e.val] : [];
          getAnalytics();
        });
    }

    function initEventSelect() {
      var eventData = _.map($scope.overviewData.event_names, function(e) {
        return {
          id: e,
          text: e
        }
      });
      eventSelector.select2({
        multiple: true,
        data: eventData,
        placeholder: "Select events to compare..."
      });

      $timeout(function() {
        eventSelector.select2('val', '');
      }, 0);
    }

    getAnalytics();
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\overview\\partials\\overview.html":[function(require,module,exports){
module.exports = '<div class="well well-sm analytics-wrap overview-analytics" ng-class="{\'no-graph-data\': !hasGraphData}">\n' +
    '    <legend class="pg-header">\n' +
    '        Overview\n' +
    '    </legend>\n' +
    '    <p class="pg-tagline animated fadeIn" ng-show="hasGraphData">\n' +
    '        The graph below displays the total number of times each event was recorded.\n' +
    '    </p>\n' +
    '    <div class="overview-graph-tools gray-h-bar animated fadeIn" ng-show="hasGraphData">\n' +
    '        <div class="row">\n' +
    '            <div class="col-md-6">\n' +
    '                <div class="ogt-events-wrap clearfix">\n' +
    '                    <input type="hidden" id="js-event-selection" />\n' +
    '                    <a ng-click="compare()" class="btn btn-primary btn-sm">\n' +
    '                        Compare\n' +
    '                    </a>\n' +
    '                    <a ng-click="clear()" class="btn btn-default ml5 btn-sm">\n' +
    '                        Clear\n' +
    '                    </a>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="col-md-6">\n' +
    '                <div class="ogt-category-wrap clearfix">\n' +
    '                    <input type="hidden" id="js-category-selection" />\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div analytics-graph-view no-msg="noMsg" date-range="dateRange" loading="loading" modified-data-callback="modifiedDataCallback" graph-data="overviewData" unit="unit"></div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\segmentation\\partials\\segmentation.html":[function(require,module,exports){
module.exports = '<div class="well well-sm analytics-wrap seg-analytics" ng-class="{\'analytics-initial-load\': !initialSelectionDone}">\n' +
    '    <div class="seg-graph-tools-wrap">\n' +
    '        <div class="seg-graph-tools gray-h-bar">\n' +
    '            <div class="row">\n' +
    '            	<div class="col-sm-6">\n' +
    '            		<input type="hidden" id="js-segmentn-event-sel" />\n' +
    '            	</div>\n' +
    '            	<div class="col-sm-6">\n' +
    '        		    <div class="seg-bookmarks-wrap" ng-show="initialSelectionDone">\n' +
    '                        <div bookmarks="bookmarks" on-select-bookmark="onSelectBookmark" on-save-bookmark="onSaveBookmark" on-delete-bookmark="onDeleteBookmark"></div>\n' +
    '        		    </div>\n' +
    '            	</div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="row events-qb-wrap" ng-if="initialSelectionDone">\n' +
    '            <div class="col-md-12" ng-if="currentEvent">\n' +
    '                <div events-query-builder="intermediateQuery" evnt="currentEvent" expandable="isQbExpandable" get-query-now="getQueryNow" get-query-callback="getQueryCallback" class="qb-responsive events-query-builder"></div>    \n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="gray-h-bar" ng-if="initialSelectionDone">\n' +
    '            <div class="row">\n' +
    '                <div class="col-md-12">\n' +
    '                    <div class="button-wrap">\n' +
    '                        <button class="btn btn-primary btn-sm" ng-click="getQuery()">Show</button>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div ng-show="initialSelectionDone" class="">\n' +
    '            <div analytics-graph-view loading="loading" no-msg="noMsg" date-range="dateRange" modified-data-callback="getAnalytics" graph-data="eventGraphData" unit="unit"></div>\n' +
    '        </div>\n' +
    '        <div ng-show="!initialSelectionDone" class="analytics-init-msg">\n' +
    '           Segmentation allows you to dive into an event, and query its properties. Get started by selecting an event from the dropdown above.\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    \n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\controllers\\segmentation\\segmentation-ctrl.js":[function(require,module,exports){
'use strict';
var traverse = require('traverse');
module.exports = [
	'$scope',
	'$location',
	'$state',
	'builtApi',
	'alertService',
	'utilsService',
	'constants',
	'events',
	'segBookmarks',
	'$q',
	'$timeout',
	function($scope, $location, $state, builtApi, Alert, Utils, constants, events, segBookmarks, $q, $timeout) {
		var events = _.cloneDeep(events);
		var eventSelect = $('#js-segmentn-event-sel');

		var defSearchQuery = null;
		var getSearchQuery = null;

		$scope.searchParams = _.cloneDeep(constants.analytics.defaults.eventSearchParams);
		$scope.noMsg = "No data found!";
		$scope.unit = {
			unit: $scope.searchParams.unit
		};

		$scope.bookmarks = segBookmarks.segments;
		$scope.eventGraphData = {};
		$scope.getQueryForBookmark = false;

		// DOM
		$scope.currentEvent = null;
		$scope.initialSelectionDone = false;
		$scope.loading = false;
		$scope.dateRange = {
			startDate: moment().subtract(30, 'day').format('YYYY-MM-DD'),
			endDate: moment().format('YYYY-MM-DD'),
			options: {
				opens: 'right'
			}
		}

		// set intermediate Query for Query builder
		$scope.intermediateQuery = {
			data: []
		};


		$scope.getQueryNow = false;
		$scope.isQbExpandable = true;
		$scope.searchQuery = {};

		setSearchQueryPromise();
		initEventSelect();

		// $scope.$watch('intermediateQuery', function(newVal, oldVal) {
		// 	console.log("Watchin intermediateQuery: ", newVal);
		// }, true)


		$scope.getQuery = function() {
			$scope.getQueryNow = true;

			getSearchQuery
				.then(function(query) {
					$scope.searchQuery = query;
					getAnalytics();
				}).finally(function() {
					$scope.getQueryNow = false;
					setSearchQueryPromise();
				});
		}

		$scope.getQueryCallback = function(getQuery) {
			getQuery
				.then(function(query) {
					defSearchQuery.resolve(query);
				}, function(err) {
					defSearchQuery.reject(err)
				})

			return getSearchQuery.promise;
		}

		$scope.getAnalytics = function() {
			getAnalytics();
		}

		function checkIfSingleQuery() {
			var query = $scope.searchQuery;
			for (var i in query) {
				var keyData = Object.keys(query[i][0])[0];
				if (query[i].length === 1 && _.isEmpty(query[i][0][keyData])) {
					return true;
				}
			}
			return false;
		}

		function setSearchQueryPromise() {
			defSearchQuery = $q.defer();
			getSearchQuery = defSearchQuery.promise;
		}

		function initEventSelect() {
			eventSelect.select2({
					placeholder: "Pick an event",
					data: events.map(function(event) {
						event["id"] = event.uid;
						event["text"] = event.name;
						return event;
					})
				})
				.off("change").on("change", function(e) {
					onEventSelect(eventSelect.select2('data'));
				});
		}

		function onEventSelect(e) {
			Utils.sa($scope, function() {
				if (!$scope.initialSelectionDone)
					$scope.initialSelectionDone = true;

				resetCurrentEvent();
				resetQuery();
				$timeout(function() {
					setCurrentEvent(e);
					getAnalytics();
				}, 0);
			});
		}

		function resetCurrentEvent() {
			$scope.currentEvent = null;
			$scope.searchParams.event.only.name = [];
		}

		function setCurrentEvent(e) {
			$scope.currentEvent = e;
			$scope.searchParams.event.only.name = [e.name];
		}

		function resetQuery() {
			$scope.intermediateQuery.data.length = 0;
			$scope.searchQuery = {};
		}

		function setQuery(q) {
			$scope.intermediateQuery.data = q.data;
		}

		function getAnalytics() {
			if (checkIfSingleQuery())
				getAnalyticsByProperty();
			else
				getAnalyticsByQuery();
		}


		function getAnalyticsByProperty() {
			var query = $scope.searchQuery;
			var params = _.cloneDeep($scope.searchParams);
			params.property = Object.keys(query[Object.keys(query)[0]][0])[0].replace('properties.', '');

			params.from_date = $scope.dateRange.startDate;
			params.to_date = $scope.dateRange.endDate;

			$scope.loading = true;
			builtApi.Analytics.getPropAnalytics({
					options: {
						eventUid: $scope.currentEvent.uid + '/properties_analytics'
					},
					body: params
				})
				.then(function(res) {
					$scope.eventGraphData = res;
				})
				.finally(function() {
					$scope.loading = false;
				})
		}

		function getAnalyticsByQuery() {
			var params = _.cloneDeep($scope.searchParams);
			params.from_date = $scope.dateRange.startDate;
			params.to_date = $scope.dateRange.endDate;
			params.query = $scope.searchQuery;

			$scope.loading = true;
			builtApi.Analytics.postAnalytics({
					options: {
						eventType: "analytics"
					},
					body: params
				})
				.then(function(res) {
					$scope.eventGraphData = res;
				})
				.finally(function() {
					$scope.loading = false;
				})
		}

		$scope.onSelectBookmark = function(bookmark) {

			var currentEvent = _.filter(events, function(e) {
				return bookmark.query.event.uid === e.uid;
			})[0];

			if (_.isUndefined(currentEvent)) {
				Alert.confirm({
					title: 'Unable to load bookmark!',
					content: 'The event saved in this bookmark is deleted.',
					buttons: '[Dismiss]'
				});

				return false;
			}


			resetCurrentEvent();
			setQuery(bookmark.query.query);

			$timeout(function() {
				eventSelect.select2('val', currentEvent.uid);
				setCurrentEvent(currentEvent);
				$timeout(function() {
					$scope.getQuery();
				}, 500);

			}, 0);
		}

		$scope.onDeleteBookmark = function(bookmark, onDeletedCallback) {
			builtApi.Analytics.deleteBookmarkSegment({
					options: {
						segmentUid: bookmark.uid
					}
				})
				.then(function(res) {
					$scope.bookmarks.splice($scope.bookmarks.indexOf(bookmark), 1);
					onDeletedCallback();
					Alert.notify({
						title: 'Success',
						content: res.notice,
						type: 'success'
					});
				})
		}


		$scope.onSaveBookmark = function(bookmark, onSaveCallback) {
			var query = Utils.removeKey($scope.intermediateQuery, '$$hashKey');

			builtApi.Analytics.postAnalytics({
					options: {
						eventType: "analytics/segments"
					},
					body: {
						segment: {
							name: bookmark,
							query: {
								event: {
									name: $scope.currentEvent.name,
									uid: $scope.currentEvent.uid
								},
								query: query
							}
						}
					}
				})
				.then(function(res) {
					onSaveCallback();
					$scope.bookmarks.push(res.segment);
					Alert.notify({
						title: 'Success',
						content: res.notice,
						type: 'success'
					});
				})


		}

	}
]
},{"traverse":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\traverse\\index.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\directives\\analytics-graph-view.js":[function(require,module,exports){
'use strict';
var analyticsGraphViewTemplate = require('./partials/analytics-graph-view.html');
module.exports = [
  'libraryService',
  '$injector',
  'constants',
  function(LIB, $injector, constants) {
    return {
      template: analyticsGraphViewTemplate,
      restrict: 'A',
      replace: true,
      scope: {
        dateRange: '=',
        modifiedDataCallback: '=',
        graphData: '=',
        unit: '=',
        loading: '=',
        noMsg: '='
      },
      link: function(scope, elem, attrs) {
        var graphHolder = elem.find('.graph');
        scope.defaultChartType = 'line';
        scope.noDataFound = false;
        
        scope.onDateRangeChange = function() {
          scope.modifiedDataCallback();
        }

        scope.setUnit = function(type) {
          scope.unit.unit = type;
          scope.modifiedDataCallback();
        }

        scope.selectChartType = function(type) {
          scope.defaultChartType = type;
          showGraph();
        }

        scope.$watch('graphData', function(newValue, oldValue) {
          if (scope.graphData && scope.graphData.data && _.isEmpty(scope.graphData.data)) {
            scope.noDataFound = true;
          } else {
            scope.noDataFound = false;
            showGraph();
          }
        });

        function showGraph() {
          LIB.get('charts')
            .then(function() {
              switch (scope.defaultChartType) {
                case 'line':
                  renderGraph(prepareDataforLineGraph());
                  break;
                case 'bar':
                  renderGraph(prepareDataForBarGraph());
                  break;
                case 'pie':
                  renderGraph(prepareDataForPieGraph());
                  break;
              }
            });
        }

        function prepareDataforLineGraph() {
          var rawGraphData = _.extend({}, {}, scope.graphData);
          var options = _.cloneDeep(constants.analytics.defaults.charts['line']);
          var modGraphData = []

          var properties = rawGraphData["data"];
          for (var key in properties) {
            var series = [];
            var stat = properties[key];

            for (var date in stat) {
              series.push([new Date(date).getTime(), stat[date]])
            }

            modGraphData.push({
              'name': key,
              'data': series
            });
          }

          options.series = modGraphData;
          return options;
        }

        function prepareDataForBarGraph() {
          var rawGraphData = $.extend(true, {}, scope.graphData);
          var options = _.cloneDeep(constants.analytics.defaults.charts['bar']);
          var modGraphData = {
            data: []
          };

          for (var key in rawGraphData["data"]) {
            var eventData = rawGraphData["data"][key];
            var eventDataCount = _.reduce(eventData, function(sum, num) {
              return sum + num;
            });
            modGraphData.data.push([key, eventDataCount]);
            options.xAxis.categories.push(key);
          };

          options.series = [modGraphData];
          options.xAxis.labels.rotation = modGraphData.data.length > 10 ? 30 : 0;
          return options;
        }

        function prepareDataForPieGraph() {

          var rawGraphData = $.extend(true, {}, scope.graphData);
          var options = _.cloneDeep(constants.analytics.defaults.charts['pie']);
          var modGraphData = {
            data: []
          };

          for (var key in rawGraphData["data"]) {
            var eventData = rawGraphData["data"][key];
            var eventDataCount = _.reduce(eventData, function(sum, num) {
              return sum + num;
            });
            modGraphData.data.push([key, eventDataCount]);
            options.xAxis.categories.push(key);
          };

          options.series = [modGraphData];
          return options;
        }

        function renderGraph(options) {
          $injector.invoke(['chartService',
            function(hc) {
              hc.drawChart({
                el: graphHolder,
                options: options
              })
            }
          ]);

        }
      }
    }
  }
]
},{"./partials/analytics-graph-view.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\directives\\partials\\analytics-graph-view.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\directives\\partials\\analytics-graph-view.html":[function(require,module,exports){
module.exports = '<div class="analytics-graph-view">\n' +
    '    <div class="agv-graph-tools">\n' +
    '        <div class="row">\n' +
    '            <div class="col-md-6">\n' +
    '                <div bootstrap-daterangepicker class="date-range-picker" date-range="dateRange" on-date-range-change="onDateRangeChange"></div>\n' +
    '            </div>\n' +
    '            <div class="col-md-6">\n' +
    '                <div class="agv-unit-wrap clearfix" ng-show="!noDataFound">\n' +
    '                    \n' +
    '                    <div class="btn-group">\n' +
    '                        <a class="btn bg-color-blue txt-color-white btn-labeled" data-toggle="dropdown">\n' +
    '                            <span class="btn-label">\n' +
    '                                <i class="fa fa-calendar"></i>\n' +
    '                            </span>\n' +
    '                            <span class="btn-text">{{unit.unit}}</span>\n' +
    '                            <span class="caret"></span>\n' +
    '                        </a>\n' +
    '                        <ul class="dropdown-menu">\n' +
    '                            <li>\n' +
    '                                <a class="hand" ng-click="setUnit(\'day\')">Day</a>\n' +
    '                            </li>\n' +
    '                            <li>\n' +
    '                                <a class="hand" ng-click="setUnit(\'week\')">Week</a>\n' +
    '                            </li>\n' +
    '                            <li>\n' +
    '                                <a class="hand" ng-click="setUnit(\'month\')">Month</a>\n' +
    '                            </li>\n' +
    '                        </ul>\n' +
    '                    </div>\n' +
    '\n' +
    '                    <div class="btn-group">\n' +
    '                        <a class="btn btn-chart-type bg-color-blue txt-color-white btn-labeled" data-toggle="dropdown">\n' +
    '                            <span class="btn-label">\n' +
    '                                <i class="fa fa-area-chart"></i>\n' +
    '                            </span>\n' +
    '                            <span class="btn-text">{{defaultChartType}}</span>\n' +
    '                            <span class="caret"></span>\n' +
    '                        </a>\n' +
    '                        <ul class="dropdown-menu">\n' +
    '                            <li>\n' +
    '                                <a class="hand" ng-click="selectChartType(\'line\')">Line</a>\n' +
    '                            </li>\n' +
    '                            <li>\n' +
    '                                <a class="hand" ng-click="selectChartType(\'bar\')">Bar</a>\n' +
    '                            </li>\n' +
    '                            <li>\n' +
    '                                <a class="hand" ng-click="selectChartType(\'pie\')">Pie</a>\n' +
    '                            </li>\n' +
    '                        </ul>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div class="agv-graph-holder" ng-class="{\'false-hidden\': loading || noDataFound}">\n' +
    '        <div class="graph"></div>\n' +
    '    </div>\n' +
    '    <div class="no-msg" ng-if="!loading && noDataFound">\n' +
    '        {{noMsg}}\n' +
    '    </div>\n' +
    '    <div class="tab-loader clearfix" ng-if="loading">\n' +
    '        <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\services\\chart.js":[function(require,module,exports){
require('third-party-modules/highcharts');

module.exports = [
  '$rootScope',
  'constants',
	function($rootScope, constants) {

		Highcharts.theme = {
			colors: constants.charts.colorPalette
		}
		Highcharts.setOptions(Highcharts.theme);
		
		this.drawChart = function(args){
			args.el.highcharts(args.options);
		}
	}
]
},{"third-party-modules/highcharts":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\highcharts\\highcharts.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\app-acl\\app-acl.js":[function(require,module,exports){
'use strict';
var appAclService = require('./services/acl');
var aclSelect     = require('./directive/acl-select');  

module.exports = angular.module('appAcl', [])
  .service('appAclService', appAclService)
  .directive('aclSelect', aclSelect);


},{"./directive/acl-select":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\app-acl\\directive\\acl-select.js","./services/acl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\app-acl\\services\\acl.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\app-acl\\directive\\acl-select.js":[function(require,module,exports){
'use strict';
module.exports = [
  'builtApi',
  function(builtApi) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        data: '=data',
        aclType: '@aclType',
        selectedData: '=selecteddata'
      },
      link: function(scope, elem, attrs) {

        var selectBox = $('#acl-' + scope.aclType + '-select');
        var anonymousObj = {};
        anonymousObj = {
          id: "anonymous",
          uid: "anonymous",
          text: "Anonymous (Non logged in users)",
          username: "Anonymous (Non logged in users)"
        };

        function getUserText(obj) {
          var html = '';
          var format = {
            n: $.trim((obj.first_name ? obj.first_name : "") + ' ' + (obj.last_name ? obj.last_name : "")),
            e: obj.email,
            u: obj.uid,
            t: obj['_tenant'] ? ('Tenant: ' + obj['_tenant']) : ''
          }

          for (var key in format) {
            if (_.isEmpty(format[key]))
              continue;
            html += '<p>' + format[key] + '</p>'
          }
          return html;
        }
 
        //throttle function for select2
        var searchACl = _.throttle(function(query) {
          return getAcl(scope.aclType, query)
            .then(function(data) {
              var dataArr = data.objects.map(function(obj) {
                obj["id"] = obj.uid;
                obj["text"] = scope.aclType == "users" ? getUserText(obj) : obj.name;
                return obj;
              });

              if (scope.aclType == "users" && !checkIfAnonymous() && matchForAnonymous(query)) {
                dataArr.splice(0, 0, anonymousObj)
              }

              return {
                results: dataArr //array of data objects
              };
            });
        }, 1000);

        //empty the selectbox when data is added
        scope.$watch('selectedData', function(newValue, oldValue) {
          if (_.isEmpty(newValue)) {
            selectBox.select2('val', "");
          }
        })

        selectBox.select2({
          minimumInputLength: 1,
          multiple: true,
          closeOnSelect: false,
          placeholder: "Select application " + scope.aclType,
          formatResultCssClass: function(){
            return scope.aclType == 'users' ? 'sel-ui': '';
          },
          escapeMarkup: function(m) {
            return m;
          },
          query: function(query) {
            searchACl(query.term).then(query.callback);
          }
        });

        function format() {

          }
          //changing value on change event
        selectBox.on('change', function(e) {
          scope.selectedData["data"] = selectBox.select2('data');
        })

        //GET acls oN select2 input
        function getAcl(aclType, searchStr) {
          var query = {
            "uid": {
              "$nin": getUidEncodeParams(scope.data.ACL[aclType])
            }
          }
          var params = {
            query: JSON.stringify(query),
            "typeahead": searchStr,
            include_tenant_name: true
          };

          if (scope.aclType === "users") {
            params["only"] = JSON.stringify({
              "BASE": ['uid', 'username', 'email']
            });
            var args = {
              options: {
                classUid: 'built_io_application_user',
                query: params
              }
            }
          }
          if (scope.aclType === "roles") {
            params["only"] = JSON.stringify({
              "BASE": ['uid', 'name']
            });
            var args = {
              options: {
                classUid: 'built_io_application_user_role',
                query: params
              }
            }
          }
          return builtApi.Objects.getAll(args)
        }

        //To encode query parameters with stringified array of Uids
        function getUidEncodeParams(arr) {
          var arrIds = arr.map(function(obj) {
            return obj.uid;
          });
          return arrIds
        }

        function checkIfAnonymous() {
          for (var i = 0; i < scope.data.ACL.users.length; i++) {
            if (scope.data.ACL.users[i].uid === "anonymous") {
              return true;
            }
          }
          return false;
        }

        function matchForAnonymous(query) {
          var reg = new RegExp(query, 'i');
          if ('anonymous'.match(reg) != null) {
            return true;
          } else {
            return false;
          }
        }
      }
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\app-acl\\partials\\acl.html":[function(require,module,exports){
module.exports = '<div class="acl-console">\n' +
    '    <div class="modal-header">\n' +
    '        <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="cancel()">\n' +
    '            ×\n' +
    '        </button>\n' +
    '\n' +
    '        <h3 class="modal-title smart-form">\n' +
    '            <span ng-if="data.isDefault">Configure Default ACL</span>\n' +
    '            <span ng-if="!data.isDefault">Configure ACL</span>\n' +
    '            <label class="toggle" ng-if="!data.isDefault">\n' +
    '                <input type="checkbox" name="checkbox-toggle" ng-init="aclDisableModel = !data.ACL.disable" ng-model="aclDisableModel" ng-change="data.ACL.disable = !aclDisableModel">\n' +
    '                <i data-swchon-text="ON" data-swchoff-text="OFF"></i>\n' +
    '            </label>\n' +
    '        </h3>\n' +
    '        <div ng-if="!data.isDefault">\n' +
    '            <p ng-if="!data.ACL.disable">This object is restricted as per the ACL given below. Turn off ACL to make it public</p>\n' +
    '            <p ng-if="data.ACL.disable">This object is public, readable to everyone. and writable only by its owners, Turn on ACL to limit access</p>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div class="modal-body">\n' +
    '        <ul id="myTab1" class="nav nav-tabs acl-nav-tabs">\n' +
    '            <li class="active">\n' +
    '                <a data-toggle="tab" ng-click="getACLType(\'users\')">Users</a>\n' +
    '            </li>\n' +
    '            <li class="">\n' +
    '                <a data-toggle="tab" ng-click="getACLType(\'roles\')">Roles</a>\n' +
    '            </li>\n' +
    '            <li class="dropdown">\n' +
    '                <a data-toggle="tab" ng-click="getACLType(\'others\')">Everyone else</a>\n' +
    '            </li>\n' +
    '\n' +
    '        </ul>\n' +
    '\n' +
    '        <div class="tab-content acl-tabs-content">\n' +
    '            <div class="tab-pane fade active in acl-tab-pane" ng-class="{hidden:ACLType!=\'users\'}">\n' +
    '                <div class="acl-list-wrap">\n' +
    '                    <div class="acl-list">\n' +
    '                        <div class="acl-item animated blue-fade-5" ng-repeat="user in data.ACL.users track by $index">\n' +
    '                            <table>\n' +
    '                                <tr>\n' +
    '                                    <td>\n' +
    '                                        <div class="acl-details-wrap">\n' +
    '                                            <p ng-if="user.first_name || user.last_name">\n' +
    '                                                {{user.first_name}} {{user.last_name}} \n' +
    '                                            </p>\n' +
    '                                            <p ng-if="user.username">\n' +
    '                                                {{user.username}}    \n' +
    '                                            </p>\n' +
    '                                            <p>\n' +
    '                                                {{user.email}}\n' +
    '                                            </p>\n' +
    '                                            <p>\n' +
    '                                                {{user.uid}}\n' +
    '                                            </p>\n' +
    '                                            <p class="acl-tenant-name" ng-if=\'user._tenant\'>\n' +
    '                                                Tenant: {{user._tenant}}\n' +
    '                                            </p>\n' +
    '                                        </div>\n' +
    '                                    </td>\n' +
    '                                    <td class="acl-rights-wrap">\n' +
    '                                        <div class="acl-rights">\n' +
    '                                            <label class="checkbox-inline" ng-repeat="right in data.rights">\n' +
    '                                                <input type="checkbox" class="checkbox style-0" ng-model="user[right]">\n' +
    '                                                <span>{{right}}</span>\n' +
    '                                            </label>\n' +
    '                                        </div>\n' +
    '                                    </td>\n' +
    '                                    <td class="remove-acl">\n' +
    '                                        <button type="button" class="close" ng-click=\'removeACL($index, data.ACL.users)\'>\n' +
    '                                            &times;\n' +
    '                                        </button>\n' +
    '                                    </td>\n' +
    '                                </tr>\n' +
    '                            </table>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '                <legend>\n' +
    '                    Add more users\n' +
    '                </legend>\n' +
    '                <div class="row">\n' +
    '                    <div class="col-md-6">\n' +
    '                        <input id="acl-users-select" class="acl-user-select" acl-select="" data="data" acl-type="users" selecteddata="userSelectedData" type="text" />\n' +
    '                        <div class="button-wrap mt5">\n' +
    '                            <button class="btn bg-color-blue txt-color-white pull-right ml5 btn-sm" ng-click="addToUserList()">Add to list</button>\n' +
    '                            <button class="btn btn-default pull-right btn-sm" ng-click="clearList(ACLType)">Clear</button>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <div class="col-md-6">\n' +
    '                        <div class="acl-rights">\n' +
    '                            <label class="checkbox-inline" ng-repeat="right in data.rights">\n' +
    '                                <input type="checkbox" class="checkbox style-0" ng-model="userRightPresets[right]">\n' +
    '                                <span>{{right}}</span>\n' +
    '                            </label>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="tab-pane fade active in acl-tab-pane" ng-class="{hidden:ACLType!=\'roles\'}">\n' +
    '                <div class="acl-list-wrap">\n' +
    '                    <div class="acl-list">\n' +
    '                        <div class="acl-item blue-fade-5" ng-repeat="role in data.ACL.roles">\n' +
    '                            <table>\n' +
    '                                <tr>\n' +
    '                                    <td>\n' +
    '                                        <div class="acl-name">\n' +
    '                                            {{role.name}}\n' +
    '                                            <span class="sub-name">{{role.uid}}</span>\n' +
    '                                        </div>\n' +
    '                                    </td>\n' +
    '                                    <td class="acl-rights-wrap">\n' +
    '                                        <div class="acl-rights">\n' +
    '                                            <label class="checkbox-inline" ng-repeat="right in data.rights">\n' +
    '                                                <input type="checkbox" class="checkbox style-0" ng-model="role[right]">\n' +
    '                                                <span>{{right}}</span>\n' +
    '                                            </label>\n' +
    '                                        </div>\n' +
    '                                    </td>\n' +
    '                                    <td class="remove-acl">\n' +
    '                                        <button type="button" class="close" ng-click=\'removeACL($index, data.ACL.roles)\'>\n' +
    '                                            &times;\n' +
    '                                        </button>\n' +
    '                                    </td>\n' +
    '                                </tr>\n' +
    '                            </table>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '                <legend>\n' +
    '                    Add more roles\n' +
    '                </legend>\n' +
    '                <div class="row">\n' +
    '                    <div class="col-md-6">\n' +
    '                        <div id="acl-roles-select" class="acl-user-select" acl-select="" data="data" acl-type="roles" selecteddata="rolesSelectedData"></div>\n' +
    '                        <div class="button-wrap mt5">\n' +
    '                            <button class="btn bg-color-blue txt-color-white pull-right ml5 btn-sm" ng-click="addToRolesList()">Add to list</button>\n' +
    '                            <button class="btn btn-default pull-right btn-sm" ng-click="clearList(ACLType)">Clear</button>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <div class="col-md-6">\n' +
    '                        <div class="acl-rights">\n' +
    '                            <label class="checkbox-inline" ng-repeat="right in data.rights">\n' +
    '                                <input type="checkbox" class="checkbox style-0" ng-model="roleRightPresets[right]">\n' +
    '                                <span>{{right}}</span>\n' +
    '                            </label>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="tab-pane fade active in acl-tab-pane" ng-class="{hidden:ACLType!=\'others\'}">\n' +
    '                <div class="acl-list-wrap">\n' +
    '                    <div class="acl-list">\n' +
    '                        <div class="acl-item">\n' +
    '                            <table>\n' +
    '                                <tr>\n' +
    '                                    <td>\n' +
    '                                        <div class="acl-name">\n' +
    '                                            Everyone else\n' +
    '                                        </div>\n' +
    '                                    </td>\n' +
    '                                    <td class="acl-rights-wrap">\n' +
    '                                        <div class="acl-rights">\n' +
    '                                            <label class="checkbox-inline" ng-repeat="right in data.rights">\n' +
    '                                                <input type="checkbox" class="checkbox style-0" ng-model="data.ACL.others[right]">\n' +
    '                                                <span>{{right}}</span>\n' +
    '                                            </label>\n' +
    '                                        </div>\n' +
    '                                    </td>\n' +
    '                                    <td class="remove-acl">\n' +
    '                                        <button type="button" class="close v-hidden" ng-click=\'removeACL($index, data.ACL.roles)\'>\n' +
    '                                            &times;\n' +
    '                                        </button>\n' +
    '                                    </td>\n' +
    '                                </tr>\n' +
    '                            </table>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '\n' +
    '            </div>\n' +
    '        </div>\n' +
    '\n' +
    '\n' +
    '    </div>\n' +
    '\n' +
    '    <div class="modal-footer">\n' +
    '        <div class="button-wrap">\n' +
    '            <button ng-click=\'ok()\' class="btn btn-labeled btn-primary btn-sm pull-right">\n' +
    '                <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '                </span>Done\n' +
    '            </button>\n' +
    '            <button ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                </span>Cancel\n' +
    '            </button>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\app-acl\\services\\acl.js":[function(require,module,exports){
'use strict';
var aclOverlayTemplate = require('../partials/acl.html');

module.exports = ['$q', 'builtApi',
  function($q, builtApi) {
    this.aclOverlayTemplate = aclOverlayTemplate;

    this.aclCtrl = function($scope, $modalInstance, data) {
      var defaultRights = makeRightPresets();

      data.ACL.users = data.ACL['users'] || [];
      data.ACL.roles = data.ACL['roles'] || [];
      data.ACL.others = makeOthersRights();

      data.isDefault = data['isDefault'] || false;

      if (!data.isDefault)
        data.ACL.disable = data.ACL['disable'] || false;

      $scope.data = data;
      $scope.ACLType = 'users';
      $scope.userSelectedData = {}; //selected data of users from selectbox directive
      $scope.rolesSelectedData = {}; //selected data of roles from selectbox directive

      /*
        Create a rights object for users and roles based on given default rights in data.rights
        Used in add more user and add more roles section.
       */
      $scope.userRightPresets = _.cloneDeep(defaultRights);
      $scope.roleRightPresets = _.cloneDeep(defaultRights);


      //Get ACL type selected in Modal Overlay
      $scope.getACLType = function(ACLType) {
        $scope.ACLType = ACLType;
      }

      //Save data in overlay
      $scope.ok = function() {
        $modalInstance.close($scope.data);
      }

      //Cancel overlay
      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      }

      //Remove Users/Roles from view-list
      $scope.removeACL = function(index, arr) {
        arr.splice(index, 1);
      }

      // Add Users to view-list with combining rights
      $scope.addToUserList = function() {
        if ($scope.userSelectedData.data) {
          var rights = _.cloneDeep($scope.userRightPresets);
          $scope.userSelectedData.data.map(function(obj, index) {
            var o = {};
            o['uid'] = obj.uid;
            o['username'] = obj.username;
            o['email'] = obj.email;
            o['_tenant'] = obj._tenant;
            o = _.assign(o, rights);
            $scope.data.ACL.users.push(o);
          });

          $scope.userSelectedData = {};
        }
      }

      // Add Roles to view-list with combining rights
      $scope.addToRolesList = function() {
        if ($scope.rolesSelectedData.data) {
          var rights = _.cloneDeep($scope.roleRightPresets);
          $scope.rolesSelectedData.data.map(function(obj, index) {
            var o = {};
            o['uid'] = obj.uid;
            o['name'] = obj.name;
            o = _.assign(o, rights);
            $scope.data.ACL.roles.push(o);
          });

          $scope.rolesSelectedData = {};
        }
      }

      //Clear selected data (users/roles)
      $scope.clearList = function(ACLType) {
        if (ACLType === 'users')
          $scope.userSelectedData = {};
        if (ACLType === 'roles')
          $scope.rolesSelectedData = {};
      }

      function makeRightPresets() {
        var o = {};
        for (var i = 0; i < data.rights.length; i++) {
          o[data.rights[i]] = false;
        };
        return o;
      }

      function makeOthersRights() {
        var rights = _.cloneDeep(defaultRights);

        // Make create and read true by default if defaultACL is true.
        rights.read = true;

        if (rights.hasOwnProperty('create'))
          rights['create'] = true;



        return _.extend({}, rights, data.ACL['others'] || {});
      }

      //Call built_io_application_user for user data
      function getUsers(query) {
        if ($scope.data.ACL.users.length) {
          var args = {
            options: {
              classUid: 'built_io_application_user',
              query: query
            }
          }
          return builtApi.Objects.getAll(args)
        } else
          return $q.reject({});
      }

      //Call built_io_application_role for role data
      function getRoles(query) {
        if ($scope.data.ACL.roles.length) {
          var args = {
            options: {
              classUid: 'built_io_application_user_role',
              query: query
            }
          }
          return builtApi.Objects.getAll(args)
        } else
          return $q.reject({});
      }

      //to combine user object containing rights and user credentials
      function mapUsers(users) {
        var mappedUsers = $scope.data.ACL.users.map(function(aclUser) {
          _.find(users, function(user) {
            if (aclUser.uid === user.uid) {
              aclUser["email"] = user.email;
              aclUser["username"] = user.username;
              aclUser['_tenant'] = user._tenant;
              aclUser['uid'] = user.uid;
            }
          });
          if (aclUser.uid === "anonymous") {
            aclUser["id"] = "anonymous";
            aclUser["text"] = "Anonymous (Non logged in users)";
            aclUser["username"] = "Anonymous (Non logged in users)";
          }
          return aclUser;
        });
        $scope.data.ACL.users = mappedUsers;
      }

      //to combine role object containing rights and role credentials
      function mapRoles(roles) {
        var mappedRoles = $scope.data.ACL.roles.map(function(aclRole) {
          _.find(roles, function(role) {
            if (aclRole.uid === role.uid) {
              aclRole["name"] = role.name;
              aclRole['uid'] = role.uid;
            }
          });
          return aclRole;
        });

        $scope.data.ACL.roles = mappedRoles;
      }

      function getQuery(aclType) {
        var query = {
          "uid": {
            "$in": getUidEncodeParams($scope.data.ACL[aclType] || [])
          }
        }
        var params = {
          query: JSON.stringify(query),
          include_tenant_name: true
        };

        if ($scope.aclType === "users") {
          params["only"] = JSON.stringify({
            "BASE": ['uid', 'username', 'email']
          });
        }

        if ($scope.aclType === "roles") {
          params["only"] = JSON.stringify({
            "BASE": ['uid', 'name']
          });
        }
        return params;
      }

      //To encode query parameters with stringified array of Uids
      function getUidEncodeParams(arr) {
        var arrIds = arr.map(function(obj) {
          return obj.uid;
        });
        return arrIds
      }

      //get Users Data
      getUsers(getQuery('users'))
        .then(function(res) {
          mapUsers(res.objects);
        })

      //get Role data
      getRoles(getQuery('roles'))
        .then(function(res) {
          mapRoles(res.objects);
        })
    }
  }
]
},{"../partials/acl.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\app-acl\\partials\\acl.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\built-api\\built-api.js":[function(require,module,exports){
var builtApi = require('./services/built-api.js');

module.exports = angular.module('builtApi', [])
  .service('builtApi', builtApi);
},{"./services/built-api.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\built-api\\services\\built-api.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\built-api\\services\\built-api.js":[function(require,module,exports){
  'use strict';
  var BuiltApi = require('built_modules/built-api');
  var headers = {};

  //Get Headers
  function getHeaders(args) {
    if (args && !_.isEmpty(args.headers)) {
      return _.extend(args.headers, headers)
    }
   // console.log("args in headers", headers);
    return headers;
  }

  function setHeaders(args_headers) {
    headers = _.extend(headers, args_headers);
   // console.log("headers", headers);
  }

  function removeHeaderKey(key) {
    delete headers[key];
   // console.log("removing app headers", headers, key);
  }

  function removeHeaders() {
    headers = {}
  }

  module.exports = [
    '$q',
    function($q) {
      return {
        //Set headers
        setHeaders: setHeaders,
        //remove specific header key
        removeHeaderKey: removeHeaderKey,
        //remove all headers
        removeHeaders: removeHeaders,
        //get headers
        getHeaders: getHeaders,
        //ApiHost service
        ApiHost: {
          getApiHost: function() {
            return $q.when(BuiltApi.Apihost.getApiHost());
          }
        },
        //FieldTypes service
        FieldTypes: {
          getDataTypes: function() {
            return $q.when(BuiltApi.FieldTypes.getDataTypes());
          }
        },
        //Tenants Service
        Tenants: {
          getAll: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Tenants.getAll(args));
          },
          addTenant: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Tenants.addTenant(args));
          },
          editTenant: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Tenants.editTenant(args));
          },
          deleteTenant: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Tenants.deleteTenant(args));
          }
        },
        //System user session service
        SystemUserSession: {
          login: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.SystemUserSession.login(args));
          },
          get: function() {
            return $q.when(BuiltApi.SystemUserSession.get());
          },
          logout: function() {
            return $q.when(BuiltApi.SystemUserSession.logout());
          },
          postForgotPassword: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.SystemUserSession.postForgotPassword(args));
          },
          signUp: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.SystemUserSession.signUp(args));
          },
          update: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.SystemUserSession.update(args));
          },
          resetPassword: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.SystemUserSession.resetPassword(args));
          },
          activateAccount: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.SystemUserSession.activateAccount(args));
          }

        },
        //Application User Session
        AppUserSession: {
          login: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.AppUserSession.login(args));
          },
          get: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.AppUserSession.get(args));
          },
          logout: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.AppUserSession.logout(args));
          },
          resetPassword: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.AppUserSession.resetPassword(args));
          },
          activateAccount: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.AppUserSession.activateAccount(args));
          }
        },
        //Application Service
        Application: {
          getApp: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Application.getApp(args));
          },
          getApps: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Application.getApps());
          },
          getAppSettings: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Application.getAppSettings(args));
          },
          postAppSettings: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Application.postAppSettings(args));
          },
          addOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Application.addOne(args));
          },
          deleteOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Application.deleteOne(args));
          },
          transferOwnerShip: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Application.transferOwnerShip(args));
          },
          editOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Application.editOne(args));
          },
          ownershipActivation: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Application.ownershipActivation(args));
          }
        },
        //Classes Service
        Classes: {
          getAll: function(args) {

            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Classes.getAll(args));
          },
          getOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Classes.getOne(args));
          },
          editOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Classes.editOne(args));
          },
          addOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Classes.addOne(args));
          },
          deleteOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Classes.deleteOne(args));
          }
        },
        //Objects Services
        Objects: {
          getOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return BuiltApi.Objects.getOne(args);
          },
          getAll: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Objects.getAll(args));
          },
          editOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Objects.editOne(args));
          },
          addOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Objects.addOne(args));
          },
          deleteOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Objects.deleteOne(args));
          },
          deleteSelected: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Objects.deleteSelected(args));
          }
        },
        //File Services
        File: {
          getUpload: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.File.getUpload(args));
          },
          deleteOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.File.deleteOne(args));
          },
          deleteSelected: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.File.deleteSelected(args));
          },
          postDefaultACl: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.File.postDefaultACl(args));
          },
          updateUploadACl: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.File.updateUploadACl(args));
          }
        },
        //Notifications Services
        Notifications: {
          getAll: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Notifications.getAll(args));
          },
          addOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Notifications.addOne(args));
          },
          editOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Notifications.editOne(args));
          },
          deleteOne: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Notifications.deleteOne(args));
          },
          getCredentialsDetails: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Notifications.getCredentialsDetails(args));
          }
        },
        ServerConfig: {
          getServerConfig: function() {
            return $q.when(BuiltApi.ServerConfig.getServerConfig());
          }
        },
        Plans: {
          getPlans: function() {
            return $q.when(BuiltApi.Plans.getPlans());
          }
        },
        ApiMetrics: {
          get: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.ApiMetrics.get(args));
          }
        },
        Extensions: {
          get: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Extensions.get(args));
          },
          delete: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Extensions.delete(args));
          },
          addDomain: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Extensions.addDomain(args));
          },
          state: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Extensions.state(args));
          }
        },
        Accounts: {
          getAccounts: function() {
            return $q.when(BuiltApi.Accounts.getAccounts());
          },
          getBillingInfo: function() {
            return $q.when(BuiltApi.Accounts.getBillingInfo());
          },
          getPaymentHistory: function() {
            return $q.when(BuiltApi.Accounts.getPaymentHistory());
          },
          postPlans: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Accounts.postPlans(args));
          }
        },
        Integration: {
          get: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Integration.get(args));
          },
          post: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Integration.post(args));
          },
          put: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Integration.put(args));
          },
          delete: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Integration.delete(args));
          }
        },
        Analytics: {
          getEvents: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Analytics.getEvents(args));
          },
          getPropAnalytics: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Analytics.getPropAnalytics(args));
          },
          editEvents: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Analytics.editEvents(args));
          },
          deleteEvents: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Analytics.deleteEvents(args));
          },
          getAnalytics: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Analytics.getAnalytics(args));
          },
          postAnalytics: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Analytics.postAnalytics(args));
          },
          deleteFunnel: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Analytics.deleteFunnel(args));
          },
          addFunnel: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Analytics.addFunnel(args));
          },
          editFunnel: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Analytics.editFunnel(args));
          },
          deleteBookmarkSegment: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Analytics.deleteBookmarkSegment(args));
          }
        },
        Bookmarks: {
          get: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Bookmarks.get(args));
          },
          add: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Bookmarks.add(args));
          },
          delete: function(args) {
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Bookmarks.delete(args));
          }
        },

        // Super Admin Service
        Admin : {
          login: function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.login(args));
          },
          logout: function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.logout(args));
          },
          getAdminMetrics : function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.getAdminMetrics(args));
          },
          getUserMetrics : function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.getUserMetrics(args));
          },
          getAdminConfig : function(){
            return $q.when(BuiltApi.Admin.getAdminConfig());
          },
          getAdminSettings : function(){
            return $q.when(BuiltApi.Admin.getAdminSettings());
          },
          postAdminSettings : function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.postAdminSettings(args));
          },
          getPromoCodes : function(){
            return $q.when(BuiltApi.Admin.getPromoCodes());
          },
          getPlans : function(){
            return $q.when(BuiltApi.Admin.getPlans());
          },
          editPlans: function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.editPlans(args));
          },
          deletePlans : function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.deletePlans(args));
          },
          postPlans : function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.postPlans(args));
          },
          getUserConfigurations: function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.getUserConfigurations(args));
          },
          updateUserConfig: function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.updateUserConfig(args));
          },
          resendActivationMail: function(args){
            var args = args || {};
            args.headers = getHeaders(args);
            return $q.when(BuiltApi.Admin.resendActivationMail(args));
          }
        }
      }

    }
  ]
},{"built_modules/built-api":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\built-api.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\class-builder.js":[function(require,module,exports){
'use strict';
//Include Modules
require('third-party-modules/jqueryui');
require('third-party-modules/angular-sortable');
var angular               = require('third-party-modules/angular');
//Include Directives
var classbuilder          = require('./directives/class-builder');
var classfield            = require('./directives/class-field');
var classFieldWrap        = require('./directives/class-field-wrap');
var refSelect             = require('./directives/reference-select');
var uniqueSelect          = require('./directives/unique-select');
var classBuilderService   = require('./services/class-builder');
var classAbilitiesService = require('./services/class-abilities');


module.exports = angular.module('classBuilder', ['appAcl', 'ui.sortable'])
  .directive('classbuilder', classbuilder)
  .directive('classfieldwrap', classFieldWrap)
  .directive('classfield', classfield)
  .directive('refselect', refSelect)
  .directive('uniqueSelect', uniqueSelect)
  .service('classBuilderService', classBuilderService)
  .service('classAbilitiesService', classAbilitiesService);
},{"./directives/class-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\directives\\class-builder.js","./directives/class-field":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\directives\\class-field.js","./directives/class-field-wrap":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\directives\\class-field-wrap.js","./directives/reference-select":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\directives\\reference-select.js","./directives/unique-select":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\directives\\unique-select.js","./services/class-abilities":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\services\\class-abilities.js","./services/class-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\services\\class-builder.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-sortable":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-sortable\\sortable.shim.js","third-party-modules/jqueryui":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\jqueryui\\jqueryui.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\directives\\class-builder.js":[function(require,module,exports){
'use strict';
var listBuilderTemplate = require('../partials/class-builder.html');
var schemaOverlay = require('../partials/class-field-modal.html');

module.exports = [
  'constants',
  'utilsService',
  'classBuilderService',
  'modalService',
  'appAclService',
  'classAbilitiesService',
  function(constants, Utils, classBuilderService, fieldModal, appAclService, classAbilitiesService) {
    return {
      template: listBuilderTemplate,
      restrict: 'A',
      scope: {
        clssdata: '=clssdata',
        dtypes: '=dtypes',
        apikey: '=',
        classSteps: '=',
        activeStep: '='
      },
      link: function(scope, elem, attrs) {

        //DOM
        scope.validUid = null;
        scope.isNewClass = false;
        scope.cfOptions = {};

        if (_.isEmpty(scope.clssdata.uid)) {
          scope.isNewClass = true;
          scope.clssdata = _.cloneDeep(constants.classes.defaultClassData)
        }

        if (!scope.isNewClass) {
          scope.created_at = getHumanizedDate(scope.clssdata.created_at);
          scope.updated_at = getHumanizedDate(scope.clssdata.updated_at);
        }
        /**
         * Validates UID for any non alphanumeric characters and changes color of the UID input.
         */
        scope.validateUID = function() {
          var uid = scope.clssdata.uid;

          if (_.isEmpty(uid)) {
            scope.validUid = null;
            return;
          }

          scope.validUid = uid.match(constants.regex.uid) == null ? false : true;
        }

        /**
         * Auto populates the uid field with valid charecters.
         */
        scope.autoFillUID = function() {
          if (!scope.isNewClass)
            return;
          scope.clssdata.uid = Utils.createUID(scope.clssdata.title);
          scope.validUid = null;
        }

        //Add new field to class
        scope.addFields = function() {
          var modalData = {
            allDataTypes: scope.dtypes,
            field: {}
          }
          fieldModal.openModal(modalData, schemaOverlay, classBuilderService.fieldCtrl)
            .then(function(field) {
              scope.clssdata.schema.push(field);
            }, function(err) {
              console.log("opss", err);
            });
        }

        //Configure Default Acl
        scope.configureDefaultACL = function() {
          var modalData = {
            ACL: _.cloneDeep(scope.clssdata.DEFAULT_ACL),
            esckey: false,
            rights: ["create", "read", "update", "delete"]
          };

          fieldModal.openModal(modalData, appAclService.aclOverlayTemplate, appAclService.aclCtrl, {
              keyboard: false
            })
            .then(function(res) {
              scope.clssdata.DEFAULT_ACL = res.ACL;
            })
        }

        // configure options


        if (!scope.clssdata.options)
          scope.clssdata.options = {};

        if (!scope.clssdata.options.inbuiltFields)
          scope.clssdata.options.inbuiltFields = {
            publish: true,
            location: true,
            tag: true
          }

        scope.cfOptions = scope.clssdata.options.inbuiltFields;
        
        scope.$watch('cfOptions', function(newValue, oldValue) {
          if (!scope.clssdata.options)
            scope.clssdata.options = {};
          
          scope.clssdata.options.inbuiltFields = scope.cfOptions;
          // if (scope.cfOptions.publish && scope.cfOptions.location && scope.cfOptions.tag) {
          //   if (scope.clssdata.options.hasOwnProperty('title'))
          //     delete scope.clssdata.options.inbuiltFields;
          //   else
          //     delete scope.clssdata.options;
          // }
        }, true);

        //DOM
        $("[rel=tooltip]").tooltip();

        function getHumanizedDate(date) {
          return moment(date).format('ddd MMM Do, YYYY');
        }
      }
    }
  }
]
},{"../partials/class-builder.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\class-builder.html","../partials/class-field-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\class-field-modal.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\directives\\class-field-wrap.js":[function(require,module,exports){
'use strict';

var listBuilderTemplate = require('../partials/class-field-wrap.html');

module.exports = [
  '$compile',
  function($compile) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        clssdata: '=clssdata',
        allclss: '=allclss',
        dtypes: '=dtypes'
      },
      link: function(scope, elem, attrs) {
        var $template = angular.element(listBuilderTemplate);
        $compile($template)(scope);
        elem.append($template);
        scope.sortableOptions = {
          forcePlaceholderSize: true,
          axis: "y",
          handle: '.cf-handle i',
          opacity: 1,
          placeholder: "ui-sortable-placeholder",
          scroll: "true",
          containment: "parent"
        };
      }
    }
  }
]
},{"../partials/class-field-wrap.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\class-field-wrap.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\directives\\class-field.js":[function(require,module,exports){
'use strict';
var listBuilderTemplate = require('../partials/class-field.html');
var schemaOverlay = require('../partials/class-field-modal.html');

module.exports = ['modalService', 'classBuilderService', 'alertService',
  function(fieldModal, classBuilderService, Alert) {
    return {
      template: listBuilderTemplate,
      replace: true,
      restrict: 'A',
      scope: {
        field: '=field',
        clssdata: '=clssdata',
        prop: '=prop',
        dtypes: '=dtypes'

      },
      link: function(scope, elem, attrs) {
        scope.actions = (scope.field.data_type === "group") ? ["Add", "Edit", "Delete"] : ["Edit", "Delete"];
        scope.hideTitleip = (scope.field.data_type === "text" && scope.field.multiple != true);
        scope.showgrp = false;
        scope.grpToggleTxt = "Expand";

        //DOM
        scope.showFieldMeta = false;
        scope.toggleGrp = function() {
          scope.showgrp = !scope.showgrp;
          if (scope.showgrp)
            scope.grpToggleTxt = "Collapse";
          else
            scope.grpToggleTxt = "Expand";
        }


        //select uid which is active as title
        function checkIfTitle() {
          if (typeof(scope.clssdata.options) != "undefined") {
            if (scope.clssdata.options.title === scope.field.uid) {
              elem.find('.chk-title').prop("checked", true);
            }
          }
        }

        checkIfTitle();


        //Change title on click event
        elem.find('.chk-title').on('click', function(e) {

          var wasChecked = $(e.currentTarget).prop("checked");
          $('.cft-row-inner .chk-title').removeAttr("checked");
          if (wasChecked)
            $(e.currentTarget).prop("checked", true);

        });

        elem.find('.chk-title').on('change', function() {
          if ($(this).prop('checked') === undefined || $(this).prop('checked') === false) {
            scope.clssdata.options.title = '';
          } else {
            scope.clssdata.options = {};
            scope.clssdata.options.title = scope.field.uid;
          }
        });


        //check the value of unique field data
        scope.checkUnique = function(data) {
          return data === null;
        }

        //Add new fields to class [Required for group field]
        function addFields() {
          var modalData = {
            allDataTypes: scope.dtypes,
            field: {}
          }

          fieldModal.openModal(modalData, schemaOverlay, classBuilderService.fieldCtrl)
            .then(function(selectedItem) {
              if (typeof(scope.clssdata.schema[scope.prop].schema) === "undefined") {
                scope.clssdata.schema[scope.prop].schema = [];
              }
              scope.clssdata.schema[scope.prop].schema.push(selectedItem);
            }, function(err) {
              console.log("opss", err);
            });
        }

        //Edit specified field of class
        function edit(field) {
          var clonedField = _.cloneDeep(field);
          var modalData = {
            allDataTypes: scope.dtypes,
            field: clonedField
          }

          /***
           *
           *@service  modalService
           *@param modalData     : data required by modal
           *@param schemaOverlay : template required by modal
           *@service classBuilderService
           *@param classBuilderService.fieldCtrl : ModalInstance Controller
           *@desc
           *
           ***/
          fieldModal.openModal(modalData, schemaOverlay, classBuilderService.fieldCtrl)
            .then(function(res) {
              //console.log("res in class field", res);
              scope.hideTitleip = (res.data_type === "text" && res.multiple != true);
              if(!scope.hideTitleip){
                scope.clssdata.options = {};
              }
              scope.clssdata.schema[scope.prop] = res;
              scope.actions = (res.data_type === "group") ? ["Add", "Edit", "Delete"] : ["Edit", "Delete"];
            });
        }

        //Delete field from class schema 
        function del(gridItem, index) {
          Alert.confirm({
            title: 'Delete field',
            content: 'Are you sure you want to delete this field?'
          }).then(function() {
            scope.clssdata.schema.splice(index, 1);
          });
        }

        //return match value of array of objects
        function getSelOnLoad(selItem, obj) {
          for (var i = 0; i < obj.length; i++) {
            if (obj[i].field_type === selItem) {
              return obj[i];
            }
          }

        }

        //Attached action events for each field
        scope.performAction = function(act, gridItem, index) {
          if (act === 'Add')
            return addFields();
          if (act === 'Edit')
            return edit(gridItem);
          if (act === 'Delete')
            return del(gridItem, index);
        }

        /**
         * Toggles field meta data. (Visible when in responsive mode.)
         */
        scope.toggleFieldMeta = function() {
          console.log('adsdasd')
          scope.showFieldMeta = !scope.showFieldMeta;
        }
      }
    }
  }
]
},{"../partials/class-field-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\class-field-modal.html","../partials/class-field.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\class-field.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\directives\\reference-select.js":[function(require,module,exports){
'use strict';

module.exports = [
  '$compile',
  'builtApi',
  'utilsService',
  function($compile, builtApi, Utils) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        referenceto: '=referenceto',
        dataitem: '=dataitem'
      },
      link: function(scope, elem, attrs) {
        elem.val(scope.referenceto).select2({
          placeholder: "Select a class",
          minimumInputLength: 1,
          initSelection: function(element, callback) {
            if (!scope.referenceto) {
              callback({
                id: "",
                text: ""
              })
              return;
            }
            builtApi.Classes.getOne({
                options: {
                  classUid: scope.referenceto
                }
              })
              .then(function(klass) {
                callback({
                  id: klass.uid,
                  text: klass.title
                });
              }, function(xhr) {
                onRefNotFound();
                callback({
                  id: "",
                  text: ""
                })
              });
          },
          query: function(query) {
            Utils.getClassSearch(builtApi, query.term)().then(query.callback);
          }
        });

        elem.on('change', function(e) {
          scope.dataitem.reference_to = elem.select2('val');
        })

        function onRefNotFound() {
          Utils.sa(scope, function() {
            scope.dataitem.reference_to = '';
            scope.referenceto = undefined;
            setTimeout(function(){
              elem.select2('val', undefined);
            }, 0);
          })
        }

      }
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\directives\\unique-select.js":[function(require,module,exports){
'use strict';
require('third-party-modules/select2');
var uniqueSelect = require('../partials/unique-select.html');

module.exports = ['$compile',
  function($compile) {
    return {
      template: uniqueSelect,
      restrict: 'A',
      scope: {
        uniquevalue: '=uniquevalue',
        uniquefielddata: '=uniquefielddata',
        dataitem: '=dataitem'
      },
      link: function(scope, elem, attrs) {

        //Initializing Select2
        elem.select2({
          allowClear: true,
          placeholder: "Not Unique",
          data: scope.uniquefielddata
        });

        //On Load of modal set Unique field Value 
        if (scope.uniquevalue) {
          elem.select2('val', scope.uniquevalue);
        } else {
          elem.select2('val', null);
        }

        //changing value on change event
        elem.on('change', function(e) {
          scope.dataitem.unique = e.val == "" ? null : e.val;
        })
      }
    }
  }
]
},{"../partials/unique-select.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\unique-select.html","third-party-modules/select2":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\select2\\select2.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\abilities.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="cancel()">\n' +
    '        ×\n' +
    '    </button>\n' +
    '    <h5 class="modal-title">Clients of this application can</h5>\n' +
    '</div>\n' +
    '<div class="modal-body smart-form class-abilities-wrap">\n' +
    '    <div class="cf-radio-wrap">\n' +
    '        <label class="toggle">\n' +
    '            <input type="checkbox" name="checkbox-toggle" ng-model="abilities.create_object">\n' +
    '            <i data-swchon-text="ON" data-swchoff-text="OFF"></i> Create objects\n' +
    '        </label>\n' +
    '        <label class="toggle">\n' +
    '            <input type="checkbox" name="checkbox-toggle" ng-model="abilities.get_one_object">\n' +
    '            <i data-swchon-text="ON" data-swchoff-text="OFF"></i> View an object\n' +
    '        </label>\n' +
    '        <label class="toggle">\n' +
    '            <input type="checkbox" name="checkbox-toggle" ng-model="abilities.get_all_objects">\n' +
    '            <i data-swchon-text="ON" data-swchoff-text="OFF"></i> View all objects\n' +
    '        </label>\n' +
    '        <label class="toggle">\n' +
    '            <input type="checkbox" name="checkbox-toggle" ng-model="abilities.update_object">\n' +
    '            <i data-swchon-text="ON" data-swchoff-text="OFF"></i> Update an object\n' +
    '        </label>\n' +
    '        <label class="toggle">\n' +
    '            <input type="checkbox" name="checkbox-toggle" ng-model="abilities.delete_object">\n' +
    '            <i data-swchon-text="ON" data-swchoff-text="OFF"></i> Delete an object\n' +
    '        </label>\n' +
    '        <label class="toggle">\n' +
    '            <input type="checkbox" name="checkbox-toggle" ng-model="abilities.delete_all_objects">\n' +
    '            <i data-swchon-text="ON" data-swchoff-text="OFF"></i> Delete all objects\n' +
    '        </label>\n' +
    '    </div>\n' +
    '</div>\n' +
    '\n' +
    '<div class="modal-footer">\n' +
    '    <div class="button-wrap">\n' +
    '        <a ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '            </span>Cancel\n' +
    '        </a>\n' +
    '        <a ng-click=\'ok()\' class="btn btn-labeled btn-primary btn-sm pull-right">\n' +
    '            <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '            </span>Done\n' +
    '        </a>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\class-builder.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '\n' +
    '    <!--Create Class-->\n' +
    '    <div class="row" ng-show="activeStep == classSteps[0]">\n' +
    '        <div class="col-sm-5 col-sm-offset-3">\n' +
    '            <fieldset class="cb-step-1">\n' +
    '                <div class="form-group">\n' +
    '                    <label>Title</label>\n' +
    '                    <div class="input-group">\n' +
    '                        <span class="input-group-addon"><i class="fa fa-pencil fa-fw"></i></span>\n' +
    '                        <input autofocus class="form-control input-lg" required ng-keyup="autoFillUID()" type="text" placeholder="Enter your class title..." ng-model="clssdata.title">\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '                <div class="form-group" ng-if="!isNewClass">\n' +
    '                    <label>UID</label>\n' +
    '                    <div class="input-group">\n' +
    '                        <span class="input-group-addon"><i class="fa fa-pencil fa-fw"></i></span>\n' +
    '                        <input class="form-control input-lg" disabled ng-keyup="autoFillUID()" type="text" placeholder="Enter your class unique identification identity..." ng-model="clssdata.uid">\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '                <div class="form-group" ng-if="isNewClass" ng-class="{\'has-error\':validUid == false, \'has-success\': validUid == true}">\n' +
    '                    <label>UID</label>\n' +
    '                    <div class="input-group">\n' +
    '                        <span class="input-group-addon"><i class="fa fa-pencil fa-fw"></i></span>\n' +
    '                        <input class="form-control input-lg" required ng-keyup="validateUID()" type="text" placeholder="Enter your class unique identification identity..." ng-model="clssdata.uid" value="clssdata.uid">\n' +
    '                    </div>\n' +
    '                    <div class="note" ng-if="isNewClass">\n' +
    '                        Only alphanumeric characters <b>(alphabets, numbers, underscore, hypen)</b> are allowed.\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </fieldset>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '\n' +
    '    <!--Add Fields-->\n' +
    '    <div ng-show="activeStep == classSteps[1]">\n' +
    '        <div ng-show="clssdata.schema.length != 0">\n' +
    '            <div class="class-date-row" ng-if="!isNewClass">\n' +
    '                <div class="alert alert-danger">\n' +
    '                    <h4 class="alert-heading">Caution!</h4> Removing a field, modifying it\'s datatype or toggling it\'s multiple attribute will result in data loss of that field.\n' +
    '                </div>\n' +
    '\n' +
    '                <div class="clearfix">\n' +
    '                    <div class="pull-left">Last updated at: <span class="bold-text">{{updated_at}}</span>\n' +
    '                    </div>\n' +
    '                    <div class="pull-right">Created at: <span class="bold-text">{{created_at}}</span>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="clearfix mb10">\n' +
    '                <a class="btn btn-labeled bg-color-blue txt-color-white pull-left" ng-click=\'addFields()\' ng-class="{\'tada\': clssdata.schema.length === 0}">\n' +
    '                    <span class="btn-label">\n' +
    '                    <i class="fa fa-plus-square"></i>\n' +
    '                </span> Add field\n' +
    '                </a>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="text-center" ng-show="clssdata.schema.length === 0">\n' +
    '            <h4 class="mb20">There are currently no fields in your class</h4>\n' +
    '            <p>\n' +
    '                <a class="btn btn-labeled btn-primary btn-lg" ng-click=\'addFields()\'>\n' +
    '                    <span class="btn-label">\n' +
    '                    <i class="fa fa-plus-square"></i>\n' +
    '                    </span> Click to add a field\n' +
    '                </a>\n' +
    '            </p>\n' +
    '        </div>\n' +
    '\n' +
    '        <section id="widget-grid" ng-class="{\'false-hidden\': clssdata.schema.length === 0}">\n' +
    '            <div class="jarviswidget class-field-table-wrap jarviswidget-color-blueDark">\n' +
    '                <div role=\'content\'>\n' +
    '                    <div class="widget-body class-field-table no-padding">\n' +
    '                        <div classfieldwrap clssdata="clssdata" dtypes="dtypes"></div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </section>\n' +
    '    </div>\n' +
    '\n' +
    '    <!--Set Permission-->\n' +
    '    <div ng-show="activeStep == classSteps[2]">\n' +
    '        <!--abilities-->\n' +
    '        <div class="class-abilities-wrap clearfix">\n' +
    '            <legend>Configure abilities of this class: </legend>\n' +
    '            <p>The users of this application can </p>\n' +
    '            <div class="cf-radio-wrap">\n' +
    '                <div class="checkbox">\n' +
    '                    <label>\n' +
    '                      <input type="checkbox" class="checkbox style-0" ng-model="clssdata.abilities.create_object">\n' +
    '                      <span> Create objects</span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '                <div class="checkbox">\n' +
    '                    <label>\n' +
    '                      <input type="checkbox" class="checkbox style-0" ng-model="clssdata.abilities.get_one_object">\n' +
    '                      <span> View an object</span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '                <div class="checkbox">\n' +
    '                    <label>\n' +
    '                      <input type="checkbox" class="checkbox style-0" ng-model="clssdata.abilities.get_all_objects">\n' +
    '                      <span> View all objects</span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '                <div class="checkbox">\n' +
    '                    <label>\n' +
    '                      <input type="checkbox" class="checkbox style-0" ng-model="clssdata.abilities.update_object">\n' +
    '                      <span> Update an object</span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '                <div class="checkbox">\n' +
    '                    <label>\n' +
    '                      <input type="checkbox" class="checkbox style-0" ng-model="clssdata.abilities.delete_object">\n' +
    '                      <span> Delete an object</span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '                <div class="checkbox">\n' +
    '                    <label>\n' +
    '                      <input type="checkbox" class="checkbox style-0" ng-model="clssdata.abilities.delete_all_objects">\n' +
    '                      <span> Delete all objects</span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '\n' +
    '        <!--options-->\n' +
    '        <div class="class-abilities-wrap mt20">\n' +
    '            <legend> Default permissons: Access control list (ACL)</legend>\n' +
    '            <p>You can select each user or role of this class and set its default permissions. <a class="hand" ng-click="configureDefaultACL()">Click here</a> to configure default permissions. </p>\n' +
    '        </div>\n' +
    '\n' +
    '        <!--options-->\n' +
    '        <div class="class-abilities-wrap mt20">\n' +
    '            <legend> Inbuilt fields</legend>\n' +
    '            <p>built.io provides three inbuilt class fields. You can choose to show/hide these fields in your object view.</p>\n' +
    '            <div class="cf-radio-wrap">\n' +
    '                <div class="checkbox">\n' +
    '                    <label>\n' +
    '                      <input type="checkbox" class="checkbox style-0" ng-model="cfOptions.publish">\n' +
    '                      <span> Show publish option</span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '                <div class="checkbox">\n' +
    '                    <label>\n' +
    '                      <input type="checkbox" class="checkbox style-0" ng-model="cfOptions.location">\n' +
    '                      <span>Show location</span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '                <div class="checkbox">\n' +
    '                    <label>\n' +
    '                      <input type="checkbox" class="checkbox style-0" ng-model="cfOptions.tag">\n' +
    '                      <span>Show tags</span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\class-field-modal.html":[function(require,module,exports){
module.exports = '<form class="form-horizontal class-field-ov" action="" method="" ng-submit="ok()">\n' +
    '    <div class="modal-header">\n' +
    '        <button type="button" class="close" ng-click=\'cancel()\'>\n' +
    '          &times;\n' +
    '        </button>\n' +
    '        <h4 class="modal-title" ng-if=\'isNewField\'>Add Field</h4>\n' +
    '        <h4 class="modal-title" ng-if=\'!isNewField\'>Edit Field</h4>\n' +
    '    </div>\n' +
    '    <div class="modal-body">\n' +
    '        <div class="alert alert-danger alert-block" ng-if="errors.length">\n' +
    '          <h4 class="alert-heading">Error!</h4>\n' +
    '          <ul>\n' +
    '            <li ng-repeat="error in errors">\n' +
    '                {{error}}\n' +
    '            </li>\n' +
    '          </ul>\n' +
    '        </div>\n' +
    '        <fieldset>\n' +
    '            <!-- Default field sets-->\n' +
    '            <div class="form-group">\n' +
    '                <label class="col-sm-3 control-label">Display Name</label>\n' +
    '                <div class="col-sm-7">\n' +
    '                    <input required ng-keyup="autoFillUID()" class="form-control" type="text" ng-model="data.field.display_name" value="{{data.field.display_name}}">\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="form-group" ng-class="{\'has-error\':validUid == false, \'has-success\': validUid == true}">\n' +
    '                <label class="col-sm-3 control-label">UID</label>\n' +
    '                <div class="col-sm-7">\n' +
    '                    <input required ng-trim="false" ng-keyup="validateUID()" class="form-control" type="text" ng-model="data.field.uid" value="data.field.uid">\n' +
    '                    <div class="note">\n' +
    '                        Only alphanumeric characters <b>(alphabets, numbers, underscore, hypen)</b> are allowed.\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '\n' +
    '            </div>\n' +
    '            <div class="form-group">\n' +
    '                <label class="col-sm-3 control-label">Select Data Type</label>\n' +
    '                <div class="col-sm-9">\n' +
    '                    <label class="cf-data-type-radio radio radio-inline" ng-repeat="type in data.allDataTypes">\n' +
    '                        <input class="radiobox" name="style-0a" ng-model="data.field.data_type" type="radio" value="{{type.field_type}}" ng-change="selectedCheck(type)" class="selCheckClass">\n' +
    '                        <span>{{type.label}}</span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '        <fieldset>\n' +
    '            <!--switch on text field sets-->\n' +
    '            <div class="form-group" ng-if="activeDataType.multiple">\n' +
    '                <label class="col-xs-5 col-sm-3 control-label">Multiple</label>\n' +
    '                <div class="col-xs-7 col-sm-9">\n' +
    '                    <div class="checkbox">\n' +
    '                        <label>\n' +
    '\n' +
    '                            <input type="checkbox" class="checkbox style-0" ng-model=\'data.field.multiple\'>\n' +
    '                            <span></span>\n' +
    '                        </label>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="form-group" ng-if="activeDataType.mandatory">\n' +
    '                <label class="col-xs-5 col-sm-3 control-label">Mandatory</label>\n' +
    '                <div class="col-xs-7 col-sm-9">\n' +
    '                    <div class="checkbox">\n' +
    '                        <label>\n' +
    '\n' +
    '                            <input type="checkbox" class="checkbox style-0" ng-model=\'data.field.mandatory\'>\n' +
    '                            <span></span>\n' +
    '                        </label>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="form-group" ng-if="activeDataType.multiline">\n' +
    '                <label class="col-xs-5 col-sm-3 control-label">Multiline</label>\n' +
    '                <div class="col-xs-7 col-sm-9">\n' +
    '                    <div class="checkbox">\n' +
    '                        <label>\n' +
    '\n' +
    '                            <input type="checkbox" class="checkbox style-0" ng-model=\'data.field.field_metadata.multiline\'>\n' +
    '                            <span></span>\n' +
    '                        </label>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="form-group" ng-if="activeDataType.allow_rich_text">\n' +
    '                <label class="col-xs-5 col-sm-3 control-label">Rich Text</label>\n' +
    '                <div class="col-xs-7 col-sm-9">\n' +
    '                    <div class="checkbox">\n' +
    '                        <label>\n' +
    '                            <input type="checkbox" class="checkbox style-0" ng-model=\'data.field.field_metadata.allow_rich_text\'>\n' +
    '                            <span></span>\n' +
    '                        </label>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="form-group" ng-if="activeDataType.unique">\n' +
    '                <label class="col-sm-3 control-label">Unique</label>\n' +
    '                <div class="col-sm-7">\n' +
    '                    <div unique-select uniquevalue="data.field.unique" uniquefielddata="uniquefielddata" dataitem="data.field"></div>\n' +
    '                </div>\n' +
    '\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '\n' +
    '        <fieldset>\n' +
    '\n' +
    '            <div class="form-group" ng-if="activeDataType.field_type===\'reference\'">\n' +
    '                <label class="col-sm-3 control-label">Reference</label>\n' +
    '                <div class="col-sm-7">\n' +
    '                    <div refselect referenceto="data.field.reference_to" dataitem="data.field"></div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="form-group" ng-if="activeDataType.allow_length_validations">\n' +
    '                <label class="col-sm-3 control-label">Min. Length</label>\n' +
    '                <div class="col-sm-9">\n' +
    '                    <input type="number" class="form-control cf-length-input" ng-model="data.field.min" value="{{data.field.min}}">\n' +
    '                </div>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="form-group" ng-if="activeDataType.allow_length_validations">\n' +
    '                <label class="col-sm-3 control-label">Max. Length</label>\n' +
    '                <div class="col-sm-9">\n' +
    '                    <input type="number" class="form-control cf-length-input" ng-model="data.field.max" value="{{data.field.max}}">\n' +
    '                </div>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="form-group" ng-if="activeDataType.allow_regex">\n' +
    '                <label class="col-sm-3 control-label">Format</label>\n' +
    '                <div class="col-sm-7">\n' +
    '                    <input type="text" class="form-control" ng-model="data.field.format">\n' +
    '                    <p class="note">\n' +
    '                        Ignore the /.../ just pass the matcher.\n' +
    '                    </p>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '    </div>\n' +
    '\n' +
    '    <div class="modal-footer">\n' +
    '        <div class="button-wrap">\n' +
    '            <a ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                </span>Cancel\n' +
    '            </a>\n' +
    '            <button type="submit" class="btn btn-labeled btn-primary btn-sm pull-right">\n' +
    '                <span class="btn-label">\n' +
    '                  <i class="fa fa-check"></i>\n' +
    '                </span>\n' +
    '                <span ng-if="isNewField">\n' +
    '                  Add field\n' +
    '                </span>\n' +
    '                <span ng-if="!isNewField">\n' +
    '                  Done\n' +
    '                </span>\n' +
    '            </button>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</form>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\class-field-wrap.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '\n' +
    '    <!-- widget content -->\n' +
    '\n' +
    '    <div class="cft-row-header">\n' +
    '        <div class="chunk-0-5">\n' +
    '            Sort\n' +
    '        </div>\n' +
    '        <div class="chunk-0-5">\n' +
    '            Title\n' +
    '        </div>\n' +
    '        <div class="chunk-2">\n' +
    '            Display Name\n' +
    '        </div>\n' +
    '        <div class="chunk-2 hidden-xs hidden-sm">\n' +
    '            UID\n' +
    '        </div>\n' +
    '        <div class="chunk-1 hidden-xs hidden-sm">\n' +
    '            Datatype\n' +
    '        </div>\n' +
    '        <div class="chunk-1 hidden-xs hidden-sm">\n' +
    '            Unique\n' +
    '        </div>\n' +
    '        <div class="chunk-1 hidden-xs hidden-sm">\n' +
    '            Multiple\n' +
    '        </div>\n' +
    '\n' +
    '        <div class="chunk-1 hidden-xs hidden-sm">\n' +
    '            Mandatory\n' +
    '        </div>\n' +
    '        <div class="chunk-1">\n' +
    '            Actions\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <!--list-field directive-->\n' +
    '    <div class="cft-rows-wrap" ui-sortable=\'sortableOptions\' ng-model="clssdata.schema">\n' +
    '\n' +
    '        <div ng-repeat="field in clssdata.schema" classfield field="field" clssdata="clssdata" prop="$index" dtypes="dtypes" allclss="allclss">\n' +
    '        </div>\n' +
    '    </div>\n' +
    '\n' +
    '    <!-- end widget content -->\n' +
    '\n' +
    '\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\class-field.html":[function(require,module,exports){
module.exports = '<div class="cft-row">\n' +
    '    <div class="cft-row-inner">\n' +
    '        <div class="chunk-0-5 cf-handle">\n' +
    '            <i class="fa fa-reorder"></i>\n' +
    '        </div>\n' +
    '        <div class="chunk-0-5 cf-boolean">\n' +
    '            <div class="checkbox cf-radio">\n' +
    '                <label ng-class="{\'hidden\':!hideTitleip}">\n' +
    '                    <input type="checkbox" class="checkbox style-0 chk-title"></input>\n' +
    '                    <span></span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="chunk-2 bold-text" ng-click="toggleFieldMeta()" title="{{field.display_name}}">\n' +
    '            {{field.display_name}}\n' +
    '        </div>\n' +
    '        <div class="chunk-2 bold-text hidden-xs hidden-sm" title="{{field.uid}}">\n' +
    '            {{field.uid}}\n' +
    '        </div>\n' +
    '        <div class="chunk-1 hidden-xs hidden-sm">\n' +
    '            {{field.data_type}}\n' +
    '        </div>\n' +
    '        <div class="chunk-1 hidden-xs hidden-sm">\n' +
    '            <span ng-show="checkUnique(field.unique)">Not unique</span>\n' +
    '            <span ng-hide="checkUnique(field.unique)">{{field.unique}}ly unique</span>\n' +
    '        </div>\n' +
    '        <div class="chunk-1 cf-boolean hidden-xs hidden-sm">\n' +
    '            <i class="fa" ng-class="{\'true fa-check-square-o\': field.multiple, \'fa-square-o\': !field.multiple}"></i>\n' +
    '        </div>\n' +
    '        <div class="chunk-1 cf-boolean hidden-xs hidden-sm">\n' +
    '            <i class="fa" ng-class="{\'true fa-check-square-o\': field.mandatory, \'fa-square-o\': !field.mandatory}"></i>\n' +
    '        </div>\n' +
    '        <div class="chunk-1 cf-actions" ng-if="!field.field_metadata.inbuilt_field">\n' +
    '            <div class="btn-group btn-cf-actions-group">\n' +
    '                <button class="btn dropdown-toggle btn-xs bg-color-blue txt-color-white" data-toggle="dropdown">\n' +
    '                    <i class="fa fa-cog mr5"></i>  <i class="fa fa-caret-down"></i>\n' +
    '                </button>\n' +
    '                <ul class="dropdown-menu pull-right">\n' +
    '\n' +
    '                    <li ng-if="field.data_type != \'group\'" ng-repeat=\'act in actions\'>\n' +
    '                        <a href="" ng-click=\'performAction(act, field, prop)\'><i ng-class="{\'fa fa-pencil txt-color-blue\' : act == \'Edit\', \'fa fa-trash-o txt-color-red\' : act == \'Delete\'}"></i> {{act}} </a>\n' +
    '                    </li>\n' +
    '                    <li ng-if="field.data_type == \'group\'" ng-repeat=\'act in actions\'>\n' +
    '                        <a href="" ng-click=\'performAction(act, field, prop)\'><i ng-class="{\'fa fa-plus-square text-success\':act == \'Add\',\'fa fa-pencil txt-color-blue\' : act == \'Edit\', \'fa fa-trash-o txt-color-red\' : act == \'Delete\'}"></i> {{act}} </a>\n' +
    '                    </li>\n' +
    '\n' +
    '                </ul>\n' +
    '            </div>\n' +
    '            <a ng-click=\'toggleGrp()\' ng-if="field.data_type == \'group\'" href="" class="btn btn-xs btn-default btn-group-toggle" rel="tooltip" data-placement="left" data-original-title=\'<i class="fa fa-info-circle text-success"></i>{{grpToggleTxt}} field\' data-html="true">\n' +
    '                <i ng-class="{\'fa fa- fa-caret-down\':showgrp==true,\'fa fa-caret-right\':showgrp==false}"></i>\n' +
    '            </a>\n' +
    '        </div>\n' +
    '\n' +
    '    </div>\n' +
    '    <div class="cft-row-meta" ng-show="showFieldMeta">\n' +
    '      <div class="media">\n' +
    '          <div class="meta-title">\n' +
    '            UID : \n' +
    '          </div>\n' +
    '          <div class="media-body">\n' +
    '            {{field.uid}}\n' +
    '          </div>\n' +
    '      </div>\n' +
    '      <div class="media">\n' +
    '          <div class="meta-title">\n' +
    '            Datatype : \n' +
    '          </div>\n' +
    '          <div class="media-body">\n' +
    '            {{field.data_type}}\n' +
    '          </div>\n' +
    '      </div>\n' +
    '      <div class="media">\n' +
    '          <div class="meta-title">\n' +
    '            Unique : \n' +
    '          </div>\n' +
    '          <span ng-show="checkUnique(field.unique)">Not unique</span>\n' +
    '          <span ng-hide="checkUnique(field.unique)">{{field.unique}}ly unique</span>\n' +
    '      </div>\n' +
    '      <div class="media">\n' +
    '        <div class="meta-title">\n' +
    '            Multiple :\n' +
    '        </div>\n' +
    '        <div class="media-body">\n' +
    '            {{field.multiple}}\n' +
    '        </div>\n' +
    '      </div>\n' +
    '      <div class="media">\n' +
    '        <div class="meta-title">\n' +
    '            Mandatory :\n' +
    '        </div>\n' +
    '        <div class="media-body">\n' +
    '            {{field.mandatory}}\n' +
    '        </div>\n' +
    '      </div>\n' +
    '    </div>\n' +
    '    <div ng-if="field.data_type == \'group\'">\n' +
    '        <div class="cft-group" ng-class="{\'hidden\': !showgrp}">\n' +
    '            <div classfieldwrap clssdata="field" allclss="allclss" dtypes="dtypes"></div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\options.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="cancel()">\n' +
    '        ×\n' +
    '    </button>\n' +
    '    <h5 class="modal-title">Object options</h5>\n' +
    '</div>\n' +
    '<div class="modal-body smart-form class-abilities-wrap">\n' +
    '    <div class="cf-radio-wrap">\n' +
    '        <label class="toggle">\n' +
    '            <input type="checkbox" name="checkbox-toggle" ng-model="options.publish">\n' +
    '            <i data-swchon-text="ON" data-swchoff-text="OFF"></i> Publish\n' +
    '        </label>\n' +
    '        <label class="toggle">\n' +
    '            <input type="checkbox" name="checkbox-toggle" ng-model="options.location">\n' +
    '            <i data-swchon-text="ON" data-swchoff-text="OFF"></i> location\n' +
    '        </label>\n' +
    '        <label class="toggle">\n' +
    '            <input type="checkbox" name="checkbox-toggle" ng-model="options.tag">\n' +
    '            <i data-swchon-text="ON" data-swchoff-text="OFF"></i> Tag\n' +
    '        </label>\n' +
    '        \n' +
    '    </div>\n' +
    '</div>\n' +
    '\n' +
    '<div class="modal-footer">\n' +
    '    <div class="button-wrap">\n' +
    '        <a ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '            </span>Cancel\n' +
    '        </a>\n' +
    '        <a ng-click=\'ok()\' class="btn btn-labeled btn-primary btn-sm pull-right">\n' +
    '            <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '            </span>Done\n' +
    '        </a>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\unique-select.html":[function(require,module,exports){
module.exports = '<select class="unique-select">\n' +
    '    <option value=""></option>\n' +
    '    <option value="local">locally Unique</option>\n' +
    '    <option value="global">globally Unique</option>\n' +
    '</select>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\services\\class-abilities.js":[function(require,module,exports){
'use strict';
var abilitiesOverlayTemplate = require('../partials/abilities.html');
var optionsOverlayTemplate = require('../partials/options.html');

module.exports = [

  function() {
    this.abilitiesOverlayTemplate = abilitiesOverlayTemplate;

    this.abilitiesCtrl = function($scope, $modalInstance, data) {
      $scope.abilities = data.abilities;

      //Save data from overlay
      $scope.ok = function() {
        $modalInstance.close($scope.abilities);
      }

      //Cancel overlay
      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      }

    }

    this.optionsTemplate = optionsOverlayTemplate;
    this.optionsCtrl = function($scope, $modalInstance, data) {
      $scope.options = data;
      //Save data from overlay
      $scope.ok = function() {
        if ($scope.options.publish && $scope.options.location && $scope.options.tag)
          $modalInstance.close();
        else
          $modalInstance.close($scope.options);
      }

      //Cancel overlay
      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      }

    }
  }
]
},{"../partials/abilities.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\abilities.html","../partials/options.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\partials\\options.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\services\\class-builder.js":[function(require,module,exports){
'use strict';
module.exports = [
  'constants',
  'utilsService',
  function(constants, Utils) {
    this.fieldCtrl = function($scope, $modalInstance, data) {
      $scope.errors = [];
      var field = {
        uid: null,
        data_type: "text",
        display_name: "",
        mandatory: false,
        max: null,
        min: null,
        multiple: false,
        format: "",
        unique: null,
        field_metadata: {
          allow_rich_text: false,
          multiline: false
        }
      }

      if (_.isEmpty(data.field)) {
        data.field = field;
        $scope.isNewField = true;
      } else {
        $scope.isNewField = false;
      }
      $scope.data = data;
      $scope.validUid = null;

      $scope.uniquefielddata = [{
        id: "global",
        text: "Globally Unique"
      }, {
        id: "local",
        text: "Locally Unique"
      }]

      $scope.activeDataType = getSelectedDataType(data.field.data_type, data.allDataTypes);
      /**
       * Validates UID for any non alphanumeric characters and changes color of the UID input.
       */
      $scope.validateUID = function($event) {
        var uid = $scope.data.field.uid;

        if (_.isEmpty(uid)) {
          $scope.validUid = null;
          return;
        }

        $scope.validUid = uid.match(constants.regex.uid) == null ? false : true;
      }

      /**
       * Auto populates the uid field with valid charecters.
       */
      $scope.autoFillUID = function($event) {
        $scope.data.field.uid = Utils.createUID($scope.data.field.display_name);
        $scope.validUid = null;
      }

      $scope.ok = function() {
        $scope.errors.length = 0;

        if (_.isEmpty($scope.data.field.display_name))
          $scope.errors.push('Display name cannot be blank.');

        if (_.isEmpty($scope.data.field.uid))
          $scope.errors.push('UID cannot be blank.');

        if (!_.isEmpty($scope.data.field.uid) && $scope.data.field.uid.match(constants.regex.uid) == null)
          $scope.errors.push('UID is not valid.');

        if ($scope.data.field.data_type === 'reference' && _.isEmpty($scope.data.field.reference_to))
          $scope.errors.push('Reference class cannot be blank.');

        if (!$scope.errors.length)
          $modalInstance.close(data.field);

        return false;
      }

      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      }

      $scope.selectedCheck = function(selObj) {
        if ($scope.data.field.data_type === selObj.field_type) {
          $scope.activeDataType = selObj;
        }
      }

      function getSelectedDataType(selItem, obj) {
        for (var i = 0; i < obj.length; i++) {
          if (obj[i].field_type === selItem) {
            return obj[i];
          }
        }
      }
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\core.js":[function(require,module,exports){
'use strict';


require('./global/global');
require('./built-api/built-api');
require('./class-builder/class-builder');
require('./post-message-upload/post-message-upload');
require('./form-builder/form-builder');
require('./objects-query-builder/query-builder');
require('./funnel-builder/funnel-builder');
require('./events-query-builder/query-builder');
require('./app-acl/app-acl');

module.exports = angular.module('core', [
  'builtApi',
  'global',
  'classBuilder',
  'postMessageUpload',
  'formBuilder',
  'objectsQueryBuilder',
  'funnelBuilder',
  'eventsQueryBuilder'
]);
},{"./app-acl/app-acl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\app-acl\\app-acl.js","./built-api/built-api":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\built-api\\built-api.js","./class-builder/class-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\class-builder\\class-builder.js","./events-query-builder/query-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\query-builder.js","./form-builder/form-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\form-builder.js","./funnel-builder/funnel-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\funnel-builder\\funnel-builder.js","./global/global":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\global.js","./objects-query-builder/query-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\query-builder.js","./post-message-upload/post-message-upload":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\post-message-upload\\post-message-upload.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\group-view.js":[function(require,module,exports){
'use strict';

var groupViewTmpl = require('../partials/group-view.html');

module.exports = [
  '$compile',
  'utilsService',
  'tip',
  'constants',
  function($compile, Utils, TIP, constants) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        queryObject: '=eqGroupView',
        props: '=props',
        queryIndex: "=queryIndex",
        queryArray: "=queryArray",
        validateQueryNow: "=",
        promiseArray: "=",
        expandable: "="
      },

      link: function(scope, elem, attrs) {
        var $template = angular.element(groupViewTmpl);
        $compile($template)(scope);
        elem.append($template);

        var groups = ['$or', '$and'];
        var groupConditionSelect = elem.find('.js-group-condition-select');

        scope.isSingleRow = false;

        //Initialize Select2
        groupConditionSelect.val(scope.queryObject._key).select2({
          containerCssClass: 'select2-sm',
          minimumResultsForSearch: -1
        });

        //Select 2 on-change
        groupConditionSelect.off('change').on('change', function() {
          changeGroupCondition(groupConditionSelect.select2('val'));
        });

        scope.$watchCollection('queryObject._value', function() {
          scope.isSingleRow = scope.queryObject._value.length === 1 ? true : false;
        });

        //Change group condition
        function changeGroupCondition(condition) {
          Utils.sa(scope, function() {
            scope.queryObject._key = condition;
          });
        }

        scope.isGroup = function(query) {
          var r = $.inArray(query._key, groups) != -1 ? true : false
          return r;
        };

        scope.addGroup = function() {
          destroyTips();
          scope.queryObject['_value'].push(_.cloneDeep(constants.eventsQueryBuilder.defaults.group));
        }

        scope.deleteGroup = function() {
          destroyTips();
          scope.queryArray.splice(scope.queryIndex, 1);
        }

        scope.addRow = function() {
          destroyTips();
          scope.queryObject['_value'].push(_.cloneDeep(constants.eventsQueryBuilder.defaults.row));
        }

        function destroyTips() {
          // Destroy all tooltips
          TIP.destroyAll($('.query-builder'));
        }
      }
    }
  }
]
},{"../partials/group-view.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\group-view.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\query-builder.js":[function(require,module,exports){
var queryBuilderTmpl = require('../partials/query-builder.html');

module.exports = [
  'utilsService',
  '$q',
  'constants',
  '$compile',
  'tip',
  function(Utils, $q, constants, $compile, TIP) {
    return {
      restrict: 'A',
      scope: {
        query: '=eventsQueryBuilder',
        evnt: '=evnt',
        getQueryNow: "=",
        getQueryCallback: "=",
        expandable: "="
      },

      link: function(scope, elem, attrs) {

        var $template = angular.element(queryBuilderTmpl);
        $compile($template)(scope);
        elem.append($template);
        scope.props = scope.evnt.properties ? scope.evnt.properties : [];
        scope.promiseArray = [];
        scope.validateQueryNow = false;

        if (!scope.query.data.length){
          scope.query.data.push(_.cloneDeep(constants.eventsQueryBuilder.defaults.group));
        }
        
        // scope.$watch('query.data', function(newValue, oldValue) {
        //   console.log('query changed:')
        //   console.log(scope.query.data);
        //   //console.log(JSON.stringify(scope.query.data));
        //   //console.log('---------------')
        // }, true);

        scope.$on('$destroy', function handleDestroyEvent() {
          console.log('Events querybuilder destroyed!')
          TIP.destroyAll();
        })

        function getQuery() {
          scope.validateQueryNow = true;

          return validateQuery()
            .then(function() {
              console.log('Validate query: success ', scope.query.data[0])
              return constructQuery(scope.query.data[0]);
            }, function(xhr) {
              console.log('Validate query: failed')
              throw xhr;
            }).finally(function() {
              scope.validateQueryNow = false;
            });
        }

        scope.$watch('getQueryNow', function() {
          if (scope.getQueryNow) {
            var actualQuery = getQuery();
            scope.getQueryCallback(actualQuery);
          }
        })

        function constructQuery(query) {
          var q = {};

          if (query._key === undefined) {
            if (_.isPlainObject(query) && _.isPlainObject(query.query)) {
              q = query;
              q['query'] = constructQuery(query.query)

              return q;
            } else {
              return query;
            }
          }

          q[query._key] = query._value instanceof Array ? _.map(query._value, constructQuery) : constructQuery(query._value);
          return q;
        }
     
        function validateQuery() {
          return $q.all(scope.promiseArray.map(function(promiseObj) {
            return promiseObj.promise;
          }));
        }
      }
    }
  }
]
},{"../partials/query-builder.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\query-builder.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\row-view.js":[function(require,module,exports){
'use strict';

var rowViewTmpl = require('../partials/row-view.html');

module.exports = [
  '$compile',
  'modalService',
  'eqService',
  'utilsService',
  '$q',
  'tip',
  'constants',
  '$timeout',
  function($compile, modalService, qbService, Utils, $q, TIP, constants, $timeout) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        query: '=eqRowView',
        props: '=props',
        queryArray: '=queryArray',
        queryIndex: "=queryIndex",
        validateQueryNow: "=",
        promiseArray: "=",
        expandable: "="
      },

      link: function(scope, elem, attrs) {
        var deferred = $q.defer();
        var defaultPromiseObject = {
          promise: deferred.promise
        };

        scope.promiseArray.push(defaultPromiseObject);

        // Manually compile template because 2 directives are used in the same template.
        var $template = angular.element(rowViewTmpl);
        $compile($template)(scope);
        elem.append($template);

        var propSelect = $(elem).find('.js-prop-select').eq(0);
        var datatypeSelect = $(elem).find('.js-datatype-select').eq(0);

        // DOM
        scope.renderRuleView = false;

        if (!scope.query.rowData.datatype)
          scope.query.rowData.datatype = 'string';
        
        initRow();

        //Watch on validate Query
        scope.$watch('validateQueryNow', function() {
          if (scope.validateQueryNow) {
            validateRow();
          }
        })

        //Destroy promise object from array
        scope.$on('$destroy', function handleDestroyEvent() {
          scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);
        })

        function validateRow() {
          var props = propSelect.select2('data');
          var errorEls = [];
          if (_.isEmpty(props)) {
            deferred.reject();
            errorEls.push(elem.find('.js-prop-select-wrap'));
          } else if(!checkFirstRow() && !scope.renderRuleView){
            deferred.reject();
            errorEls.push(elem.find('.js-btn-expand-row'));
          }

          // show error tooltips on elements.
          if (errorEls.length)
            qbService.showErrorTips(errorEls);
          else
            deferred.resolve();

          deferred = $q.defer();
          defaultPromiseObject.promise = deferred.promise;
        }

        scope.removeRow = function() {
          TIP.destroyAll($('.query-builder'));

          if (scope.queryArray.length === 1) {
            scope.query = _.cloneDeep(constants.eventsQueryBuilder.defaults.row);
            scope.queryArray.splice(scope.queryIndex, 1, scope.query);
          } else {
            scope.queryArray.splice(scope.queryIndex, 1);
          }
        }

        scope.toggleRowFilter = function() {
          if (scope.renderRuleView)
            contractRow();
          else
            expandRow();
        }

        scope.expandRow = function() {
          if (scope.query._key)
            scope.renderRuleView = true;
        }

        scope.contractRow = function() {
          TIP.destroyAll($(elem));
          scope.query._value = {};
          scope.renderRuleView = false;
        }

        function checkFirstRow() {
          return (scope.queryIndex === 0 && scope.queryArray.length === 1);
        }

        function initRow() {
          initializePropSelect();
          initDatatypeSelect();

          // Check key on initial row load
          if (!_.isEmpty(scope.query._key))
            setPropSelectValue(scope.query._key.substring(scope.query._key.indexOf('.') + 1));

          // Check value on initial row load
          if(!_.isEmpty(scope.query._value))
            scope.renderRuleView = true;
        }

        function initializePropSelect() {
          propSelect.select2({
            placeholder: "Select properties",
            data: qbService.formatEventProperties(scope.props),
            containerCssClass: 'select2-sm'
          })

          propSelect.off('select2-open').on('select2-open', function() {
            qbService.destroyTip(elem.find('.js-prop-select-wrap'));
          });

          propSelect.off('change').on('change', function() {
            onPropSelect(propSelect.select2('val'))
          });
        }

        function onPropSelect(prop) {
          Utils.sa(scope, function() {
            // Destroy tooltip on property change
            qbService.destroyErrorTips(elem)

            // Delete old promise and create for newly selected field
            scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);

            deferred = $q.defer();
            defaultPromiseObject.promise = deferred.promise;
            scope.promiseArray.push(defaultPromiseObject);

            $timeout(function() {
              scope.query._key = 'properties.' + prop;
              //scope.query._value = {};
              checkSelectedProperty();
            }, 0);
          })
        }

        function checkSelectedProperty() {
          if (scope.expandable !== false && !scope.renderRuleView)
            return;

          scope.renderRuleView = true;
        }

        function setPropSelectValue(value) {
          propSelect.select2('data', {
            id: value,
            text: value
          });
        }

        function initDatatypeSelect() {
          datatypeSelect.val(scope.query.rowData.datatype).select2({
            containerCssClass: 'select2-sm',
            minimumResultsForSearch: -1
          })

          datatypeSelect.off('change').on('change', function() {
            setDatatype(datatypeSelect.select2('val'))
          });
        }

        function setDatatype(datatype) {
          Utils.sa(scope, function() {
            scope.query._value = {};
            scope.query.rowData.datatype = datatype;
            delete scope.query.rowData.operator;
          });
        }
      }
    }
  }
]
},{"../partials/row-view.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\row-view.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\rules\\boolean-rule-view.js":[function(require,module,exports){
'use strict';

var numberRuleTmpl = require('../../partials/rules/boolean-rule.html');

module.exports = [
  '$compile',
  'oqService',
  'utilsService',
  function($compile, qbService, Utils) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        query: '=eqBooleanRuleView'
      },
      link: function(scope, elem, attrs) {
        var $template = angular.element(numberRuleTmpl);
        $compile($template)(scope);
        elem.append($template);

        var operatorSelect = elem.find('.js-operand-select');

        if (_.isUndefined(scope.query.rowData.operator)) {
          scope.operator = 'true';
        } else {
          scope.operator = scope.query.rowData.operator.toString();
        }

        operatorSelect.select2({
          containerCssClass: 'select2-sm',
          minimumResultsForSearch: -1
        });

        //Default select2 value
        operatorSelect.select2('val', scope.operator);
        operatorSelect.off('change').on('change', function() {
          changeOperator(operatorSelect.select2('val'));
        })

        function changeOperator(operator) {
          scope.query.rowData.operator = operator;
          Utils.sa(scope, function() {
            scope.operator = operator;
          });
        }

        scope.$watch('operator', function() {
          scope.query._value = JSON.parse(scope.operator);
          //operator in row data is required for segfiltering
          scope.query.rowData.operator = scope.operator;
        })

      }
    }
  }
]
},{"../../partials/rules/boolean-rule.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\rules\\boolean-rule.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\rules\\isodate-rule-view.js":[function(require,module,exports){
var stringRuleTmpl = require('../../partials/rules/isodate-rule.html');

module.exports = [
  '$compile',
  'oqService',
  'utilsService',
  '$q',
  function($compile, qbService, Utils, $q) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        query: '=eqIsodateRuleView',
        validateQueryNow: "=",
        promiseArray: "="
      },

      link: function(scope, elem, attrs) {
        var $template = angular.element(stringRuleTmpl);
        $compile($template)(scope);
        elem.append($template);

        //Default Validation Promise operation
        var deferred = $q.defer();
        var defaultPromiseObject = {
          promise: deferred.promise
        };
        scope.promiseArray.push(defaultPromiseObject);

        var defaultOperator = 'gt';
        var operatorSelect = elem.find('.js-operator-select');
        scope.pickerClass = 'qb-input opd-date-input';
        scope.timeZoneSelectClass = 'select2-sm opd-timezone-select';

        scope.operator = scope.query.rowData.operator || '$' + defaultOperator;
        scope.operand = {};

        setDefaultOperand();

        operatorSelect.val(scope.operator).select2({
          containerCssClass: 'select2-sm',
          minimumResultsForSearch: -1
        })

        operatorSelect.off('change').on('change', function() {
          changeOperator(operatorSelect.select2('val'));
        })

        scope.$watch('operator', function(newVal, oldVal) {
          //operator in row data is required for segfiltering
          
          if (_.isEqual(newVal, oldVal))
            return;

          clearValues();
          checkOperator();
        })

        scope.$watch('operand', function(newVal, oldVal) {
          if (_.isEqual(newVal, oldVal))
            return;

          if (_.isEmpty(scope.operand))
            return;

          checkOperand();
        }, true)

        //Watch on validate Query
        scope.$watch('validateQueryNow', function() {
            if (scope.validateQueryNow) {
              validateRule();
            }
          })
          //Destroy promise object from array
        scope.$on('$destroy', function handleDestroyEvent() {
          scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);
        })

        function changeOperator(operator) {
          Utils.sa(scope, function() {
            qbService.destroyErrorTips(elem);

            scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);

            //Delete old promise and create for newly selected field
            deferred = $q.defer();
            defaultPromiseObject.promise = deferred.promise;
            scope.promiseArray.push(defaultPromiseObject);

            scope.operator = operator;
          });
        }

        function setDefaultOperand() {
          if (_.isEmpty(scope.query._value)) {
            var date = moment().format();
            scope.operand[defaultOperator] = date;
            scope.query._value['$' + defaultOperator] = date;
          } else {
            if (scope.query._value instanceof Object) {
              scope.operand[scope.operator.replace('$', '')] = scope.query._value[scope.operator];
            } else {
              scope.operand['equals'] = scope.query._value;
            }
          }
        }

        function clearValues() {
          scope.operand = {};
          scope.query._value = {};
        }

        function checkOperator() {
          var dateTime = _.isEmpty(scope.query._value) ? moment().format() : moment(scope.query._value).format();
          scope.query.rowData.operator = scope.operator;
          switch (scope.operator) {
            case '$gt':
              scope.operand['gt'] = dateTime;
              break;

            case '$lt':
              scope.operand['lt'] = dateTime;
              break;

            case '$equals':
              scope.operand['equals'] = dateTime;
              break;
          }

        }

        function checkOperand() {
          
          switch (scope.operator) {
            case '$gt':
              scope.query._value['$gt'] = scope.operand['gt'];
              break;

            case '$lt':
              scope.query._value['$lt'] = scope.operand['lt'];
              break;

            case '$equals':
              scope.query._value = scope.operand['equals'];
              break;
          }
        }

        //Validate Rule
        function validateRule() {
          var errorEls = [];
          var ltisNotEmpty = !_.isEmpty(scope.query._value['$lt']);
          var gtisNotEmpty = !_.isEmpty(scope.query._value['$gt']);
          switch (scope.operator) {
            case '$gt':
              if (gtisNotEmpty) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.opd-date-wrap'));
              }
              break;

            case '$lt':
              if (ltisNotEmpty) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.opd-date-wrap'));
              }
              break;

            case '$equals':
              if (!_.isEmpty(scope.query._value)) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.opd-date-wrap'));
              }
              break;
          }

          // show error tooltips on elements.
          if (errorEls.length)
            qbService.showErrorTips(errorEls);

          deferred = $q.defer();
          defaultPromiseObject.promise = deferred.promise;
        }

      }
    }
  }
]
},{"../../partials/rules/isodate-rule.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\rules\\isodate-rule.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\rules\\number-rule-view.js":[function(require,module,exports){
var numberRuleTmpl = require('../../partials/rules/number-rule.html');

module.exports = [
  '$compile',
  'oqService',
  'utilsService',
  '$q',
  function($compile, qbService, Utils, $q) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        query: '=eqNumberRuleView',
        validateQueryNow: "=",
        promiseArray: "="
      },

      link: function(scope, elem, attrs) {
        //Default Validation Promise operation
        var deferred = $q.defer();
        var defaultPromiseObject = {
          promise: deferred.promise
        };
        scope.promiseArray.push(defaultPromiseObject);

        var $template = angular.element(numberRuleTmpl);
        $compile($template)(scope);
        elem.append($template);

        var operatorSelect = elem.find('.js-operator-select');

        // Default rule data
        var defaultOperator = 'btw';
        scope.operator = scope.query.rowData.operator || '$' + defaultOperator;
        scope.operand = {};

        setDefaultOperand();

        operatorSelect.val(scope.operator).select2({
          containerCssClass: 'select2-sm',
          minimumResultsForSearch: -1
        })

        operatorSelect.on('change', function() {
          changeOperator(operatorSelect.select2('val'));
        })

        //Watch on validate Query
        scope.$watch('validateQueryNow', function() {
            if (scope.validateQueryNow) {
              validateRule();
            }
          })
          //Destroy promise object from array
        scope.$on('$destroy', function handleDestroyEvent() {
          scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);
        })

        function validateRule() {
          var errorEls = [];
          var ltisNumber = _.isNumber(scope.query._value['$lt']);
          var gtisNumber = _.isNumber(scope.query._value['$gt']);
          switch (scope.operator) {
            case '$btw':

              if (ltisNumber && gtisNumber) {
                deferred.resolve();
              } else {
                deferred.reject();

                if (!gtisNumber)
                  errorEls.push(elem.find('.js-number-btw-gt'));

                if (!ltisNumber)
                  errorEls.push(elem.find('.js-number-btw-lt'));
              }
              break;
            case '$lt':
              if (ltisNumber) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.js-number-lt'));
              }
              break;

            case '$gt':

              if (gtisNumber) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.js-number-gt'));
              }
              break;

            case '$equals':
              if (_.isNumber(scope.query._value)) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.js-number-equals'));
              }
              break;
          }
          // show error tooltips on elements.
          if (errorEls.length)
            qbService.showErrorTips(errorEls);


          // Assign new promise to the promise object as the previous promise has been resolved.
          deferred = $q.defer();
          defaultPromiseObject.promise = deferred.promise;

        }

        function setDefaultOperand() {
          if (_.isEmpty(scope.query._value)) {
            scope.operand[defaultOperator] = '';
            scope.query._value['$lt'] = '';
            scope.query._value['$gt'] = '';
          } else {
            if (scope.query._value instanceof Object) {
              if (scope.operator === '$btw') {
                scope.operand['lt'] = scope.query._value['$lt'];
                scope.operand['gt'] = scope.query._value['$gt'];
              } else {
                scope.operand[scope.operator.replace('$', '')] = scope.query._value[scope.operator];
              }
            } else {
              scope.operand['equals'] = scope.query._value;
            }
          }
        }

        function changeOperator(operator) {
          Utils.sa(scope, function() {
            qbService.destroyErrorTips(elem);

            scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);

            //Delete old promise and create for newly selected field
            deferred = $q.defer();
            defaultPromiseObject.promise = deferred.promise;
            scope.promiseArray.push(defaultPromiseObject);

            scope.operator = operator;
          });
        }

        function clearValues() {
          scope.operand = {};
          scope.query._value = {};
        }

        scope.$watch('operator', function(newVal, oldVal) {
          //operator in row data is required for segfiltering
          if (_.isEqual(newVal, oldVal))
            return;
          clearValues();
          checkOperator();
        })

        scope.$watch('operand', function(newVal, oldVal) {
          if (_.isEqual(newVal, oldVal))
            return;

          if (_.isEmpty(scope.operand))
            return;
          checkOperand();
        }, true)

        function checkOperator() {
          switch (scope.operator) {
            case '$btw':
              scope.operand['lt'] = '';
              scope.operand['gt'] = '';
              break;

            case '$lt':
              scope.operand['lt'] = '';
              break;

            case '$gt':
              scope.operand['gt'] = '';
              break;

            case '$equals':
              scope.operand['equals'] = '';
              break;
          }
        }

        function checkOperand() {
          scope.query.rowData.operator = scope.operator;
          switch (scope.operator) {
            case '$btw':
              var lt = parseInt(scope.operand['lt']);
              var gt = parseInt(scope.operand['gt']);
              scope.query._value['$lt'] = _.isNaN(lt) ? '' : lt;
              scope.query._value['$gt'] = _.isNaN(gt) ? '' : gt;
              break;

            case '$lt':
              var lt = parseInt(scope.operand['lt']);
              scope.query._value['$lt'] = _.isNaN(lt) ? '' : lt;
              break;

            case '$gt':
              var gt = parseInt(scope.operand['gt']);
              scope.query._value['$gt'] = _.isNaN(gt) ? '' : gt;
              break;

            case '$equals':
              var eq = parseInt(scope.operand['equals']);
              scope.query._value = _.isNaN(eq) ? '' : eq;
              break;
          }
        }


      }
    }
  }
]
},{"../../partials/rules/number-rule.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\rules\\number-rule.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\rules\\string-rule-view.js":[function(require,module,exports){
var stringRuleTmpl = require('../../partials/rules/string-rule.html');

module.exports = [
  '$compile',
  'oqService',
  'utilsService',
  '$q',
  function($compile, qbService, Utils, $q) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        query: '=eqStringRuleView',
        validateQueryNow: "=",
        promiseArray: "="
      },

      link: function(scope, elem, attrs) {
        var $template = angular.element(stringRuleTmpl);
        $compile($template)(scope);
        elem.append($template);

        var operatorSelect = elem.find('.js-operator-select');

        //Default Validation Promise operation
        var deferred = $q.defer();
        var defaultPromiseObject = {
          promise: deferred.promise
        };
        scope.promiseArray.push(defaultPromiseObject);

        //Default rule data
        var defaultOperator = 'in';
        scope.operator = scope.query.rowData.operator || '$' + defaultOperator;
        scope.operand = {};

        setOperandOnLoad();

        //New rule data for every operator on change
        scope.$watch('operator', function(newVal, oldVal) {
          if (_.isEqual(newVal, oldVal))
            return;

          clearValues();
          checkOperator();
        }, true);


        scope.$watch('operand', function(newVal, oldVal) {
          if (_.isEqual(newVal, oldVal))
            return;

          if (_.isEmpty(scope.operand))
            return;

          checkOperand();
        }, true)


        operatorSelect.val(scope.operator).select2({
          containerCssClass: 'select2-sm',
          minimumResultsForSearch: -1
        });

        operatorSelect.off('change').on('change', function() {
          changeOperator($(this).select2('val'));
        })

        //Watch on validate Query
        scope.$watch('validateQueryNow', function() {
          if (scope.validateQueryNow) {
            validateRule();
          }
        })

        //Destroy promise object from array
        scope.$on('$destroy', function handleDestroyEvent() {
          scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);
        })

        //check valid regex options
        function checkValidRegexOptions() {
          scope.query._value['$options'] = scope.query._value['$options'] ? scope.query._value['$options'].trim() : "";
          return ['i', 'g', 'gi', ""].indexOf(scope.query._value['$options']) != -1;
        }

        function checkValidRegexForNot(){
            scope.query._value['$ne']['$options'] = scope.query._value['$ne']['$options'] ? scope.query._value['$ne']['$options'].trim() : "";
          return ['i', 'g', 'gi', ""].indexOf(scope.query._value['$ne']['$options']) != -1;

        }
        //Not need to set default operator as there is no operator for contains only set on load if value is not empty
        function setOperandOnLoad() {
          if (!_.isEmpty(scope.query._value)) {
            if (scope.query._value instanceof Object) {
              if (scope.operator === '$in' || scope.operator === "$not") {
                scope.operand['regex'] = scope.query._value['$regex'];
                scope.operand['options'] = scope.query._value['$options'];
              } else {
                scope.operand[scope.operator.replace('$', '')] = scope.query._value[scope.operator];
              }
            } else {
              scope.operand['equals'] = scope.query._value;
            }
          }
        }

        function changeOperator(operator) {
          Utils.sa(scope, function() {
            //destroy tooltip on change class field
            qbService.destroyErrorTips(elem);

            scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);
            if (operator !== "$exists" && operator !== "$notExists") {
              //Delete old promise and create for newly selected field

              deferred = $q.defer();
              defaultPromiseObject.promise = deferred.promise;
              scope.promiseArray.push(defaultPromiseObject);

            }
            scope.operator = operator;
          });
        }

        function clearValues() {
          scope.operand = {};
          scope.query._value = {};
        }

        function checkOperator() {
          scope.query.rowData.operator = scope.operator;
          switch (scope.operator) {
            case '$in':
              scope.operand['regex'] = '';
              scope.operand['options'] = '';
              break;

            case '$not':
              scope.operand['not'] = {};
              scope.operand['not']['regex'] = '';
              scope.operand['not']['options'] = '';
              break;

            case '$exists':
              scope.operand['exists'] = true;
              break;

            case '$notExists':
              scope.operand['exists'] = false;
              break;

            case '$ne':
              scope.operand['ne'] = '';
              break;

            case '$equals':
              scope.operand['equals'] = '';
              break;
          }

        }

        function validateRule() {
          var errorEls = [];

          switch (scope.operator) {
            case '$in':
              var validRegexOption = checkValidRegexOptions();
              var regexNotEmpty = !_.isEmpty(scope.query._value['$regex']);

              if (regexNotEmpty && validRegexOption) {
                deferred.resolve();
              } else {
                deferred.reject();
                if (!validRegexOption)
                  errorEls.push(elem.find('.js-string-options'));

                if (!regexNotEmpty)
                  errorEls.push(elem.find('.js-string-regex'));
              }
              break;

            case '$not':
              var validRegexOption = checkValidRegexForNot();
              var regexNotEmpty = !_.isEmpty(scope.query._value['$ne']['$regex']);

              if (regexNotEmpty && validRegexOption) {
                deferred.resolve();
              } else {
                deferred.reject();
                if (!validRegexOption)
                  errorEls.push(elem.find('.js-string-not-options'));

                if (!regexNotEmpty)
                  errorEls.push(elem.find('.js-string-not-regex'));
              }
              break;

            case '$ne':
              if (!_.isEmpty(scope.query._value['$ne'])) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.js-string-ne'));
              }
              break;
            case '$equals':
              if (!_.isEmpty(scope.query._value)) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.js-string-equals'));
              }
              break;
          }

          // show error tooltips on elements.
          if (errorEls.length)
            qbService.showErrorTips(errorEls);


          // Assign new promise to the promise object as the previous promise has been resolved.
          deferred = $q.defer();
          defaultPromiseObject.promise = deferred.promise;
        }

        function checkOperand() {

          switch (scope.operator) {
            case '$in':
              scope.query._value['$regex'] = scope.operand['regex'];
              scope.query._value['$options'] = scope.operand['options'];
              break;

            case '$not':
            scope.query._value['$ne'] ={}
              scope.query._value['$ne']['$regex'] = scope.operand['not']['regex'];
              scope.query._value['$ne']['$options'] = scope.operand['not']['options'];
              break;

            case '$exists':
              scope.query._value['$exists'] = scope.operand['exists'];
              break;

            case '$notExists':
              scope.query._value['$exists'] = scope.operand['exists'];
              break;

            case '$ne':
              scope.query._value['$ne'] = scope.operand['ne'];
              break;

            case '$equals':
              scope.query._value = scope.operand['equals'];
              break;
          }
        }
      }
    }
  }
]
},{"../../partials/rules/string-rule.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\rules\\string-rule.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\group-view.html":[function(require,module,exports){
module.exports = '<div class="qb-group">\n' +
    '		<div class="qb-group-header clearfix">\n' +
    '			<select class="js-group-condition-select group-condition-select" ng-class="{\'false-hidden\': isSingleRow}">\n' +
    '				<option value="$and">AND</option>\n' +
    '				<option value="$or">OR</option>\n' +
    '			</select>\n' +
    '			<div class="qb-text-block" ng-if="isSingleRow">\n' +
    '            By\n' +
    '        </div>\n' +
    '			<button class="btn btn-xs bg-color-blue txt-color-white" ng-click="addRow()">Add condition</button>\n' +
    '		</div>\n' +
    '		<div class="qb-group-body">\n' +
    '			<div class="" ng-repeat="singleQuery in queryObject._value track by $id(singleQuery)">\n' +
    '				<div ng-if="!isGroup(singleQuery)" class="" eq-row-view="singleQuery" expandable="expandable" props="props" query-index="$index" query-array="queryObject._value" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '				<div ng-if="isGroup(singleQuery)" class="qb-group-inner" eq-group-view="singleQuery" query-index="$index" query-array="queryObject._value" expandable="expandable" props="props" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '			</div>\n' +
    '		</div>\n' +
    '	</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\query-builder.html":[function(require,module,exports){
module.exports = '<div class="query-builder">\n' +
    '	<div ng-repeat="queryObject in query.data track by $id(queryObject)" eq-group-view="queryObject" expandable="expandable" query-index="$index" query-array="query.data" props="props" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\row-view.html":[function(require,module,exports){
module.exports = '<div class="qb-row">\n' +
    '    <input type="hidden" ng-model="query._key">\n' +
    '\n' +
    '    <div class="qb-row-inner clearfix">\n' +
    '\n' +
    '        <div class="qb-column-wrap clearfix js-prop-select-wrap" rel="tooltip">\n' +
    '            <input type="hidden" class="column-select js-prop-select">\n' +
    '        </div>\n' +
    '\n' +
    '        <div class="qb-rule-wrap">\n' +
    '            <div class="qb-row-toggler-wrap clearfix js-btn-expand-row" ng-show="expandable && !renderRuleView" data-error-text="Please select a filter">\n' +
    '                <button class="btn bg-color-blue txt-color-white btn-sm" ng-click="expandRow()">\n' +
    '                    <i class="fa fa-angle-double-right"></i>\n' +
    '                </button>\n' +
    '            </div>\n' +
    '            <div ng-switch on="query.rowData.datatype" ng-if="renderRuleView">\n' +
    '                <div ng-switch-when="string" eq-string-rule-view="query" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '                <div ng-switch-when="isodate" eq-isodate-rule-view="query" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '                <div ng-switch-when="number" eq-number-rule-view="query" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '                <div ng-switch-when="boolean" eq-boolean-rule-view="query" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '                <div ng-switch-when="null"></div>\n' +
    '                <div class="qb-row-toggler-wrap clearfix" ng-show="expandable">\n' +
    '                    <button class="btn bg-color-blue txt-color-white btn-sm" ng-click="contractRow()">\n' +
    '                        <i class="fa fa-angle-double-left"></i>\n' +
    '                    </button>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '\n' +
    '\n' +
    '        <div class="qb-datatype-wrap">\n' +
    '            <select class="qb-datatype-select js-datatype-select">\n' +
    '                <option value="string">String</option>\n' +
    '                <option value="number">Number</option>\n' +
    '                <option value="isodate">Date</option>\n' +
    '                <option value="boolean">Boolean</option>\n' +
    '            </select>\n' +
    '        </div>\n' +
    '\n' +
    '        <button type="button" class="close qb-btn-delete-row" data-dismiss="modal" aria-hidden="true" ng-click="removeRow()">\n' +
    '            ×\n' +
    '        </button>\n' +
    '    </div>\n' +
    '   \n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\rules\\boolean-rule.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '	<div class="qb-operator-wrap clearfix">\n' +
    '		<div class="qb-text-block">\n' +
    '			equals\n' +
    '		</div>\n' +
    '	</div>\n' +
    '	<div class="qb-operand-wrap">\n' +
    '		<select class="js-operand-select opd-bool-select" ng-model="operator">\n' +
    '		    <option value="true">true</option>\n' +
    '		    <option value="false">false</option>\n' +
    '		</select>\n' +
    '	</div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\rules\\isodate-rule.html":[function(require,module,exports){
module.exports = ' <div>\n' +
    '  <div class="qb-operator-wrap clearfix">\n' +
    '      \n' +
    '\n' +
    '      <select class="qb-operator-select js-operator-select opr-date-select">\n' +
    '        <option value="$gt">more than</option>\n' +
    '        <option value="$lt">less than</option>\n' +
    '        <option value="$equals">equals</option>\n' +
    '    </select>\n' +
    '  </div>\n' +
    '\n' +
    '  <div ng-switch on="operator" class="qb-operand-wrap qb-date-operand-wrap">\n' +
    '      <div ng-switch-when="$gt" class="opd-date-wrap clearfix" rel="tooltip">\n' +
    '          <input bootstrap-date-picker picker-class="pickerClass" time-zone-select-class="timeZoneSelectClass" date-time="operand.gt">\n' +
    '      </div>\n' +
    '      <div ng-switch-when="$lt" class="opd-date-wrap clearfix" rel="tooltip">\n' +
    '          <input bootstrap-date-picker picker-class="pickerClass" time-zone-select-class="timeZoneSelectClass" date-time="operand.lt">\n' +
    '      </div>\n' +
    '      <div ng-switch-when="$equals" class="opd-date-wrap clearfix" rel="tooltip">\n' +
    '        <input bootstrap-date-picker picker-class="pickerClass" time-zone-select-class="timeZoneSelectClass" date-time="operand.equals">\n' +
    '      </div>\n' +
    '  </div>\n' +
    '\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\rules\\number-rule.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '    <div class="qb-operator-wrap clearfix">\n' +
    '        \n' +
    '        <div class="qb-text-block">\n' +
    '            is\n' +
    '        </div>\n' +
    '        <select class="qb-operator-select js-operator-select opr-num-select">\n' +
    '            <option value="$btw">between</option>\n' +
    '            <option value="$lt">less than</option>\n' +
    '            <option value="$gt">greater than</option>\n' +
    '            <option value="$equals">equals</option>\n' +
    '        </select>\n' +
    '    </div>\n' +
    '    \n' +
    '    <div ng-switch on="operator" class="qb-operand-wrap">\n' +
    '        <div ng-switch-when="$btw">\n' +
    '            <input class="form-control qb-input opd-num-input js-number-btw-gt" type="text" rel="tooltip"  ng-model="operand.gt">\n' +
    '            <div class="qb-text-block">\n' +
    '                and \n' +
    '            </div>\n' +
    '            <input class="form-control qb-input opd-num-input js-number-btw-lt" type="text"  rel="tooltip" ng-model="operand.lt">\n' +
    '        </div>\n' +
    '        <div class="input-group" ng-switch-when="$lt">\n' +
    '            <input class="form-control qb-input js-number-lt" type="text" rel="tooltip"  ng-model="operand.lt">\n' +
    '        </div>\n' +
    '        <div class="input-group" ng-switch-when="$gt">\n' +
    '            <input class="form-control qb-input js-number-gt" type="text" rel="tooltip"  ng-model="operand.gt">\n' +
    '        </div>\n' +
    '        <div class="input-group" ng-switch-when="$equals">\n' +
    '            <input class="form-control qb-input js-number-equals" type="text" rel="tooltip" ng-model="operand.equals">\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\partials\\rules\\string-rule.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '    <div class="qb-operator-wrap clearfix">\n' +
    '\n' +
    '\n' +
    '        <select class="qb-operator-select js-operator-select opr-text-select">\n' +
    '            <option value="$in">contains</option>\n' +
    '            <option value="$not">does not contain</option>\n' +
    '            <option value="$exists">is set</option>\n' +
    '            <option value="$notExists">is not set</option>\n' +
    '            <option value="$equals">equals</option>\n' +
    '            <option value="$ne">not equal to</option>\n' +
    '        </select>\n' +
    '    </div>\n' +
    '\n' +
    '    <div ng-switch on="operator" class="qb-operand-wrap">\n' +
    '        <div class="input-group" ng-switch-when="$in">\n' +
    '            <span class="input-group-addon">/</span>\n' +
    '            <input class="form-control opd-regex-input qb-input js-string-regex" rel="tooltip" type="text" ng-model="operand.regex">\n' +
    '            <span class="input-group-addon last-addon">/</span>\n' +
    '            <input class="form-control opd-options-input qb-input js-string-options" rel="tooltip" type="text" ng-model="operand.options" data-placement="right">\n' +
    '        </div>\n' +
    '        <div ng-switch-when="$not" class="input-group">\n' +
    '            <span class="input-group-addon">/</span>\n' +
    '            <input class="form-control opd-regex-input qb-input js-string-not-regex" rel="tooltip" type="text" ng-model="operand.not.regex">\n' +
    '            <span class="input-group-addon last-addon">/</span>\n' +
    '            <input class="form-control opd-options-input qb-input js-string-not-options" rel="tooltip" type="text" ng-model="operand.not.options" data-placement="right">\n' +
    '        </div>\n' +
    '        <div ng-switch-when="$ne">\n' +
    '            <input class="form-control qb-input js-string-ne" rel="tooltip" type="text" ng-model="operand.ne">\n' +
    '        </div>\n' +
    '        <div ng-switch-when="$equals">\n' +
    '            <input class="form-control qb-input js-string-equals" rel="tooltip" type="text" ng-model="operand.equals">\n' +
    '        </div>\n' +
    '    </div>\n' +
    '\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\query-builder.js":[function(require,module,exports){
'use strict';

// Include Modules
require('third-party-modules/select2');
require('third-party-modules/qtip');

// Directives
var queryBuilder      = require('./directives/query-builder');
var groupView         = require('./directives/group-view');
var rowView           = require('./directives/row-view');

var stringRuleView    = require('./directives/rules/string-rule-view');
var isoDateRuleView   = require('./directives/rules/isodate-rule-view');
var numberRuleView    = require('./directives/rules/number-rule-view');
var booleanRuleView   = require('./directives/rules/boolean-rule-view');

// Services
var utils             = require('./services/query-builder.js');
var tip               = require('../global/services/tip.js');

module.exports = angular.module('eventsQueryBuilder', [])
  .directive('eventsQueryBuilder', queryBuilder)
  .directive('eqGroupView', groupView)
  .directive('eqRowView', rowView)
  .directive('eqStringRuleView', stringRuleView)
  .directive('eqIsodateRuleView', isoDateRuleView)
  .directive('eqNumberRuleView', numberRuleView)
  .directive('eqBooleanRuleView', booleanRuleView)
  .service('eqService', utils)
  .service('tip', tip);

},{"../global/services/tip.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\tip.js","./directives/group-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\group-view.js","./directives/query-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\query-builder.js","./directives/row-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\row-view.js","./directives/rules/boolean-rule-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\rules\\boolean-rule-view.js","./directives/rules/isodate-rule-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\rules\\isodate-rule-view.js","./directives/rules/number-rule-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\rules\\number-rule-view.js","./directives/rules/string-rule-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\directives\\rules\\string-rule-view.js","./services/query-builder.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\services\\query-builder.js","third-party-modules/qtip":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\qtip\\qtip.shim.js","third-party-modules/select2":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\select2\\select2.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\events-query-builder\\services\\query-builder.js":[function(require,module,exports){
module.exports = [
  'builtApi',
  'utilsService',
  'tip',
  'constants',
  function(builtApi, Utils, TIP, constants) {
    var self = this;
    var tipOptions = {
      content: {
        text: function(api) {
          return 'Please enter a valid value';
        },
      },
      hide: {
        event: 'click'
      },
      events: {
        hide: function(event, api) {
          $(this).qtip("destroy");
        }
      },
      position: {
        adjust: {
          x: -1
        }
      },
      style: {
        classes: "qtip-red"
      }
    };

    this.formatEventProperties = function(props) {
      return _.map(props, function(prop) {
        return {
          id: prop,
          text: prop
        }
      })
    }

    this.showErrorTips = function(els, o) {
      var options = _.extend({}, tipOptions, (o || {}))
      for (var i = 0; i < els.length; i++) {
        var el = els[i];
        var opts = _.cloneDeep(options);
        if(el.data('error-text'))
          opts.content.text = function(api){return el.data('error-text')};
        TIP.show(el, opts);
      }
    }

    this.destroyErrorTips = function(elem) {
      elem.find('[rel=tooltip]').tooltip('destroy');
    }

    this.destroyTip = function(el) {
      TIP.destroy(el);
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\asset-gallery.js":[function(require,module,exports){
'use strict';
var assetGalleryTemplate = require('../partials/asset-gallery.html');

module.exports = [
  '$q',
  'builtApi',
  'modalService',
  'utilsService',
  'appCacheService',

  function($q, builtApi, modalService, Utils, appCacheService) {
    return {
      template: assetGalleryTemplate,
      restrict: 'A',
      replace: true,
      link: function(scope, elem, attrs) {
        var perPage = 50;
        var cacheKeyPrefix = 'assetGallery:';
        scope.activeFilter = 'all';
        scope.assets = {
          all: {
            total: 0,
            data: []
          },
          images: {
            total: 0,
            data: []
          },
          videos: {
            total: 0,
            data: []
          }
        }

        scope.getMoreAssets = function(filter, e) {
          var button = $(e.currentTarget);
          var cacheData = appCacheService.get(cacheKeyPrefix + filter);

          button.button('loading');
          getAssetData(getAssetParams(cacheData.pageNo + 1, filter))
            .then(function(res) {
              cacheData.pageNo += 1;
              for (var i = 0; i < res.uploads.length; i++) {
                cacheData.assets.push(res.uploads[i]);
              }
              cacheData.total = res.total;
              scope.assets[filter]['total'] = cacheData.total;
            }, function(xhr) {
              console.log('xhr', xhr);

            })
            .finally(function() {
              button.button('reset');
            });
        }

        scope.getAssets = function(filter) {
          scope.activeFilter = filter;
          var cache = appCacheService.get(cacheKeyPrefix + filter);
          var tabPane = $('#ag-' + filter);
          tabPane.addClass('loading');
          if (cache) {
            var cacheData = cache;
            scope.assets[filter]['data'] = cacheData.assets;
            scope.assets[filter]['total'] = cacheData.total;
            tabPane.removeClass('loading');
          } else {
            var cacheData = {
              pageNo: 1,
              skip: 0,
              limit: perPage,
              assets: []
            }
            getAssetData(getAssetParams(1, filter))
              .then(function(res) {
                cacheData.assets = res.uploads;
                cacheData.total = res.total;
                appCacheService.set(cacheKeyPrefix + filter, cacheData);
                scope.assets[filter]['total'] = cacheData.total;
                scope.assets[filter]['data'] = cacheData.assets;
              }, function(xhr) {
                console.log(xhr);
              })
              .finally(function() {
                tabPane.removeClass('loading');
              })
          }
        }

        scope.burstGalleryCache = function() {
          for (var key in scope.assets) {
            appCacheService.remove(cacheKeyPrefix + key);
            scope.assets[key]['total'] = 0;
            scope.assets[key]['data'].length = 0;
          }
          scope.getAssets(scope.activeFilter);
        }

        function addAuthToken(url) {
          return url += '?AUTHTOKEN=' + scope.data.authtoken;
        }

        function getAssetParams(pageNo, filter) {
          return {
            options: {
              uploadType: filter === 'all' ? '' : filter,
              query: {
                skip: (pageNo - 1) * perPage,
                limit: perPage,
                include_count: true
              }
            }
          }
        }

        function getAssetData(params) {
          var deferred = $q.defer();
          builtApi.File.getUpload(params)
            .then(function(res) {
              var uploads = [];

              for (var i = 0; i < res.uploads.length; i++) {
                uploads.push({
                  url: addAuthToken(res.uploads[i].url),
                  isImage: Utils.isImage(res.uploads[i].filename),
                  file_size: Utils.bytesToSize(res.uploads[i].file_size),
                  filename: res.uploads[i].filename,
                  uid: res.uploads[i].uid
                });
              }

              deferred.resolve({
                uploads: uploads,
                total: res.count
              });
            }, function(xhr) {
              deferred.reject(xhr);
            })
          return deferred.promise;
        }

        scope.getAssets('all');
      }
    }
  }
]
},{"../partials/asset-gallery.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\asset-gallery.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-boolean.js":[function(require,module,exports){
'use strict';
var formFieldBooleanTemplate = require('../../partials/form-field-boolean.html')

module.exports = function() {
  return {
    template: formFieldBooleanTemplate,
    restrict: 'A',
    replace: true,
    scope: {
      field: '=field',
      obj: '=obj',
      ctx: '=ctx',
      prop: '=prop'
    },
    link: function(scope, elem, attrs) {}
  }
}
},{"../../partials/form-field-boolean.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-boolean.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-file.js":[function(require,module,exports){
'use strict';
var formFieldFileTemplate = require('../../partials/form-field-file.html');
var formFieldOverlay = require('../../partials/form-field-overlay.html');

module.exports = [
  '$compile',
  'builtApi',
  'postMessageUploadService',
  'modalService',
  '$log',
  '$cacheFactory',
  'utilsService',
  'alertService',
  function(compile, builtApi, postMessageUploadService, modalService, $log, $cacheFactory, Utils, Alert) {
    var uploadCache = $cacheFactory('uploadCache');
    return {
      template: formFieldFileTemplate,
      restrict: 'A',
      replace: true,
      scope: {
        field: '=field',
        obj: '=obj',
        ctx: '=ctx',
        prop: '=prop',
        apikey: '=apikey',
        authtoken: '=authtoken',
        apihost: '=apihost',
        viewonly: '=viewonly'
      },
      link: function(scope, elem, attrs) {
        scope.randvalue = Utils.getRand();

        // passing url to post message directive
        scope.url = "uploads";

        //DOM
        scope.upload = {};
        scope.progressstatus = false;
        scope.fileUploaded = scope.ctx[scope.prop] ? true : false;

        /**
         * In case of displaying uploads in the DOM, the upload(file object) is shown in the DOM instead of the value of the object(ctx[prop]).
         * So, we use scope.upload to show upload in the DOM and scope.ctx[scope.prop] for maintaing the scope of the object.
         * Hence, there is no binding for the file object which is displayed in the DOM.
         * The DOM is updated using $.watch to detect changes in the ctx[prop].
         * An UploadCache is maintained and uploads are stashed in it. A watcher is attached to the value of the object(ctx[prop]).
         * When the Array(ctx[prop]) is altered, the DOM is updated manually by getting the file object from the uploadCache.
         */
        if (scope.field.multiple) {
          scope.$watch('ctx[prop]', function(newVal, oldVal) {
            if(_.isEqual(newVal, oldVal)) return;
      
            if (uploadCache.get(scope.ctx[scope.prop])) {
              showUpload(uploadCache.get(scope.ctx[scope.prop]));
            }else{
              clearUpload();
            }
          })
        }

        scope.removeUpload = function() {
          scope.ctx[scope.prop] = "";
          scope.fileUploaded = false;
          scope.randvalue = Utils.getRand();
        }

        scope.uploadFile = function(elements) {
          Utils.sa(scope, function() {
            scope.progressstatus = true;
          });

          $(elem).find('form').trigger('submit');

          postMessageUploadService.getPostMessage(scope.randvalue)
            .then(function(res) {
              console.log("res", res);
              if (res.hasOwnProperty('error_code')) {
                scope.progressstatus = false;
                Alert.notify({
                  title: "File upload failed!",
                  content: res.error_message,
                  type: 'error'
                })
              }else {
                res.upload.url = addAuthToken(res.upload.url);
                showUpload(res.upload);
              }
            });
        }

        /* On click event for choosing upload from already uploaded */
        scope.showGallery = function() {
          console.log(scope.authtoken);
          modalService.openModal({authtoken: scope.authtoken}, formFieldOverlay, assetGalleryCtrl)
            .then(function(selectedItem) {
              showUpload(selectedItem);
            }, function() {});
        }

        /* modal controller */
        var assetGalleryCtrl = function($scope, $modalInstance, data) {
          $scope.data = data;

          $scope.selected = {
            item: ''
          };
          $scope.isActive = function(obj) {
            return $scope.selected.item == obj;
          }
          $scope.ok = function() {
            $modalInstance.close($scope.selected.item);
          };
          $scope.cancel = function() {
            $modalInstance.dismiss('cancel');
          };
          $scope.itemDirectUpload = function(item) {
            $modalInstance.close(item);
          }
        }


        function clearUpload() {
          scope.upload = {};      
          scope.progressstatus = false;
          scope.fileUploaded = false;
        }

        function showUpload(upload) {

          // set the upload cache for upload objects
          if (!uploadCache.get(upload.uid)) {
            uploadCache.put(upload.uid, upload);
          }
          scope.upload = upload;
          scope.upload.file_size = Utils.bytesToSize(upload.file_size);
          scope.ctx[scope.prop] = upload.uid;
          scope.upload.isImage = Utils.isImage(upload.filename);

          if(scope.upload.url.lastIndexOf('AUTHTOKEN') == -1)
            scope.upload.url = addAuthToken(scope.upload.url);
            

          scope.progressstatus = false;
          scope.fileUploaded = true;
        }

        function addAuthToken(url) {
          return url += '?AUTHTOKEN=' + scope.authtoken;
        }

        if (scope.fileUploaded) {
          showUpload(scope.ctx[scope.prop]);
        }
      }
    }
  }
]
},{"../../partials/form-field-file.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-file.html","../../partials/form-field-overlay.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-overlay.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-group.js":[function(require,module,exports){
'use strict';
var formFieldGroupTemplate = require('../../partials/form-field-group.html');

module.exports = [
  '$compile',
  'utilsService',
  function($compile, Utils) {
    return {
      restrict: 'A',
      replace: true,
      scope: {
        field: '=field',
        obj: '=obj',
        ctx: '=ctx',
        prop: '=prop',
        apikey: '=',
        viewonly: '=viewonly',
        classes: '=classes',
        authtoken: "=authtoken"
      },
      link: function(scope, elem, attrs) {
        var $template = angular.element(formFieldGroupTemplate);
        $compile($template)(scope);
        elem.append($template);
        var groupWrap = $(elem).find('.group-wrap').eq(0);
        if (scope.field.multiple) {
          groupWrap.attr('id', 'grp-multiple-' + Utils.getRand());
        }

        scope.toggleGroup = function(){
          groupWrap.toggleClass('collapsed');
        }
      }
    }
  }
]
},{"../../partials/form-field-group.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-group.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-isodate.js":[function(require,module,exports){
'use strict';
var formFieldIsodateTemplate = require('../../partials/form-field-isodate.html');
require('third-party-modules/bootstrap-datetimepicker')

module.exports = ['$cacheFactory',
  function($cacheFactory) {
    var dateCache = $cacheFactory('dateCache');
    return {
      template: formFieldIsodateTemplate,
      restrict: 'A',
      replace: true,
      scope: {
        field: '=field',
        obj: '=obj',
        ctx: '=ctx',
        prop: '=prop'
      },
      link: function(scope, elem, attrs) {
        var dateTimePicker = elem.find('.datetimepicker');

        scope.timeZone = getTimeZones();
        scope.faked = {
          dt: "",
          zone: ""
        };
        // Date picker Initialization
        dateTimePicker
          .datetimepicker({
            useSeconds: true,
            icons: {
              time: "fa fa-clock-o",
              date: "fa fa-calendar",
              up: "fa fa-arrow-up",
              down: "fa fa-arrow-down"
            }
          })

        // Date picker event on date change 
        .on("dp.change", function(e) {
          checkSelectedDateTime(e);
        });

        elem.find('.timeSelecter')
          .on('change', function() {
            if (_.isEmpty(scope.ctx[scope.prop]))
              return;
            //Apply method is required to update timezone of ctx[prop]
            scope.$apply(function() {
              setTZScope();
            })
          })

        scope.$watch('ctx[prop]', function(newValue) {
          scope.faked.dt = newValue ? newValue.substring(0, getDateIndex(newValue)) : '';
          scope.faked.dt = scope.faked.dt ? moment(scope.faked.dt).format('MMMM Do YYYY, h:mm:ss a') : scope.faked.dt;
          scope.faked.zone = newValue ? newValue.substring(getDateIndex(newValue), newValue.length) : getlocalTimeZone();
          console.log("watching scope.zone  of isodate wrap", scope.faked);
        }, true);

        scope.onDateTimePickerBlur = function(e) {
          checkSelectedDateTime(e);
        }

        function isSelectedDateEmpty(e) {
          return _.isEmpty($(e.currentTarget).val());
        }

        function checkSelectedDateTime(e) {
          if (isSelectedDateEmpty(e))
            scope.ctx[scope.prop] = null;
          else
            setScope();
        }

        function setScope() {
          // Get timezone
          var setZone = elem.find('.timeSelecter option:selected').text();
          var inputDate = elem.find('.datetimepicker').data("DateTimePicker").getDate();

          /**
          *@name  : Check if inputDate is null
          *@param : 
          *@desc  : setScope is called second time on-change event hence data provided by getDate() is null,
          this is because data is already stored in scope.ctx[scope.prop] on-selection event.
          **/
          if (inputDate) {
            var setDateTime = _.cloneDeep(inputDate.format());
            setDateTime = setDateTime.substring(0, getDateIndex(setDateTime));
            // Concat datetime and timezone.
            scope.ctx[scope.prop] = setDateTime + setZone;
          }
        }

        /**
        *@name  : setTZScope 
        *@param : 
        *@desc  : In case if date time is already set, and if timezone is changed we get 'inputDate' as null hence rather 
        the calling setScope we call setTZScope on timezone change.
        **/
        function setTZScope() {
          var setZone = elem.find('.timeSelecter option:selected').text();
          scope.ctx[scope.prop] = scope.ctx[scope.prop].substring(0, getDateIndex(scope.ctx[scope.prop])) + setZone;
        }

        function getDateIndex(isoDate) {
          if (isoDate.lastIndexOf('.') !== -1)
            return isoDate.lastIndexOf('.');
          else if (isoDate.lastIndexOf('+') !== -1)
            return isoDate.lastIndexOf('+');
          else if (isoDate.lastIndexOf('-') !== -1)
            return isoDate.lastIndexOf('-');
        }

        function getlocalTimeZone() {
          var date = moment().format();
          return date.substring(getDateIndex(date), date.length).split(':').join('');
        }

        function getTimeZones() {

          return [
            '-1200', '-1100',
            '-1000', '-0930',
            '-0900', '-0800',
            '-0700', '-0600',
            '-0500', '-0430',
            '-0400', '-0330',
            '-0300', '-0200',
            '-0100', '+0000',
            '+0100', '+0200',
            '+0300', '+0330',
            '+0400', '+0430',
            '+0500', '+0530',
            '+0545', '+0600',
            '+0630', '+0700',
            '+0800', '+0845',
            '+0900', '+0930',
            '+1000', '+1030',
            '+1100', '+1130',
            '+1200', '+1245',
            '+1300', '+1400'
          ];
        }


      }
    }
  }
]
},{"../../partials/form-field-isodate.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-isodate.html","third-party-modules/bootstrap-datetimepicker":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\bootstrap-datetimepicker\\bootstrap-datetime-picker.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-link.js":[function(require,module,exports){
'use strict';
var formFieldIsodateTemplate = require('../../partials/form-field-link.html');

module.exports = function() {
  return {
    template: formFieldIsodateTemplate,
    restrict: 'A',
    replace: true,
    scope: {
      field: '=field',
      obj: '=obj',
      ctx: '=ctx',
      prop: '=prop'
    },
    link: function(scope, elem, attrs) {}
  }
}
},{"../../partials/form-field-link.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-link.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-location.js":[function(require,module,exports){
'use strict';
var formFieldLocationTemplate = require('../../partials/form-field-location.html');

module.exports = [
  '$q',
  'libraryService',
  function($q, LIB) {
    return {
      template: formFieldLocationTemplate,
      restrict: 'A',
      replace: true,
      scope: {
        obj: '=obj'
      },
      link: function(scope, elem, attrs) {
        /** 
         *Reason for using two different scope variable for same condition is because, In some cases even if location status is true the haslocationTag condition can be false;
         **/
        scope.hasLocationTag = (scope.obj.hasOwnProperty('__loc') && scope.obj.__loc !== null) ? true : false;
        scope.locationStatus = (scope.obj.hasOwnProperty('__loc') && scope.obj.__loc !== null) ? true : false;
        scope.loc = {}
        scope.marker = null;



        //Watch for location Status change
        scope.$watch('locationStatus', function() {
          if (scope.locationStatus) {
            //Check if location tag is present
            scope.loc.lat = scope.hasLocationTag ? scope.obj.__loc[1] : 37.74045209829323;
            scope.loc.lng = scope.hasLocationTag ? scope.obj.__loc[0] : -122.4431164995849;

            populateLatLngInputs(scope.loc.lat, scope.loc.lng)

            //Initialize geolocation function on getting Google Maps Implicitly
            LIB.get('googleMaps').then(function() {
              InitializeGeoLocationMap();
            })
            $("#object-geo-location-map").show();
          } else {
            scope.obj.__loc = null;
            scope.hasLocationTag = false;
            $("#object-geo-location-map").hide();
          }
        })


        //On lat-lng new input, change the location
        scope.$watchCollection('[loc.lat,loc.lng]', function() {
          if (scope.locationStatus) {
            populateLatLngInputs(scope.loc.lat, scope.loc.lng);
            LIB.get('googleMaps').then(function() {
              setMapMarker();
            })
          }
        })


        //Initializing Map data
        function InitializeGeoLocationMap() {
          google.maps.visualRefresh = true;
          var latlng = new google.maps.LatLng(scope.loc.lat, scope.loc.lng)
          var mapOptions = {
            zoom: 18,
            center: latlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            zoomControl: true
          }
          scope.mapObject = new google.maps.Map(document.getElementById("object-geo-location-map"),
            mapOptions);

          //Set Map marker initially
          setMapMarker();

        }

        //Set Map marker
        function setMapMarker() {
          var latlng = new google.maps.LatLng(scope.loc.lat, scope.loc.lng);
          scope.mapObject.setCenter(latlng);
          if (scope.marker != null) {
            scope.marker.setMap(null);
            scope.marker = null;
          }
          scope.marker = new google.maps.Marker({
            map: scope.mapObject,
            position: latlng,
            draggable: true,
            icon: 'images/gmap/spotlight-poi.png'
          });

          //attach listener to map marker initially
          attachListenerToMarker();
        }


        //Attach a listener to map marker incase of draging it to new location
        function attachListenerToMarker() {

          google.maps.event.addListener(scope.marker, 'dragend', function() {

            var position = scope.marker.getPosition();
            scope.mapObject.setCenter(position);

            scope.$apply(function() {
              populateLatLngInputs(position.lat(), position.lng())
            });
          });
        }

        //populate locaton data 
        function populateLatLngInputs(lat, lng) {
          if (!scope.hasLocationTag) {
            scope.obj.__loc = [];
          }
          scope.obj.__loc[1] = scope.loc.lat = lat;
          scope.obj.__loc[0] = scope.loc.lng = lng;

          //MAke location tag true
          scope.hasLocationTag = true;
        }

        //Initialize Select2 for Map Search Box
        scope.searchRef = _.throttle(function(query) {
          var deferred = $q.defer();
          var geocoder = new google.maps.Geocoder();
          var objResults = {};
          geocoder.geocode({
            'address': query
          }, function(locationData, status) {

            if (locationData) {
              objResults = {
                results: locationData.map(function(location) {
                  return {
                    id: location.formatted_address,
                    text: location.formatted_address,
                    other: location
                  }
                })
              }
              deferred.resolve(objResults);
            }
          })
          return deferred.promise;
        }, 10);

        //On address selection re-render Map
        scope.onSelectedSearchlocation = function(result) {
          result = result.other;
          scope.$apply(function() {
            populateLatLngInputs(result["geometry"]["location"].lat(), result["geometry"]["location"].lng());
          })
          setMapMarker();
        }



      }
    }
  }
]
},{"../../partials/form-field-location.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-location.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-mixed.js":[function(require,module,exports){
'use strict';
var formFieldMixedTemplate = require('../../partials/form-field-mixed.html');

module.exports = function() {
  return {
    template: formFieldMixedTemplate,
    restrict: 'A',
    replace: true,
    scope: {
      field: '=field',
      obj: '=obj',
      ctx: '=ctx',
      prop: '=prop'
    },
    link: function(scope, elem, attrs) {
      scope.mmixed = JSON.stringify(scope.ctx[scope.prop], null, 2);
      scope.$watch('mmixed', function(newVal, oldVal) {
        try {
          scope.ctx[scope.prop] = JSON.parse(newVal);
        } catch (e) {
          scope.ctx[scope.prop] = newVal;
        }
      })
    }
  }
}
},{"../../partials/form-field-mixed.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-mixed.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-number.js":[function(require,module,exports){
'use strict';
var formFieldNumberTemplate = require('../../partials/form-field-number.html')
module.exports = function() {
  return {
    template: formFieldNumberTemplate,
    restrict: 'A',
    replace: true,
    scope: {
      field: '=field',
      obj: '=obj',
      ctx: '=ctx',
      prop: '=prop'
    },
    link: function(scope, elem, attrs) {
      scope.mnumber = scope.ctx[scope.prop];
      scope.$watch('mnumber', function(newVal, oldVal) {
        scope.ctx[scope.prop] = +newVal;
      });
    }
  }
}
},{"../../partials/form-field-number.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-number.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-password.js":[function(require,module,exports){
'use strict';
var formFieldPasswordTemplate = require('../../partials/form-field-password.html');

module.exports = function() {
  return {
    template: formFieldPasswordTemplate,
    restrict: 'A',
    replace: true,
    scope: {
      field: '=field',
      obj: '=obj',
      ctx: '=ctx',
      prop: '=prop'
    },
    link: function(scope, elem, attrs) {
    }
  }
}
},{"../../partials/form-field-password.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-password.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-reference-wrap.js":[function(require,module,exports){
  'use strict';
  var formFieldRefWrapTemplate = require('../../partials/form-field-reference-wrap.html');

  module.exports = [
    'referenceObjectsSuggestionService',
    'builtApi',
    function(suggestionService, builtApi) {
      return {
        template: formFieldRefWrapTemplate,
        restrict: 'A',
        replace: true,
        scope: {
          field: '=field',
          obj: '=obj',
          ctx: '=ctx',
          apikey: '=apikey',
          onAdd: '=onAdd',
          onRemove: '=onRemove',
          viewonly: '=viewonly'
        },
        link: function(scope, elem, attrs) {

          //if (scope.ctx[scope.field.uid].length !== 0) {
            scope.refData = scope.ctx[scope.field.uid].map(function(uid) {
              return suggestionService.construct(uid, uid);
            })

            builtApi.Classes.getOne({
              options: {
                classUid: scope.field.reference_to
              }
            }).then(function(klass) {
              scope.klass = klass;
              console.log("in refernce wrap", scope.klass);
              suggestionService.get(scope.apikey, scope.field.reference_to, scope.ctx[scope.field.uid], klass)
                .then(function(rData) {
                  scope.refData = rData;
                })
            })
         // }

          // we watch for any changes in the underlying data structure.
          // then we change our own model of the data accordingly.
          scope.$watchCollection('ctx[field.uid]', function(oldVal, newVal) {
            var cache = scope.refData;
            if (!_.isEmpty(scope.ctx[scope.field.uid])) {
              scope.refData = scope.ctx[scope.field.uid].map(function(uid) {
                return R.find(R.where({
                  id: uid
                }), cache) || suggestionService.construct(uid, uid);
              })
            }
          });
        }
      }
    }
  ]
},{"../../partials/form-field-reference-wrap.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-reference-wrap.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-reference.js":[function(require,module,exports){
'use strict';
var formFieldRef = require('../../partials/form-field-reference.html')

module.exports = [
  '$q',
  'referenceObjectsSuggestionService',
  'builtApi',
  function($q, suggestionService, builtApi) {
    return {
      template: formFieldRef,
      restrict: 'A',
      replace: false,
      scope: {
        field: '=field',
        obj: '=obj',
        ctx: '=ctx',
        prop: '=prop',
        apikey: '=apikey',
        refDatum: '=',
        onAdd: '=onAdd',
        onRemove: '=onRemove',
        klass: '=klass'
      },

      link: function(scope, elem, attrs) {
        var searchRef = _.throttle(function(query, klass) {
          if (klass) {
            return suggestionService.get(scope.apikey, scope.field.reference_to, query, klass)
              .then(function(data) {
                return {
                  results: data
                };
              });
          } else {
            // Return an empty result to select2 {results: []} when class not found.
            return $q.when({results: []});
          }
        }, 1000);


        scope.$watch('klass', function(oldVal) {

          elem.select2({
            minimumInputLength: 1,
            multiple: true,
            query: function(query) {
              var RefVariable = searchRef(query.term, scope.klass);
              if (RefVariable)
                RefVariable.then(query.callback);
            }
          });
        })

        scope.$watch('refDatum', function(oldVal, newVal) {
          elem.select2('data', scope.refDatum)
        });

        elem.on('change', function(e) {
          if (e.added) {
            scope.refDatum.push(e.added)
          }
          scope.ctx[scope.field.uid] = e.val;
        });
      }
    }
  }
]
},{"../../partials/form-field-reference.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-reference.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-select.js":[function(require,module,exports){
'use strict';
module.exports = ['$compile',
  function(compile) {
    return {
      template: "",
      restrict: 'A',
      replace: false,
      scope: {
        field: '=field',
        obj: '=obj',
        ctx: '=ctx',
        prop: '=prop',
        viewonly: "=viewonly"
      },
      link: function(scope, elem, attrs) {
         elem.val(scope.ctx[scope.prop]).select2({
          data: scope.field.field_metadata.__blt_data.__blt_select
        })
         .on('change', function(e){
          scope.ctx[scope.prop] = e.val;
         });
      }
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-tag.js":[function(require,module,exports){
'use strict';
var formFieldTagTemplate = require('../../partials/form-field-tag.html');

module.exports = ['$compile',
  function(compile) {
    return {
      template: formFieldTagTemplate,
      restrict: 'A',
      replace: false,
      scope: {
        field: '=field',
        obj: '=obj',
        ctx: '=ctx',
        prop: '=prop'
      },
      link: function(scope, elem, attrs) {
        var tagsArray = [];
        if (scope.obj.hasOwnProperty('tags')) {
          if (scope.obj.tags.length > 0) {
            tagsArray = scope.obj.tags.map(function(tag) {
              return {
                id: tag,
                text: tag
              }
            })
          }
        }


        elem.select2({
          'multiple': true,
          tags: tagsArray,
          tokenSeparators: []
        });

        elem.select2('data', tagsArray)
        elem.on('change', function(e) {
          if (elem.select2('data').length > 0) {
            scope.obj.tags = elem.select2('data').map(function(tag) {
              return tag.text;
            })
            console.log("cvcvcvc", elem.select2('data'), scope.obj.tags)
          }
        })
      }
    }
  }
]
},{"../../partials/form-field-tag.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-tag.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-text.js":[function(require,module,exports){
'use strict';
var formFieldTextTemplate = require('../../partials/form-field-text.html');

module.exports = ['$compile',
  function(compile) {
    return {
      template: formFieldTextTemplate,
      restrict: 'A',
      replace: false,
      scope: {
        field: '=field',
        obj: '=obj',
        ctx: '=ctx',
        prop: '=prop',
        viewonly: "=viewonly"
      },
      link: function(scope, elem, attrs) {
        scope.summernoteConfig = {
          toolbar: [
            ['style', ['bold', 'italic', 'underline', 'clear']],
            ['font', ['strikethrough']],
            ['Insert', ['link', 'picture', 'table', 'hr']],
            ['Misc', ['fullscreen', 'codeview']],
            ['Layout', ['ul', 'ol', 'paragraph']],
            ['style', ['style']]
          ]
          // ,
          // onImageUpload: function(files, editor, $editable) {
          //   console.log('image upload:', files, editor);
          //   editor.insertImage($editable, url);
          //   console.log('image upload\'s editable:', scope.editable);
          // }
        };


        // scope.$watch('ctx[prop]', function(){
        //   console.log("ctx[prop]", scope.ctx[scope.prop])
        // })
      }
    }
  }
]
},{"../../partials/form-field-text.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-text.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field.js":[function(require,module,exports){
'use strict';
var formFieldTemplate = require('../../partials/form-field.html');

module.exports = [
  'utilsService',
  function(Utils) {

    var DEFAULTS = {
      text: function() {
        return ''
      },
      string: function() {
        return ''
      },
      number: function() {
        return 0
      },
      reference: function() {
        return ''
      },
      //Ui_reference as a default data type
      ui_reference: function() {
        return ''
      },
      group: function() {
        return {}
      },
      isodate: function() {
        return ''
      },
      file: function() {
        return null
      },
      boolean: function() {
        return false
      },
      link: function() {
        return {
          title: '',
          href: ''
        }
      },
      mixed: function() {
        return {}
      },
      select: function(){
        return ''
      },
      password:function(){
        return '';
      }
    };

    return {
      template: formFieldTemplate,
      restrict: 'A',
      replace: false,
      scope: {
        field: '=field',
        obj: '=obj',
        ctx: '=ctx',
        apikey: '=apikey',
        authtoken: '=authtoken',
        apihost: '=apihost',
        viewonly: '=viewonly'
      },

      link: function(scope, elem, attrs) {

        var uid = scope.field.uid;
        var dataType = scope.field.data_type;

        //DOM
        // Hot fix to find the 1st div in the template.
        var groupOuterWrap = elem.find('> div').eq(0);

        var multiple = scope.field.multiple ?
          'true' : 'false';

        multiple = scope.multiple = (dataType === 'reference') ?
          'reference' : multiple

        if (!scope.ctx[uid]) {
          if ((multiple === 'true') || (multiple === 'reference')) {
            scope.ctx[uid] = [];
          } else {
            scope.ctx[uid] = DEFAULTS[dataType]();
          }

        }


            console.log('Authtoken: ', scope.authtoken)

        scope.sortableOptions = {
          forcePlaceholderSize: true,
          axis: "y",
          handle: '.field-sort-handle',
          opacity: 1,
          placeholder: "ui-sortable-placeholder",
          scroll: "true",
          containment: "parent",
          start: function(e, ui) {
            var el = ui.item.find('> .media > div > .form-field-wrap');
            ui.placeholder.height(el.height());
            ui.placeholder.width(el.width());
          },
          update: function(e, ui) {
          },
          stop: function(e, ui) {
            scope.$apply(function() {
              scope.ctx[scope.field.uid] = _.compact(scope.ctx[scope.field.uid]);
            });

          }
        };

        scope.onAdd = function() {
          scope.ctx[uid].push(DEFAULTS[dataType]());
        }

        scope.onRemove = function(index) {
          scope.ctx[uid].splice(index, 1);
        }

        scope.toggleGroup = function() {
          groupOuterWrap.toggleClass('collapsed');
        }

        // assign a random id to the form field-wrap
        if (dataType === 'group')
          groupOuterWrap.attr('id', 'grp-' + Utils.getRand());
      }
    }
  }
]
},{"../../partials/form-field.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\select-location-search.js":[function(require,module,exports){
'use strict';
module.exports = function() {
  return {
    template: "<div></div>",
    restrict: 'A',
    replace: false,
    scope: {
      searchReference: '=',
      onSelectedReference: '='
    },
    link: function(scope, elem, attrs) {
      
      elem.select2({
        minimumInputLength: 1,
        containerCssClass: 'no-arrow',
        placeholder: "Type in an address, place or street name...",
        query: function(query) {
          if (scope.searchReference(query.term))
            scope.searchReference(query.term).then(query.callback);
        }
      });

      elem.on('change', function(e) {
        if (elem.select2('data'))
          scope.onSelectedReference(elem.select2('data'))
      });
    }
  }
}
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\form-builder.js":[function(require,module,exports){
'use strict';

require('third-party-modules/stickykit');
require('third-party-modules/isinviewport');
var formBuilderTemplate = require('../partials/formbuilder.html');

module.exports = [
  'utilsService',
  function(Utils) {
    return {
      template: formBuilderTemplate,
      restrict: 'A',
      scope: {
        cls: '=cls',
        obj: '=obj',
        apikey: '=apikey',
        authtoken: '=authtoken',
        apihost: '=apihost',
        viewonly: '=viewonly',
        classes: '=classes'
      },

      link: function(scope, elem, attrs) {
        var grpRibbon = $('.jarviswidget-form-builder .fb-group-ribbon');
        scope.groupRibbon = [];
        scope.configureFieldOptions = {};

        scope.configureFieldOptions = {
          publish: true,
          tag: true,
          location: true
        };

        scope.$watch('groupRibbon', function(newVal, oldVal){
          console.log("Group ribbon: ", newVal);
        });
        
        //set ConfigureOptions if present in class object
        if (scope.cls.options){
          if (scope.cls.options.inbuiltFields){
            scope.configureFieldOptions = scope.cls.options.inbuiltFields;
          }
        }

        var defaultGrpRibbon = {
          id: void 0,
          name: scope.cls.title
        };

        scope.scrollTo = function(id) {
          Utils.scrollTo(id ? $('#' + id).offset().top - 100 : 0);
        }

        /*
          Creates group ribbon.
         */
        function makeGrpRibbon() {

          if (!$('.form-builder-wrap').length)
            return;

          var bc = $('.form-builder-wrap .object-form .group-tracker:in-viewport(130)');

          $('.form-builder-wrap .object-form .group-tracker').removeClass('active-group');
          $(bc).addClass('active-group');
          scope.groupRibbon = [{
            id: void 0,
            name: scope.cls.title
          }];

          for (var i = 0; i < bc.length; i++) {
            var e = $(bc[i]);
            scope.groupRibbon.push({
              id: e.attr('id'),
              name: e.data('name')
            });
          }

          Utils.sa(scope);

          if (grpRibbon.css('position') == 'absolute')
            $(document.body).trigger("sticky_kit:recalc");
        }

        /*
          Remove animation classes and make group ribbon sticky
         */
        setTimeout(function() {
          $('#content').removeClass('animated fadeInDown');
          grpRibbon.stick_in_parent();
          $(document.body).trigger("sticky_kit:recalc");
        }, 3000);

        /*
          Bind groupRibbon to window scroll event.
         */
        
        $(window).unbind('scroll.makeGroupRibbon').bind('scroll.makeGroupRibbon', _.debounce(makeGrpRibbon.bind(scope), 50));


        /*
          Call groupRibbon 1st time.
         */
        makeGrpRibbon();
      }
    }
  }
]
},{"../partials/formbuilder.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\formbuilder.html","third-party-modules/isinviewport":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\isinviewport\\is-in-viewport.shim.js","third-party-modules/stickykit":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\stickykit\\stickykit.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\form-builder.js":[function(require,module,exports){
'use strict';
//Include Modules
require('third-party-modules/select2');
require('third-party-modules/jqueryui');
require('third-party-modules/angular-sortable');
require('third-party-modules/summernote');
require('third-party-modules/angular-summernote');

//Directives
var formBuilder                         = require('./directives/form-builder');
var formField                           = require('./directives/data-types/form-field'); 
var formFieldText                       = require('./directives/data-types/form-field-text'); 
var formFieldNumber                     = require('./directives/data-types/form-field-number'); 
var formFieldIsodate                    = require('./directives/data-types/form-field-isodate'); 
var formFieldBoolean                    = require('./directives/data-types/form-field-boolean'); 
var formFieldLink                       = require('./directives/data-types/form-field-link'); 
var formFieldGroup                      = require('./directives/data-types/form-field-group'); 
var formFieldMixed                      = require('./directives/data-types/form-field-mixed'); 
var formFieldFile                       = require('./directives/data-types/form-field-file'); 
var formFieldReference                  = require('./directives/data-types/form-field-reference');
var formFieldTag                        = require('./directives/data-types/form-field-tag'); 
var formFieldLocation                   = require('./directives/data-types/form-field-location');
var selectLocationSearch                = require('./directives/data-types/select-location-search'); 
var formFieldReferenceWrap              = require('./directives/data-types/form-field-reference-wrap'); 
var formFieldSelect                     = require('./directives/data-types/form-field-select'); 
var formFieldPassword                   = require('./directives/data-types/form-field-password'); 
var assetGallery                        = require('./directives/asset-gallery');

// Services
var referenceObjectsSuggestion          = require('./services/reference-objects-suggestion'); 


module.exports = angular.module('formBuilder', ['ui.sortable', 'summernote'])
  .directive('formbuilder', formBuilder)
  .directive('formField', formField)
  .directive('formFieldText', formFieldText)
  .directive('formFieldPassword', formFieldPassword)
  .directive('formFieldNumber', formFieldNumber)
  .directive('formFieldIsodate', formFieldIsodate)
  .directive('formFieldBoolean', formFieldBoolean)
  .directive('formFieldLink', formFieldLink)
  .directive('formFieldGroup', formFieldGroup)
  .directive('formFieldMixed', formFieldMixed)
  .directive('formFieldFile', formFieldFile)
  .directive('formFieldReference', formFieldReference)
  .directive('formFieldTag', formFieldTag)
  .directive('formFieldLocation', formFieldLocation)
  .directive('selectLocationSearch', selectLocationSearch)
  .directive('formFieldReferenceWrap', formFieldReferenceWrap)
  .directive('assetGallery', assetGallery)
  .directive('formFieldSelect', formFieldSelect)
  .service('referenceObjectsSuggestionService', referenceObjectsSuggestion)

},{"./directives/asset-gallery":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\asset-gallery.js","./directives/data-types/form-field":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field.js","./directives/data-types/form-field-boolean":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-boolean.js","./directives/data-types/form-field-file":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-file.js","./directives/data-types/form-field-group":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-group.js","./directives/data-types/form-field-isodate":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-isodate.js","./directives/data-types/form-field-link":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-link.js","./directives/data-types/form-field-location":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-location.js","./directives/data-types/form-field-mixed":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-mixed.js","./directives/data-types/form-field-number":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-number.js","./directives/data-types/form-field-password":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-password.js","./directives/data-types/form-field-reference":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-reference.js","./directives/data-types/form-field-reference-wrap":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-reference-wrap.js","./directives/data-types/form-field-select":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-select.js","./directives/data-types/form-field-tag":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-tag.js","./directives/data-types/form-field-text":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\form-field-text.js","./directives/data-types/select-location-search":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\data-types\\select-location-search.js","./directives/form-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\directives\\form-builder.js","./services/reference-objects-suggestion":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\services\\reference-objects-suggestion.js","third-party-modules/angular-sortable":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-sortable\\sortable.shim.js","third-party-modules/angular-summernote":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-summernote\\angular-summernote.shim.js","third-party-modules/jqueryui":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\jqueryui\\jqueryui.shim.js","third-party-modules/select2":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\select2\\select2.shim.js","third-party-modules/summernote":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\summernote\\summernote.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\asset-gallery.html":[function(require,module,exports){
module.exports = '<div class="asset-gallery-view">\n' +
    '    <div class="ag-tabs">\n' +
    '        <ul class="nav nav-tabs">\n' +
    '            <li ng-class="{\'active\':activeFilter===\'all\'}">\n' +
    '                <a class="hand" ng-click="getAssets(\'all\')">All</a>\n' +
    '            </li>\n' +
    '            <li ng-class="{\'active\':activeFilter===\'images\'}">\n' +
    '                <a class="hand" ng-click="getAssets(\'images\')">Images</a>\n' +
    '            </li>\n' +
    '            <li ng-class="{\'active\':activeFilter===\'videos\'}">\n' +
    '                <a class="hand" ng-click="getAssets(\'videos\')">Videos</a>\n' +
    '            </li>\n' +
    '            <li class="pull-right">\n' +
    '                <span  class="btn-refresh" ng-click="burstGalleryCache()"><i class="fa fa-refresh"></i> Refresh</span>\n' +
    '            </li>\n' +
    '        </ul>\n' +
    '    </div>\n' +
    '    <div class="ag-tabs-content grid-mode">\n' +
    '        <div class="tab-pane" id="ag-all" ng-class="{\'active\': activeFilter === \'all\'}">\n' +
    '            <div class="asset-box" ng-repeat="item in assets.all.data" ng-click="selected.item = item" ng-class="{active:isActive(item)}" ng-dblclick=\'itemDirectUpload(item)\'>\n' +
    '                <div class="asset-box-inner">\n' +
    '                    <div class="asset-preview-wrap">\n' +
    '                        <img ng-if="item.isImage" ng-src="{{item.url}}" alt="{{item.filename}}">\n' +
    '                        <div ng-if="!item.isImage" class="fa fa-file-text-o asset-preview-icon"></div>\n' +
    '                    </div>\n' +
    '                    <div class="asset-details-wrap">\n' +
    '                        <div class="asset-name" title="">{{item.filename}}</div>\n' +
    '                        <div class="asset-size-type ">{{item.file_size}}</div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="tab-loader">\n' +
    '            	<img alt="" src="images/loaders/block-loader.gif" />\n' +
    '            </div>\n' +
    '            <div class="btn btn-default btn-block btn-sm js-btn-load-more-all" ng-if="assets.all.data.length !== assets.all.total" ng-click="getMoreAssets(\'all\', $event)">Load more</div>\n' +
    '        </div>\n' +
    '        <div class="tab-pane" id="ag-images" ng-class="{\'active\': activeFilter === \'images\'}">\n' +
    '            <div class="asset-box" ng-repeat="item in assets.images.data" data-loading-text="Loading..." ng-click="selected.item = item" ng-class="{active:isActive(item)}" ng-dblclick=\'itemDirectUpload(item)\'>\n' +
    '                <div class="asset-box-inner">\n' +
    '                    <div class="asset-preview-wrap">\n' +
    '                        <img ng-if="item.isImage" ng-src="{{item.url}}" alt="{{item.filename}}">\n' +
    '                        <div ng-if="!item.isImage" class="fa fa-file-text-o asset-preview-icon"></div>\n' +
    '                    </div>\n' +
    '                    <div class="asset-details-wrap">\n' +
    '                        <div class="asset-name" title="">{{item.filename}}</div>\n' +
    '                        <div class="asset-size-type ">{{item.file_size}}</div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="tab-loader">\n' +
    '                <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '            </div>\n' +
    '            <div class="btn btn-default btn-block btn-sm js-btn-load-more-images" data-loading-text="Loading..." ng-if="assets.images.data.length !== assets.images.total" ng-click="getMoreAssets(\'images\', $event)">Load more</div>\n' +
    '        </div>\n' +
    '        <div class="tab-pane" id="ag-videos" ng-class="{\'active\': activeFilter === \'videos\'}">\n' +
    '            <div class="asset-box" ng-repeat="item in assets.videos.data" ng-click="selected.item = item" ng-class="{active:isActive(item)}" ng-dblclick=\'itemDirectUpload(item)\'>\n' +
    '                <div class="asset-box-inner">\n' +
    '                    <div class="asset-preview-wrap">\n' +
    '                        <img ng-if="item.isImage" ng-src="{{item.url}}" alt="{{item.filename}}">\n' +
    '                        <div ng-if="!item.isImage" class="fa fa-file-text-o asset-preview-icon"></div>\n' +
    '                    </div>\n' +
    '                    <div class="asset-details-wrap">\n' +
    '                        <div class="asset-name" title="">{{item.filename}}</div>\n' +
    '                        <div class="asset-size-type ">{{item.file_size}}</div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="tab-loader">\n' +
    '                <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '            </div>\n' +
    '            <div class="btn btn-default btn-block btn-sm js-btn-load-more-videos" data-loading-text="Loading..." ng-if="assets.videos.data.length !== assets.videos.total" ng-click="getMoreAssets(\'videos\', $event)">Load more</div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-boolean.html":[function(require,module,exports){
module.exports = '<div class="checkbox">\n' +
    '    <label>\n' +
    '        <input type="checkbox" class="checkbox style-0" ng-model="ctx[prop]">\n' +
    '        <span></span>\n' +
    '    </label>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-file.html":[function(require,module,exports){
module.exports = '<div ng-switch on="fileUploaded">\n' +
    '\n' +
    '    <div class="object-asset-container media attachment-box" ng-switch-when=\'true\'>\n' +
    '        <div class="media-image attachment-preview pull-left">\n' +
    '            <div ng-hide="upload.isImage" class="attachment-file-icon fa fa-file-text-o"></div>\n' +
    '            <a href="{{upload.url}}" target="_blank" class="attachment-preview-link">\n' +
    '                <img ng-show="upload.isImage" ng-src="{{upload.url}}" alt="{{upload.filename}}" class="block-element">\n' +
    '            </a>\n' +
    '        </div>\n' +
    '        <div class="media-body attachment-info">\n' +
    '            <div class="attachment-name" title="{{upload.filename}}">{{upload.filename}}</div>\n' +
    '            <div class="attachment-size">{{upload.file_size}}</div>\n' +
    '        </div>\n' +
    '        <div class="remove-attachment-icon fa fa-times" ng-click="removeUpload()"></div>\n' +
    '    </div>\n' +
    '\n' +
    '     \n' +
    '    <div ng-switch-when=\'false\'>\n' +
    '        \n' +
    '        <div ng-show="progressstatus" class="object-asset-progress">\n' +
    '            <div class="progress progress-striped active">\n' +
    '                <div class="progress-bar bg-color-darken" role="progressbar" style="width: 100%">\n' +
    '                    Uploading...\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    <div ng-if="!viewonly">\n' +
    '        <div ng-show="!progressstatus" file-upload authtoken="authtoken" url="url" apikey="apikey" apihost="apihost" prop="prop" randvalue="randvalue">\n' +
    '            <div class="pull-left">\n' +
    '                <div class="upload-file-button-wrap">\n' +
    '                    <div class="btn txt-color-white bg-color-blue fileinput-button"> <i class="fa fa-plus"></i> \n' +
    '                        <span>Upload file...</span>\n' +
    '                        <input type="file" class="object-file-input object-field-input invisible-input" name="upload[upload]" onchange="angular.element(this).scope().uploadFile(this)">\n' +
    '                    </div>\n' +
    '                    <span class="ml5">or</span>\n' +
    '                    <a class="btn-asset-gallery" ng-click="showGallery()">Choose from uploads</a>\n' +
    '                </div>\n' +
    '                <div class="field-asset-preview-wrap"></div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    \n' +
    '        <span href="" ng-if="viewonly" class="btn btn-link btn-sm mb15 ng-scope" disabled="">---</span>\n' +
    '    \n' +
    '    </div>\n' +
    '</div>\n' +
    '\n' +
    '\n' +
    '\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-group.html":[function(require,module,exports){
module.exports = '<div class="group-wrap" ng-class="{\'multiple group-tracker\': field.multiple}" data-name="{{prop}}">\n' +
    '	<div class="group-header-wrap" ng-if="field.data_type == \'group\' && field.multiple">\n' +
    '		<span class="header-icon"></span>\n' +
    '		<h2 class="ml20">{{prop}}</h2>\n' +
    '		<div class="jarviswidget-ctrls" role="menu">\n' +
    '			<a class="button-icon btn-toggle-group" ng-click="toggleGroup()">\n' +
    '				<i class="fa fa-caret-down"></i>\n' +
    '			</a>\n' +
    '		</div>\n' +
    '	</div>\n' +
    '  <div ng-repeat="fld in field.schema" form-field authtoken="authtoken" field="fld" obj="obj" ctx="ctx[prop]" apikey="apikey" viewonly="viewonly">\n' +
    '  </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-isodate.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '    <input type="text" class="form-control datetimepicker pull-left mr10" ng-blur="onDateTimePickerBlur($event)" ng-model="faked.dt"  data-date-format="MMMM Do YYYY, h:mm:ss a" />\n' +
    '    <select class="timeSelecter form-control timezone-select" ng-options="select as select for select in timeZone" ng-model="faked.zone">\n' +
    '    </select>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-link.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '  <input type="text" class="form-control mb10" ng-model="ctx[prop][\'title\']" placeholder="A title for your link">\n' +
    '  <input type="text" class="form-control" ng-model="ctx[prop][\'href\']" placeholder="URL">\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-location.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '    <div class="ol-header">\n' +
    '        <div class="media">\n' +
    '            <div class="pull-right smart-form">\n' +
    '            		<label class="toggle">\n' +
    '            		    <input type="checkbox" name="checkbox-toggle" ng-model="locationStatus" ng-change="locationStatus!=locationStatus">\n' +
    '            		    <i data-swchon-text="ON" data-swchoff-text="OFF"></i>\n' +
    '            		</label>\n' +
    '            </div>\n' +
    '            <div class="media-body">\n' +
    '                Location\n' +
    '            </div>\n' +
    '        </div>    \n' +
    '    </div>\n' +
    '    <div class="ol-content" ng-if="hasLocationTag">\n' +
    '        <div class="row">\n' +
    '        	<div class="col-sm-6">\n' +
    '            <label>Latitude </label>\n' +
    '            <input class="form-control" type="text" ng-model="loc.lat" ng-value="loc.lat" />\n' +
    '          </div>\n' +
    '        	<div class="col-sm-6">\n' +
    '            <label>Longitude </label>\n' +
    '            <input class="form-control" type="text" ng-model="loc.lng" ng-value="loc.lng" />\n' +
    '          </div>\n' +
    '          <div class="col-sm-12">\n' +
    '          	<div id="js-select2-loc-search" select-location-search search-reference="searchRef" on-selected-reference="onSelectedSearchlocation"></div>\n' +
    '          </div>\n' +
    '        </div>\n' +
    '        \n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-mixed.html":[function(require,module,exports){
module.exports = '<textarea class="form-control" ng-model="mmixed">';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-number.html":[function(require,module,exports){
module.exports = '<input type="text" class="form-control" ng-model="mnumber">';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-overlay.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="cancel()">×</button>\n' +
    '    <h4 class="modal-title">Choose file</h4>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '    <div asset-gallery></div>\n' +
    '</div>\n' +
    '<div class="modal-footer">\n' +
    '    <div class="button-wrap">\n' +
    '        <a ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '            </span>Cancel\n' +
    '        </a>\n' +
    '        <a ng-click=\'ok()\' class="btn btn-labeled btn-primary btn-sm pull-right">\n' +
    '            <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '            </span>Done\n' +
    '        </a>\n' +
    '    </div>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-password.html":[function(require,module,exports){
module.exports = '<input type="password" class="form-control" ng-model="ctx[prop]" ng-value="ctx[prop]">';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-reference-wrap.html":[function(require,module,exports){
module.exports = '<div ng-model="ctx[field.uid]">\n' +
    '  <span href="" ng-if="viewonly" class="btn btn-link btn-sm mb15" disabled>---</span>\n' +
    '  <div class="mb10">\n' +
    '    <div class="clearfix">\n' +
    '	    <div class="pull-left"> \n' +
    '	    	<div form-field-reference classes="classes" field="field" obj="obj" ctx="ctx" apikey="apikey" ref-datum="refData" check="checkdata" klass="klass">  </div>\n' +
    '	    </div>\n' +
    '	</div>\n' +
    '  </div>\n' +
    '</div>\n' +
    '\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-reference.html":[function(require,module,exports){
module.exports = '<select class="form-control">\n' +
    '</select>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-tag.html":[function(require,module,exports){
module.exports = '<div></div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field-text.html":[function(require,module,exports){
module.exports = '<!--Initialize summernote when allow_rich_text is mandatorily truthy and multipline may or may not--> \n' +
    '<textarea ng-if="field.field_metadata.allow_rich_text" class="form-control richtextarea" summernote config="summernoteConfig" ng-model="ctx[prop]"></textarea>\n' +
    '\n' +
    '<!--neither richtet nor multiline -->\n' +
    '<input type="text" class="form-control" ng-model="ctx[prop]" ng-if="!field.field_metadata.allow_rich_text && !field.field_metadata.multiline">\n' +
    '\n' +
    '<!--case if multiline is truthy and rich_text is not-->\n' +
    '<textarea ng-if="field.field_metadata.multiline && !field.field_metadata.allow_rich_text" class="form-control"  ng-model="ctx[prop]"></textarea>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\form-field.html":[function(require,module,exports){
module.exports = '<div ng-class="{\'group-outer-wrap group-tracker\': field.data_type == \'group\'}" data-name="{{field.display_name}}">\n' +
    '\n' +
    '    <div class="clearfix group-header-wrap" ng-if="field.data_type == \'group\'">\n' +
    '        <div class="header-ctrls" role="menu">\n' +
    '            <a class="button-icon btn-toggle-group" ng-click="toggleGroup()" ng-hide="(field.multiple == true && ctx[field.uid].length == 0)">\n' +
    '                <i class="fa fa-caret-down"></i>\n' +
    '            </a>\n' +
    '            <a href="javascript:void(0);" ng-if="(field.multiple == true && ctx[field.uid].length == 0) && !viewonly" ng-click="onAdd()" class="button-icon" rel="tooltip" title="" data-placement="bottom" data-original-title="Add"><i class="fa fa-plus"></i></a>\n' +
    '        </div>\n' +
    '        <span class="header-icon"> <i class="fa fa-lg fa-indent"></i> \n' +
    '        </span>\n' +
    '        <h2><sup ng-if="field.mandatory" class="m-star">*</sup> {{field.display_name}}</h2>\n' +
    '        </span>\n' +
    '    </div>\n' +
    '\n' +
    '\n' +
    '    <div ng-switch on="multiple" class="form-group">\n' +
    '        <label ng-if="field.data_type != \'group\'" class="col-sm-2 control-label">\n' +
    '            <sup ng-if="field.mandatory" class="m-star">*</sup> {{field.display_name}}\n' +
    '        </label>\n' +
    '\n' +
    '        <div ng-switch-when="reference" class="form-field-wrap col-sm-10 object-reference-wrap">\n' +
    '            <div form-field-reference-wrap field="field" obj="obj" ctx="ctx" apikey="apikey" on-add="onAdd" on-remove="onRemove" viewonly="viewonly">\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        \n' +
    '        <!--UI reference-->\n' +
    '        <div class="form-field-wrap col-sm-10 object-reference-wrap" ng-if="field.data_type === \'ui_reference\' && field.multiple">\n' +
    '            <div form-field-ui-reference-wrap classes="classes" field="field" obj="obj" ctx="ctx" apikey="apikey" viewonly="viewonly">\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <!--UI reference\\-->\n' +
    '\n' +
    '        <div ng-switch-when="true" ng-class="{\'col-sm-12\': field.data_type == \'group\', \'col-sm-10\': field.data_type != \'group\'}" ui-sortable="sortableOptions" ng-model="ctx[field.uid]">\n' +
    '\n' +
    '            <a href="" ng-if=\'(ctx[field.uid].length == 0 && field.data_type != "group") && !viewonly && (field.data_type !== "ui_reference")\' ng-click="onAdd()" class="btn bg-color-blue add-field btn-primary btn-sm mb15"><i class="fa fa-plus"></i></a>\n' +
    '            <span href="" ng-if=\'(ctx[field.uid].length == 0 && field.data_type != "group") && viewonly\' class="btn btn-link btn-sm mb15" disabled>---</span>\n' +
    '\n' +
    '            <div class="form-fields-multiple-wrap" ng-repeat="dat in ctx[field.uid] track by $index" ng-switch on="field.data_type">\n' +
    '                <div class="media">\n' +
    '                    <div class="pull-right grp-multiple-btn-wrap" ng-if=\'(field.data_type == "group") && !viewonly && (field.data_type !== "ui_reference")\'>\n' +
    '                        <div class="btn-group">\n' +
    '                            <a href="" ng-click="onRemove($index)" class="btn btn-danger remove-field btn-sm {{$index}}"><i class="fa fa-minus"></i></a>\n' +
    '                            <a href="" ng-class="{\'v-hidden\': !$last}" ng-click="onAdd()" class="btn bg-color-blue add-field btn-primary btn-sm"><i class="fa fa-plus"></i></a>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <div ng-class="{\'pull-left\': field.data_type != \'group\',\'media-body\': field.data_type == \'group\'}">\n' +
    '                        <div class="form-field-wrap" ng-switch-when="text" form-field-text field="field" obj="obj" ctx="ctx[field.uid]" prop="$index" viewonly="viewonly"></div>\n' +
    '                        <div class="form-field-wrap" ng-switch-when="password" form-field-password field="field" obj="obj" ctx="ctx[field.uid]" prop="$index" viewonly="viewonly"></div>\n' +
    '                        <div class="form-field-wrap" ng-switch-when="string" form-field-text field="field" obj="obj" ctx="ctx[field.uid]" prop="$index" viewonly="viewonly"></div>\n' +
    '                        <div class="form-field-wrap" ng-switch-when="number" form-field-number field="field" obj="obj" ctx="ctx[field.uid]" prop="$index" viewonly="viewonly"></div>\n' +
    '                        <div class="form-field-wrap object-isodate-wrap" ng-switch-when="isodate" form-field-isodate field="field" obj="obj" ctx="ctx[field.uid]" prop="$index" viewonly="viewonly"></div>\n' +
    '                        <div class="form-field-wrap" ng-switch-when="boolean" form-field-boolean field="field" obj="obj" ctx="ctx[field.uid]" prop="$index" viewonly="viewonly"></div>\n' +
    '                        <div class="form-field-wrap" ng-switch-when="link" form-field-link field="field" obj="obj" ctx="ctx[field.uid]" prop="$index" viewonly="viewonly"></div>\n' +
    '                        <div class="form-field-wrap" ng-switch-when="mixed" form-field-mixed field="field" obj="obj" ctx="ctx[field.uid]" prop="$index" viewonly="viewonly"></div>\n' +
    '                        <div class="form-field-wrap" ng-switch-when="select" form-field-select field="field" obj="obj" ctx="ctx[field.uid]" prop="$index" viewonly="viewonly"></div>\n' +
    '                        <div class="form-field-wrap" ng-switch-when="group" authtoken="authtoken" form-field-group viewonly="viewonly" field="field" obj="obj" ctx="ctx[field.uid]" prop="$index" apikey="apikey" viewonly="viewonly"></div>\n' +
    '                        <div class="form-field-wrap object-file-wrap" ng-switch-when="file" form-field-file field="field" obj="obj" ctx="ctx[field.uid]" authtoken="authtoken" prop="$index" apikey="apikey" apihost="apihost" viewonly="viewonly"></div>\n' +
    '\n' +
    '                        <!--The below code is made hidden beoz of ui-reference-->\n' +
    '                        <div class="form-field-wrap hidden" ng-switch-default form-field-text viewonly="viewonly" field="field" obj="obj" ctx="ctx[field.uid]" prop="$index"></div>\n' +
    '                    </div>\n' +
    '                    <div class="pull-left" ng-if=\'(field.data_type != "group") && !viewonly && (field.data_type != "ui_reference")\'>\n' +
    '                        <div class="btn-group">\n' +
    '                            <a href="" ng-click="onRemove($index)" class="btn btn-danger remove-field btn-sm {{$index}}"><i class="fa fa-minus"></i></a>\n' +
    '                            <a href="" ng-if="$last" ng-click="onAdd()" class="btn bg-color-blue add-field btn-primary btn-sm"><i class="fa fa-plus"></i></a>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '                <div class="fa fa-reorder field-sort-handle" ng-class="{\'btn-group-reorder\': field.data_type == \'group\'}" title="Drag to sort"></div>\n' +
    '            </div>\n' +
    '\n' +
    '        </div>\n' +
    '\n' +
    '        <div ng-switch-when="false" ng-switch on="field.data_type" ng-class="{\'col-sm-12\': field.data_type == \'group\', \'col-sm-10\': field.data_type != \'group\'}">\n' +
    '            <div class="form-field-wrap" ng-switch-when="text" viewonly="viewonly" form-field-text field="field" obj="obj" ctx="ctx" prop="field[\'uid\']"></div>\n' +
    '            <div class="form-field-wrap" ng-switch-when="password" viewonly="viewonly" form-field-password field="field" obj="obj" ctx="ctx" prop="field[\'uid\']"></div>\n' +
    '            <div class="form-field-wrap" ng-switch-when="string" viewonly="viewonly" form-field-text field="field" obj="obj" ctx="ctx" prop="field[\'uid\']"></div>\n' +
    '            <div class="form-field-wrap" ng-switch-when="number" viewonly="viewonly" form-field-number field="field" obj="obj" ctx="ctx" prop="field[\'uid\']"></div>\n' +
    '            <div class="form-field-wrap object-isodate-wrap" viewonly="viewonly" ng-switch-when="isodate" form-field-isodate field="field" obj="obj" ctx="ctx" prop="field[\'uid\']"></div>\n' +
    '            <div class="form-field-wrap" ng-switch-when="boolean" viewonly="viewonly" form-field-boolean field="field" obj="obj" ctx="ctx" prop="field[\'uid\']"></div>\n' +
    '            <div class="form-field-wrap" ng-switch-when="link" viewonly="viewonly" form-field-link field="field" obj="obj" ctx="ctx" prop="field[\'uid\']"></div>\n' +
    '            <div class="form-field-wrap" ng-switch-when="mixed" viewonly="viewonly" form-field-mixed field="field" obj="obj" ctx="ctx" prop="field[\'uid\']"></div>\n' +
    '            <div class="form-field-wrap" ng-switch-when="group" authtoken="authtoken" form-field-group viewonly="viewonly" field="field" obj="obj" ctx="ctx" prop="field[\'uid\']" apikey="apikey"></div>\n' +
    '            <div class="form-field-wrap object-file-wrap" ng-switch-when="file" form-field-file field="field" authtoken="authtoken" obj="obj" ctx="ctx" prop="field[\'uid\']" apikey="apikey" apihost="apihost" viewonly="viewonly"></div>\n' +
    '            <div class="form-field-wrap" ng-switch-when="select" form-field-select field="field" authtoken="authtoken" obj="obj" ctx="ctx" prop="field[\'uid\']" apikey="apikey" apihost="apihost" viewonly="viewonly"></div>\n' +
    '            <div ng-switch-default form-field-text viewonly="viewonly" field="field" obj="obj" ctx="ctx" prop="field[\'uid\']"></div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>\n' +
    '    ';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\partials\\formbuilder.html":[function(require,module,exports){
module.exports = '<div class="fb-group-ribbon">\n' +
    '    <ol class="breadcrumb">\n' +
    '        <i class="fa fa-indent ribbon-icon"></i>\n' +
    '        <li ng-repeat=\'g in groupRibbon track by $index\'>\n' +
    '            <a ng-click="scrollTo(g.id)">{{g.name}}</a>\n' +
    '        </li>\n' +
    '    </ol>\n' +
    '</div>\n' +
    '<form class="form-horizontal object-form" role="form">\n' +
    '    <div class="form-group form-field-wrap" ng-show="obj.uid">\n' +
    '        <label class="col-sm-2 control-label">Unique ID</label>\n' +
    '        <div class="col-sm-10">\n' +
    '            <input type="text" disabled="disabled" ng-model="obj.uid" class="form-control" />\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div ng-repeat="field in cls.schema" form-field field="field" obj="obj" ctx="obj" apikey="apikey" authtoken="authtoken" apihost="apihost" viewonly="viewonly">\n' +
    '    </div>\n' +
    '\n' +
    '    <div class="form-group form-field-wrap" ng-show="configureFieldOptions.tag">\n' +
    '        <label class="col-sm-2 control-label">Tags</label>\n' +
    '        <div class="col-sm-10">\n' +
    '            <div form-field-tag obj="obj" class="object-tags-input"></div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '\n' +
    '    <div class="form-group form-field-wrap" ng-if="!viewonly && configureFieldOptions.publish">\n' +
    '        <label class="col-sm-2 control-label">Publish this object</label>\n' +
    '        <div class="col-sm-10">\n' +
    '            <div class="checkbox">\n' +
    '              <label>\n' +
    '                  <input type="checkbox" class="checkbox style-0" ng-model="obj.published">\n' +
    '                  <span></span>\n' +
    '              </label>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '\n' +
    '    <div class="object-location-wrap" ng-show="configureFieldOptions.location">\n' +
    '        <div form-field-location  obj="obj"></div>\n' +
    '        <div id="object-geo-location-map"></div>\n' +
    '    </div>\n' +
    '</form>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\form-builder\\services\\reference-objects-suggestion.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$q',
  'builtApi',
  'appCacheService',
  'constants',
  function($q, builtApi, appCacheService, constants) {
    var construct = this.construct = function(uid, title) {
      return {
        id: uid,
        text: title
      }
    }

    function buildQuery(uids, title) {
      var uid = {
        query: JSON.stringify({
          uid: {
            '$in': uids
          }
        }),
        limit: constants.queryLimit,
        include_unpublished : true
      }

      var titleSearch = {};
      titleSearch[title] = {
        '$regex': uids,
        '$options': 'i'
      };

      var type = {
        query: JSON.stringify({
          '$or': [{
              uid: {
                '$regex': uids,
                '$options': 'i'
              }
            },
            titleSearch
          ]
        }),
         limit: constants.queryLimit,
         include_unpublished : true
      }
      return angular.isArray(uids) ? uid : type
    }

    this.get = function(apiKey, classUid, query, cls) {

      var title = ((cls.options && cls.options.title) || 'uid');

      var params = {
        options: {
          classUid: classUid,
          query: buildQuery(query, title)
        }
      }

      var promise = builtApi.Objects.getAll(params)
        .then(function(objs) {
          // if (angular.isArray(query)) {
            
          //   return query.map(function(uid) {
          //     var obj = R.find(R.where({
          //       uid: uid
          //     }), objs.objects);
          //     return construct(obj.uid, obj[title] || obj.uid);
          //   })
          // } else {
            return objs.objects.map(function(obj) {
              return construct(obj.uid, obj[title] || obj.uid);
            })
          // }
        })

      return $q.when(promise)
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\funnel-builder\\directives\\funnel-builder.js":[function(require,module,exports){
'use strict';
var funnelBuilderTemplate = require('../partials/funnel-builder.html');
module.exports = [
  '$compile',
  '$q',
  'eqService',
  'utilsService',
  'tip',
  function($compile, $q, eqService, Utils, TIP) {
    return {
      restrict: 'A',
      replace: true,
      scope: {
        funnel: "=",
        events: "=",
        getFunnelNow: "=",
        getFunnelCallback: "="
      },
      link: function(scope, elem, attrs) {
        var $template = angular.element(funnelBuilderTemplate);
        $compile($template)(scope);
        elem.append($template);
        var paSortMap = {
          b: null,
          a: null
        };
        var funnelNameInput = elem.find('.funnel-name-input');
        scope.funnelValidationArray = [];
        scope.validateFunnelNow = false;
        scope.funnelSteps = typeof scope.funnel.webui_payload == "string" ? JSON.parse(scope.funnel.webui_payload) : scope.funnel.webui_payload;

        scope.sortableOptions = {
          axis: "y",
          opacity: 1,
          scroll: "true",
          containment: "parent",
          placeholder: "ui-sortable-placeholder",
          handle: '.btn-sort-step',
          forcePlaceholderSize: true,
          start: function(e, ui) {
            console.log('start: ' + ui.item.index())
            paSortMap.b = ui.item.index();
            TIP.destroyAll($(elem));
          },
          stop: function(event, ui) {
            console.log('update: ' + ui.item.index())
            paSortMap.a = ui.item.index();
            sortPromiseArray();
          }
        };

        scope.$watch('getFunnelNow', function() {
          if (!scope.getFunnelNow)
            return;

          scope.validateFunnelNow = true;
          var actualFunnel = getFunnel();
          scope.getFunnelCallback(actualFunnel);
        });

        scope.addStep = function() {
          scope.funnelSteps.push({
            event_uid: "",
            query: {
              data: []
            }
          })
        }

        function getFunnel() {
          return $q.all([
              validateFunnelName(),
              getQuery()
            ])
            .then(function(pObjs) {
              var stepQueryArray = pObjs[1];
              /*
                pObjs is an array of results of all resolved promises. stepQueryArray contains the result of all steps.
                Possible values are boolean or a query object. Depending on this result, we come to know if a
                query has been created for that particular step. We can then add that query in our funnel.
              */
              return buildFunnel(stepQueryArray);
            });
        }

        function validateFunnelName() {
          var deferred = $q.defer();
          if (_.isEmpty(funnelNameInput.val())) {
            eqService.showErrorTips([funnelNameInput]);
            deferred.reject(false);
          } else {
            deferred.resolve(true);
          }
          return deferred.promise;
        }

        function sortPromiseArray() {
          if (paSortMap.a === paSortMap.b)
            return;

          var temp = scope.funnelValidationArray[paSortMap.a];
          scope.funnelValidationArray.splice(paSortMap.a, 1);
          scope.funnelValidationArray.splice(paSortMap.b, 0, temp);
        }

        function buildFunnel(stepQueryArray) {
          scope.funnel.events = [];
          scope.funnel.query = {};
          scope.funnelSteps.forEach(function(step, i) {

            console.log('building funnel', stepQueryArray, i)

            // Pushing event uids in events key.
            scope.funnel.events.push(step.event_uid);

            /*
              Adding query to funnel if present. Query needed for funnel is singular and has no $and/$or conditions.
              So we extract the 0th object from stepQueryArray[i].$or and add it in the funnel query.
            */
            if (_.isObject(stepQueryArray[i]) && !_.isEmpty(stepQueryArray[i]))
              scope.funnel.query['step' + (i + 1)] = stepQueryArray[i].$or[0];

          });

          // Store all funnel steps.
          scope.funnel.webui_payload = JSON.stringify(Utils.removeKey(scope.funnelSteps, '$$hashKey'));
          return scope.funnel;
        }

        function validateFunnel() {
          return $q.all(scope.funnelValidationArray.map(function(promiseObj) {
            return promiseObj.promise;
          }));
        }

        function getQuery() {
          return validateFunnel()
            .then(function(res) {
              return res;
            }, function(xhr) {
              throw xhr;
            }).finally(function() {
              scope.validateFunnelNow = false;
            });
        }

        function constructQuery(query) {
          var q = {};

          if (query._key === undefined) {
            if (_.isPlainObject(query) && _.isPlainObject(query.query)) {
              q = query;
              q['query'] = constructQuery(query.query)

              return q;
            } else {
              return query;
            }
          }

          q[query._key] = query._value instanceof Array ? _.map(query._value, constructQuery) : constructQuery(query._value);
          return q;
        }


      }
    }
  }
]
},{"../partials/funnel-builder.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\funnel-builder\\partials\\funnel-builder.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\funnel-builder\\directives\\step-view.js":[function(require,module,exports){
'use strict';
var stepViewTemplate = require('../partials/step-view.html');
module.exports = [
  '$compile',
  'eqService',
  '$q',
  'tip',
  'utilsService',
  function($compile, eqService, $q, TIP, Utils) {
    return {
      restrict: 'A',
      replace: true,
      scope: {
        step: "=",
        events: "=",
        stepIndex: "=",
        stepArray: "=",
        validateFunnelNow: "=",
        funnelValidationArray: "="
      },
      link: function(scope, elem, attrs) {
        var $template = angular.element(stepViewTemplate);
        $compile($template)(scope);
        elem.append($template);

        var deferred = $q.defer();
        var defaultPromiseObject = {
          promise: deferred.promise
        };

        scope.funnelValidationArray.push(defaultPromiseObject);

        var funnelEventSelect = elem.find('.js-funnel-event-select').eq(0);
        scope.currentEvent = null;

        // query builder
        scope.getQueryNow = false;
        scope.isStepExpanded = false;
        scope.isQbExpandable = false;
        scope.promiseArray = [];


        // Watch on validate Query
        scope.$watch('validateFunnelNow', function() {
          if (scope.validateFunnelNow) {
            validateRow();
          }
        });

        // Destroy promise object from array
        scope.$on('$destroy', function handleDestroyEvent() {
          scope.funnelValidationArray.splice(scope.funnelValidationArray.indexOf(defaultPromiseObject), 1);
        })

        scope.expandStep = function() {
          scope.isStepExpanded = true;
        }

        scope.contractStep = function() {
          scope.isStepExpanded = false;
          resetQuery();
        }

        scope.removeStep = function() {
          if (scope.stepArray.length === 2) {
            scope.currentEvent = null;
            scope.contractStep();
            funnelEventSelect.select2('val', '');
            return;
          }

          console.log('Removing step!')
          scope.stepArray.splice(scope.stepIndex, 1);
          TIP.repositionAll();
        }

        function resetQuery() {
          scope.step.query.data.length = 0;
        }

        function setDefaultPromise() {
          deferred = $q.defer();
          defaultPromiseObject.promise = deferred.promise;
        }

        function validateRow() {
          var currentEvent = funnelEventSelect.select2('data');
          var errorEls = [];
          if (_.isEmpty(currentEvent)) {
            deferred.reject(false);
            errorEls.push(elem.find('div.js-funnel-event-select').eq(0));

            // show error tooltips on elements.
            if (errorEls.length)
              eqService.showErrorTips(errorEls);

            setDefaultPromise();

          } else {
            validateQuery();
          }
        }

        function validateQuery() {
          if (!scope.isStepExpanded) {
            deferred.resolve(true);
            return;
          }

          scope.getQueryNow = true;
        }

        scope.queryCallback = function(getQuery) {
          getQuery.then(function(res) {
            deferred.resolve(res);
          }, function() {
            deferred.reject(false);
          }).finally(function() {
            scope.getQueryNow = false;
            setDefaultPromise();
          });
        }

        function initEventSelect() {
          funnelEventSelect.select2({
              placeholder: "Select an event",
              containerCssClass: 'select2-sm',
              data: scope.events.map(function(event) {
                event["id"] = event.uid;
                event["text"] = event.name;
                return event;
              })
            })
            .off('change').on('change', function(e) {
              onEventChange();
            });


          funnelEventSelect.off('select2-open').on('select2-open', function() {
            eqService.destroyTip(elem.find('.js-funnel-event-select').eq(0));
          });
        }

        function onEventChange() {
          Utils.sa(scope, function() {
            scope.currentEvent = funnelEventSelect.select2('data');
            scope.step.event_uid = funnelEventSelect.select2('val');
            scope.contractStep();
          })
        }

        function initialCheck() {
          if (_.isEmpty(scope.step.event_uid))
            return;

          funnelEventSelect.select2('val', scope.step.event_uid);
          scope.currentEvent = _.find(scope.events, function(e) {
            return e.uid === scope.step.event_uid;
          });
          
          if(scope.step.query.data.length)
            scope.expandStep();

        }

        initEventSelect();
        initialCheck();
      }
    }
  }
]
},{"../partials/step-view.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\funnel-builder\\partials\\step-view.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\funnel-builder\\funnel-builder.js":[function(require,module,exports){
'use strict';
//Directives
var funnelBuilder               = require('./directives/funnel-builder');
var stepView                    = require('./directives/step-view');


module.exports = angular.module('funnelBuilder', ['ui.sortable'])
  .directive('funnelBuilder', funnelBuilder)
  .directive('stepView', stepView)

},{"./directives/funnel-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\funnel-builder\\directives\\funnel-builder.js","./directives/step-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\funnel-builder\\directives\\step-view.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\funnel-builder\\partials\\funnel-builder.html":[function(require,module,exports){
module.exports = '<div class="funnel-builder">\n' +
    '    <div class="form-actions form-actions-top">\n' +
    '        <input type="text" class="form-control funnel-name-input" autofocus ng-model="funnel.name" placeholder="Enter funnel name..."/>\n' +
    '    </div>\n' +
    '    <div class="fb-step-wrap" ui-sortable="sortableOptions" ng-model="funnelSteps">\n' +
    '        <div ng-repeat="step in funnelSteps track by $id(step)">\n' +
    '            <div class="fb-step" validate-funnel-now="validateFunnelNow" funnel-validation-array="funnelValidationArray" step-view events="events" step="step" step-index="$index" step-array="funnelSteps"></div>\n' +
    '        </div>\n' +
    '        <button ng-click="addStep()" class="btn btn-default btn-lg btn-fb-add-step">\n' +
    '        	<i class="fa fa-plus-circle"></i> Add step\n' +
    '        </button>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\funnel-builder\\partials\\step-view.html":[function(require,module,exports){
module.exports = '<div class="panel panel-default fb-step-view">\n' +
    '    <div class="panel-heading">\n' +
    '        <h3 class="panel-title">\n' +
    '            <i class="fa fa-reorder btn-step-head btn-sort-step"></i>\n' +
    '            STEP {{stepIndex + 1 }}\n' +
    '        </h3>\n' +
    '        <a ng-click="removeStep()" class="hand btn-step-head btn-remove-step">\n' +
    '            <i class="fa fa-times"></i>\n' +
    '        </a>\n' +
    '    </div>\n' +
    '    <div class="panel-body">\n' +
    '        <div class="fb-step-inner clearfix">\n' +
    '            <div class="event-select-wrap pull-left">\n' +
    '                <input type="hidden" class="js-funnel-event-select" />\n' +
    '            </div>\n' +
    '            <div class="qb-row-toggler-wrap clearfix" ng-show="currentEvent && !isStepExpanded">\n' +
    '                <button class="btn bg-color-blue txt-color-white btn-sm" ng-click="expandStep()">\n' +
    '                    <i class="fa fa-angle-double-right"></i>\n' +
    '                </button>\n' +
    '            </div>\n' +
    '            <div class="events-query-builder-wrap" ng-if="currentEvent && isStepExpanded">\n' +
    '                <div events-query-builder="step.query" evnt="currentEvent" expandable="isQbExpandable" get-query-now="getQueryNow" get-query-callback="queryCallback" class="events-query-builder qb-single"></div>\n' +
    '            </div>\n' +
    '            <div class="qb-row-toggler-wrap clearfix" ng-show="isStepExpanded">\n' +
    '                <button class="btn bg-color-blue txt-color-white btn-sm" ng-click="contractStep()">\n' +
    '                    <i class="fa fa-angle-double-left"></i>\n' +
    '                </button>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\directives.js":[function(require,module,exports){
'use strict';
//Third Party Modules

var bootstrapDaterangepicker = require('./types/bootstrap-daterangepicker');
var bootstrapDatePicker      = require('./types/bootstrap-date-picker');
var breadcrumbs              = require('./types/breadcrumbs');
var btnLoader                = require('./types/btn-loader');  

module.exports = angular.module('global-directives', [])
.directive('bootstrapDatePicker', bootstrapDatePicker)
.directive('bootstrapDaterangepicker', bootstrapDaterangepicker)
.directive('breadcrumbs', breadcrumbs)
.directive('btnLoader', btnLoader);

},{"./types/bootstrap-date-picker":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\types\\bootstrap-date-picker.js","./types/bootstrap-daterangepicker":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\types\\bootstrap-daterangepicker.js","./types/breadcrumbs":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\types\\breadcrumbs.js","./types/btn-loader":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\types\\btn-loader.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\partials\\bootstrap-datepicker.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '    <input type="text" class="form-control js-datetimepicker {{pickerClass}}" ng-model="showDate" ng-keyup="checkDate($event)" />\n' +
    '    <select class="timeSelecter timezone-select js-timezone-select">\n' +
    '    	<option ng-repeat="zone in timeZone" value="{{zone}}">{{zone}}</option>\n' +
    '    </select>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\partials\\bootstrap-daterangepicker.html":[function(require,module,exports){
module.exports = '<div id="reportrange" class="pull-right">\n' +
    '    <i class="fa fa-calendar"></i>\n' +
    '    <span></span> <b class="caret"></b>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\partials\\breadcrumbs.html":[function(require,module,exports){
module.exports = '<ol class="breadcrumb">\n' +
    '  <li ng-repeat="crumb in breadcrumbs" ng-class="{ active: $last }">\n' +
    '  	<a ng-if="crumb.state" class="hand" ui-sref="{{crumb.state}}({{crumb.params}})">{{ crumb.name }} </a>\n' +
    '  	<span ng-if="!crumb.state">{{ crumb.name }}</span>\n' +
    '  </li>\n' +
    '</ol>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\types\\bootstrap-date-picker.js":[function(require,module,exports){
'use strict';
require('third-party-modules/bootstrap-datetimepicker')
var datepickerTemplate = require('../partials/bootstrap-datepicker.html');
module.exports = [
  '$compile',
  'utilsService',
  function(compile, Utils) {
    return {
      template: datepickerTemplate,
      restrict: 'A',
      replace: true,
      scope: {
        dateTime: '=',
        pickerClass: '=pickerClass',
        timeZoneSelectClass: '=timeZoneSelectClass'
      },
      link: function(scope, elem, attrs) {
        console.log("Bootstrap datetime: ", scope.dateTime);
        scope.timeZone = getTimeZones();
        scope.dateTime = scope.dateTime ? scope.dateTime : moment().format();

        scope.zone = scope.dateTime.substring(getDateIndex(scope.dateTime), scope.dateTime.length).replace(':', '');
        scope.zone = scope.zone.length === 0 ? getlocalTimeZone() : scope.zone;

        var dateTimeSelector = elem.find('.js-datetimepicker');
        var timeZoneSelector = elem.find('.js-timezone-select');

        scope.showDate = scope.dateTime ? getMomentDateTime(scope.dateTime) : '';
        scope.defaultDate = new Date(scope.dateTime) || "";

        //Date picker Initialization
        dateTimeSelector.datetimepicker({
          useSeconds: true,
          defaultDate: scope.defaultDate,
          format: 'MMM Do YYYY, h:mm:ss a',
          icons: {
            time: "fa fa-clock-o",
            date: "fa fa-calendar",
            up: "fa fa-arrow-up",
            down: "fa fa-arrow-down"
          }
        })



        dateTimeSelector.off('dp.change').on("dp.change", function(e) {
          scope.$apply(function() {
            scope.showDate = getMomentDateTime(e.date);
            setScope();
          })
        });

        console.log("Default time zone: ", scope.zone);
        timeZoneSelector.select2({
          containerCssClass: scope.timeZoneSelectClass,
          minimumResultsForSearch: -1
        });

        setTimeout(function(){
          timeZoneSelector.select2('val', scope.zone)
        }, 0);

        timeZoneSelector.off('change').on('change', function() {
          timeZoneChanged(timeZoneSelector.select2('val'));
        })

        function timeZoneChanged(zone) {
          Utils.sa(scope, function() {
            scope.zone = zone;
            setScope();
          });
        }


        elem.find('.timeSelecter')
          .on('change', function() {
            setScope();
          })

        scope.checkDate = function(e) {
          if (_.isEmpty($(e.currentTarget).val())) {
            scope.dateTime = "";
          }
        }

        function setScope() {
          var setDateTime = dateTimeSelector.val().trim();
          if (setDateTime.length > 0) {
            setDateTime = getISODateTime(dateTimeSelector.data("DateTimePicker").getDate());
            setDateTime = setDateTime.substring(0, getDateIndex(setDateTime));
            scope.dateTime = setDateTime + scope.zone;
          }
        }

        function getDateIndex(isoDate) {
          if (isoDate.lastIndexOf('.') !== -1)
            return isoDate.lastIndexOf('.');
          else if (isoDate.lastIndexOf('+') !== -1)
            return isoDate.lastIndexOf('+');
          else if (isoDate.lastIndexOf('-') !== -1)
            return isoDate.lastIndexOf('-');
        }

        function getMomentDateTime(date) {
          return moment(date).format('MMM Do YYYY, h:mm:ss a');
        }

        function getISODateTime(date) {
          return new Date(date).toISOString();
        }

        function getlocalTimeZone() {
          var date = moment().format();
          return date.substring(getDateIndex(date), date.length).split(':').join('');
        }

        function getTimeZones() {

          return [
            '-1200', '-1100',
            '-1000', '-0930',
            '-0900', '-0800',
            '-0700', '-0600',
            '-0500', '-0430',
            '-0400', '-0330',
            '-0300', '-0200',
            '-0100', '+0000',
            '+0100', '+0200',
            '+0300', '+0330',
            '+0400', '+0430',
            '+0500', '+0530',
            '+0545', '+0600',
            '+0630', '+0700',
            '+0800', '+0845',
            '+0900', '+0930',
            '+1000', '+1030',
            '+1100', '+1130',
            '+1200', '+1245',
            '+1300', '+1400'
          ];
        }


      }
    }
  }
]
},{"../partials/bootstrap-datepicker.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\partials\\bootstrap-datepicker.html","third-party-modules/bootstrap-datetimepicker":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\bootstrap-datetimepicker\\bootstrap-datetime-picker.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\types\\bootstrap-daterangepicker.js":[function(require,module,exports){
'use strict';
var daterangepickerTemplate = require('../partials/bootstrap-daterangepicker.html');

require('third-party-modules/bootstrap-daterangepicker');
module.exports = function() {
	return {
		restrict: 'A',
		replace: true,
		scope: {
			drpOptions: '=',
			dateRange: '=',
			onDateRangeChange: '='
		},
		template: daterangepickerTemplate,
		link: function(scope, elem, attrs) {
			var startDate = "";
			var endDate = "";

			var defaultOptions = {
				startDate: moment(scope.dateRange.startDate).format('MMM D, YYYY'),
				endDate: moment(scope.dateRange.endDate).format('MMM D, YYYY'),
				minDate: moment('01/01/2012').format('MMM D, YYYY'),
				maxDate: moment().format('MMM D, YYYY'),
				dateLimit: false,
				showDropdowns: true,
				showWeekNumbers: true,
				timePicker: false,
				timePickerIncrement: 1,
				timePicker12Hour: true,
				ranges: {
					'Today': [moment(), moment()],
					'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
					'Last 7 Days': [moment().subtract(6, 'days'), moment()],
					'Last 30 Days': [moment().subtract(29, 'days'), moment()],
					'This Month': [moment().startOf('month'), moment().endOf('month')],
					'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
				},
				opens: 'left',
				buttonClasses: ['btn btn-default'],
				applyClass: 'btn-small btn-primary',
				cancelClass: 'btn-small',
				format: 'MMM D, YYYY',
				separator: ' to ',
				locale: {
					applyLabel: 'Submit',
					cancelLabel: 'Clear',
					fromLabel: 'From',
					toLabel: 'To',
					customRangeLabel: 'Custom',
					daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
					monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
					firstDay: 1
				}
			};

			var opts = _.extend({}, defaultOptions, scope.dateRange['options'] || {});

			$('#reportrange span').html(moment(scope.dateRange.startDate).format('MMM D, YYYY') + ' - ' + moment(scope.dateRange.endDate).format('MMM D, YYYY'));

			$('#reportrange').daterangepicker(opts, function(start, end, label) {
				elem.find('span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
				scope.dateRange.startDate = start.format('YYYY-MM-DD');
				scope.dateRange.endDate = end.format('YYYY-MM-DD');
				scope.onDateRangeChange();
			});
		}
	}
}
},{"../partials/bootstrap-daterangepicker.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\partials\\bootstrap-daterangepicker.html","third-party-modules/bootstrap-daterangepicker":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\bootstrap-daterangepicker\\bootstrap-daterange-picker.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\types\\breadcrumbs.js":[function(require,module,exports){
'use strict';

var breadcrumbsTpl = require('../partials/breadcrumbs.html');
module.exports = [
  '$rootScope',
  '$state',
  'utilsService',
  '$timeout',
  '$injector',
  function($rootScope, $state, Utils, $timeout, $injector) {
    return {
      template: breadcrumbsTpl,
      restrict: 'A',
      replace: true,
      scope: {},
      link: function(scope, elem, attrs) {
        scope.breadcrumbs = [];
        $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
          $timeout(function() {
            Utils.sa(scope, function() {
              updateBreadcrumbs($state);
            });
          }, 0);
        });

        updateBreadcrumbs($state);

        function updateBreadcrumbs(currentState) {
          if (!Utils.getPath(currentState, '$current.data.breadcrumbs')) {
            scope.breadcrumbs.length = 0;
            return;
          }

          // check breadcrumb data for any interpolation. 
          // Also the breadcrumbs are cloned to remove reference from the current state.
          scope.breadcrumbs = _.map(_.cloneDeep(currentState.$current.data.breadcrumbs), function(crumb) {
            crumb.name = interpolateName(crumb.name, currentState);
            if (crumb.params){
              crumb.params.p = 1;
              crumb.params = interpolateStateParams(crumb.params, currentState);
            }
            return crumb;
          });
        }

        function interpolateStateParams(params, state) {
          for (var key in params) {
            params[key] = interpolateName(params[key], state);
          }
          return params;
        }

        function interpolateName(name, state) {
          if (!_.contains(name, '{{'))
            return name;

          return Utils.getPath(state, '$current.locals.globals.' + name.replace(/[{}]/g, '')) || name;
        }
      }
    }
  }
]
},{"../partials/breadcrumbs.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\partials\\breadcrumbs.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\types\\btn-loader.js":[function(require,module,exports){
'use strict';
module.exports = function() {
    return {
      restrict: 'A',
      replace: false,
      scope: {
        btnLoader : "=",
        loadingText : "@"
      },
      link: function(scope, elem, attrs) {
        var textSelect = elem.find('.js-btn-text');
        var btnText = textSelect.text();
        scope.$watch('btnLoader', function(){
          if(scope.btnLoader){
            elem.attr('disabled', 'disabled');
            textSelect.text(scope.loadingText);  
          }
          else{
            elem.removeAttr('disabled', 'disabled');
            textSelect.text(btnText);
          }
        })
      }
    }
}
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\global.js":[function(require,module,exports){
var angular = require('third-party-modules/angular');

require('third-party-modules/angular-ui-bootstrap');
require('./directives/directives');

var alerts                = require('./services/alerts');
var appCache              = require('./services/app-cache');
var constants             = require('./services/constants');
var utils                 = require('./services/utils');
var modal                 = require('./services/modal');
var library               = require('./services/library');
var previousStateService  = require('./services/previous-state'); 

module.exports = angular.module('global', ['ui.bootstrap', 'global-directives'])
	.service('alertService', alerts)
	.service('appCacheService', appCache)
	.service('constants', constants)
	.service('utilsService', utils)
	.service('modalService', modal)
  .service('previousStateService', previousStateService)
	.service('libraryService', library);
},{"./directives/directives":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\directives\\directives.js","./services/alerts":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\alerts.js","./services/app-cache":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\app-cache.js","./services/constants":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\constants.js","./services/library":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\library.js","./services/modal":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\modal.js","./services/previous-state":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\previous-state.js","./services/utils":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\utils.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-ui-bootstrap":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-bootstrap\\ui-bootstrap.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\alerts.js":[function(require,module,exports){
require('third-party-modules/smartadmin/notification');
require('third-party-modules/pnotify');

var notifyOptions = {
	title: "",
	text: "",
	styling: 'fontawesome',
	width: '420px',
	delay: 6000,
	mouse_reset: false
}

var confirmOptions = {
	title: '',
	content: '',
	classes: 'fa-exclamation-triangle txt-color-redLight',
	buttons: '[No][Yes]'
}

var type = {
	success: {
		icon: 'fa fa-check',
		color: '#739E73'
	},
	info: {
		icon: 'fa fa-bell swing animated',
		color: '#3276B1'
	},
	warning: {
		icon: 'fa fa-exclamation-triangle swing animated',
		color: '#739E73'
	},
	error: {
		icon: 'fa fa-warning shake animated',
		color: '#C46A69'
	}
}


module.exports = ['$q',
	function($q) {

		this.notify = function(o) {
			var options = _.extend({}, notifyOptions, o, type[o.type]);
			options.text = options.content;
			new PNotify(options);
		}

		this.confirm = function(o) {
			var p = $q.defer();
			var classes = o.classes || confirmOptions.classes;
			o.title = '<i class="fa ' + classes + ' mr5"></i> ' + o.title;
			var bc = _.extend({}, confirmOptions, o);

			$.SmartMessageBox(bc, function(b) {
				if (b === "Yes") {
					p.resolve();
				}
				if (b === "No") {
					p.reject();
				}
			});
			return p.promise;
		}
	}
]
},{"third-party-modules/pnotify":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\pnotify\\pnotify.shim.js","third-party-modules/smartadmin/notification":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\smartadmin\\notification\\notifications.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\app-cache.js":[function(require,module,exports){
  'use strict';
  module.exports = [
    '$rootScope',
    '$cacheFactory',
    '$q',
    function($rootScope, $cache, $q) {
      var caches = [];
      var that = this;
      var appCache = $cache('appCache');

      this.then = function(cacheKey, promise) {
        return promise.then(function(data) {
          that.set(cacheKey, data);
          return data;
        }, function(error) {
          return $q.reject(error);
        });
      }

      this.set = function(cacheKey, data) {
        var val = appCache.put(cacheKey, data);
        caches.push(cacheKey);

        $rootScope.$broadcast(cacheKey, {
          data: data,
          set: true
        });
        return val;
      }

      this.get = function(cacheKey) {
        return appCache.get(cacheKey);
      }

      this.getInfo = function() {
        return appCache.info();
      }

      this.remove = function() {

        var cacheKeys = arguments instanceof Array ? arguments : Array.prototype.slice.call(arguments, 0);

        
        var values = [];
        for (var i = 0; i < cacheKeys.length; i++) {
          values.push(appCache.remove(cacheKeys[i]));
          caches.splice(_.indexOf(caches, cacheKeys[i]), 1);
          $rootScope.$broadcast(cacheKeys[i], {
            remove: true
          });
        };

        if (values.length === 1) {
          return cacheKeys[0];
        } else {
          return values;
        }
      }

      this.removeAll = function() {
        appCache.removeAll();
        for (var i = 0; i < caches.length; i++) {
          $rootScope.$broadcast(caches[i], {
            remove: true
          });
        };
        caches.length = 0;
        caches = [];
        return void 0;
      }
    }
  ]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\constants.js":[function(require,module,exports){
module.exports = function() {
  var colorPalette = ["#73ac71", "#abc5e9", "#bfbca7", "#868d99", "#97bfb7", "#9a7a84", "#f18080", "#6d90bf", "#d7c876", "#70c6e5", "#ddd2cb", "#c494a2"];
  return {
    regex: {
      uid: /^[a-z][_a-z0-9]*$/,
      underscores: /_{2,}/g, // find 2 or more consecutive underscore.
      alphaNumericOnly: /\W/g
    },
    api_version: "v1",
    env_url: {
      stag: "stag-manage.built.io",
      prod: "manage.built.io"
    },
    braintree: {
      key: {
        dev: "MIIBCgKCAQEA/ke5+DNsQqFlkbJYu06SVvy5EmkqJP4DxdmdCMRzQXEI/Ifc5k/1ouV/sjGoEgZpXoII7UWHToV9ihxbLglDZyEsD0kVZC1wrymwJ4fL74eNejAYXB6LkLvjtIBsTBFCZBaOMNm0FENZKZ4eDV59gU1Snu/qyjC9gf3RrLyN+Si719ZPTgjpDEHsy6qs3QnA7O5N//lpnMk0F/3uxYM/KbRqzoxn+MSF/Eyd4aznhvcHjKHCzGrm/U+PdobdpbHtSmcDkO3xXEuhYpsRweuuuYQdju9ja1p+1J19PtB0fITuXD9USbLk6qBuMIheVHa90R9Y4+TExn3H4RLKEtabZQIDAQAB",
        prod: "MIIBCgKCAQEAoUtttRcU85V0ayPptLEsEgXjyD9UYJ08KTOFojkV4Lg6kAMX/LOPJa4jmS9EeoqHXRl8bI0+kYumPHbUCD/m6ZTk0EsSaC2ZP7cTa25a1lEs9mRnxA9ZRIK+1mc3b01K5Gs1KFr1UptfB/EvzLxJHS6djx22ZF7ZazG4/oWXLqbPy3V43xkLQ8U49dtAxO/eoHTw8Ve9mjXINtSENeKWrNXhrUUvuJkJ7igRgL+Yp/LCAnzLWN/9oEsGLVx/0Rj/o/xt/MMv6+71tNLFC3VPivGnMaL301HI2IUxCZ70c3ZTyt1+dCAyTbkTiW8kl8PITROtmbYK63BO0NxQdaQ22QIDAQAB"
      }
    },
    analytics: {
      defaults: {
        funnelQuery: {
          name: "",
          events: [],
          query: {},
          webui_payload: [{
            event_uid: "",
            query: {
              data: []
            }
          }, {
            event_uid: "",
            query: {
              data: []
            }
          }]
        },
        eventSearchParams: {
          event: {
            only: {
              name: [],
              category: []
            }
          },
          include_event_details: false,
          unit: "day"
        },
        charts: {
          line: {
            chart: {
              type: 'line',
              zoomType: 'x',
              backgroundColor: 'transparent'
            },
            title: {
              text: '',
            },
            subtitle: {
              text: '',
            },
            legend: {
              align: 'top',
              verticalAlign: 'top',
              x: 0,
              y: 0
            },
            xAxis: {
              type: 'datetime',
              //categories: this.rawGraphData["series"],
              maxZoom: 14 * 24 * 3600000,
              title: {
                text: ''
              },
              dateTimeLabelFormats: {
                day: '%b %e'
              }
            },
            yAxis: {
              title: {
                text: 'Events count'
              },
              gridLineColor: '#E2E2E2',
              min: 0
            },
            tooltip: {
              valueSuffix: '',
              formatter: function() {
                var color = this.series.color;
                return '<small>' + Highcharts.dateFormat("%b %e, %Y", this.x) + '</small><br/><div style="color: ' + color + '">' + this.series['name'] + ' : <b>' + this.y + '</b></div>';
              },
            },
            credits: {
              enabled: false
            }
          },
          pie: {
            chart: {
              type: 'pie',
              backgroundColor: 'transparent'
            },
            title: {
              text: ''
            },
            subtitle: {
              text: ''
            },
            xAxis: {
              categories: []
            },
            yAxis: {
              title: {
                text: 'Events count'
              },
              gridLineColor: '#E2E2E2'
            },
            plotOptions: {
              pie: {
                allowPointSelect: true,
                cursor: 'pointer'
              }
            },
            tooltip: {
              formatter: function() {
                return '<b>' + this.point.name + '</b>: ' + Highcharts.numberFormat(this.percentage, 2) + ' %';
              }
            },
            credits: {
              enabled: false
            }
          },
          bar: {
            chart: {
              type: 'column',
              marginRight: 25,
              backgroundColor: 'transparent'
            },
            title: {
              text: ''
            },
            subtitle: {
              text: ''
            },
            xAxis: {
              categories: [],
              labels: {
                rotation: 0
              }
            },
            yAxis: {
              title: {
                margin: 30,
                text: 'Events count'
              },
              labels: {
                align: 'left'
              },
              gridLineColor: '#E2E2E2'
            },

            tooltip: {
              shared: true,
              useHTML: true,
              headerFormat: '<small>{point.key}</small><table>',
              pointFormat: '<tr><td style="color: {series.color}">Count: </td>' + '<td><b>{point.y}</b></td></tr>',
              footerFormat: '</table>',
              valueDecimals: 0
            },
            credits: {
              enabled: false
            },
            legend: {
              enabled: false
            }
          }
        }
      }
    },
    queryLimit: 50,
    charts: {
      colorPalette: colorPalette,
      defaults: {
        line: {
          chart: {
            type: 'line',
            zoomType: 'x',
            backgroundColor: 'transparent'
          },
          title: {
            align: "left",
            text: '',
            margin: 25
          },
          subtitle: {
            text: '',
          },
          xAxis: {
            type: 'datetime',
            gridLineWidth: 0,
            // gridLineColor: '#f1f1f1'
            //categories: this.rawGraphData["series"],
            maxZoom: 14 * 24 * 3600000,
            title: {
              text: ''
            },
            dateTimeLabelFormats: {
              day: '%b %e',
              month: '%b %y',
              year: '%Y'
            },
            labels: {
              enabled: true
            }
          },
          yAxis: {
            gridLineWidth: 0,
            title: {
              text: 'Count'
            },
            labels: {
              enabled: true
            },
            min: 0
          },
          tooltip: {
            valueSuffix: '',
            formatter: function() {
              var color = this.series.color;
              return '<small>' + Highcharts.dateFormat("%b %e, %Y", this.x) + '</small><br/><div>' + this.series['name'] + ' : <b>' + this.y + '</b></div>';
            },
          },
          credits: {
            enabled: false
          },
          legend: {
            enabled: true,
            align: 'center',
            verticalAlign: 'bottom',
            x: 0,
            y: 0,
            borderWidth: 0
          }
        }
      }
    },
    classes: {
      creationSteps: ['info', 'fields', 'configuration'],
      defaultClassData: {
        uid: '',
        title: '',
        schema: [],
        abilities: {
          create_object: true,
          delete_all_objects: true,
          delete_object: true,
          get_all_objects: true,
          get_one_object: true,
          update_object: true
        },
        DEFAULT_ACL: {
          others: [],
          roles: [],
          users: []
        }
      },
      inbuiltFields: [{
        uid: "uid",
        data_type: "text",
        display_name: "UID",
      }, {
        uid: "app_user_object_uid",
        data_type: "reference",
        display_name: "Owner",
        reference_to: 'built_io_application_user'
      }, {
        uid: "created_at",
        data_type: "isodate",
        display_name: "Created at"
      }, {
        uid: "updated_at",
        data_type: "isodate",
        display_name: "Updated at"
      }]
    },
    defaultACL: {
      disable: false,
      roles: [],
      users: [],
      others: []
    },
    queryBuilder: {
      defaults: {
        group: {
          _key: '$and',
          _value: [{
            _key: '',
            _value: {},
            fieldData: {
              name: '',
              currentQueryPath: [],
              currentField: {}
            }
          }]
        },
        row: {
          _key: '',
          _value: {},
          fieldData: {
            name: '',
            currentQueryPath: [],
            currentField: {}
          }
        }
      }
    },
    googleMaps: {
      key: null,
      defaults: {
        lat: 37.74045209829323,
        lng: -122.4431164995849
      }
    },
    eventsQueryBuilder: {
      defaults: {
        group: {
          _key: '$or',
          _value: [{
            _key: '',
            _value: {},
            rowData: {
              datatype: 'string'
            }
          }]
        },
        row: {
          _key: '',
          _value: {},
          rowData: {
            datatype: 'string'
          }
        }
      }
    },
    deviceType :[{
      "id" : "ios",
      "text" : "iOS"
    },{
      "id" : "android",
      "text" : "Android"
    },{
      "id" : "other",
      "text": "other"
    }],
    timezones: [{
      "id": "-12:00",
      "text": "(GMT-12:00) Eniwetok, Kwajalein"
    }, {
      "id": "-11:00",
      "text": "(GMT-11:00) Midway Island, Samoa"
    }, {
      "id": "-10:00",
      "text": "(GMT-10:00) Hawaii"
    }, {
      "id": "-09:00",
      "text": "(GMT-09:00) Alaska"
    }, {
      "id": "-08:00",
      "text": "(GMT-08:00) Pacific Time (US & Canada)"
    }, {
      "id": "-07:00",
      "text": "(GMT-07:00) Mountain Time (US & Canada)"
    }, {
      "id": "-06:00",
      "text": "(GMT-06:00) Central Time (US & Canada)"
    }, {
      "id": "-05:00",
      "text": "(GMT-05:00) Eastern Time (US & Canada)"
    }, {
      "id": "-04:00",
      "text": "(GMT-04:00) Atlantic Time (Canada), Caracas, La Paz"
    }, {
      "id": "-03:30",
      "text": "(GMT-03:30) Newfoundland"
    }, {
      "id": "-03:00",
      "text": "(GMT-03:00) Brazil, Buenos Aires, Georgetown"
    }, {
      "id": "-02:00",
      "text": "(GMT-02:00) Mid-Atlantic"
    }, {
      "id": "-01:00",
      "text": "(GMT-01:00) Azores, Cape Verde Islands"
    }, {
      "id": "+00:00",
      "text": "(GMT+00:00) Western Europe Time, London, Lisbon, Casablanca"
    }, {
      "id": "+01:00",
      "text": "(GMT+01:00) Berlin, Copenhagen, Madrid, Paris"
    }, {
      "id": "+02:00",
      "text": "(GMT+02:00) Kaliningrad, South Africa"
    }, {
      "id": "+03:00",
      "text": "(GMT+03:00) Baghdad, Riyadh, Moscow, St. Petersburg"
    }, {
      "id": "+03:30",
      "text": "(GMT+03:30) Tehran"
    }, {
      "id": "+04:00",
      "text": "(GMT+04:00) Abu Dhabi, Muscat, Baku, Tbilisi"
    }, {
      "id": "+04:30",
      "text": "(GMT+04:30) Kabul"
    }, {
      "id": "+05:00",
      "text": "(GMT+05:00) Ekaterinburg, Islamabad, Karachi, Tashkent"
    }, {
      "id": "+05:30",
      "text": "(GMT+05:30) Mumbai, Kolkata, Chennai, New Delhi"
    }, {
      "id": "+05:45",
      "text": "(GMT+05:45) Kathmandu"
    }, {
      "id": "+06:00",
      "text": "(GMT+06:00) Almaty, Dhaka, Colombo"
    }, {
      "id": "+06:30",
      "text": "(GMT+06:30) Yangon (Rangoon)"
    }, {
      "id": "+07:00",
      "text": "(GMT+07:00) Bangkok, Hanoi, Jakarta"
    }, {
      "id": "+08:00",
      "text": "(GMT+08:00) Beijing, Perth, Hong Kong, Singapore"
    }, {
      "id": "+09:00",
      "text": "(GMT+09:00) Tokyo, Seoul, Osaka, Sapporo, Yakutsk"
    }, {
      "id": "+09:30",
      "text": "(GMT+09:30) Adelaide, Darwi"
    }, {
      "id": "+10:00",
      "text": "(GMT+10:00) Eastern Australia, Guam, Vladivostok"
    }, {
      "id": "+11:00",
      "text": "(GMT+11:00) Magadan, Solomon Islands, New Caledonia"
    }, {
      "id": "+12:00",
      "text": "(GMT+12:00) Auckland, Wellington, Fiji, Kamchatka"
    }]
  }
}
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\library.js":[function(require,module,exports){
'use strict';
module.exports = [
	'$q',
	'$rootScope',
	function($q, $rootScope) {

		var libraries = [];
		var libRequests = {}

		/**
		 * Registers the library name and resolves all the promises of the library
		 * which are stored in the libRequests.
		 * @param  {[type]} lib [description]
		 * @return {[type]}     [description]
		 */
		this.register = function(lib) {
			libraries.push(lib);

			if (!libRequests[lib])
				return

			for (var i = 0; i < libRequests[lib].length; i++) {
				libRequests[lib][i].resolve();
			};
		}

		this.has = function(lib) {
			return libraries.indexOf(lib) > -1;
		}
		/**
		 * Checks if library requested is registered. If yes, resolves success.
		 * If not, queues up the promise and resolves it later when the library is registered.
		 * @param  {string} lib - The library name.
		 * @return {promise}
		 */
		this.get = function(lib) {
			if (libraries.indexOf(lib) > -1) {
				return $q.when(lib);
			} else {
				var deferred = $q.defer();
				libRequests.hasOwnProperty(lib) ? libRequests[lib].push(deferred) : libRequests[lib] = [deferred];
				return deferred.promise;
			}
		}
	}
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\modal.js":[function(require,module,exports){
module.exports = [
  '$q',
  '$modal',
  function($q, $modal) {
    this.openModal = function(data, template, controller, options) {
      var defaultOptions = {
        template: template,
        backdrop: 'static',
        keyboard: true,
        controller: controller,
        size: '',
        resolve: {
          data: function() {
            return data;
          }
        }
      }
      var modalInstance = $modal.open(_.extend({}, defaultOptions, options || {}));
      return modalInstance.result;
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\previous-state.js":[function(require,module,exports){
/***
*@name Previous state 
*@type Service
*@desc This service is use to maintain the previous route in its sub-state. 
*@example In case of pagination, once an item on page 3 is edited, it should be redirected to first page
 and not the same page.
***/
'use strict';
module.exports = [
  '$state',
  function($state) {
    var previousStateName   = "";
    var previousParams  = "";

    this.go = function(fallbackStateName, fallbackParams) {
      var state   = _.isEmpty(previousStateName) ? fallbackStateName : previousStateName;
      var params  = _.isEmpty(previousStateName) ? fallbackParams : previousParams;
      $state.go(state, params);
    }

    this.set = function(stateName, params) {
      previousStateName   = stateName;
      previousParams      = params;
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\tip.js":[function(require,module,exports){
require('third-party-modules/qtip');

module.exports = [
	function() {

		this.destroyAll = function(container) {
			var container = container || $('body');
			container.find(".qtip").qtip("destroy");
			container.find("[data-hasqtip]").qtip("destroy");
		}

		this.repositionAll = function() {
			$(".qtip").qtip("reposition");
		}

		this.destroy = function(el) {
			el.qtip("destroy");
		}

		this.show = function(el, o) {
			var tooltip = el.qtip(_.extend({}, (o || {})));
			tooltip.qtip("show");
		}
	}
]
},{"third-party-modules/qtip":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\qtip\\qtip.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\utils.js":[function(require,module,exports){
'use strict';

var traverse = require('traverse');

module.exports = [
	'constants',
	'alertService',
	function(constants, Alert) {
		var self = this;
		
		/**
		 * Parses server error and returns html string.
		 * @param  {object} data   - Error object
		 * @param  {object} schema - Pass the class schema to interpolate path with the value
		 *                         	 in the schema given by the server in the error.
		 * @return {string}
		 */
		this.parseError = function(data, schema) {
			var errorString = "";
			if (data && data.errors && data.errors instanceof Object) {
				for (var prop in data.errors) {
					if (prop == "errors") {
						errorString += "<span class='e-value'>" + data.errors[prop].toString() + "</span><br />"
					} else {
						if (schema && prop.match(/schema./) !== null) {
							var str = this.getPath({
								schema: schema
							}, prop);
							if (str) {
								data.errors[str] = data.errors[prop];
								delete data.errors[prop];
								prop = str;
							}
						}
						errorString += "<span class='e-key'>" + prop + " </span>" + "<span class='e-value'>" + data.errors[prop].toString() + "</span><br />"
					}
				}
			}
			return "<div class='parsed-error'>" + errorString + "</div>";
		}

		/**
		 * Scrolls the window or selector to the given position
		 * @param  {number} position  - The scroll position.
		 * @param  {jQuery object} - The jQuery selector
		 * @return {undefined}
		 */
		this.scrollTo = function(position, selector) {
			if (!selector)
				var selector = $('html, body');

			_.defer(function() {
				selector.animate({
					scrollTop: position || 0 + "px"
				}, 100);
			});
		}

		/**
		 * Returns a random number. Pass a pool of used random numbers to avoid duplicacy of numbers.
		 * @param  {Array} pool - Random number pool.
		 * @return {number}
		 */
		this.getRand = function(pool) {
			var num = Math.ceil(Math.random() * 1000000000);
			if (!pool)
				return num;

			if (pool.indexOf(num) !== -1)
				return getRand()

			pool.push(num);
			return num;
		}

		/**
		 * Applies scope to all inner scopes.
		 * @param  {object}   scope [description]
		 * @param  {Function} fn    [description]
		 * @return {[type]}         [description]
		 */
		this.sa = function(scope, fn) {
			if (fn)
				(scope.$$phase || scope.$root.$$phase) ? fn() : scope.$apply(fn);
			else {
				(scope.$$phase || scope.$root.$$phase) ? '' : scope.$apply();
			}
		}

		/**
		 * returns OS name depending upon the OS.
		 * @return {String} OS name
		 */
		this.getOS = function() {
			var p = navigator.platform.toUpperCase();
			if (p.indexOf('MAC') !== -1) {
				return 'mac';
			} else if (p.indexOf('WIN') !== -1) {
				return 'windows';
			} else if (p.indexOf('LINUX') !== -1) {
				return 'linux';
			} else {
				return 'other';
			}
		}

		/**
		 * Get Menus according to roles.
		 *
		 */
		this.getMenu = function(currentApp, currentUser) {
			var menu = JSON.parse(currentApp.application_variables.menu);
			var roleNames = currentUser.roles.map(function(role) {
				return role.name;
			});
			roleNames.push('default');
			var setMenu = menu.filter(function(obj) {
				var rights = _.flatten(roleNames.map(function(item) {
					return obj.data.roles[item].can;
				}))
				return rights.indexOf('access') >= 0;
			})
			console.log("setMenu", setMenu);
			return setMenu;
		}

		/**
		 * Creates UID from given string.
		 * @param  {string} str - The string to be converted to an UID.
		 * @return {string}
		 */
		this.createUID = function(str) {
			if (_.isEmpty(str))
				return
			str = str.replace(constants.regex.alphaNumericOnly, '_');
			str = str.replace(constants.regex.underscores, '_');
			return str.toLowerCase();
		}

		this.getFileInfo = function(asset) {
			var fileName = asset.filename || asset.name;
			var fileSize = asset.file_size || asset.size;
			var index = fileName.lastIndexOf(".") + 1;

			return self.bytesToSize(fileSize) + " " + fileName.substring(index, fileName.length) + " File";
		}

		/**
		 * Returns humanized file size string.
		 * @param  {number} bytes file size in bytes
		 * @return {string}
		 */
		this.bytesToSize = function(bytes) {
			if (isNaN(bytes))
				return bytes;

			var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
			var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
			return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
		}

		/**
		 * Returns boolean if the file is an image by checking its extension.
		 * @param  {string}  name - file name with extension
		 * @return {Boolean}
		 */
		this.isImage = function(name) {
			name = name.toLowerCase();
			var ext = name.substr((name.lastIndexOf('.') + 1));
			switch (ext) {
				case 'jpg':
				case 'png':
				case 'gif':
				case 'jpeg':
				case 'bmp':
					return true;
					break;
				default:
					return false;
			}
		}

		/** 
		 * Gets the value at any depth in a nested object based on the path described by the keys given. Keys may be given as an array or as a dot-separated string.
		 * @param  {Object} obj - Object to be traversed.
		 * @param  {string, array} ks  - String or an Array of nested keys.
		 * @return {Object || undefined}
		 */
		this.getPath = function(obj, ks) {
			if (typeof ks == "string") ks = ks.split(".");

			// If we have reached an undefined property
			// then stop executing and return undefined
			if (obj === undefined) return void 0;

			// If the path array has no more elements, we've reached
			// the intended property and return its value
			if (ks.length === 0) return obj;

			// If we still have elements in the path array and the current
			// value is null, stop executing and return undefined
			if (obj === null) return void 0;

			return this.getPath(obj[_.first(ks)], _.rest(ks));
		}

		// Set Cookie  
		this.setCookie = function(cname, cvalue, exdays) {
			var d = new Date();
			d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
			var expires = "expires=" + d.toUTCString();
			document.cookie = cname + "=" + cvalue + "; " + expires;
		}

		// Get Cookie  
		this.getCookie = function(cname) {
			var name = cname + "=";
			var ca = document.cookie.split(';');
			for (var i = 0; i < ca.length; i++) {
				var c = ca[i];
				while (c.charAt(0) == ' ') c = c.substring(1);
				if (c.indexOf(name) != -1) return c.substring(name.length, c.length);
			}
			return "";
		}

		// Delete Cookie
		this.deleteCookie = function(name) {
			document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
		}

		/**
		 * @name  queryDecoder
		 * @param query [url parameter query]
		 * @desc  returns an object considering query paramters
		 **/
		this.queryDecoder = function(query) {
			var splittedHash = query.split("?");
			var params = new Object();
			var queryString = splittedHash[1];
			var regex = /([^&=]+)=([^&]*)/g;
			var m;
			while (m = regex.exec(queryString)) {
				params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
			}
			return params;
		}

		this.calcPercent = function(n, t) {
			var p = parseFloat(((n / t) * 100).toFixed(1));
			if (_.isNaN(p)) {
				return 0;
			} else {
				return p > 100 ? 100 : p;
			}
		}

		this.humanizeNumber = function(value) {
			var suffixes = ["", "K", "M", "B", "T"];
			var suffixNum = Math.floor(("" + value).length / 3);
			var shortValue = parseFloat((suffixNum != 0 ? (value / Math.pow(1000, suffixNum)) : value).toPrecision(2));
			if (shortValue % 1 != 0) var shortNum = shortValue.toFixed(1);
			return shortValue + suffixes[suffixNum];
		}

		this.joinStr = function(key, joinStr, seperator) {
			seperator = seperator || '.';
			if (_.isEmpty(key))
				seperator = '';

			return key += seperator + joinStr;
		}

		this.getTimeZoneOffset = function() {
			return constants.timezones.map(function(zone) {
				return zone.id.replace(":", "");
			})
		}

		this.showAccountMessage = function(msg) {
			var tempStr = "";
			for (var i = 0, len = msg.length; i < len; i++) {
				tempStr += "<p>" + msg[i] + "</p>";
			}
			return tempStr;
		}

		this.setInfoMessage = function(msg, type) {
			console.log("msg, type", msg.length, type)
			Alert.notify({
				title: type.charAt(0).toUpperCase() + type.slice(1),
				content: this.showAccountMessage(msg),
				type: type,
				hide: false,
				timeout: null
			})
		}

		this.truncateText = function(text, maxLength) {
			return text.length > maxLength ? text.substr(0, maxLength) + '...' : text;
		}

		this.isTenantSet = function(app) {
			return (app.discrete_variables && app.discrete_variables.tenant && app.discrete_variables.tenant != 'built_default_tenant')
		}

		/**
		 * Initializes tooltip
		 * @return {undefined}
		 */
		this.tip = function(o) {
			setTimeout(function() {
				$('[rel=tooltip]').tooltip(o);
			}, 1000);
		}


		this.getClassSearch = function(builtApi, query) {
			return _.throttle(function() {
				var params = {
					options: {
						query: {
							query: JSON.stringify({
								'$or': [{
									uid: {
										'$regex': query,
										'$options': 'i'
									}
								}, {
									title: {
										'$regex': query,
										'$options': 'i'
									}
								}]
							}),
							limit: constants.queryLimit
						}
					}
				}

				return builtApi.Classes.getAll(params)
					.then(function(klasses) {
						klasses = klasses.classes;
						return {
							results: klasses.map(function(klass) {
								klass['id'] = klass.uid;
								klass['text'] = klass.title;
								return klass;
							})
						}
					});
			}, 10);
		}

		this.removeKey = function(obj, key) {
			return traverse(obj).forEach(function(x) {
				if (this.key == key)
					this.delete();
			});
		}

		this.roundOff = function(num) {
			return Math.round(num * 100);
		}

		this.compactObj = function(o) {
			return _.omit(o, function(v){
				if(_.isNumber(v))
					return false;

				return _.isEmpty(v);

			})
		}


	}
];
},{"traverse":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\traverse\\index.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\group-view.js":[function(require,module,exports){
'use strict';

var groupViewTmpl = require('../partials/group-view.html');

module.exports = [
  '$compile',
  'utilsService',
  'tip',
  'constants',
  function($compile, Utils, TIP, constants) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        queryObject: '=oqGroupView',
        schema: '=schema',
        queryIndex: "=queryIndex",
        queryArray: "=queryArray",
        validateQueryNow: "=",
        promiseArray: "="
      },

      link: function(scope, elem, attrs) {
        var $template = angular.element(groupViewTmpl);
        $compile($template)(scope);
        elem.append($template);

        var groups = ['$or', '$and'];
        var groupConditionSelect = elem.find('.js-group-condition-select');


        //Initialize Select2
        groupConditionSelect.val(scope.queryObject._key).select2({
          containerCssClass: 'select2-sm',
          minimumResultsForSearch: -1
        });

        //Select 2 on-change
        groupConditionSelect.off('change').on('change', function() {
          changeGroupCondition(groupConditionSelect.select2('val'));
        });

        //Change group condition
        function changeGroupCondition(condition) {
          Utils.sa(scope, function() {
            scope.queryObject._key = condition;
          });
        }

        scope.isGroup = function(query) {
          var r = $.inArray(query._key, groups) != -1 ? true : false
          return r;
        };

        scope.addGroup = function() {
          destroyTips();
          scope.queryObject['_value'].push(_.cloneDeep(constants.queryBuilder.defaults.group));
        }

        scope.deleteGroup = function() {
          destroyTips();
          scope.queryArray.splice(scope.queryIndex, 1);
        }

        scope.addRow = function() {
          destroyTips();
          scope.queryObject['_value'].push(_.cloneDeep(constants.queryBuilder.defaults.row));
        }

        function destroyTips() {
          // Destroy all tooltips
          TIP.destroyAll($('.query-builder'));
        }
      }
    }
  }
]
},{"../partials/group-view.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\group-view.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\query-builder.js":[function(require,module,exports){
var queryBuilderTmpl = require('../partials/query-builder.html');

module.exports = [
  'utilsService',
  '$q',
  'constants',
  'tip',
  function(Utils, $q, constants, TIP) {
    return {
      template: queryBuilderTmpl,
      restrict: 'A',
      scope: {
        query: '=objectsQueryBuilder',
        cls: '=cls',
        getQueryNow: "=",
        getQueryCallback: "="
      },

      link: function(scope, elem, attrs) {
        var makeQuery = R.compose(lavdifyQuery, optimizeQuery, constructQuery);
        scope.schema = _.cloneDeep(scope.cls.schema);
        scope.promiseArray = [];
        scope.validateQueryNow = false;

        if (!scope.query.length)
          scope.query = [_.cloneDeep(constants.queryBuilder.defaults.group)];
        
        // scope.$watch('query', function(newValue, oldValue) {
        //   console.log('query changed:')
        //   console.log(JSON.stringify(scope.query));
        //   console.log('---------------')
        // }, true);


        function getQuery() {
          scope.validateQueryNow = true;

          return validateQuery()
            .then(function() {
              console.log('Validate query: success ', scope.query[0])
              return makeQuery(scope.query[0]);
            }, function(xhr) {
              console.log('Validate query: failed')
              throw xhr;
            }).finally(function() {
              scope.validateQueryNow = false;
            });
        }

        scope.$watch('getQueryNow', function() {
          if (scope.getQueryNow) {
            var actualQuery = getQuery();
            console.log("actualQuery", actualQuery);
            scope.getQueryCallback(actualQuery);
          }
        });

        scope.$on('$destroy', function handleDestroyEvent() {
          TIP.destroyAll($('.query-builder'))
        });

        function constructQuery(query) {
          var q = {};

          if (query._key === undefined) {
            if (_.isPlainObject(query) && _.isPlainObject(query.query)) {
              q = query;
              q['query'] = constructQuery(query.query)

              return q;
            } else {
              return query;
            }
          }

          q[query._key] = query._value instanceof Array ? _.map(query._value, constructQuery) : constructQuery(query._value);
          return q;
        }


        function optimizeQuery(query) {
          var q = {}
          q[_.keys(query)[0]] = [{}]

          var queryArray = q[_.keys(query)[0]];
          var firstObj = queryArray[0];
          query[_.keys(query)[0]].forEach(function(el, index, array) {
            for (var key in el) {
              if (_.isArray(el[key])) {
                var o = {}
                o[key] = el[key];
                _.extend(firstObj, optimizeQuery(o));
              } else {
                if (_.keys(query)[0] == '$or') {
                  if (_.isEmpty(queryArray[0])) {
                    queryArray[0][key] = el[key];
                  } else {
                    queryArray.push(el);
                  }
                } else {
                  if (_.contains(_.keys(firstObj), key)) {
                    queryArray.push(el);
                  } else {
                    firstObj[key] = el[key];
                  }
                }
              }
            }
          })
          return q;
        }

        function lavdifyQuery(query) {
          var key = Object.keys(query)[0];

          if (key === '$and') {
            if (query[key].length > 1)
              return query;
            else
              return query[key][0];
          }

          return query
        }

        function validateQuery() {
          return $q.all(scope.promiseArray.map(function(promiseObj) {
            return promiseObj.promise;
          }));
        }
      }
    }
  }
]
},{"../partials/query-builder.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\query-builder.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\row-view.js":[function(require,module,exports){
'use strict';

var rowViewTmpl = require('../partials/row-view.html');

module.exports = [
  '$compile',
  'modalService',
  'oqService',
  'utilsService',
  '$q',
  'tip',
  'constants',
  '$timeout',
  function($compile, modalService, qbService, Utils, $q, TIP, constants, $timeout) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        query: '=oqRowView',
        schema: '=schema',
        queryArray: '=queryArray',
        queryIndex: "=queryIndex",
        validateQueryNow: "=",
        promiseArray: "="
      },

      link: function(scope, elem, attrs) {
        var deferred = $q.defer();
        var defaultPromiseObject = {
          promise: deferred.promise
        };
        scope.promiseArray.push(defaultPromiseObject);

        // Manually compile template because 2 directives are used in the same template.
        var $template = angular.element(rowViewTmpl);
        $compile($template)(scope);
        elem.append($template);

        var columnSelect = $(elem).find('.js-column-select').eq(0);
        scope.currentDataType = null;

        scope.currentQuery = Utils.getPath(scope.query, scope.query.fieldData['currentQueryPath']);

        if (_.isUndefined(scope.currentQuery)) {
          scope.currentQuery = scope.query;
        }

        initialFieldCheck();

        //Watch on validate Query
        scope.$watch('validateQueryNow', function() {
          if (scope.validateQueryNow) {
            validateRow();
          }
        })

        // Destroy promise object from array
        scope.$on('$destroy', function handleDestroyEvent() {
          scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);
        })

        function validateRow() {
          var fieldData = columnSelect.select2('data');
          var errorEls = [];
          if (_.isEmpty(fieldData)) {
            deferred.reject();
            errorEls.push(elem.find('.js-column-select-wrap'));
          } else {
            deferred.resolve();
          }

          // show error tooltips on elements.
          if (errorEls.length)
            qbService.showErrorTips(errorEls);

          deferred = $q.defer();
          defaultPromiseObject.promise = deferred.promise;
        }

        scope.removeRow = function() {
          // Destroy all tooltips
          TIP.destroyAll($('.query-builder'));
          if (scope.queryArray.length === 1) {
            scope.query = _.cloneDeep(constants.queryBuilder.defaults.row);
            scope.queryArray.splice(scope.queryIndex, 1, scope.query);
          } else {
            scope.queryArray.splice(scope.queryIndex, 1);
          }
        }

        function resetDatatype() {
          scope.currentDataType = "null";
        }

        function initRow() {
          initializeColumnSelect();
          if (!_.isEmpty(scope.query._key))
            setColumnSelectValue(scope.query._key);
        }

        function initializeColumnSelect() {
          columnSelect.select2({
            placeholder: "Select field",
            data: qbService.formatClassFields(scope.schema, true),
            containerCssClass: 'select2-sm'
          })

          columnSelect.off('select2-open').on('select2-open', function() {
            qbService.destroyTip(elem.find('.js-column-select-wrap'));
          });

          columnSelect.off('change').on('change', function() {

            Utils.sa(scope, function() {
              //destroy tooltip on change class field
              qbService.destroyErrorTips(elem)

              //Delete old promise and create for newly selected field
              scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);

              deferred = $q.defer();
              defaultPromiseObject.promise = deferred.promise;
              scope.promiseArray.push(defaultPromiseObject);
              
              resetDatatype();
              $timeout(function(){
                scope.query.fieldData.currentField = columnSelect.select2('data')
                scope.query._key = scope.query.fieldData.currentField.uid;
                scope.query._value = {};
                delete scope.query.fieldData.operator;
                checkSelectedField();
              }, 0);
            })
          });
        }



        function initialFieldCheck() {
          if (!_.isEmpty(scope.query._key)) {
            if (!qbService.isGroup(scope.query.fieldData.currentField) && !qbService.isReference(scope.query.fieldData.currentField)) {
              initRow();
            }
            // Render rule view
            scope.currentDataType = scope.query.fieldData.currentField.data_type;
          } else {
            initRow();
          }
        }

        function checkSelectedField() {
          if (qbService.isGroup(scope.query.fieldData.currentField) || qbService.isReference(scope.query.fieldData.currentField)) {
            initFieldSelectModal();
          } else {
            // Render rule view
            scope.currentDataType = scope.query.fieldData.currentField.data_type;
          }
        }

        function setColumnSelectValue(value) {
          columnSelect.select2('data', {
            id: value,
            text: value
          });
        }

        function renderNestedField() {
          scope.isNestedField = true;
        }

        function clearNestedField() {
          scope.isNestedField = false;
          scope.nestedField = void 0;
        }

        function initFieldSelectModal() {
          scope.query.fieldData['name'] = scope.query.fieldData.currentField.display_name;
          modalService.openModal({
                data: {
                  query: scope.query,
                  currentQuery: scope.currentQuery
                }
              }, qbService.fieldSelectModalTmpl,
              qbService.fieldSelectModalCtrl)
            .then(function(res) {
              // Render rule view
              resetDatatype();
              scope.currentDataType = scope.query.fieldData.currentField.data_type;
              scope.currentQuery = res.currentQuery;
            }, function() {
              resetDatatype();
              var query = _.cloneDeep(constants.queryBuilder.defaults.row);
              scope.query._key = '';
              scope.query._value = '';
              scope.query.fieldData = query.fieldData;
              scope.currentQuery = scope.query;
              columnSelect.select2('val', "");
            });
        }


      }
    }
  }
]
},{"../partials/row-view.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\row-view.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\rules\\boolean-rule-view.js":[function(require,module,exports){
'use strict';

var numberRuleTmpl = require('../../partials/rules/boolean-rule.html');

module.exports = [
  '$compile',
  'oqService',
  'utilsService',
  function($compile, qbService, Utils) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        query: '=oqBooleanRuleView'
      },
      link: function(scope, elem, attrs) {
        var $template = angular.element(numberRuleTmpl);
        $compile($template)(scope);
        elem.append($template);

        var operatorSelect = elem.find('.js-operand-select');

        if (_.isUndefined(scope.query.fieldData.operator)) {
          scope.operator = 'true';
        } else {
          scope.operator = scope.query.fieldData.operator.toString();
        }

        console.log(scope.operator);
        operatorSelect.select2({
          containerCssClass: 'select2-sm',
          minimumResultsForSearch: -1
        });

        //Default select2 value
        operatorSelect.select2('val', scope.operator);
        operatorSelect.off('change').on('change', function() {
          changeOperator(operatorSelect.select2('val'));
        })

        function changeOperator(operator) {
          scope.query.fieldData.operator = operator;
          Utils.sa(scope, function() {
            scope.operator = operator;
          });
        }

        scope.$watch('operator', function() {
          scope.query._value = JSON.parse(scope.operator);
        })

      }
    }
  }
]
},{"../../partials/rules/boolean-rule.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\rules\\boolean-rule.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\rules\\isodate-rule-view.js":[function(require,module,exports){
var stringRuleTmpl = require('../../partials/rules/isodate-rule.html');

module.exports = [
  '$compile',
  'oqService',
  'utilsService',
  '$q',
  function($compile, qbService, Utils, $q) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        query: '=oqIsodateRuleView',
        validateQueryNow: "=",
        promiseArray: "="
      },

      link: function(scope, elem, attrs) {
        var $template = angular.element(stringRuleTmpl);
        $compile($template)(scope);
        elem.append($template);

        //Default Validation Promise operation
        var deferred = $q.defer();
        var defaultPromiseObject = {
          promise: deferred.promise
        };
        scope.promiseArray.push(defaultPromiseObject);

        var defaultOperator = 'gt';
        var operatorSelect = elem.find('.js-operator-select');
        scope.pickerClass = 'qb-input opd-date-input';
        scope.timeZoneSelectClass = 'select2-sm opd-timezone-select';

        scope.operator = scope.query.fieldData.operator || '$' + defaultOperator;
        scope.operand = {};

        setDefaultOperand();

        operatorSelect.val(scope.operator).select2({
          containerCssClass: 'select2-sm',
          minimumResultsForSearch: -1
        })

        operatorSelect.off('change').on('change', function() {
          changeOperator(operatorSelect.select2('val'));
        })

        scope.$watch('operator', function(newVal, oldVal) {
          if (_.isEqual(newVal, oldVal))
            return;

          clearValues();
          checkOperator();
        })

        scope.$watch('operand', function(newVal, oldVal) {
          if (_.isEqual(newVal, oldVal))
            return;

          if (_.isEmpty(scope.operand))
            return;

          checkOperand();
        }, true)

        //Watch on validate Query
        scope.$watch('validateQueryNow', function() {
            if (scope.validateQueryNow) {
              validateRule();
            }
          })
          //Destroy promise object from array
        scope.$on('$destroy', function handleDestroyEvent() {
          scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);
        })

        function changeOperator(operator) {
          Utils.sa(scope, function() {
            qbService.destroyErrorTips(elem);

            scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);

            //Delete old promise and create for newly selected field
            deferred = $q.defer();
            defaultPromiseObject.promise = deferred.promise;
            scope.promiseArray.push(defaultPromiseObject);

            scope.operator = operator;
          });
        }

        function setDefaultOperand() {
          if (_.isEmpty(scope.query._value)) {
            var date = moment().format();
            scope.operand[defaultOperator] = date;
            scope.query._value['$' + defaultOperator] = date;
          } else {
            if (scope.query._value instanceof Object) {
              scope.operand[scope.operator.replace('$', '')] = scope.query._value[scope.operator];
            } else {
              scope.operand['equals'] = scope.query._value;
            }
          }
        }

        function clearValues() {
          scope.operand = {};
          scope.query._value = {};
        }

        function checkOperator() {
          var dateTime = _.isEmpty(scope.query._value) ? moment().format() : moment(scope.query._value).format();

          scope.query.fieldData.operator = scope.operator;
          switch (scope.operator) {
            case '$gt':
              scope.operand['gt'] = dateTime;
              break;

            case '$lt':
              scope.operand['lt'] = dateTime;
              break;

            case '$equals':
              scope.operand['equals'] = dateTime;
              break;
          }

        }

        function checkOperand() {
          switch (scope.operator) {
            case '$gt':
              scope.query._value['$gt'] = scope.operand['gt'];
              break;

            case '$lt':
              scope.query._value['$lt'] = scope.operand['lt'];
              break;

            case '$equals':
              scope.query._value = scope.operand['equals'];
              break;
          }
        }

        //Validate Rule
        function validateRule() {
          var errorEls = [];
          var ltisNotEmpty = !_.isEmpty(scope.query._value['$lt']);
          var gtisNotEmpty = !_.isEmpty(scope.query._value['$gt']);
          switch (scope.operator) {
            case '$gt':
              if (gtisNotEmpty) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.opd-date-wrap'));
              }
              break;

            case '$lt':
              if (ltisNotEmpty) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.opd-date-wrap'));
              }
              break;

            case '$equals':
              if (!_.isEmpty(scope.query._value)) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.opd-date-wrap'));
              }
              break;
          }

          // show error tooltips on elements.
          if (errorEls.length)
            qbService.showErrorTips(errorEls);

          deferred = $q.defer();
          defaultPromiseObject.promise = deferred.promise;
        }

      }
    }
  }
]
},{"../../partials/rules/isodate-rule.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\rules\\isodate-rule.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\rules\\number-rule-view.js":[function(require,module,exports){
var numberRuleTmpl = require('../../partials/rules/number-rule.html');

module.exports = [
  '$compile',
  'oqService',
  'utilsService',
  '$q',
  function($compile, qbService, Utils, $q) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        query: '=oqNumberRuleView',
        validateQueryNow: "=",
        promiseArray: "="
      },

      link: function(scope, elem, attrs) {
        //Default Validation Promise operation
        var deferred = $q.defer();
        var defaultPromiseObject = {
          promise: deferred.promise
        };
        scope.promiseArray.push(defaultPromiseObject);

        var $template = angular.element(numberRuleTmpl);
        $compile($template)(scope);
        elem.append($template);

        var operatorSelect = elem.find('.js-operator-select');

        // Default rule data
        var defaultOperator = 'btw';
        scope.operator = scope.query.fieldData.operator || '$' + defaultOperator;
        scope.operand = {};

        setDefaultOperand();

        operatorSelect.val(scope.operator).select2({
          containerCssClass: 'select2-sm',
          minimumResultsForSearch: -1
        })

        operatorSelect.on('change', function() {
          changeOperator(operatorSelect.select2('val'));
        })

        //Watch on validate Query
        scope.$watch('validateQueryNow', function() {
            if (scope.validateQueryNow) {
              validateRule();
            }
          })
          //Destroy promise object from array
        scope.$on('$destroy', function handleDestroyEvent() {
          scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);
        })

        function validateRule() {
          var errorEls = [];
          var ltisNumber = _.isNumber(scope.query._value['$lt']);
          var gtisNumber = _.isNumber(scope.query._value['$gt']);
          switch (scope.operator) {
            case '$btw':

              if (ltisNumber && gtisNumber) {
                deferred.resolve();
              } else {
                deferred.reject();

                if (!gtisNumber)
                  errorEls.push(elem.find('.js-number-btw-gt'));

                if (!ltisNumber)
                  errorEls.push(elem.find('.js-number-btw-lt'));
              }
              break;
            case '$lt':
              if (ltisNumber) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.js-number-lt'));
              }
              break;

            case '$gt':

              if (gtisNumber) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.js-number-gt'));
              }
              break;

            case '$equals':
              console.log("!isNaN(scope.query._value)",scope.query._value, _.isNumber(scope.query._value));
              if (_.isNumber(scope.query._value)) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.js-number-equals'));
              }
              break;
          }
          // show error tooltips on elements.
          if (errorEls.length)
            qbService.showErrorTips(errorEls);


          // Assign new promise to the promise object as the previous promise has been resolved.
          deferred = $q.defer();
          defaultPromiseObject.promise = deferred.promise;

        }

        function setDefaultOperand() {
          if (_.isEmpty(scope.query._value)) {
            scope.operand[defaultOperator] = '';
            scope.query._value['$lt'] = '';
            scope.query._value['$gt'] = '';
          } else {
            if (scope.query._value instanceof Object) {
              if (scope.operator === '$btw') {
                scope.operand['lt'] = scope.query._value['$lt'];
                scope.operand['gt'] = scope.query._value['$gt'];
              } else {
                scope.operand[scope.operator.replace('$', '')] = scope.query._value[scope.operator];
              }
            } else {
              scope.operand['equals'] = scope.query._value;
            }
          }
        }

        function changeOperator(operator) {
          Utils.sa(scope, function() {
            qbService.destroyErrorTips(elem);

            scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);

            //Delete old promise and create for newly selected field
            deferred = $q.defer();
            defaultPromiseObject.promise = deferred.promise;
            scope.promiseArray.push(defaultPromiseObject);

            scope.operator = operator;
          });
        }

        function clearValues() {
          scope.operand = {};
          scope.query._value = {};
        }

        scope.$watch('operator', function(newVal, oldVal) {
          if (_.isEqual(newVal, oldVal))
            return;
          clearValues();
          checkOperator();
        })

        scope.$watch('operand', function(newVal, oldVal) {
          if (_.isEqual(newVal, oldVal))
            return;

          if (_.isEmpty(scope.operand))
            return;
          checkOperand();
        }, true)

        function checkOperator() {
          scope.query.fieldData.operator = scope.operator;
          switch (scope.operator) {
            case '$btw':
              scope.operand['lt'] = '';
              scope.operand['gt'] = '';
              break;

            case '$lt':
              scope.operand['lt'] = '';
              break;

            case '$gt':
              scope.operand['gt'] = '';
              break;

            case '$equals':
              scope.operand['equals'] = '';
              break;
          }
        }

        function checkOperand() {
          switch (scope.operator) {
            case '$btw':
              var lt = parseInt(scope.operand['lt']);
              var gt = parseInt(scope.operand['gt']);
              scope.query._value['$lt'] =  _.isNaN(lt) ? '' : lt;
              scope.query._value['$gt'] =  _.isNaN(gt) ? '' : gt;
              break;

            case '$lt':
              var lt = parseInt(scope.operand['lt']);
              scope.query._value['$lt']  = _.isNaN(lt) ? '' : lt;               
              break;

            case '$gt':
              var gt = parseInt(scope.operand['gt']);
              scope.query._value['$gt']  = _.isNaN(gt) ? '' : gt;             
              break;

            case '$equals':
            var eq = parseInt(scope.operand['equals']);
            scope.query._value  = _.isNaN(eq) ? '' : eq; 
              break;
          }
          console.log(scope.query._value);
        }


      }
    }
  }
]
},{"../../partials/rules/number-rule.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\rules\\number-rule.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\rules\\string-rule-view.js":[function(require,module,exports){
var stringRuleTmpl = require('../../partials/rules/string-rule.html');

module.exports = [
  '$compile',
  'oqService',
  'utilsService',
  '$q',
  function($compile, qbService, Utils, $q) {
    return {
      replace: true,
      restrict: 'A',
      scope: {
        query: '=oqStringRuleView',
        validateQueryNow: "=",
        promiseArray: "="
      },

      link: function(scope, elem, attrs) {
        var $template = angular.element(stringRuleTmpl);
        $compile($template)(scope);
        elem.append($template);

        var operatorSelect = elem.find('.js-operator-select');
        console.log("Rule view: ", scope.query)

        //Default Validation Promise operation
        var deferred = $q.defer();
        var defaultPromiseObject = {
          promise: deferred.promise
        };
        scope.promiseArray.push(defaultPromiseObject);

        //Default rule data
        var defaultOperator = 'in';
        scope.operator = scope.query.fieldData.operator || '$' + defaultOperator;
        scope.operand = {};

        setOperandOnLoad();

        //New rule data for every operator on change
        scope.$watch('operator', function(newVal, oldVal) {
          if (_.isEqual(newVal, oldVal))
            return;

          clearValues();
          checkOperator();
        }, true);


        scope.$watch('operand', function(newVal, oldVal) {
          if (_.isEqual(newVal, oldVal))
            return;

          if (_.isEmpty(scope.operand))
            return;

          checkOperand();
        }, true)


        operatorSelect.val(scope.operator).select2({
          containerCssClass: 'select2-sm',
          minimumResultsForSearch: -1
        });

        operatorSelect.off('change').on('change', function() {
          changeOperator($(this).select2('val'));
        })

        //Watch on validate Query
        scope.$watch('validateQueryNow', function() {
          if (scope.validateQueryNow) {
            validateRule();
          }
        })

        //Destroy promise object from array
        scope.$on('$destroy', function handleDestroyEvent() {
          console.log('String rule destroyed!')
          scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);
        })

        //check valid regex options
        function checkValidRegexOptions() {
          scope.query._value['$options'] = scope.query._value['$options'] ? scope.query._value['$options'].trim() : "";
          return ['i', 'g', 'gi', ""].indexOf(scope.query._value['$options']) != -1;
        }

        function checkValidRegexForNot(){
            scope.query._value['$ne']['$options'] = scope.query._value['$ne']['$options'] ? scope.query._value['$ne']['$options'].trim() : "";
          return ['i', 'g', 'gi', ""].indexOf(scope.query._value['$ne']['$options']) != -1;

        }
        //Not need to set default operator as there is no operator for contains only set on load if value is not empty
        function setOperandOnLoad() {
          if (!_.isEmpty(scope.query._value)) {
            if (scope.query._value instanceof Object) {
              if (scope.operator === '$in' || scope.operator === "$not") {
                scope.operand['regex'] = scope.query._value['$regex'];
                scope.operand['options'] = scope.query._value['$options'];
              } else {
                scope.operand[scope.operator.replace('$', '')] = scope.query._value[scope.operator];
              }
            } else {
              scope.operand['equals'] = scope.query._value;
            }
          }
        }

        function changeOperator(operator) {
          Utils.sa(scope, function() {
            //destroy tooltip on change class field
            qbService.destroyErrorTips(elem);

            scope.promiseArray.splice(scope.promiseArray.indexOf(defaultPromiseObject), 1);
            if (operator !== "$exists" && operator !== "$notExists") {
              //Delete old promise and create for newly selected field

              deferred = $q.defer();
              defaultPromiseObject.promise = deferred.promise;
              scope.promiseArray.push(defaultPromiseObject);

            }
            scope.operator = operator;
          });
        }

        function clearValues() {
          scope.operand = {};
          scope.query._value = {};
        }

        function checkOperator() {
          scope.query.fieldData.operator = scope.operator;
          switch (scope.operator) {
            case '$in':
              scope.operand['regex'] = '';
              scope.operand['options'] = '';
              break;

            case '$not':
              scope.operand['not'] = {};
              scope.operand['not']['regex'] = '';
              scope.operand['not']['options'] = '';
              break;

            case '$exists':
              scope.operand['exists'] = true;
              break;

            case '$notExists':
              scope.operand['exists'] = false;
              break;

            case '$ne':
              scope.operand['ne'] = '';
              break;

            case '$equals':
              scope.operand['equals'] = '';
              break;
          }

        }

        function validateRule() {
          var errorEls = [];

          switch (scope.operator) {
            case '$in':
              var validRegexOption = checkValidRegexOptions();
              var regexNotEmpty = !_.isEmpty(scope.query._value['$regex']);

              if (regexNotEmpty && validRegexOption) {
                deferred.resolve();
              } else {
                deferred.reject();
                if (!validRegexOption)
                  errorEls.push(elem.find('.js-string-options'));

                if (!regexNotEmpty)
                  errorEls.push(elem.find('.js-string-regex'));
              }
              break;

            case '$not':
              var validRegexOption = checkValidRegexForNot();
              var regexNotEmpty = !_.isEmpty(scope.query._value['$ne']['$regex']);

              if (regexNotEmpty && validRegexOption) {
                deferred.resolve();
              } else {
                deferred.reject();
                if (!validRegexOption)
                  errorEls.push(elem.find('.js-string-not-options'));

                if (!regexNotEmpty)
                  errorEls.push(elem.find('.js-string-not-regex'));
              }
              break;

            case '$ne':
              if (!_.isEmpty(scope.query._value['$ne'])) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.js-string-ne'));
              }
              break;
            case '$equals':
              if (!_.isEmpty(scope.query._value)) {
                deferred.resolve();
              } else {
                deferred.reject();
                errorEls.push(elem.find('.js-string-equals'));
              }
              break;
          }

          // show error tooltips on elements.
          if (errorEls.length)
            qbService.showErrorTips(errorEls);


          // Assign new promise to the promise object as the previous promise has been resolved.
          deferred = $q.defer();
          defaultPromiseObject.promise = deferred.promise;
        }

        function checkOperand() {

          switch (scope.operator) {
            case '$in':
              scope.query._value['$regex'] = scope.operand['regex'];
              scope.query._value['$options'] = scope.operand['options'];
              break;

            case '$not':
            scope.query._value['$ne'] ={}
              scope.query._value['$ne']['$regex'] = scope.operand['not']['regex'];
              scope.query._value['$ne']['$options'] = scope.operand['not']['options'];
              break;

            case '$exists':
              scope.query._value['$exists'] = scope.operand['exists'];
              break;

            case '$notExists':
              scope.query._value['$exists'] = scope.operand['exists'];
              break;

            case '$ne':
              scope.query._value['$ne'] = scope.operand['ne'];
              break;

            case '$equals':
              scope.query._value = scope.operand['equals'];
              break;
          }
          console.log(scope.query);
        }
      }
    }
  }
]
},{"../../partials/rules/string-rule.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\rules\\string-rule.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\field-select-modal.html":[function(require,module,exports){
module.exports = '<div class="qb-select-field-modal">\n' +
    '    <div class="modal-header">\n' +
    '        <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="cancel()">\n' +
    '            ×\n' +
    '        </button>\n' +
    '        <h3 class="modal-title">{{nestedFieldData.name}}</h3>\n' +
    '    </div>\n' +
    '    <div class="modal-body">\n' +
    '        <fieldset ng-show="!refLoading">\n' +
    '            <div class="form-group" ng-show="!refError">\n' +
    '                <label class="col-md-3 control-label mt5">Select field</label>\n' +
    '                <div class="col-md-9">\n' +
    '                    <input class="js-select-field-modal-select" placeholder="Select field">\n' +
    '                    \n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <p ng-show="refError">\n' +
    '                  Sorry! We could not find the referenced class for this field. May be it has been deleted.\n' +
    '            </p>\n' +
    '        </fieldset>\n' +
    '        <fieldset ng-show="refLoading">\n' +
    '            <img class="ref-loader" alt="" src="images/loaders/list-loader.gif" />\n' +
    '        </fieldset>\n' +
    '    </div>\n' +
    '    <div class="modal-footer">\n' +
    '        <div class="button-wrap">\n' +
    '            <a class="btn btn-labeled btn-primary btn-sm pull-right" ng-click="ok()" ng-show="!refError">\n' +
    '                <span class="btn-label">\n' +
    '                  <i class="fa fa-check"></i>\n' +
    '                </span>\n' +
    '                <span>\n' +
    '                  Done\n' +
    '                </span>\n' +
    '            </a>\n' +
    '            <a class="btn btn-labeled btn-default btn-sm pull-left" ng-click="cancel()" ng-show="refError">\n' +
    '                <span class="btn-label">\n' +
    '                  <i class="fa fa-arrow-left"></i>\n' +
    '                </span>\n' +
    '                <span>\n' +
    '                  close\n' +
    '                </span>\n' +
    '            </a>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\group-view.html":[function(require,module,exports){
module.exports = '<div class="qb-group">\n' +
    '		<div class="qb-group-header clearfix">\n' +
    '			<select class="js-group-condition-select group-condition-select">\n' +
    '				<option value="$and">AND</option>\n' +
    '				<option value="$or">OR</option>\n' +
    '			</select>\n' +
    '			<button class="btn btn-xs bg-color-blue txt-color-white" ng-click="addGroup()">Add group</button>\n' +
    '			<button class="btn btn-xs bg-color-blue txt-color-white" ng-click="addRow()">Add condition</button>\n' +
    '			<button class="btn btn-xs btn-danger btn-delete-group" ng-click="deleteGroup()">Delete group</button>\n' +
    '		</div>\n' +
    '		<div class="qb-group-body">\n' +
    '			<div class="" ng-repeat="singleQuery in queryObject._value track by $id(singleQuery)">\n' +
    '				<div ng-if="!isGroup(singleQuery)" class="" oq-row-view="singleQuery" schema="schema" query-index="$index" query-array="queryObject._value" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '				<div ng-if="isGroup(singleQuery)" class="qb-group-inner" oq-group-view="singleQuery" query-index="$index" query-array="queryObject._value" schema="schema" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '			</div>\n' +
    '		</div>\n' +
    '	</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\query-builder.html":[function(require,module,exports){
module.exports = '<div class="query-builder">\n' +
    '	<div ng-repeat="queryObject in query track by $id(queryObject)" oq-group-view="queryObject" query-index="$index" query-array="query" schema="schema" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\row-view.html":[function(require,module,exports){
module.exports = '<div class="qb-row">\n' +
    '    <input type="hidden" ng-model="query._key">\n' +
    '\n' +
    '    <div class="qb-row-inner clearfix">\n' +
    '\n' +
    '        <div class="qb-column-wrap clearfix js-column-select-wrap" rel="tooltip">\n' +
    '            <input type="hidden" ng-show="!query.fieldData.name" class="column-select js-column-select">\n' +
    '            <div ng-show="query.fieldData.name" class="qb-text-block qb-nested-field-bar text-ellipsis">\n' +
    '                {{query.fieldData.name}}\n' +
    '            </div>\n' +
    '        </div>\n' +
    '\n' +
    '        <div class="qb-rule-wrap" ng-switch on="currentDataType">\n' +
    '            <div ng-switch-when="text" oq-string-rule-view="currentQuery" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '            <div ng-switch-when="isodate" class="" oq-isodate-rule-view="currentQuery" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '            <div ng-switch-when="number" class="" oq-number-rule-view="currentQuery" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '            <div ng-switch-when="boolean" class="" oq-boolean-rule-view="currentQuery" validate-query-now="validateQueryNow" promise-array="promiseArray"></div>\n' +
    '            <div ng-switch-when="null"></div>\n' +
    '        </div>\n' +
    '        <button type="button" class="close qb-btn-delete-row" data-dismiss="modal" aria-hidden="true" ng-click="removeRow()">\n' +
    '            ×\n' +
    '        </button>\n' +
    '    </div>\n' +
    '   \n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\rules\\boolean-rule.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '	<div class="qb-operator-wrap clearfix">\n' +
    '		<div class="qb-text-block">\n' +
    '			equals\n' +
    '		</div>\n' +
    '	</div>\n' +
    '	<div class="qb-operand-wrap">\n' +
    '		<select class="js-operand-select opd-bool-select" ng-model="operator">\n' +
    '		    <option value="true">true</option>\n' +
    '		    <option value="false">false</option>\n' +
    '		</select>\n' +
    '	</div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\rules\\isodate-rule.html":[function(require,module,exports){
module.exports = ' <div>\n' +
    '  <div class="qb-operator-wrap clearfix">\n' +
    '      \n' +
    '\n' +
    '      <select class="qb-operator-select js-operator-select opr-date-select">\n' +
    '        <option value="$gt">more than</option>\n' +
    '        <option value="$lt">less than</option>\n' +
    '        <option value="$equals">equals</option>\n' +
    '    </select>\n' +
    '  </div>\n' +
    '\n' +
    '  <div ng-switch on="operator" class="qb-operand-wrap qb-date-operand-wrap">\n' +
    '      <div ng-switch-when="$gt" class="opd-date-wrap clearfix" rel="tooltip">\n' +
    '          <input bootstrap-date-picker picker-class="pickerClass" time-zone-select-class="timeZoneSelectClass" date-time="operand.gt">\n' +
    '      </div>\n' +
    '      <div ng-switch-when="$lt" class="opd-date-wrap clearfix" rel="tooltip">\n' +
    '          <input bootstrap-date-picker picker-class="pickerClass" time-zone-select-class="timeZoneSelectClass" date-time="operand.lt">\n' +
    '      </div>\n' +
    '      <div ng-switch-when="$equals" class="opd-date-wrap clearfix" rel="tooltip">\n' +
    '        <input bootstrap-date-picker picker-class="pickerClass" time-zone-select-class="timeZoneSelectClass" date-time="operand.equals">\n' +
    '      </div>\n' +
    '  </div>\n' +
    '\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\rules\\number-rule.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '    <div class="qb-operator-wrap clearfix">\n' +
    '        \n' +
    '        <div class="qb-text-block">\n' +
    '            is\n' +
    '        </div>\n' +
    '        <select class="qb-operator-select js-operator-select opr-num-select">\n' +
    '            <option value="$btw">between</option>\n' +
    '            <option value="$lt">less than</option>\n' +
    '            <option value="$gt">greater than</option>\n' +
    '            <option value="$equals">equals</option>\n' +
    '        </select>\n' +
    '    </div>\n' +
    '    \n' +
    '    <div ng-switch on="operator" class="qb-operand-wrap">\n' +
    '        <div ng-switch-when="$btw">\n' +
    '            <input class="form-control qb-input opd-num-input js-number-btw-gt" type="text" rel="tooltip"  ng-model="operand.gt">\n' +
    '            <div class="qb-text-block">\n' +
    '                and \n' +
    '            </div>\n' +
    '            <input class="form-control qb-input opd-num-input js-number-btw-lt" type="text"  rel="tooltip" ng-model="operand.lt">\n' +
    '        </div>\n' +
    '        <div class="input-group" ng-switch-when="$lt">\n' +
    '            <input class="form-control qb-input js-number-lt" type="text" rel="tooltip"  ng-model="operand.lt">\n' +
    '        </div>\n' +
    '        <div class="input-group" ng-switch-when="$gt">\n' +
    '            <input class="form-control qb-input js-number-gt" type="text" rel="tooltip"  ng-model="operand.gt">\n' +
    '        </div>\n' +
    '        <div class="input-group" ng-switch-when="$equals">\n' +
    '            <input class="form-control qb-input js-number-equals" type="text" rel="tooltip" ng-model="operand.equals">\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\rules\\string-rule.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '    <div class="qb-operator-wrap clearfix">\n' +
    '\n' +
    '\n' +
    '        <select class="qb-operator-select js-operator-select opr-text-select">\n' +
    '            <option value="$in">contains</option>\n' +
    '            <option value="$not">does not contain</option>\n' +
    '            <option value="$exists">is set</option>\n' +
    '            <option value="$notExists">is not set</option>\n' +
    '            <option value="$equals">equals</option>\n' +
    '            <option value="$ne">not equal to</option>\n' +
    '        </select>\n' +
    '    </div>\n' +
    '\n' +
    '    <div ng-switch on="operator" class="qb-operand-wrap">\n' +
    '        <div class="input-group" ng-switch-when="$in">\n' +
    '            <span class="input-group-addon">/</span>\n' +
    '            <input class="form-control opd-regex-input qb-input js-string-regex" rel="tooltip" type="text" ng-model="operand.regex">\n' +
    '            <span class="input-group-addon last-addon">/</span>\n' +
    '            <input class="form-control opd-options-input qb-input js-string-options" rel="tooltip" type="text" ng-model="operand.options" data-placement="right">\n' +
    '        </div>\n' +
    '        <div ng-switch-when="$not" class="input-group">\n' +
    '            <span class="input-group-addon">/</span>\n' +
    '            <input class="form-control opd-regex-input qb-input js-string-not-regex" rel="tooltip" type="text" ng-model="operand.not.regex">\n' +
    '            <span class="input-group-addon last-addon">/</span>\n' +
    '            <input class="form-control opd-options-input qb-input js-string-not-options" rel="tooltip" type="text" ng-model="operand.not.options" data-placement="right">\n' +
    '        </div>\n' +
    '        <div ng-switch-when="$ne">\n' +
    '            <input class="form-control qb-input js-string-ne" rel="tooltip" type="text" ng-model="operand.ne">\n' +
    '        </div>\n' +
    '        <div ng-switch-when="$equals">\n' +
    '            <input class="form-control qb-input js-string-equals" rel="tooltip" type="text" ng-model="operand.equals">\n' +
    '        </div>\n' +
    '    </div>\n' +
    '\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\query-builder.js":[function(require,module,exports){
'use strict';

// Include Modules
require('third-party-modules/select2');
require('third-party-modules/qtip');

// Directives
var queryBuilder      = require('./directives/query-builder');
var groupview         = require('./directives/group-view');
var rowview           = require('./directives/row-view');

var stringRuleView    = require('./directives/rules/string-rule-view');
var isoDateRuleView   = require('./directives/rules/isodate-rule-view');
var numberRuleView    = require('./directives/rules/number-rule-view');
var booleanRuleView   = require('./directives/rules/boolean-rule-view');

// Services
var utils             = require('./services/query-builder.js');
var tip               = require('../global/services/tip.js');

module.exports = angular.module('objectsQueryBuilder', [])
  .directive('objectsQueryBuilder', queryBuilder)
  .directive('oqGroupView', groupview)
  .directive('oqRowView', rowview)
  .directive('oqStringRuleView', stringRuleView)
  .directive('oqIsodateRuleView', isoDateRuleView)
  .directive('oqNumberRuleView', numberRuleView)
  .directive('oqBooleanRuleView', booleanRuleView)
  .service('oqService', utils)
  .service('tip', tip);

},{"../global/services/tip.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\global\\services\\tip.js","./directives/group-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\group-view.js","./directives/query-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\query-builder.js","./directives/row-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\row-view.js","./directives/rules/boolean-rule-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\rules\\boolean-rule-view.js","./directives/rules/isodate-rule-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\rules\\isodate-rule-view.js","./directives/rules/number-rule-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\rules\\number-rule-view.js","./directives/rules/string-rule-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\directives\\rules\\string-rule-view.js","./services/query-builder.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\services\\query-builder.js","third-party-modules/qtip":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\qtip\\qtip.shim.js","third-party-modules/select2":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\select2\\select2.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\services\\query-builder.js":[function(require,module,exports){
var fieldSelectModalTmpl = require('../partials/field-select-modal.html');

module.exports = [
  'builtApi',
  'utilsService',
  'tip',
  'constants',
  function(builtApi, Utils, TIP, constants) {
    var self = this;
    var tipOptions = {
      content: {
        text: function(api) {
          return 'Please enter a valid value';
        },
      },
      hide: {
        event: 'click'
      },
      events: {
        hide: function(event, api) {
          $(this).qtip("destroy");
        }
      },
      position: {
        adjust: {
          x: -1
        }
      },
      style: {
        classes: "qtip-red"
      }
    };
    var restrictedDatatypes = ['file', 'mixed', 'string', 'link'];
    var inbuiltClassFields = _.cloneDeep(constants.classes.inbuiltFields)
    
    this.fieldSelectModalTmpl = fieldSelectModalTmpl;

    this.isGroup = function(field) {
      return field.data_type === "group";
    }

    this.isReference = function(field) {
      return field.data_type === "reference";
    }

    this.formatClassFields = function(schema, includeInbuiltFields) {
      if(includeInbuiltFields)
        schema = schema.concat(inbuiltClassFields);

      return _.filter(schema, function(obj) {
        if (!_.contains(restrictedDatatypes, obj.data_type)) {
          obj['id'] = obj.uid;
          obj['text'] = obj.display_name;
          return true;
        } else {
          return false;
        }
      })
    }

    this.showErrorTips = function(els, o) {
      var options = _.extend({}, tipOptions, (o || {}))
      for (var i = 0; i < els.length; i++) {
        var el = els[i];
        var opts = _.cloneDeep(options);
        if(el.data('error-text'))
          opts.content.text = function(api){return el.data('error-text')};
        
        TIP.show(el, opts);
      }
    }

    this.destroyErrorTips = function(elem) {
      elem.find('[rel=tooltip]').tooltip('destroy');
    }

    this.destroyTip = function(el) {
      TIP.destroy(el);
    }

    this.fieldSelectModalCtrl = function($scope, $modalInstance, data) {

      var fieldSelect = null;
      $scope.nestedFieldData = data.data.query.fieldData; // Group field or reference field.
      $scope.currentQuery = data.data.currentQuery;

      // DOM
      $scope.refLoading = false;
      $scope.refError = false;

      function initFieldSelect(currentField) {

        // Itrate fields and add id and text keys to the fields in field.schema
        var fields = self.formatClassFields(currentField.schema, false);

        if (fieldSelect.data('select2') !== undefined) {
          fieldSelect.select2('destroy');
        }

        fieldSelect.val(null);
        fieldSelect.select2({
          data: fields
        })

        fieldSelect.off('change').on('change', function() {
          Utils.sa($scope, function() {
            console.log("current selected field", fieldSelect.select2('data'));
            $scope.nestedFieldData.currentField = fieldSelect.select2('data');
            $scope.nestedFieldData.name += '.' + fieldSelect.select2('data').display_name;
            $scope.currentQuery._key = Utils.joinStr($scope.currentQuery._key, $scope.nestedFieldData.currentField.uid)
            checkSelectedField();
          })
        });
      }

      setTimeout(function() {
        fieldSelect = $('.js-select-field-modal-select');
        checkSelectedField();
      }, 0);

      function checkSelectedField() {
        Utils.sa($scope, function() {


          if (self.isGroup($scope.nestedFieldData.currentField)) {

            initFieldSelect($scope.nestedFieldData.currentField)

          } else if (self.isReference($scope.nestedFieldData.currentField)) {

            $scope.refLoading = true;
            getReferenceField($scope.nestedFieldData.currentField)
              .then(function(field) {
                // $scope.currentQuery.value['key'] = '$in_query';
                // $scope.currentQuery.value['value'] = {
                //   key: '',
                //   value: {},
                //   fieldData: {}
                // }
                console.log(field);
                $scope.currentQuery._value['_key'] = '$select';
                $scope.currentQuery._value['_value'] = {
                  key: 'uid',
                  class_uid: field.uid,
                  query: {
                    _key: '',
                    _value: {},
                    fieldData: {}
                  }
                }


                // change current query value - Basically narrow the scope of the query.
                //$scope.currentQuery = $scope.currentQuery.value['value'];
                $scope.currentQuery = $scope.currentQuery._value['_value']['query'];

                // set current query path.
                //$scope.nestedFieldData.currentQueryPath = Utils.joinStr($scope.nestedFieldData.currentQueryPath, 'value.value');
                $scope.nestedFieldData.currentQueryPath = Utils.joinStr($scope.nestedFieldData.currentQueryPath, '_value._value.query');

                // Initialize the selectbox with new fields.
                initFieldSelect(field);

              }, function(xhr) {
                $scope.refError = true;
              }).finally(function() {
                $scope.refLoading = false;
              });
          }
        });
      }

      function getReferenceField(field) {
        return builtApi.Classes.getOne({
          options: {
            classUid: field.reference_to
          }
        })
      }

      $scope.ok = function() {
        if(_.isEmpty(fieldSelect.select2('data')))
          return;

        $modalInstance.close({
          query: data.data.query,
          currentQuery: $scope.currentQuery
        });
      }

      $scope.cancel = function() {
        $modalInstance.dismiss();
      };
    }
  }
]
},{"../partials/field-select-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\objects-query-builder\\partials\\field-select-modal.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\post-message-upload\\directives\\post-message-upload.js":[function(require,module,exports){
'use strict';
var formUpload = require('../partials/file-upload.html')

module.exports = [
  '$sce',
  function($sce) {
    var iframe = '<iframe height="1" width="1" id="ACTION_TARGET" name="ACTION_TARGET" class="hidden" src=""></iframe>';
    return {
      restrict: 'A',
      transclude: true,
      scope: {
        prop: '=prop',
        authtoken: '=authtoken',
        url: '=url',
        apikey: '=apikey',
        apihost: '=apihost',
        randvalue: '=randvalue'
      },
      template: formUpload,
      link: function(scope, elem, attrs) {
        scope.host = window.location.protocol + '//' + window.location.host;
        scope.actionTarget = 'object-file-upload-form-iframe' + scope.randvalue;
        scope.actionurl = $sce.trustAsResourceUrl('/v1/'+scope.url+'.postmessage?AUTHTOKEN='+scope.authtoken+'&APPLICATION_API_KEY=' + scope.apikey + '&file=true&postmessage_payload=' + scope.randvalue);
        $(elem).append(iframe.replace(/ACTION_TARGET/g, scope.actionTarget));
      }
    }
  }
]
//v1/
},{"../partials/file-upload.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\post-message-upload\\partials\\file-upload.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\post-message-upload\\partials\\file-upload.html":[function(require,module,exports){
module.exports = '<form class="object-file-upload-form clearfix" action="{{actionurl}}" method="POST" target="{{actionTarget}}" enctype="multipart/form-data" multipart="">\n' +
    '    <input type="hidden" name="host" value="{{host}}" />    \n' +
    '    <div ng-transclude></div>\n' +
    '</form>\n' +
    '\n' +
    '\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\post-message-upload\\post-message-upload.js":[function(require,module,exports){
'use strict';
var postMessageUpload = require('./directives/post-message-upload');
var postMessageUploadService = require('./services/post-message-upload');

module.exports = angular.module('postMessageUpload', [])
  .directive('fileUpload', postMessageUpload)
  .service('postMessageUploadService', postMessageUploadService);

},{"./directives/post-message-upload":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\post-message-upload\\directives\\post-message-upload.js","./services/post-message-upload":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\post-message-upload\\services\\post-message-upload.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\post-message-upload\\services\\post-message-upload.js":[function(require,module,exports){
'use strict';
var defers = {};
module.exports = [
  '$q',
  '$rootScope',
  function($q, $rootScope) {
    var cleanUp = function(delimiter) {
      delete defers[delimiter];
    };

    this.getPostMessage = function(d) {
      var deferred = $q.defer();
      defers[d] = deferred;
      return defers[d].promise;
    }

    if ($rootScope.postMsgAttached) return;

    $rootScope.postMsgAttached = true;

    $(window).on('message', function(res) {
      //Check was done regarding Browserify adding a 'process-tick' to window on message event.
      if (res.originalEvent.data != "process-tick") {
        var dataObj = JSON.parse(res.originalEvent.data);
        if (defers[dataObj.postmessage_payload]) {
          defers[dataObj.postmessage_payload].resolve(dataObj);
          cleanUp(dataObj.postmessage_payload);
        }
      }
    });

  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\extensions\\controllers\\logs-ctrl.js":[function(require,module,exports){
'use strict';
require('third-party-modules/footable');

module.exports = [
  '$scope',
  '$state',
  '$interval',
  'builtApi',
  '$injector',
  'constants',
  'alertService',
  'utilsService',
  'libraryService',
  function($scope, $state, $interval, builtApi, $injector, constants, Alert, Utils, LIB) {

    console.log("i am in logs-ctrl")
    var logInterval;
    $scope.gettingExtApp = true;

    $scope.dateRange = {
      startDate: moment().format(),
      endDate: moment().format()
    };

    builtApi.Extensions.get({
      options: {
        paramId: 'applications'
      }
    }).then(function(app) { 
      console.log(app)
      $scope.extension = app.ccapp;

      if ($scope.extension.status !== 'deployed') {
        $scope.canShowLogs = false;
      } else {
        $scope.canShowLogs = true;
        initLogging();
      }
    }, function(xhr) {
      $scope.canShowLogs = false;
    }).finally(function() {
      $scope.gettingExtApp = false;
    })

    function initLogging() {

      $scope.ccLogs = [];
      $scope.isRealTimeEnabled = false;
      $scope.apiKey = $state.params.api_key;
      $scope.firstTime = true;

      getLogsByDate();
      $scope.onDateRangeChange = function(range) {
        getLogsByDate();
      }

    }

    $scope.$on('$destroy', function(){
      $interval.cancel(logInterval);
    })
    //Get Logs by Date Range
    function getLogsByDate() {

      if (!$state.is('app.dashboard.extensions-logs')){
        $interval.cancel(logInterval);
        return;
      }

      $scope.gettingLogs = true;

      $scope.dateRange.startDate = new Date($scope.dateRange.startDate);
      $scope.dateRange.endDate = new Date($scope.dateRange.endDate);

      //Check if realtime is set
      if ($scope.isRealTimeEnabled) {
        $scope.gettingLogs = false;
        $scope.dateRange.startDate = $scope.dateRange.endDate;
        $scope.dateRange.endDate = new Date()

        //For first Time use current start-Datetime
        if ($scope.firstTime)
           $scope.dateRange.startDate = new Date()
      } else{
        // Change the time of toDate to 00:00:00 to get all logs of that day.
         $scope.dateRange.startDate.setHours(0);
         $scope.dateRange.startDate.setMinutes(0);
         $scope.dateRange.startDate.setSeconds(0);

         // Change the time of toDate to 23:59:59 to get all logs of that day.
         $scope.dateRange.endDate.setHours(23);
         $scope.dateRange.endDate.setMinutes(59);
         $scope.dateRange.endDate.setSeconds(59);
      }

      // GET CC-logs
      builtApi.Extensions.get({
        options: {
          paramId: 'logs',
          query: {
            app_api_key: $scope.apiKey,
            from: $scope.dateRange.startDate.toISOString(),
            to: $scope.dateRange.endDate.toISOString()
          }
        }
      }).then(function(ccLogs) {

        //Check if realtime is set 
        if ($scope.isRealTimeEnabled) {
          $scope.firstTime = false;
          for (var i = ccLogs.logs.length - 1; i >= 0; i--) {
            $scope.ccLogs.unshift(ccLogs.logs[i]);
          };
        } else{
          $scope.ccLogs = ccLogs.logs;
        }
      }, function(xhr) {
        Alert.notify({
          title: xhr.entity.error_message,
          content: Utils.parseError(xhr.entity),
          type: 'error'
        })
      }).finally(function() {
        $scope.gettingLogs = false;
      })
    }

    //Toggle Realtime Switch
    $scope.toggleRealtime = function() {

      if ($scope.isRealTimeEnabled) {
        $scope.isRealTimeEnabled = false;
        //Cancel 
        $interval.cancel(logInterval);
        logInterval = undefined;
      } else {
        if ( angular.isDefined(logInterval) ) return;

        logInterval = $interval(getLogsByDate, 10000);
        $scope.isRealTimeEnabled = true;
      }
    }


    //Required Date format functors
    $scope.getDate = function(date) {
      return moment(new Date(date)).format('ddd Do MMM, YYYY h:mm:ss A');
    }

    $scope.getHumanizedDate = function(date) {
      return moment(new Date(date)).calendar();
    }
  }
]
},{"third-party-modules/footable":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\footable\\footable.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\extensions\\controllers\\setup-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$state',
  '$timeout',
  'builtApi',
  'alertService',
  'utilsService',
  'serverConfig',
  'currentApiHost',
  'currentUser',
  'postMessageUploadService',
  function($scope, $state, $timeout, builtApi, Alert, Utils, serverConfig, currentApiHost, currentUser, postMessageUploadService) {
    $scope.hasExtensions = "loading";

    $scope.serverConfig = serverConfig;
    $scope.extension = {};
    $scope.extensionNameStatus = null;
    $scope.phaseStatusText = 'Stop app';
    $scope.downloadLink = window.location.protocol + '//' + window.location.host + '/v1/cc/applications/downloads?APPLICATION_API_KEY=' + $state.params.api_key;

    var apiKey = $state.params.api_key;

    $scope.formData = {
      authtoken: currentUser.authtoken,
      url: "cc/applications",
      apiKey: apiKey,
      apihost: currentApiHost.api_host,
      randvalue: Utils.getRand(),
    }

    //Check Extension name
    var checkExtensionName = _.debounce(function(appName) {
      builtApi.Extensions.get({
        options: {
          paramId: 'applications/availability',
          query: {
            app_name: appName
          }
        }
      }).then(function(data) {
        if (!_.isEmpty($scope.extension.app_name))
          $scope.extensionNameStatus = 'available';

      }, function(xhr) {
        if (!_.isEmpty($scope.extension.app_name))
          $scope.extensionNameStatus = 'not-available';
      })
    }, 300);

    $scope.checkKey = function(e) {
      if (e.keyCode === 13) {
        $scope.addDomain();
      }
    }

    $scope.addDomain = function() {
      var button = $('.js-btn-add-domain');
      console.log($scope.domainName)
      if (_.isEmpty($scope.domainName))
        return;

      button.button('loading');
      builtApi.Extensions.addDomain({
        options: {
          paramId: 'domains'
        },
        body: {
          app_api_key: apiKey,
          domain: $scope.domainName
        }
      }).then(function(res) {
        if (!$scope.extension['custom_domains']) {
          $scope.extension['custom_domains'] = [];
        }
        $scope.extension['custom_domains'].push($scope.domainName);
        $scope.domainName = '';
        Alert.notify({
          title: 'Success',
          content: res.notice,
          type: 'success'
        });
      }, function(xhr) {
        Alert.notify({
          title: xhr.entity.error_message,
          content: Utils.parseError(xhr.entity),
          type: 'error'
        })
      }).finally(function() {
        button.button('reset');
      })
    }

    $scope.startStopExtension = function() {
      var button = $('.js-start-stop-ext');
      var urlSuffix = $scope.extension.status === 'deployed' ? 'stop' : 'start';
      button.attr('disabled', 'disabled');

      builtApi.Extensions.state({
        options: {
          paramId: 'applications/' + urlSuffix
        }
      }).then(function(res) {
        $scope.extension.status = $scope.extension.status === 'deployed' ? 'stopped' : 'deployed';
        Alert.notify({
          title: 'Success',
          content: res.notice,
          type: 'success'
        });
      }, function(xhr) {
        Alert.notify({
          title: xhr.entity.error_message,
          content: Utils.parseError(xhr.entity),
          type: 'error'
        })
      }).finally(function() {
        button.removeAttr('disabled');
      })
    }



    $scope.deleteDomain = function(domain) {
      var index = $scope.extension.custom_domains.indexOf(domain);
      builtApi.Extensions.delete({
          options: {
            paramId: "domains"
          },
          body: {
            app_api_key: apiKey,
            domain: domain
          }
        })
        .then(function(res) {
          $scope.extension.custom_domains.splice(index, 1);
          Alert.notify({
            title: 'Success',
            content: res.notice,
            type: 'success'
          });
        }, function(xhr) {
          Alert.notify({
            title: xhr.entity.error_message,
            content: Utils.parseError(xhr.entity),
            type: 'error'
          })
        })
    }

    $scope.submitExtension = function() {
      var form = $('.js-setup-form').find('form');
      var button = $('.js-btn-deploy-app');
      if (_.isEmpty($scope.extension.app_name)) {
        Alert.confirm({
          title: 'Please enter your extension app name!',
          content: '',
          buttons: '[Dismiss]'
        });
        return;
      } else if (_.isEmpty(form.find('[name="ccapp[app_zip]"]').val())) {
        Alert.confirm({
          title: 'Please choose a valid (.zip) file!',
          content: '',
          buttons: '[Dismiss]'
        });
        return;
      } else if (!$scope.hasExtensions && $scope.extensionNameStatus !== 'available') {
        Alert.confirm({
          title: 'App name already taken!',
          content: 'The app name you have entered is already taken. Please select a different app name and try again.',
          buttons: '[Dismiss]'
        });
      } else {
        button.button('loading');
        form.trigger('submit');
        postMessageUploadService.getPostMessage($scope.formData.randvalue)
          .then(function(res) {
            if (res.hasOwnProperty('error_code')) {
              Alert.notify({
                title: "File upload failed!",
                content: res.error_message,
                type: 'error'
              })
            } else {
              $scope.hasExtensions = true;
              $('.js-setup-form').find('form')[0].reset();
              getExtension();
              Alert.notify({
                title: 'Success',
                content: res.notice,
                type: 'success'
              });
            }
          }).finally(function() {
            button.button('reset');
          });
      }
    }



    //Watch on-change extension name 
    $scope.$watch('extension.app_name', function(newName) {

      console.log('New name', newName);
      //Check if Extension is already Present
      if ($scope.hasExtensions)
        return;
      //Check if modified name is not empty
      if (_.isEmpty(newName)) {
        $scope.extensionNameStatus = null;
        return;
      }
      $scope.extensionNameStatus = 'searching';
      checkExtensionName(newName)

    })

    $scope.deleteExtension = function() {
      Alert.confirm({
          title: 'Delete Extension app',
          content: 'Are you sure you want to delete this extension app?'
        })
        .then(function() {
          builtApi.Extensions.delete({
              options: {
                paramId: "applications"
              }
            })
            .then(function(res) {
              $scope.hasExtensions = false;
              $scope.extension = {};
              $('.js-setup-form').find('form')[0].reset();
              Alert.notify({
                title: 'Success',
                content: res.notice,
                type: 'success'
              });
            }, function(xhr) {
              Alert.notify({
                title: xhr.entity.error_message,
                content: Utils.parseError(xhr.entity),
                type: 'error'
              })
            })
        })
    }

    $scope.extensionStateRestart = function() {
      var button = $('.js-restart-ext');
      button.attr('disabled', 'disabled').find('.fa').addClass('fa-spin');
      builtApi.Extensions.state({
        options: {
          paramId: 'applications/restart',
        }
      }).then(function(res) {
        Alert.notify({
          title: 'Success',
          content: res.notice,
          type: 'success'
        });
      }, function(xhr) {
        Alert.notify({
          title: xhr.entity.error_message,
          content: Utils.parseError(xhr.entity),
          type: 'error'
        })
      }).finally(function() {
        button.removeAttr('disabled').find('.fa').removeClass('fa-spin');
      })
    }

    //cc applications call
    function getExtension() {
      if (!$state.is('app.dashboard.extensions-setup'))
        return;

      builtApi.Extensions
        .get({
          options: {
            paramId: 'applications'
          }
        })
        .then(function(extension) {
          console.log("Check status: ", extension.ccapp.status)
          $scope.extension = extension.ccapp
          $scope.hasExtensions = true;

          Utils.tip({
            containe: 'body'
          });

          if (extension.ccapp.status == "pending") {
            $timeout(function() {
              getExtension();
            }, 10000);
          }
        }, function(xhr) {
          xhr = xhr.entity;
          $scope.hasExtensions = false;
        });
    }

    getExtension();
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\extensions\\extensions.js":[function(require,module,exports){
'use strict';

//Dependency Modules
var angular = require('third-party-modules/angular');
var uiRouter = require('angular-ui-router');
var resolvers = require('../manage/resolvers');

//Controllers
var logsCtrl = require('./controllers/logs-ctrl');
var setupCtrl = require('./controllers/setup-ctrl');

//Templates
var setupTemplate = require('./partials/setup.html');
var logsTemplate = require('./partials/logs.html');


module.exports = angular.module('built.extensions', ['ui.router'])
  .controller('setupCtrl', setupCtrl)
  .controller('logsCtrl', logsCtrl)
  .config([
    '$stateProvider',
    function($stateProvider) {
      $stateProvider
        .state('app.dashboard.extensions-setup', {
          url: '/extensions/setup',
          template: setupTemplate,
          controller: 'setupCtrl',
          data: {
            breadcrumbs: [{
              name: "Extensions"
            }, {
              name: 'Setup'
            }]
          }
        })
        .state('app.dashboard.extensions-logs', {
          url: '/extensions/logs',
          template: logsTemplate,
          resolve: resolvers.resolve(['extensions']),
          controller: 'logsCtrl',
          data: {
            breadcrumbs: [{
              name: "Extensions"
            }, {
              name: 'Logs'
            }]
          }
        })
    }
  ])
  .run([
    "menuService",
    function(menu) {
      var menuItem = {
        id: 'extensions',
        title: 'Extensions',
        order: 9,
        icon: 'fa-cloud',
        sub_menu: [{
          id: 'setup',
          title: 'Setup',
          state: 'app.dashboard.extensions-setup'
        }, {
          id: 'logs',
          title: 'Logs',
          state: 'app.dashboard.extensions-logs'
        }]
      }
      menu.add(menuItem);
    }
  ]);
},{"../manage/resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/logs-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\extensions\\controllers\\logs-ctrl.js","./controllers/setup-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\extensions\\controllers\\setup-ctrl.js","./partials/logs.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\extensions\\partials\\logs.html","./partials/setup.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\extensions\\partials\\setup.html","angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\angular-ui-router\\release\\angular-ui-router.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\extensions\\partials\\logs.html":[function(require,module,exports){
module.exports = '<div class="ext-logs-wrap">\n' +
    '    <div ng-if="!gettingExtApp && canShowLogs">\n' +
    '        <div class=\'button-wrap mb10\'>\n' +
    '            <button class="pull-left btn txt-color-white mr10 trans01s" ng-class="{\'bg-color-magenta\': isRealTimeEnabled, \' bg-color-blue\' : !isRealTimeEnabled}" ng-click="toggleRealtime()">\n' +
    '                <i class="fa fa-bullseye mr5 fa-lg" ng-class="{\'flashy\': isRealTimeEnabled}"></i>\n' +
    '                <span ng-if="!isRealTimeEnabled">Enable</span>\n' +
    '                <span ng-if="isRealTimeEnabled">Disable</span>\n' +
    '                 real time\n' +
    '            </button>\n' +
    '            <button class="btn btn-danger pull-left" ng-if="!isRealTimeEnabled">\n' +
    '                <i class="fa fa-trash-o mr5"></i> Clear logs\n' +
    '            </button>\n' +
    '            \n' +
    '            <div class="date-range-picker-wrap pull-right" ng-class="{\'disabled\': isRealTimeEnabled}">\n' +
    '                <div class="date-range-picker" bootstrap-daterangepicker date-range="dateRange" on-date-range-change="onDateRangeChange"></div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="data-tbl-wrap">\n' +
    '            <table class="table data-tbl log-table table-bordered table-hover">\n' +
    '                <thead>\n' +
    '                    <tr class=\'dt-head-tr\'>\n' +
    '                        <th class="log-level-th">Level</th>\n' +
    '                        <th>Log</th>\n' +
    '                        <th class="log-date-th">Datetime</th>\n' +
    '                    </tr>\n' +
    '                </thead>\n' +
    '                <tbody>\n' +
    '                    <tr ng-if="!gettingLogs" ng-repeat="log in ccLogs" ng-class="{\'blue-fade-5\' : isRealTimeEnabled}">\n' +
    '                        <td class="log-level">\n' +
    '                            <span class="label" ng-class="{\'label-success\':log.level == \'info\',\'label-warning\' : log.level == \'warn\', \'label-danger\' : log.level == \'error\'}" title="{{log.level}}">&nbsp;</span>\n' +
    '                        </td>\n' +
    '                        <td>\n' +
    '                            <div class="log-msg">\n' +
    '                                {{log.message}}\n' +
    '                            </div>\n' +
    '                        </td>\n' +
    '                        <td class="log-date">\n' +
    '                            <p>{{getHumanizedDate(log.timestamp)}}</p>\n' +
    '                            <p>{{getDate(log.timestamp)}}</p>\n' +
    '                        </td>\n' +
    '                    </tr>\n' +
    '                    <tr ng-if="gettingLogs">\n' +
    '                        <td colspan=\'100\'>\n' +
    '                            <div class="dt-loader">\n' +
    '                                <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '                            </div>\n' +
    '                        </td>\n' +
    '                    </tr>\n' +
    '                    <tr ng-if="!gettingLogs && !isRealTimeEnabled && !ccLogs.length">\n' +
    '                        <td colspan=\'100\'>\n' +
    '                            <div class="no-msg">\n' +
    '                                No logs found\n' +
    '                            </div>\n' +
    '                        </td>\n' +
    '                    </tr>\n' +
    '                </tbody>\n' +
    '            </table>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div ng-if="!gettingExtApp && !canShowLogs">\n' +
    '        <div class="well well-sm">\n' +
    '            <div class="alert alert-info mb0" ng-if="!extension">\n' +
    '                <h4 class="alert-heading">No extension app setup yet!</h4>\n' +
    '                You have not uploaded any extensions yet. Please upload an extension <a class="bold-text" ng-href="#/dashboard/{{apiKey}}/extensions/setup">here</a>.\n' +
    '            </div>\n' +
    '            <div class="alert alert-info mb0" ng-if="extension.status === \'stopped\'">\n' +
    '                <h4 class="alert-heading">You have stopped your extension app!</h4>\n' +
    '                Your extension is in \'stopped\' state. No logs can be recorded or retrived from your app in this state. Please start your <a class="bold-text" ng-href="#/dashboard/{{apiKey}}/extensions/setup">extension app</a> to view previous or realtime logs.\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\extensions\\partials\\setup.html":[function(require,module,exports){
module.exports = '<div class="well well-sm extensions-wrap max-width-800">\n' +
    '    <div class="row">\n' +
    '        <div class="col-sm-12">\n' +
    '            <legend class="pg-header">\n' +
    '                Setup your extension app\n' +
    '            </legend>\n' +
    '            <p class="pg-tagline">\n' +
    '                Cloud Extensions allows you to extend the functionality of your built.io application. Upload your JavaScript code containing your custom business logic below. For more info, please refer the <a href="https://docs.built.io/guide/extensions" target="_blank" class="bold-text">documentation</a>.\n' +
    '            </p>\n' +
    '\n' +
    '            <div class="es-header animated fadeIn" ng-if="hasExtensions && hasExtensions!=\'loading\'">\n' +
    '                <div class="media">\n' +
    '                    <div class="pull-right">\n' +
    '                        <div class="btn-group">\n' +
    '                            <button rel="tooltip" class="btn btn-default btn-sm js-restart-ext" ng-show="hasExtensions && extension.status === \'deployed\'" ng-click="extensionStateRestart()" title="Restart app" data-placement="bottom">\n' +
    '                                <i class="fa fa-refresh"></i>\n' +
    '                            </button>\n' +
    '                            <button rel="tooltip" class="btn btn-default btn-sm js-start-stop-ext" ng-show="hasExtensions && extension.status === \'deployed\'" ng-click="startStopExtension()" title="Stop app" data-placement="bottom">\n' +
    '                                <i class="fa fa-stop"></i>\n' +
    '                            </button>\n' +
    '                            <button rel="tooltip" class="btn btn-default btn-sm js-start-stop-ext" ng-show="hasExtensions && extension.status === \'stopped\'" ng-click="startStopExtension()" title="Start app" data-placement="bottom">\n' +
    '                                <i class="fa fa-play"></i>\n' +
    '                            </button>\n' +
    '                            <button rel="tooltip" ng-click="deleteExtension()" class="btn btn-danger btn-sm" title="Delete app" data-placement="bottom">\n' +
    '                                <i class="fa fa-trash-o"></i>\n' +
    '                            </button>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <div class="media-body">\n' +
    '                        <p>\n' +
    '                            <a target="_blank" ng-href="http://{{extension.app_name}}{{serverConfig.extension_domain_suffix}}">{{extension.app_name}}{{serverConfig.extension_domain_suffix}}</a> \n' +
    '                        </p>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="js-setup-form form-horizontal animated fadeIn" ng-if="hasExtensions!=\'loading\'" file-upload authtoken="formData.authtoken" url="formData.url" apikey="formData.apiKey" apihost="formData.apihost" randvalue="formData.randvalue">\n' +
    '                <input type="hidden" name="ccapp[app_name]" value="{{extension.app_name}}">\n' +
    '                <fieldset>\n' +
    '                    <div class="form-group" ng-if="!hasExtensions">\n' +
    '                        <label class="col-md-3 control-label">Choose your app name</label>\n' +
    '                        <div class="col-md-5" ng-class="{\'has-success\': extensionNameStatus==\'available\', \'has-error\': extensionNameStatus==\'not-available\'}">\n' +
    '                            <div class="input-group">\n' +
    '                                <input class="form-control" type="text" ng-model="extension.app_name" ng-value="extension.app_name" required>\n' +
    '                                <span class="input-group-addon">\n' +
    '                                    <i class="fa fa-thumbs-up" title="This app name is available." ng-if="extensionNameStatus==\'available\'"></i>\n' +
    '                                    <i class="fa fa-thumbs-down" title="This app name is not available." ng-if="extensionNameStatus==\'not-available\'"></i>\n' +
    '                                    <i class="fa fa-cloud" title="This app name is not available." ng-if="extensionNameStatus==null"></i>\n' +
    '                                    <i class="fa fa-spinner fa-spin" ng-if="extensionNameStatus==\'searching\'" title="This app name is not available." ng-if="extensionNameStatus==\'not-available\'"></i>\n' +
    '                                </span>\n' +
    '                            </div>\n' +
    '                            <span class="help-block">\n' +
    '                                <span ng-if="extensionNameStatus==\'searching\'">Checking availability...</span>\n' +
    '                                <span ng-if="extensionNameStatus==\'available\'">This app name is available!</span>\n' +
    '                                <span ng-if="extensionNameStatus==\'not-available\'">This app name is not available!</span>\n' +
    '                            </span>\n' +
    '                            <p ng-if="extension.app_name.length">\n' +
    '                                {{extension.app_name}}{{serverConfig.extension_domain_suffix}}\n' +
    '                            </p>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '\n' +
    '                    <div class="form-group animated fadeIn" ng-if="hasExtensions">\n' +
    '                        <label class="col-md-3 control-label">Download your source code</label>\n' +
    '                        <div class="col-md-9">\n' +
    '                            <div class="es-download-link">\n' +
    '                                <a target="_blank" ng-href="{{downloadLink}}">{{downloadLink}}</a>\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '\n' +
    '                    <div class="form-group" ng-show="extension.status != \'stopped\'">\n' +
    '                        <label class="col-md-3 control-label">\n' +
    '                            <span ng-if="!hasExtensions">Upload</span>\n' +
    '                            <span ng-if="hasExtensions">Update</span> your code\n' +
    '                            <span class="mute-text">(.zip)</span>\n' +
    '                        </label>\n' +
    '                        <div class="col-md-5">\n' +
    '                            <input type="file" title="Choose a zip file" name="ccapp[app_zip]" class="form-control" max="1" required>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </fieldset>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="es-footer animated fadeIn" ng-if="hasExtensions!=\'loading\'">\n' +
    '                <div class="media">\n' +
    '                    <div class="pull-right">\n' +
    '                        <a ng-show="extension.status != \'stopped\'" class="btn btn-primary js-btn-deploy-app btn-sm" data-loading-text="Deploying..." ng-click="submitExtension()">\n' +
    '                           Deploy app\n' +
    '                        </a>\n' +
    '                    </div>\n' +
    '                    <div class="media-body es-status-wrap">\n' +
    '                        <div ng-if="extension.status==\'pending\'">\n' +
    '                            <i class="fa fa-lg fa-cloud-upload mr5 yellow-text flashy"></i> Please hold on while your app gets deployed...\n' +
    '                        </div>\n' +
    '                        <div ng-if="extension.status==\'deployed\'" class="animated fadeIn">\n' +
    '                            <i class="fa fa-lg fa-check-square mr5 green-text"></i> Your app is up and running!\n' +
    '                        </div>\n' +
    '                        <div ng-if="extension.status==\'not_deployed\'" class="animated fadeIn">\n' +
    '                            <i class="fa fa-lg fa-circle mr5"></i> Your app is not deployed yet.\n' +
    '                        </div>\n' +
    '                        <div ng-if="extension.status==\'error\'" class="animated fadeIn">\n' +
    '                            <i class="fa fa-lg fa-exclamation-triangle mr5 red-text"></i> There was a problem deploying the app.\n' +
    '                            <p class="ext-reason">Reason: {{extension.reason}}</p>\n' +
    '                        </div>\n' +
    '                        <div ng-if="extension.status==\'stopped\'" class="animated fadeIn">\n' +
    '                            <i class="fa red-text fa-stop mr5"></i>Your application is stopped.</p>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="tab-loader" ng-if="hasExtensions==\'loading\'">\n' +
    '                <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div class="row mt20 animated fadeIn" ng-show="hasExtensions && hasExtensions!=\'loading\' && extension.status !== \'stopped\'">\n' +
    '        <div class="col-sm-12">\n' +
    '            <legend class="pg-header">\n' +
    '                Domain\n' +
    '            </legend>\n' +
    '            <p>\n' +
    '                Setup custom domains to point to your website.\n' +
    '            </p>\n' +
    '            <div class="domain-input-wrap">\n' +
    '                <div class="input-group">\n' +
    '                    <input type="text" placeholder="Enter a domain name..." class="form-control input-sm" ng-model="domainName" ng-value="domainName" ng-keyup="checkKey($event)">\n' +
    '                    <span class="input-group-btn">\n' +
    '                        <button class="btn btn-primary js-btn-add-domain btn-sm" ng-click="addDomain()" data-loading-text="Adding...">Add Domain</button>\n' +
    '                    </span>\n' +
    '                </div>\n' +
    '                <ul class="d-list">\n' +
    '                    <li ng-repeat="domain in extension.custom_domains" class="d-item">\n' +
    '                        <div>\n' +
    '                            <code>{{domain}}</code>\n' +
    '                            <a class="btn btn-sm btn-danger btn-delete-domain" ng-click="deleteDomain(domain)">\n' +
    '                                <i class="fa fa-trash-o"></i>\n' +
    '                            </a>\n' +
    '                        </div>\n' +
    '                    </li>\n' +
    '                </ul>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\integration\\controllers\\integration-ctrl.js":[function(require,module,exports){
'use strict';
require('third-party-modules/footable');
var hookModalTemplate = require('../partials/hook-modal-template.html');
var helpModalTemplate = require('../partials/help-modal-template.html');
module.exports = [
  '$scope',
  '$state',
  '$interval',
  'builtApi',
  '$injector',
  'modalService',
  'alertService',
  'utilsService',
  'integration',
  function($scope, $state, $interval, builtApi, $injector, Modal, Alert, Utils, integration) {
    var apiKey = $state.params.api_key;
    $scope.webHooks = integration;
    $scope.actions = ['edit', 'delete'];

    $scope.getChannelsString = function(channels) {
      return channels.toString();
    }

    $scope.action = function(act, hook) {
      if (act === 'create') {
        //create New Web hook
        createWebHook();
      }
      if (act === 'delete') {
        //Delete A Web Hook
        deleteWebHook(hook);
      }
      if (act === 'edit') {
        //Edit a Web hook
        editWebHook(hook);
      }
    }

    //Create New Web Hook
    function createWebHook() {
      Modal.openModal({
          uid: "",
          channels: [],
          url: "",
          action: "create"
        }, hookModalTemplate, webHookCtrl)
        .then(function(hook) {
          $scope.webHooks.push(hook.web_hook);
        })
    }

    //New web hook modal controller
    var webHookCtrl = function($scope, $modalInstance, data) {
      $scope.data = data;
      $scope.uidEditable = _.isEmpty(data.uid) ? true : false;
      $scope.btnStatus = false;
      //Select2 timeout hack
      setTimeout(function() {
        $('#js-channel-selection').select2({
          'multiple': true,
          tags: setSelect2data(data.channels),
          placeholder: "Enter comma(,) separated channels...",
          tokenSeparators: [","]
        });
        $('#js-channel-selection').select2('data', setSelect2data(data.channels))
          //On change Event of select2
        $('#js-channel-selection').on('change', function(e) {
          var select2Data = $('#js-channel-selection').select2('data')
          if (select2Data) {
            $scope.data.channels = select2Data.map(function(obj) {
              return obj.id;
            })
          }
        });
      }, 0);

      $scope.ok = function() {
        var WebHookRequest = "";
         $scope.btnStatus = true;
        //Post Web Hook
        console.log("$scope.data", $scope.data);
        if ($scope.data.action === "create")
          WebHookRequest = builtApi.Integration.post({
            body: {
              "app_api_key": apiKey,
              "web_hook": $scope.data
            }
          })

        //Edit Web Hook
        if ($scope.data.action === "edit")
          WebHookRequest = builtApi.Integration.put({
            options:{
              webHookUid : $scope.data.uid
            },
            body: {
              "app_api_key": apiKey,
              "web_hook": $scope.data,
              "webhook_uid": $scope.data.uid
            }
          })

        WebHookRequest.then(function(res) {
            $scope.btnStatus = false;
            $modalInstance.close(res);
            Alert.notify({
              title: 'Success',
              content: res.notice,
              type: 'success'
            });
          },
          function(xhr) {
            $scope.btnStatus = false;
            Alert.notify({
              title: xhr.entity.error_message,
              content: Utils.parseError(xhr.entity),
              type: 'error'
            })
           // $modalInstance.dismiss('cancel')
          })
      };

      //Cancel Modal Selection
      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      };

      //Format Select2 data
    }

    function setSelect2data(data) {

      if (_.isEmpty(data))
        return data;

      var tempArray = data.map(function(obj) {
        return {
          id: obj,
          text: obj
        }
      })
      return tempArray;
    }

    function editWebHook(hook) {
      hook['action'] = "edit";

      var index = $scope.webHooks.indexOf(hook);
      Modal.openModal(_.cloneDeep(hook), hookModalTemplate, webHookCtrl)
        .then(function(hook) {
          $scope.webHooks[index] = hook.web_hook;
        })
    }

    $scope.getHelp = function() {
      Modal.openModal({}, helpModalTemplate, helpCtrl)
    }

    //Get help modal Controller
    var helpCtrl = function($scope, $modalInstance, data) {
      $scope.data = data;
      $scope.ok = function() {
        $modalInstance.close();
      };
      //Cancel Modal Selection
      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      };
    }

    function deleteWebHook(hook) {
      var index = $scope.webHooks.indexOf(hook);
      Alert.confirm({
        title: 'Delete Web Hook',
        content: 'Are you sure you want to delete this Web Hook?'
      }).then(function() {
        builtApi.Integration.delete({
          options: {
            hookUid: hook.uid
          }
        }).then(function(res) {
          $scope.webHooks.splice(index, 1);
          Alert.notify({
            title: 'Success',
            content: res.notice,
            type: 'success'
          });
        }, function(xhr) {
          Alert.notify({
            title: xhr.entity.error_message,
            content: Utils.parseError(xhr.entity),
            type: 'error'
          })
        })
      })
    }

  }
]
},{"../partials/help-modal-template.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\integration\\partials\\help-modal-template.html","../partials/hook-modal-template.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\integration\\partials\\hook-modal-template.html","third-party-modules/footable":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\footable\\footable.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\integration\\integration.js":[function(require,module,exports){
'use strict';

var angular = require('third-party-modules/angular');
var uiRouter = require('angular-ui-router');
var resolvers = require('../manage/resolvers');
var integrationCtrl = require('./controllers/integration-ctrl');
var integrationTemplate = require('./partials/integration.html');


module.exports = angular.module('built.integration', ['ui.router'])
  .controller('integrationCtrl', integrationCtrl)
  .config([
    '$stateProvider',
    function($stateProvider) {
      $stateProvider
        .state('app.dashboard.integration', {
          url: '/integration',
          template: integrationTemplate,
          resolve : resolvers.resolve(['integration']),
          controller: 'integrationCtrl',
          data: {
            breadcrumbs: [{
              name: 'Integration'
            }]
          }
        })
    }
  ])
  .run([
    "$rootScope",
    "menuService",
    function($rootScope, menu) {
      var menuItem = {
        id: 'integration',
        title: 'Integration',
        order: 5,
        icon: 'fa-exchange',
        state: 'app.dashboard.integration'
      }
      menu.add(menuItem);
    }
  ]);
},{"../manage/resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/integration-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\integration\\controllers\\integration-ctrl.js","./partials/integration.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\integration\\partials\\integration.html","angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\angular-ui-router\\release\\angular-ui-router.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\integration\\partials\\help-modal-template.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click=\'cancel()\'>\n' +
    '        ×\n' +
    '    </button>\n' +
    '    <h3 class="modal-title">Web Hooks</h3>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '    <p>Webhooks allow you to integrate with events in your application.</p>\n' +
    '    <p>Webhooks let you register an URL, to which we will POST anytime the specified event is triggered. The events are encoded as "channels", which are strings that encode event information. The following events are triggered:</p>\n' +
    '    <p>* Create/Update/Delete of class</p>\n' +
    '    <p>* Create/Update/Delete of object</p>\n' +
    '    <p>* Create/Update/Delete of upload</p>\n' +
    '    <p>You may listen on one or more of these events, by listening on their corresponding channels.</p>\n' +
    '    <p>Channels have the following syntax:</p> <pre class="prettyprint">{class_uid}.{object_uid}.{event}</pre> \n' +
    '    <p>The structure for create/update/delete on a class,object or upload:</p> <pre class="prettyprint">class.{create|update|delete}<br>{class_uid}.object.{create|update|delete}<br>upload.create<br>{upload_uid}.update<br>{upload_uid}.delete</pre> \n' +
    '    <p>There are also more generic events:</p>\n' +
    '    <p>* when any event is triggered on any class:</p> <pre class="prettyprint">class.{create|update|delete}</pre> \n' +
    '    <p>* when any event is triggered on any object of a particular class:</p> <pre class="prettyprint">{class_uid}.object.{create|update|delete}</pre> \n' +
    '    <p>* when any event is triggered on any object:</p> <pre class="prettyprint">object.{create|update|delete}</pre> \n' +
    '    <p>* when any event is triggered on any upload:</p> <pre class="prettyprint">upload.delete<br>upload.update</pre> \n' +
    '    <p>For example, lets say you have a "Post" class, and want to be notified of any new post that is created. We may listen on the following channel to be notified of such an event:</p> <pre class="prettyprint">post.object.create</pre> \n' +
    '</div>\n' +
    '<div class="modal-footer">\n' +
    '    <a class="btn btn-labeled btn-default btn-sm pull-left" ng-click=\'cancel()\'>\n' +
    '        <span class="btn-label">\n' +
    '          <i class="fa fa-arrow-left"></i>\n' +
    '        </span>\n' +
    '        <span>\n' +
    '          Close\n' +
    '        </span>\n' +
    '    </a>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\integration\\partials\\hook-modal-template.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="cancel()">\n' +
    '        ×\n' +
    '    </button>\n' +
    '    <h3 class="modal-title"><span ng-show="data.action==\'create\'">New</span><span ng-show="data.action==\'edit\'">Edit</span> web hook</h3>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '    <div class="form-horizontal">\n' +
    '        <fieldset>\n' +
    '            <div class="form-group">\n' +
    '                <label class="col-md-2 control-label">UID</label>\n' +
    '                <div class="col-md-10">\n' +
    '                    <input type="text" class="form-control" ng-model="data.uid" ng-value="data.uid" ng-disabled="!uidEditable">\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="form-group">\n' +
    '                <label class="col-md-2 control-label">Channels</label>\n' +
    '                <div class="col-md-10">\n' +
    '                    <div class="select2-full-width" id="js-channel-selection"></div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="form-group">\n' +
    '                <label class="col-md-2 control-label">URL</label>\n' +
    '                <div class="col-md-10">\n' +
    '                    <input type="text" ng-model="data.url" ng-value="data.url" class="form-control" />\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '    </div>\n' +
    '</div>\n' +
    '<div class="modal-footer">\n' +
    '    <div class="button-wrap">\n' +
    '        <button ng-if="data.action==\'create\'" btn-loader="btnStatus" loading-text="Creating..." class="btn btn-labeled btn-primary btn-sm pull-right" ng-click="ok()">\n' +
    '            <span class="btn-label">\n' +
    '              <i class="fa fa-check"></i>\n' +
    '            </span>\n' +
    '            <span class="js-btn-text">\n' +
    '              Create\n' +
    '            </span>\n' +
    '        </button>\n' +
    '        <button ng-if="data.action==\'edit\'" btn-loader="btnStatus" loading-text="Updating..." class="btn btn-labeled btn-primary btn-sm pull-right" ng-click="ok()">\n' +
    '            <span class="btn-label">\n' +
    '              <i class="fa fa-check"></i>\n' +
    '            </span>\n' +
    '            <span class="js-btn-text">\n' +
    '              Update\n' +
    '            </span>\n' +
    '        </button>\n' +
    '        <button class="btn btn-labeled btn-default btn-sm pull-left" ng-click="cancel()">\n' +
    '            <span class="btn-label">\n' +
    '              <i class="fa fa-arrow-left"></i>\n' +
    '            </span>\n' +
    '            <span>\n' +
    '              Cancel\n' +
    '            </span>\n' +
    '        </button>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\integration\\partials\\integration.html":[function(require,module,exports){
module.exports = '<div class="">\n' +
    '    <div class=\'button-wrap mb10\'>\n' +
    '        <a ng-click="action(\'create\')" class="pull-left btn-labeled btn btn-primary">\n' +
    '            <span class="btn-label"><i class="fa fa-exchange"></i>\n' +
    '            </span>New web hook\n' +
    '        </a>\n' +
    '        <i class="fa fa-info-circle help-icon pull-left ml10" ng-click="getHelp()"></i>\n' +
    '    </div>\n' +
    '    <div class="data-tbl-wrap">\n' +
    '        <table class="table data-tbl log-table table-bordered table-hover">\n' +
    '            <thead>\n' +
    '                <tr class=\'dt-head-tr\'>\n' +
    '                    <th>UID</th>\n' +
    '                    <th>URL</th>\n' +
    '                    <th>Channels</th>\n' +
    '                    <th>Actions</th>\n' +
    '                </tr>\n' +
    '            </thead>\n' +
    '            <tbody>\n' +
    '                <tr ng-repeat = "hook in webHooks">\n' +
    '                    <td>{{hook.uid}}</td>\n' +
    '                    <td>{{hook.url}}</td>\n' +
    '                    <td>{{getChannelsString(hook.channels)}}</td>\n' +
    '                    <td>\n' +
    '                        <span title="{{act}}" ng-repeat=\'act in actions\' ng-click=\'action(act, hook)\' class="hand fa fa-lg edit_evnt ml10 dt-action-item" ng-class="{\'fa-pencil\' : act == \'edit\', \'fa-trash-o\' : act == \'delete\'}"></span>\n' +
    '                    </td>\n' +
    '                </tr>\n' +
    '            </tbody>\n' +
    '        </table>\n' +
    '    </div>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\account.js":[function(require,module,exports){
'use strict';

//Dependent Modules
var angular 									= require('third-party-modules/angular');
var uiRouter 									= require('third-party-modules/angular-ui-router');
var resolvers 								= require('../resolvers');

//Controllers
var accountCtrl 							= require('./controllers/account/account-ctrl');
var personalInfoCtrl 					= require('./controllers/personal-info/personal-info-ctrl');
var securityCtrl 							= require('./controllers/security/security-ctrl');
var plansCtrl 								= require('./controllers/plans/plans-ctrl');
var billingInfoCtrl 					= require('./controllers/billing-info/billing-info-ctrl');
var purchaseHistoryCtrl 			= require('./controllers/purchase-history/purchase-history-ctrl');
var metricsCtrl 				 			= require('./controllers/metrics/metrics-ctrl');

//Templates
var accountTemplate 					= require('./controllers/account/partials/account.html');
var personalInfoTemplate 			= require('./controllers/personal-info/partials/personal-info.html');
var securityTemplate 					= require('./controllers/security/partials/security.html');
var plansTemplate 						= require('./controllers/plans/partials/plans.html');
var billingInfoTemplate 			= require('./controllers/billing-info/partials/billing-info.html');
var purchaseHistoryTemplate 	= require('./controllers/purchase-history/partials/purchase-history.html');
var metricsTemplate 					= require('./controllers/metrics/partials/metrics.html');

//Directives
var billingInfoDirective 			= require('./directives/billing-info/billing-info');

module.exports = angular.module('built.account', ['ui.router'])
	.controller('accountCtrl', accountCtrl)
	.controller('personalInfoCtrl', personalInfoCtrl)
	.controller('securityCtrl', securityCtrl)
	.controller('plansCtrl', plansCtrl)
	.controller('billingInfoCtrl', billingInfoCtrl)
	.controller('purchaseHistoryCtrl', purchaseHistoryCtrl)
	.controller('metricsCtrl', metricsCtrl)
	.directive('billingInfo', billingInfoDirective)
	.config([
		'$stateProvider',
		function($stateProvider) {
			$stateProvider
				.state('app.account', {
					abstract: true,
					url: '/account',
					controller: 'accountCtrl',
					resolve: resolvers.resolve(['currentUser', 'accounts', 'plans']),
					template: accountTemplate
				})
				.state('app.account.personalInfo', {
					url: '/personal-info',
					controller: 'personalInfoCtrl',
					template: personalInfoTemplate,
					data: {
						layout: {
							leftMenu: false
						}
					}
				})
				.state('app.account.security', {
					url: '/security',
					controller: 'securityCtrl',
					template: securityTemplate,
					data: {
						layout: {
							leftMenu: false
						}
					}
				})
				.state('app.account.plans', {
					url: '/plans',
					controller: 'plansCtrl',
					template: plansTemplate,
					data: {
						layout: {
							leftMenu: false
						}
					}
				})
				.state('app.account.billingInfo', {
					url: '/billing-info',
					controller: 'billingInfoCtrl',
					resolve: resolvers.resolve(['billingInfo']),
					template: billingInfoTemplate,
					data: {
						layout: {
							leftMenu: false
						}
					}
				})
				.state('app.account.purchaseHistory', {
					url: '/purchase-history',
					controller: 'purchaseHistoryCtrl',
					resolve: resolvers.resolve(['paymentHistory']),
					template: purchaseHistoryTemplate,
					data: {
						layout: {
							leftMenu: false
						}
					}
				})
				.state('app.account.metrics', {
					url: '/metrics',
					controller: 'metricsCtrl',
					resolve: resolvers.resolve(['accountApiMetrics']),
					template: metricsTemplate,
					data: {
						layout: {
							leftMenu: false
						}
					}
				})
		}
	])
},{"../resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/account/account-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\account\\account-ctrl.js","./controllers/account/partials/account.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\account\\partials\\account.html","./controllers/billing-info/billing-info-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\billing-info\\billing-info-ctrl.js","./controllers/billing-info/partials/billing-info.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\billing-info\\partials\\billing-info.html","./controllers/metrics/metrics-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\metrics\\metrics-ctrl.js","./controllers/metrics/partials/metrics.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\metrics\\partials\\metrics.html","./controllers/personal-info/partials/personal-info.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\personal-info\\partials\\personal-info.html","./controllers/personal-info/personal-info-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\personal-info\\personal-info-ctrl.js","./controllers/plans/partials/plans.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\plans\\partials\\plans.html","./controllers/plans/plans-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\plans\\plans-ctrl.js","./controllers/purchase-history/partials/purchase-history.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\purchase-history\\partials\\purchase-history.html","./controllers/purchase-history/purchase-history-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\purchase-history\\purchase-history-ctrl.js","./controllers/security/partials/security.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\security\\partials\\security.html","./controllers/security/security-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\security\\security-ctrl.js","./directives/billing-info/billing-info":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\directives\\billing-info\\billing-info.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-router\\release\\angular-ui-router.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\account\\account-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
	'$scope',
	'$state',
	'appCacheService',
	function($scope, $state, appCacheService) {

		$scope.serverConfig = appCacheService.get('serverConfig');
		$scope.isActiveState = function(s) {
			return $state.is(s);
		}
	}
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\account\\partials\\account.html":[function(require,module,exports){
module.exports = '<div id="main" role=\'main\'>\n' +
    '    <div class="content animated fadeInDown clearfix">\n' +
    '        <div class="container accounts-page-wrap">\n' +
    '            <div class="row">\n' +
    '                <div class="col-md-3">\n' +
    '                    <div class="well nav-list-wrap">\n' +
    '                        <ul class="nav nav-list">\n' +
    '                            <li class="nav-header">Profile Settings</li>\n' +
    '                            <li ng-class="{\'active\': isActiveState(\'app.account.personalInfo\')}">\n' +
    '                                <a ui-sref="app.account.personalInfo">Personal information</a>\n' +
    '                            </li>\n' +
    '                            <li ng-class="{\'active\': isActiveState(\'app.account.security\')}">\n' +
    '                                <a ui-sref="app.account.security">Security</a>\n' +
    '                            </li>\n' +
    '                            <li ng-class="{\'active\': isActiveState(\'app.account.metrics\')}" ng-if="serverConfig.on_premise">\n' +
    '                                <a ui-sref="app.account.metrics">Metrics</a>\n' +
    '                            </li>\n' +
    '                            <li class="nav-header" ng-if="!serverConfig.on_premise">Plans and Payment</li>\n' +
    '                            <li ng-class="{\'active\': isActiveState(\'app.account.plans\')}" ng-if="!serverConfig.on_premise">\n' +
    '                                <a ui-sref="app.account.plans">Plans</a>\n' +
    '                            </li>\n' +
    '                            <li ng-class="{\'active\': isActiveState(\'app.account.metrics\')}" ng-if="!serverConfig.on_premise">\n' +
    '                                <a ui-sref="app.account.metrics">Metrics</a>\n' +
    '                            </li>\n' +
    '                            <li ng-class="{\'active\': isActiveState(\'app.account.billingInfo\')}" ng-if="!serverConfig.on_premise">\n' +
    '                                <a ui-sref="app.account.billingInfo">Billing info</a>\n' +
    '                            </li>\n' +
    '                            <li ng-class="{\'active\': isActiveState(\'app.account.purchaseHistory\')}" ng-if="!serverConfig.on_premise">\n' +
    '                                <a ui-sref="app.account.purchaseHistory">Purchase history</a>\n' +
    '                            </li>\n' +
    '                        </ul>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '                <div class="col-md-9">\n' +
    '                    <div ui-view></div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\billing-info\\billing-info-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
	'$scope',
	'$location',
	'$state',
	'builtApi',
	'alertService',
	'utilsService',
	'accounts',
	'billingInfo',
	'constants',
	function($scope, $location, $state, builtApi, Alert, Utils, accounts, billingInfo, constants) {
		$scope.billingInfo = billingInfo;
	}
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\billing-info\\partials\\billing-info.html":[function(require,module,exports){
module.exports = '<div billing-info="billingInfo"></div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\metrics\\metrics-ctrl.js":[function(require,module,exports){
'use strict';

require('third-party-modules/easy-piecharts');

module.exports = [
	'$scope',
	'$injector',
	'constants',
	'builtApi',
	'alertService',
	'utilsService',
	'accounts',
	'accountApiMetrics',
	'libraryService',
	'serverConfig',
	function($scope, $injector, constants, builtApi, Alert, Utils, accounts, ApiMetrics, LIB, serverConfig) {

		$scope.account = accounts[0];
		$scope.apiMetrics = ApiMetrics;
		$scope.graphDom = [];
		console.log("BC: ", serverConfig.on_premise || ($scope.account.plan ? false : true))
		$scope.onPremise = serverConfig.on_premise || ($scope.account.plan ? false : true);
		$scope.overall = {
			apiCalls: $scope.onPremise ? ApiMetrics.overall.total_api_usage : Utils.calcPercent(ApiMetrics.overall.total_api_usage, $scope.account.plan.functionalities.api_limit),
			pushNotifications: $scope.onPremise ? ApiMetrics.overall.push_notifications : Utils.calcPercent(ApiMetrics.overall.push_notifications, $scope.account.plan.functionalities.push_limit),
			storage: $scope.onPremise ? ApiMetrics.overall.file_storage_used : Utils.calcPercent(ApiMetrics.overall.file_storage_used, $scope.account.plan.functionalities.storage_limit)
		}

		// $scope.range = {
		// 	apiCalls: Utils.calcPercent(ApiMetrics.range.overall.total_api_usage, $scope.account.plan.functionalities.api_limit),
		// 	pushNotifications: Utils.calcPercent(ApiMetrics.range.overall.push_notifications, $scope.account.plan.functionalities.push_limit),
		// 	storage: Utils.calcPercent(ApiMetrics.range.overall.file_storage_used, $scope.account.plan.functionalities.storage_limit)
		// }

		$scope.modGraphData = [];
		$scope.dateRange = {
			startDate: $scope.apiMetrics.range.from,
			endDate: $scope.apiMetrics.range.to
		};

		$scope.getSize = function(mb) {
			if (mb == 0)
				return mb
			return Utils.bytesToSize(mb * 1024 * 1024);

		}

		$scope.humanizeNumber = function(v) {
			return Utils.humanizeNumber(v);
		}

	
		function prepareGraphData() {
			var rawGraphData = $.extend(true, {}, $scope.apiMetrics);
			var metrics = rawGraphData["range"]["stats"];
			$scope.modGraphData.length = 0;

			for (var key in metrics) {
				var series = [];
				var stat = metrics[key];

				for (var date in stat) {
					series.push([new Date(date).getTime(), stat[date]])
				}

				$scope.modGraphData.push({
					'name': key.charAt(0).toUpperCase() + key.slice(1).replace('_', ' '), // transform to uppercase and remove underscore.
					'data': series,
					'el': $("." + key + '-graph')
				});
			}
			$scope.modGraphData.sort(function(a, b) {
			  return a.name > b.name;
			})
		}

		$scope.onDateRangeChange = function(range) {
			getapiMetrics();
		}

		function getapiMetrics() {
			builtApi.ApiMetrics.get({
				options: {
					metricsType: 'account_api_metrics',
					query: {
						to: $scope.dateRange.endDate,
						from: $scope.dateRange.startDate
					}
				}
			})
				.then(function(apiMetrics) {
					$scope.apiMetrics = apiMetrics;
					showGraph();
				});
		}

		function renderGraphs() {
			console.log($scope.modGraphData);

			for (var i = 0; i < $scope.modGraphData.length; i++) {
				var hcOptions = _.cloneDeep(constants.charts.defaults.line);
				hcOptions.chart.height = 200;
				hcOptions.colors = [constants.charts.colorPalette[i]];
				hcOptions.series = [$scope.modGraphData[i]];

				$injector.invoke(['chartService',
					function(hc) {
						hc.drawChart({
							el: $scope.modGraphData[i].el,
							options: hcOptions
						})
					}
				]);
			};
		}

		function showGraph() {
			LIB.get('charts').then(function() {
				prepareGraphData();
				renderGraphs();
			});
		}

		showGraph();

		setTimeout(function() {
			if(!$scope.onPremise)
				runAllCharts();
			$('[rel=tooltip]').tooltip();
		}, 100);
	}
]
},{"third-party-modules/easy-piecharts":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\easy-piecharts\\easy-piecharts.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\metrics\\partials\\metrics.html":[function(require,module,exports){
module.exports = '<div class="metrics-wrap">	\n' +
    '	<legend>Overall account metrics</legend>\n' +
    '	<div class="well">\n' +
    '		<div class="row">\n' +
    '			<div class="col-md-4">\n' +
    '				<div class="stat-wrap" rel="tooltip" title="{{apiMetrics.overall.total_api_usage}} of {{account.plan.functionalities.api_limit}} API calls made" data-placement="bottom" ng-if="!onPremise">\n' +
    '					<h4 class="ep-header">\n' +
    '              API calls\n' +
    '          </h4>\n' +
    '					<div class="easy-pie-chart easyPieChart js-pie-chart txt-color-green" data-pie-size="130" data-percent="{{overall.apiCalls}}">\n' +
    '						<div class="percent percent-sign txt-color-green">\n' +
    '							<span>{{overall.apiCalls}}</span>\n' +
    '						</div>\n' +
    '					</div>\n' +
    '					<div class="ep-figure">\n' +
    '						{{humanizeNumber(apiMetrics.overall.total_api_usage)}}<span class="subscript"> of {{humanizeNumber(account.plan.functionalities.api_limit)}}</span>\n' +
    '					</div>\n' +
    '					<p class="ep-bottom-line">API calls made</p>\n' +
    '				</div>\n' +
    '\n' +
    '				<div class="stat-wrap sw-on-p" rel="tooltip" title="{{apiMetrics.overall.total_api_usage}} API calls made" data-placement="bottom" ng-if="onPremise">\n' +
    '					<h4 class="ep-header">\n' +
    '              API calls\n' +
    '          </h4>\n' +
    '					<div class="ep-figure">\n' +
    '						{{humanizeNumber(apiMetrics.overall.total_api_usage)}}\n' +
    '					</div>\n' +
    '					<p class="ep-bottom-line">API calls made</p>\n' +
    '				</div>\n' +
    '			</div>\n' +
    '			<div class="col-md-4">\n' +
    '				<div class="stat-wrap" rel="tooltip" title="{{apiMetrics.overall.push_notifications}} of {{account.plan.functionalities.push_limit}} push notifications sent" data-placement="bottom"  ng-if="!onPremise">\n' +
    '					<h4 class="ep-header">\n' +
    '              Push notifications\n' +
    '          </h4>\n' +
    '					<div class="easy-pie-chart easyPieChart js-pie-chart txt-color-blue" data-pie-size="130" data-percent="{{overall.pushNotifications}}">\n' +
    '						<div class="percent percent-sign txt-color-blue">\n' +
    '							<span>{{overall.pushNotifications}}</span>\n' +
    '						</div>\n' +
    '					</div>\n' +
    '					<div class="ep-figure">\n' +
    '						{{humanizeNumber(apiMetrics.overall.push_notifications)}}<span class="subscript"> of {{humanizeNumber(account.plan.functionalities.push_limit)}}</span>\n' +
    '					</div>\n' +
    '					<p class="ep-bottom-line">push notifications sent</p>\n' +
    '				</div>\n' +
    '				<div class="stat-wrap sw-on-p" rel="tooltip" title="{{apiMetrics.overall.push_notifications}} push notifications sent" data-placement="bottom"  ng-if="onPremise">\n' +
    '					<h4 class="ep-header">\n' +
    '              Push notifications\n' +
    '          </h4>\n' +
    '					<div class="ep-figure">\n' +
    '						{{humanizeNumber(apiMetrics.overall.push_notifications)}}\n' +
    '					</div>\n' +
    '					<p class="ep-bottom-line">push notifications sent</p>\n' +
    '				</div>\n' +
    '			</div>\n' +
    '			<div class="col-md-4">\n' +
    '				\n' +
    '				<div class="stat-wrap" rel="tooltip" title="{{getSize(apiMetrics.overall.file_storage_used)}} of {{getSize(account.plan.functionalities.storage_limit)}} file storage used" data-placement="bottom" ng-if="!onPremise">\n' +
    '					<h4 class="ep-header">\n' +
    '              File storage\n' +
    '          </h4>\n' +
    '					<div class="easy-pie-chart easyPieChart js-pie-chart txt-color-beige" data-pie-size="130" data-percent="{{overall.storage}}">\n' +
    '						<div class="percent percent-sign txt-color-beige">\n' +
    '							<span>{{overall.storage}}</span>\n' +
    '						</div>\n' +
    '					</div>\n' +
    '					<div class="ep-figure">\n' +
    '						<span class="js-file-size">{{getSize(apiMetrics.overall.file_storage_used)}}</span><span class="subscript"> of <span class="js-file-size">{{getSize(account.plan.functionalities.storage_limit)}}</span></span>\n' +
    '					</div>\n' +
    '					<p class="ep-bottom-line">file storage used</p>\n' +
    '				</div>\n' +
    '\n' +
    '				<div class="stat-wrap sw-on-p" rel="tooltip" title="{{getSize(apiMetrics.overall.file_storage_used)}} file storage used" data-placement="bottom" ng-if="onPremise">\n' +
    '					<h4 class="ep-header">\n' +
    '              File storage\n' +
    '          </h4>\n' +
    '					\n' +
    '					<div class="ep-figure">\n' +
    '						<span class="js-file-size">{{getSize(apiMetrics.overall.file_storage_used)}}</span>\n' +
    '					</div>\n' +
    '					<p class="ep-bottom-line">file storage used</p>\n' +
    '				</div>\n' +
    '\n' +
    '			</div>\n' +
    '		</div>\n' +
    '	</div>\n' +
    '  \n' +
    ' 	<legend class="mt20 clearfix">\n' +
    ' 		<span class="pull-left">Day to day statistics</span>\n' +
    ' 		<div class="pull-right date-range-picker" bootstrap-daterangepicker date-range="dateRange" on-date-range-change="onDateRangeChange"></div>\n' +
    ' 	</legend>\n' +
    '\n' +
    '	<div class="row">\n' +
    '		<div class="col-md-12 mb20">\n' +
    '			<div class="well">\n' +
    '				<p class="metrics-graph-header">API calls made: {{apiMetrics.range.overall.total_api_usage}}</p>\n' +
    '				<div class="api_usage-graph"></div>\n' +
    '			</div>\n' +
    '		</div>\n' +
    '		\n' +
    '		<div class="col-md-12">\n' +
    '			<div class="well">\n' +
    '				<p class="metrics-graph-header">Push notifications sent: {{apiMetrics.range.overall.push_notifications}}</p>\n' +
    '				<div class="push_notifications-graph"></div>\n' +
    '			</div>\n' +
    '		</div>\n' +
    '		\n' +
    '		<div class="col-md-12 m-file-storage-wrap">\n' +
    '			<div class="well">\n' +
    '				<p class="metrics-graph-header" ng-if="apiMetrics.range.overall.file_storage_used">\n' +
    '					File storage used: {{getSize(apiMetrics.range.overall.file_storage_used)}}\n' +
    '				</p>\n' +
    '				<p class="metrics-graph-header" ng-if="!apiMetrics.range.overall.file_storage_used">\n' +
    '					File storage used: {{apiMetrics.range.overall.file_storage_used}}\n' +
    '				</p>\n' +
    '			</div>\n' +
    '		</div>\n' +
    '	</div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\personal-info\\partials\\personal-info.html":[function(require,module,exports){
module.exports = '<form class="acc-form">\n' +
    '	<fieldset>\n' +
    '		<legend>Edit your personal information</legend>\n' +
    '		<div class="form-group">\n' +
    '			<label>First name</label>\n' +
    '			<input class="form-control" type="text" ng-model="user.first_name">\n' +
    '		</div>\n' +
    '		<div class="form-group">\n' +
    '			<label>Last name</label>\n' +
    '			<input class="form-control" type="text" ng-model="user.last_name">\n' +
    '		</div>\n' +
    '		<div class="form-group">\n' +
    '			<label>Email address</label>\n' +
    '			<input class="form-control" type="email" ng-model="user.email" disabled>\n' +
    '		</div>\n' +
    '		<div class="form-group">\n' +
    '			<label>Company</label>\n' +
    '			<input class="form-control" type="text" ng-model="user.company">\n' +
    '		</div>\n' +
    '		<div class="button-wrap">\n' +
    '			<a ng-click=\'saveInformation($event)\' class="btn btn-primary pull-left js-btn-update-info" data-loading-text="Saving...">\n' +
    '	            Save Information\n' +
    '	        </a>		\n' +
    '		</div>\n' +
    '	</fieldset>\n' +
    '</form>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\personal-info\\personal-info-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  'accounts',
  function($scope, $location, $state, builtApi, Alert, Utils, accounts) {
    
    var btnUpdatePersonalInfo = $('.js-btn-update-info');
    $scope.user = accounts[0].owner;

    //Save User Information
    $scope.saveInformation = function(e) {
      var button = $(e.currentTarget)
      button.button('loading');
      builtApi.SystemUserSession.update({
        body: {
          user: $scope.user
        }
      })
        .then(function(res) {
          Alert.notify({
            title: 'Success',
            content: res.notice,
            type: 'success'
          });
        }, function(xhr) {
          xhr = xhr.entity;
          Alert.notify({
            title: xhr.error_message,
            content: Utils.parseError(xhr),
            type: 'error'
          });
        }).finally(function(){
          button.button('reset');
        });
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\plans\\partials\\billing-info-modal.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '	<button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="data.callback.cancel()">\n' +
    '        ×\n' +
    '    </button>\n' +
    '    <h4 class="modal-title">Please Enter your billing info</h4>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '    <div billing-info="data"></div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\plans\\partials\\plans.html":[function(require,module,exports){
module.exports = '<div class="clearfix">\n' +
    '    <legend>View/Change your plan</legend>\n' +
    '    <div class="alert alert-warning fade in" ng-if="planMsg">                        \n' +
    '        <i class="fa-fw fa fa-info"></i> <span ng-bind-html="planMsg"></span>\n' +
    '    </div>\n' +
    '    <div class="row">\n' +
    '        <div class="col-xs-12 col-sm-6 col-md-4" ng-repeat="plan in plans track by $index">\n' +
    '            <div class="panel panel-primary pricing-big" ng-class="{\'active\': plan.plan_id===activePlan.plan_id}">\n' +
    '                <div class="panel-heading">\n' +
    '                    <h3 class="panel-title">\n' +
    '                        {{plan.name}}</h3>\n' +
    '                </div>\n' +
    '                <div class="panel-body no-padding text-align-center">\n' +
    '                    <div class="the-price">\n' +
    '                        <h1 ng-if="!plan.free_plan">\n' +
    '                            {{plan.price}} <span class="subscript">/ mo</span>\n' +
    '                        </h1>\n' +
    '                        <h1 ng-if="plan.free_plan">\n' +
    '                            FREE <span class="subscript"></span>\n' +
    '                        </h1>\n' +
    '                    </div>\n' +
    '                    <div class="price-features">\n' +
    '                        <ul class="list-unstyled text-left">\n' +
    '                            <li ng-repeat="feature in plan.features track by $index">\n' +
    '                                <i class="fa" ng-class="{\'text-success fa-check\': feature.enabled, \'text-danger fa-times\': !feature.enabled}"></i> {{feature.feature}}\n' +
    '                            </li>\n' +
    '                        </ul>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '                <div class="panel-footer text-align-center">\n' +
    '                    <a class="btn btn-default btn-block hand" role="button" ng-if="plan.plan_id!=activePlan.plan_id" ng-click="ValidatePlan(plan, $event)" data-loading-text="Please wait...">Select Plan</a>\n' +
    '                    <a class="btn btn-primary btn-block" role="button" ng-class="{\'disabled\': plan.plan_id===activePlan.plan_id}" ng-if="plan.plan_id===activePlan.plan_id">Active</a>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\plans\\plans-ctrl.js":[function(require,module,exports){
'use strict';
var billingInfoModal = require('./partials/billing-info-modal.html');
module.exports = [
	'$scope',
	'$location',
	'$state',
	'$sce',
	'builtApi',
	'alertService',
	'utilsService',
	'plans',
	'accounts',
	'modalService',
	'appCacheService',
	function($scope, $location, $state, $sce, builtApi, Alert, Utils, plans, accounts, Modal, appCacheService) {

		$scope.activePlan = accounts[0].plan;
		$scope.btnSelectedPlan = null;
		$scope.plans = getPlanFeatures();
		$scope.isUserInTrialPeriod = accounts[0]["plan"] && accounts[0]["plan"]["trial_id"] ? true : false;

		if ($scope.isUserInTrialPeriod){
			$scope.planMsg = $sce.trustAsHtml(getPlanMsg());
		}

		//If User has a custom plans
		if (isCustomPlan()) {
			$scope.plans.push($scope.activePlan);
		}


		//select plans
		$scope.ValidatePlan = function(plan, e) {
			if (isCustomPlan()) {
				Alert.confirm({
					title: 'Switching to a different plan?',
					content: 'Are you sure you want to switch to a different plan? Doing so will discard your custom plan.'
				})
					.then(function() {
						selectPlan(plan, e);
					})
			} else {
				selectPlan(plan, e);
			}
		}

		function selectPlan(plan, e) {
			$scope.btnSelectedPlan = $(e.currentTarget);
			$scope.btnSelectedPlan.button('loading');

			if (plan.free_plan || accounts[0].has_billing_info) {
				postPlan(plan);
			} else {
				Modal.openModal({
					month: "",
					number: "",
					year: "",
					esckey: false,
					plan: plan
				}, billingInfoModal, billingModalCtrl, {
					size: 'sm',
					windowClass: 'credit-card-modal'
				})
					.then(function(plan) {
						console.log("res", plan);
						postPlan(plan)
					}, function(xhr) {
						$scope.btnSelectedPlan.button('reset');
					})
			}
		}


		function getPlanMsg() {
			var planMessage = '<b>You are currently trying out built.io.</b> Please choose any of the plans below.';
			if (!_.isEmpty($scope.activePlan) && !_.isEmpty($scope.activePlan.message)) {
				var createdAt = accounts[0]["created_at"];
				var trialPeriod = $scope.activePlan.trial_period || 0;
				planMessage = $scope.activePlan.message.replace(/{expiration}/gi, moment(createdAt).add("days", trialPeriod).format("MMMM Do, YYYY"));
			}
			return planMessage;
		}

		// Get User Plans
		function getPlanFeatures() {
			return plans.map(function(plan) {
				try {
					plan.features = JSON.parse(plan.feature_list);
				} catch (e) {}
				return plan;
			});
		}

		var billingModalCtrl = function($scope, $modalInstance, data) {
			$scope.data = data;

			$scope.data.callback = {
				ok: function(plan) {
					$modalInstance.close(plan);
				},
				cancel: function() {
					$modalInstance.dismiss('cancel');
				}
			}

		}

		//Post Plan Data
		function postPlan(plan) {
			builtApi.Accounts.postPlans({
				body: {
					plan_id: plan.plan_id
				}
			})
				.then(function(res) {
					var account = accounts[0];
					account.plan = plan;
					if (isCustomPlan())
						$scope.plans.splice($scope.plans.indexOf($scope.activePlan), 1);

					$scope.activePlan = plan;
					appCacheService.set('currentAccount', account);
					Alert.notify({
						title: 'Success',
						content: res.notice,
						type: 'success'
					});
				}, function(xhr) {
					xhr = xhr.entity;
					Alert.notify({
						title: xhr.error_message,
						content: Utils.parseError(xhr),
						type: 'error'
					});
				}).finally(function() {
					$scope.btnSelectedPlan.button('reset');
				});
		}

		function isCustomPlan(){
			return ($scope.activePlan && $scope.activePlan.custom)
		}

	}
]
},{"./partials/billing-info-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\plans\\partials\\billing-info-modal.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\purchase-history\\partials\\purchase-history.html":[function(require,module,exports){
module.exports = '<div class="purchase-history-wrap">\n' +
    '    <legend>\n' +
    '        Purchase history\n' +
    '    </legend>\n' +
    '\n' +
    '    <div ng-if="hasPaymentHistory" ng-repeat="(year, historyArray) in paymentHistory track by $index" class="ph-statements">\n' +
    '        <h5 ng-class="{\'first\': $first}">\n' +
    '            Year {{year}}\n' +
    '        </h5>\n' +
    '        <div ng-repeat="statement in historyArray" class="ph-statement media">\n' +
    '            <div class="pull-left">\n' +
    '                <div class="cal-sticker" title="{{getDate(statement.timestamp)}}" rel="tooltip">\n' +
    '									<strong>{{getOnlyMonth(statement.timestamp)}}</strong>\n' +
    '									<span>{{getOnlyDate(statement.timestamp)}}</span>\n' +
    '								</div>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="media-body">\n' +
    '                <span>Payment of</span>\n' +
    '                <span class="plan-price" title="Price">{{statement.price}}</span>\n' +
    '\n' +
    '                <span ng-if="statement.transaction_type === \'subscription_charged_successfully\' || statement.transaction_type === \'successful\'" class="transaction-status" title="">\n' +
    '                    was successful\n' +
    '                </span>\n' +
    '\n' +
    '                <span ng-if="statement.transaction_type === \'pending\' || statement.transaction_type === \'subscription_went_past_due\'" class="transaction-status">\n' +
    '                    is in process\n' +
    '                </span>\n' +
    '\n' +
    '                <span ng-if="statement.transaction_type === \'failed\' || statement.transaction_type === \'subscription_charged_unsuccessfully\'" class="transaction-status">\n' +
    '                    failed\n' +
    '                </span>\n' +
    '\n' +
    '                <span>for</span>\n' +
    '\n' +
    '                <span class="plan-name" title="Plan name">{{statement.plan_name}}</span>.\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div class="no-msg" ng-if="!hasPaymentHistory">\n' +
    '        No purchases made yet.\n' +
    '    </div>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\purchase-history\\purchase-history-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$state',
  'paymentHistory',
  function($scope, $state, paymentHistory) {
    console.log("Purchace History!!", paymentHistory)

    $scope.paymentHistory = {};
    $scope.hasPaymentHistory = (paymentHistory.length > 0) ? true : false;
    formatPaymentHistory()

    $scope.getdayMonth = function(timeStamp) {
      return moment(timeStamp).format('MMM D');
    }

    $scope.getDate = function(timeStamp) {
      return moment(timeStamp).format('MMMM Do YYYY, h:mm:ss a');
    }

    $scope.getOnlyDate = function(timeStamp) {
      return moment(timeStamp).format('D');
    }

    $scope.getOnlyMonth = function(timeStamp) {
      return moment(timeStamp).format('MMM');
    }

    function getYear(timeStamp) {
      return moment(timeStamp).format('YYYY');
    }

    function formatPaymentHistory() {
      for (var i = 0; i < paymentHistory.length; i++) {
        var statement = paymentHistory[i];
        var year = getYear(statement.timestamp);
        
        if (!$scope.paymentHistory.hasOwnProperty(year))
          $scope.paymentHistory[year] = [];

        $scope.paymentHistory[year].push(statement);
      }
      console.log($scope.paymentHistory);
    }

    setTimeout(function(){
      $('[rel=tooltip]').tooltip();
    }, 10);
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\security\\partials\\security.html":[function(require,module,exports){
module.exports = '<form class="acc-form" method="PUT" action="" ng-submit="updatePassword()">\n' +
    '	<fieldset>\n' +
    '		<legend>Change your password</legend>\n' +
    '		<div class="form-group">\n' +
    '			<label>Enter old password</label>\n' +
    '			<input required class="form-control" type="password" ng-model="user.old_password">\n' +
    '		</div>\n' +
    '		<div class="form-group">\n' +
    '			<label>Enter new password</label>\n' +
    '			<input required class="form-control" type="password" ng-model="user.password">\n' +
    '		</div>\n' +
    '		<div class="form-group">\n' +
    '			<label>Confirm password</label>\n' +
    '			<input required class="form-control" type="password" ng-model="user.password_confirmation">\n' +
    '		</div>\n' +
    '		<div class="button-wrap">\n' +
    '			<button type="submit" class="btn btn-primary pull-left js-btn-update-password" data-loading-text="Updating...">\n' +
    '	            Update password\n' +
    '	        </button>\n' +
    '		</div>\n' +
    '	</fieldset>\n' +
    '</form>\n' +
    '\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\controllers\\security\\security-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
	'$scope',
	'$location',
	'$state',
	'builtApi',
	'alertService',
	'utilsService',
	'accounts',
	function($scope, $location, $state, builtApi, Alert, Utils, accounts) {

		var btnUpdatePassword = $('.acc-form .js-btn-update-password');
		$scope.user = {
			"old_password": "",
			"password": "",
			"password_confirmation": ""
		}
		$scope.updatePassword = function() {
			btnUpdatePassword.button('loading');
			builtApi.SystemUserSession.update({
				body: {
					user: $scope.user
				}
			})
				.then(function(res) {
					$state.go('app.applications');
					setTimeout(function() {
						Alert.notify({
							title: 'Success',
							content: 'Woot! Password updated successfully',
							type: 'success'
						});
					}, 1000);

				}, function(xhr) {
					xhr = xhr.entity;
					Alert.notify({
						title: xhr.error_message,
						content: Utils.parseError(xhr),
						type: 'error'
					});
				}).finally(function() {
					btnUpdatePassword.button('reset');
				});
		}
	}
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\directives\\billing-info\\billing-info.js":[function(require,module,exports){
'use strict';
var billingInfoTemplate = require('./partials/billing-info.html')

module.exports = [
  'alertService',
  'utilsService',
  'constants',
  'appCacheService',
  'libraryService',
  function(Alert, Utils, constants, appCacheService, LIB) {
    return {
      template: billingInfoTemplate,
      restrict: 'A',
      replace: true,
      scope: {
        billingInfo: "="
      },
      link: function(scope, elem, attrs) {
        var form = $('#billing-info-form');
        var key = constants.braintree.key.dev;
        var btnSaveCard = form.find('.js-btn-save-card');
        var serverConfig = appCacheService.get('serverConfig');
        scope.isModal = scope.billingInfo.callback ? true : false;

        scope.brainTreeLoaded = false;

        scope.years = getYearsArray();
        scope.hasBillingInfo = false;

        if (scope.billingInfo.number) {
          scope.hasBillingInfo = true;
        }

        if (window.location.host === constants.env_url.prod || window.location.host === constants.env_url.stag) {
          key = constants.braintree.key.prod
        }

        LIB.get('brainTree').then(function() {
          var braintree = Braintree.create(key);
          braintree.onSubmitEncryptForm('billing-info-form', billingInfoForm);
        })

        scope.updateCard = function() {
          scope.billingInfo = {};
          scope.hasBillingInfo = false;
        }

        function billingInfoForm(e) {
          e.preventDefault();
          btnSaveCard.button('loading');
          $.post(form.attr('action'), form.serialize(), function(data) {

            var account = appCacheService.get('currentAccount')[0];
            account.has_billing_info = true;
            appCacheService.set('currentAccount', [account]);

            Utils.sa(scope, function() {
              if (scope.isModal)
                scope.billingInfo.callback.ok(scope.billingInfo.plan);

              scope.hasBillingInfo = true;
            })

            Alert.notify({
              title: 'Success',
              content: data.notice,
              type: 'success'
            });
          }).fail(function(xhr) {
            console.log("Billing info: ", xhr);
            if (scope.isModal)
              scope.billingInfo.callback.cancel();

            var error = JSON.parse(xhr.responseText);
            Alert.notify({
              title: error.error_message,
              content: Utils.parseError(error),
              type: 'error'
            });
          }).always(function() {
            btnSaveCard.button('reset');
          });
        }

        function getYearsArray() {
          var currentYear = new Date().getFullYear();
          var yearsArray = [];
          for (var i = 0; i < 12; i++) {
            yearsArray.push(currentYear++);
          }
          return yearsArray;
        }

        function getBrainTree() {
          if (serverConfig.onPremise || LIB.has('brainTree')) {
            scope.brainTreeLoaded = true;
            return;
          }

          $.getScript('https://js.braintreegateway.com/v1/braintree.js')
            .done(function(script, textStatus) {
              console.log("Script", script);
              LIB.register('brainTree');
              Utils.sa(scope, function() {
                scope.brainTreeLoaded = true;
              });
              console.log("Go for BrainTree!")
            }).fail(function(jqxhr, settings, exception) {
              Utils.sa(scope, function() {
                scope.brainTreeLoaded = false;
              });
              console.log("No go for BrainTree!")
            });
        }
        getBrainTree();
      }
    }
  }
]
},{"./partials/billing-info.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\directives\\billing-info\\partials\\billing-info.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\directives\\billing-info\\partials\\billing-info.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '  <legend ng-if="!isModal">Billing information</legend>\n' +
    '  <form role="form" id="billing-info-form" method="POST" action="/v1/accounts/update_billing_info" class="panel billing-info-wrap panel-default" ng-show="brainTreeLoaded && !hasBillingInfo">\n' +
    '      <div class="panel-heading">\n' +
    '          <h3 class="panel-title">\n' +
    '              Enter your card details\n' +
    '          </h3>\n' +
    '      </div>\n' +
    '      <div class="panel-body">\n' +
    '        <div class="form-group">\n' +
    '            <label for="cardNumber">CARD NUMBER</label>\n' +
    '            <div class="input-group">\n' +
    '                <input type="text" class="form-control" required autofocus size="20" autocomplete="off" data-encrypted-name="number" ng-model="billingInfo.number" />\n' +
    '                <span class="input-group-addon">\n' +
    '                    <span class="fa fa-credit-card"></span>\n' +
    '                </span>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="form-group cc-date-wrap">\n' +
    '            <label>EXPIRY DATE</label>\n' +
    '            <select class="form-control cc-month" data-encrypted-name="month" placeholder="Month">\n' +
    '                <option value="01">Jan (01)</option>\n' +
    '                <option value="02">Feb (02)</option>\n' +
    '                <option value="03">Mar (03)</option>\n' +
    '                <option value="04">Apr (04)</option>\n' +
    '                <option value="05">May (05)</option>\n' +
    '                <option value="06">June (06)</option>\n' +
    '                <option value="07">July (07)</option>\n' +
    '                <option value="08">Aug (08)</option>\n' +
    '                <option value="09">Sep (09)</option>\n' +
    '                <option value="10">Oct (10)</option>\n' +
    '                <option value="11">Nov (11)</option>\n' +
    '                <option value="12">Dec (12)</option>\n' +
    '            </select>\n' +
    '            <select class="form-control cc-year" data-encrypted-name="year" placeholder="Year">\n' +
    '                <option ng-repeat="year in years" value="{{year}}">{{year}}</option>\n' +
    '            </select>\n' +
    '        </div>\n' +
    '        <div class="form-group">\n' +
    '            <label>CVV</label>\n' +
    '            <input class="form-control cc-cvv" data-encrypted-name="cvv" max="3" type="password" placeholder="" required />\n' +
    '        </div>\n' +
    '      </div>\n' +
    '      <div class="panel-footer">\n' +
    '  	    	<div class="button-wrap">\n' +
    '  	    		<button class="btn btn-primary pull-right js-btn-save-card" type="submit" ng-show="!hasBillingInfo" data-loading-text="Please wait...">\n' +
    '  	          Save card\n' +
    '  	        </button>\n' +
    '  	    	</div>\n' +
    '      </div>\n' +
    '  </form>\n' +
    '\n' +
    '  <div class="billing-info-details" ng-show="brainTreeLoaded && hasBillingInfo">\n' +
    '    <div class="row">\n' +
    '        <div class="col-sm-5">\n' +
    '            <div class="media">\n' +
    '                <div class="pull-left">\n' +
    '                    <div class="fa fa-credit-card"></div>\n' +
    '                </div>\n' +
    '                <div class="media-body">\n' +
    '                    <div>\n' +
    '                        <span>Number:</span> {{billingInfo.number}}\n' +
    '                    </div>\n' +
    '                    <div class="mt5">\n' +
    '                        <span>Expiry:</span> {{billingInfo.month}}/{{billingInfo.year}}\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="col-sm-7">\n' +
    '              <a class="edit-cc-card hand" ng-click="updateCard()"><i class="fa fa-pencil mr5"></i> Update your card</a>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '  </div>\n' +
    '\n' +
    '  <div class="no-msg" ng-if="!brainTreeLoaded">\n' +
    '    Fetching your card details...\n' +
    '  </div>\n' +
    '</div>\n' +
    '\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\api-metrics\\api-metrics.js":[function(require,module,exports){
'use strict';

var angular                 = require('third-party-modules/angular');
var uiRouter                = require('third-party-modules/angular-ui-router');
var resolvers               = require('../resolvers');
var apiMetricsCtrl          = require('./controllers/api-metrics-ctrl');
var apiMetricsTemplate      = require('./partials/api-metrics.html');



module.exports = angular.module('built.api-metrics', ['ui.router'])
  .controller('apiMetricsCtrl', apiMetricsCtrl)
  .config([
    '$stateProvider',
    function($stateProvider) {
      $stateProvider
        .state('app.dashboard.api-metrics', {
          url: '/api-metrics',
          template: apiMetricsTemplate,
          resolve: resolvers.resolve(['accountApiMetrics', 'applicationApiMetrics', 'accounts']),
          controller: 'apiMetricsCtrl',
          data: {
            breadcrumbs: [{
              name: 'Api metrics'
            }]
          }
        })
    }
  ])
  .run([
    "$rootScope",
    "menuService",
    function($rootScope, menu) {

      var menuItem = {
        id: 'api-metrics',
        title: 'API metrics',
        order: 3,
        icon: 'fa-dashboard',
        state: 'app.dashboard.api-metrics'
      }
      menu.add(menuItem);
    }
  ]);
},{"../resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/api-metrics-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\api-metrics\\controllers\\api-metrics-ctrl.js","./partials/api-metrics.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\api-metrics\\partials\\api-metrics.html","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-router\\release\\angular-ui-router.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\api-metrics\\controllers\\api-metrics-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  'builtApi',
  '$injector',
  'constants',
  'alertService',
  'utilsService',
  'libraryService',
  'accounts',
  'applicationApiMetrics',
  'accountApiMetrics',
  'serverConfig',
  function($scope, builtApi, $injector, constants, Alert, Utils, LIB, accounts, appApiMetrics, accountApiMetrics, serverConfig) {
    $scope.apiMetrics = appApiMetrics;
    $scope.account = accounts[0];
    $scope.accountApiMetrics = accountApiMetrics;
    $scope.onPremise = serverConfig.on_premise || ($scope.account.plan ? false : true);
    //Overall Stats set 
    $scope.overall = {
      apiCalls: $scope.onPremise ? appApiMetrics.overall.total_api_usage : Utils.calcPercent(appApiMetrics.overall.total_api_usage, accountApiMetrics.overall.total_api_usage),
      pushNotifications: $scope.onPremise ? appApiMetrics.overall.push_notifications : Utils.calcPercent(appApiMetrics.overall.push_notifications, accountApiMetrics.overall.push_notifications),
      storage: $scope.onPremise ? appApiMetrics.overall.file_storage_used : Utils.calcPercent(appApiMetrics.overall.file_storage_used, accountApiMetrics.overall.file_storage_used),
      users: appApiMetrics.overall.total_users,
      androidUsers: appApiMetrics.overall.total_android_users,
      iosUsers: appApiMetrics.overall.total_ios_users,
      userLoginCount: appApiMetrics.overall.user_login_count
    }

    $scope.modGraphData = [];

    //Date Range Graph Set
    $scope.dateRange = {
      startDate: $scope.apiMetrics.range.from,
      endDate: $scope.apiMetrics.range.to
    };

    
    $scope.humanizeNumber = function(v) {
      return Utils.humanizeNumber(v);
    }

    //Onload render all charts
    setTimeout(function() {
      if(!$scope.onPremise)
        runAllCharts();
      $('[rel=tooltip]').tooltip();
    }, 100);


    $scope.getSize = function(mb) {
      if (mb == 0)
        return mb
      return Utils.bytesToSize(mb * 1024 * 1024);
    }

    $scope.onDateRangeChange = function(range) {
      getapiMetrics();
    }

    //Get Application Api
    function getapiMetrics() {
      builtApi.ApiMetrics.get({
          options: {
            metricsType: 'application_api_metrics',
            query: {
              to: $scope.dateRange.endDate,
              from: $scope.dateRange.startDate
            }
          }
        })
        .then(function(apiMetrics) {
          $scope.apiMetrics = apiMetrics;
          showGraph();
        });
    }


    function renderGraphs() {
      for (var i = 0; i < $scope.modGraphData.length; i++) {
        var hcOptions = _.cloneDeep(constants.charts.defaults.line);
        hcOptions.chart.height = 200;
        hcOptions.colors = [constants.charts.colorPalette[i]];
        hcOptions.series = [$scope.modGraphData[i]];
        $injector.invoke(['chartService',
          function(hc) {
            hc.drawChart({
              el: $scope.modGraphData[i].el,
              options: hcOptions
            })
          }
        ]);
      };
    }

    function prepareGraphData() {
      var rawGraphData = $.extend(true, {}, $scope.apiMetrics);
      var metrics = rawGraphData["range"]["stats"];
      $scope.modGraphData.length = 0;

      for (var key in metrics) {
        var series = [];
        var stat = metrics[key];

        for (var date in stat) {
          series.push([new Date(date).getTime(), stat[date]])
        }

        $scope.modGraphData.push({
          'name': key.charAt(0).toUpperCase() + key.slice(1).replace('_', ' '), // transform to uppercase and remove underscore.
          'data': series,
          'el': $("." + key + '-graph')
        });
      }

      $scope.modGraphData.sort(function(a, b) {
        return a.name > b.name;
      })
    }

    function showGraph() {
      LIB.get('charts').then(function() {
        prepareGraphData();
        renderGraphs();
      });
    }

    showGraph();
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\api-metrics\\partials\\api-metrics.html":[function(require,module,exports){
module.exports = '<div class="metrics-wrap app-api-metrics">\n' +
    '    <div class="well well-sm">\n' +
    '        <legend class="pg-header">Overall metrics</legend>\n' +
    '        <p class="pg-tagline">\n' +
    '            The metrics shown below for this application is compared with your overall account metrics.\n' +
    '        </p>\n' +
    '        <div class="row">\n' +
    '            <div class="col-md-4">\n' +
    '                <div class="stat-wrap" rel="tooltip" title="{{apiMetrics.overall.total_api_usage}} of {{accountApiMetrics.overall.total_api_usage}} API calls made" data-placement="bottom" ng-if="!onPremise">\n' +
    '                    <h4 class="ep-header">\n' +
    '                        API calls\n' +
    '                    </h4>\n' +
    '                    <div class="easy-pie-chart easyPieChart js-pie-chart txt-color-green" data-pie-size="130" data-percent="{{overall.apiCalls}}">\n' +
    '                        <div class="percent percent-sign txt-color-green">\n' +
    '                            <span>{{overall.apiCalls}}</span>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <div class="ep-figure">\n' +
    '                        {{humanizeNumber(apiMetrics.overall.total_api_usage)}}<span class="subscript"> of {{humanizeNumber(accountApiMetrics.overall.total_api_usage)}}</span>\n' +
    '                    </div>\n' +
    '                    <p class="ep-bottom-line">API calls are made by this application</p>\n' +
    '                </div>\n' +
    '                <div class="stat-wrap sw-on-p" rel="tooltip" title="{{apiMetrics.overall.total_api_usage}} API calls made" data-placement="bottom" ng-if="onPremise">\n' +
    '                    <h4 class="ep-header">\n' +
    '                        API calls\n' +
    '                    </h4>\n' +
    '                    <div class="ep-figure">\n' +
    '                        {{humanizeNumber(apiMetrics.overall.total_api_usage)}}\n' +
    '                    </div>\n' +
    '                    <p class="ep-bottom-line">API calls are made by this application</p>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="col-md-4">\n' +
    '                <div class="stat-wrap" rel="tooltip" title="{{apiMetrics.overall.push_notifications}} of {{accountApiMetrics.overall.push_notifications}} push notifications sent" data-placement="bottom" ng-if="!onPremise">\n' +
    '                    <h4 class="ep-header" >\n' +
    '                        Push notifications\n' +
    '                    </h4>\n' +
    '                    <div class="easy-pie-chart easyPieChart js-pie-chart txt-color-blue" data-pie-size="130" data-percent="{{overall.pushNotifications}}">\n' +
    '                        <div class="percent percent-sign txt-color-blue">\n' +
    '                            <span>{{overall.pushNotifications}}</span>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <div class="ep-figure">\n' +
    '                        {{humanizeNumber(apiMetrics.overall.push_notifications)}} <span class="subscript">of {{humanizeNumber(accountApiMetrics.overall.push_notifications)}}</span>\n' +
    '                    </div>\n' +
    '                    <p class="ep-bottom-line">push notifications are been sent by this application</p>\n' +
    '                </div>\n' +
    '                <div class="stat-wrap sw-on-p" rel="tooltip" title="{{apiMetrics.overall.push_notifications}} push notifications sent" data-placement="bottom" ng-if="onPremise">\n' +
    '                    <h4 class="ep-header">\n' +
    '                        Push notifications\n' +
    '                    </h4>\n' +
    '                    <div class="ep-figure">\n' +
    '                        {{humanizeNumber(apiMetrics.overall.push_notifications)}}\n' +
    '                    </div>\n' +
    '                    <p class="ep-bottom-line">push notifications are been sent by this application</p>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="col-md-4">\n' +
    '                <div class="stat-wrap" rel="tooltip" title="{{getSize(apiMetrics.overall.file_storage_used)}} of {{getSize(accountApiMetrics.overall.file_storage_used)}} file storage used" data-placement="bottom" ng-if="!onPremise">\n' +
    '                    <h4 class="ep-header">\n' +
    '                        File storage\n' +
    '                    </h4>\n' +
    '                    <div class="easy-pie-chart easyPieChart js-pie-chart txt-color-beige" data-pie-size="130" data-percent="{{overall.storage}}">\n' +
    '                        <div class="percent percent-sign txt-color-beige">\n' +
    '                            <span>{{overall.storage}}</span>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <div class="ep-figure">\n' +
    '                        <span class="js-file-size">{{getSize(apiMetrics.overall.file_storage_used)}}</span>\n' +
    '                        <span class="subscript">of <span class="js-file-size">{{getSize(accountApiMetrics.overall.file_storage_used)}}</span>\n' +
    '                        </span>\n' +
    '                    </div>\n' +
    '                    <p class="ep-bottom-line">file storage is used by this application</p>\n' +
    '                </div>\n' +
    '                <div class="stat-wrap sw-on-p" rel="tooltip" title="{{getSize(apiMetrics.overall.file_storage_used)}} file storage used"  data-placement="bottom" ng-if="onPremise">\n' +
    '                    <h4 class="ep-header">\n' +
    '                        File storage\n' +
    '                    </h4>\n' +
    '                    <div class="ep-figure">\n' +
    '                        <span class="js-file-size">{{getSize(apiMetrics.overall.file_storage_used)}}</span>\n' +
    '                    </div>\n' +
    '                    <p class="ep-bottom-line">file storage is used by this application</p>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="row">\n' +
    '            <hr/>\n' +
    '            <div class="col-md-3">\n' +
    '                <div class="well well-sm well-light m-num-box" rel="tooltip" data-placement="bottom" title="You have {{overall.users}} users in this application">\n' +
    '                    <span>Total users: <span class="num">{{overall.users}}</span> </span>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="col-md-3">\n' +
    '                <div class="well well-sm well-light m-num-box" rel="tooltip" data-placement="bottom" title="{{overall.androidUsers}} of {{overall.users}} are Android users">\n' +
    '                    <span>Android users: <span class="num">{{overall.androidUsers}}</span></span>\n' +
    '                    \n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="col-md-3">\n' +
    '                <div class="well well-sm well-light m-num-box" rel="tooltip" data-placement="bottom" title="{{overall.iosUsers}} of {{overall.users}} are iOS users">\n' +
    '                    <span>iOS users: <span class="num">{{overall.iosUsers}}</span></span>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="col-md-3">\n' +
    '                <div class="well well-sm well-light m-num-box" rel="tooltip" data-placement="bottom" title="{{overall.users - overall.iosUsers - overall.androidUsers}} of {{overall.users}} are other users">\n' +
    '                    <span>Other users: <span class="num">{{overall.users - overall.iosUsers - overall.androidUsers}}</span></span>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '\n' +
    '    <legend class="mt20 clearfix">\n' +
    '        <span class="pull-left mt10">Day to day statistics</span>\n' +
    '        <div class="pull-right date-range-picker" bootstrap-daterangepicker date-range="dateRange" on-date-range-change="onDateRangeChange"></div>\n' +
    '    </legend>\n' +
    '    <div class="row">\n' +
    '        <div class="col-md-6">\n' +
    '            <div class="well">\n' +
    '                <p class="metrics-graph-header">API calls made: {{apiMetrics.range.overall.total_api_usage}}</p>\n' +
    '                <div class="api_usage-graph"></div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="col-md-6">\n' +
    '            <div class="well">\n' +
    '                <p class="metrics-graph-header">Push notifications sent: {{apiMetrics.range.overall.push_notifications}}</p>\n' +
    '                <div class="push_notifications-graph"></div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="col-md-6">\n' +
    '            <div class="well">\n' +
    '                <p class="metrics-graph-header">User logins: {{apiMetrics.range.overall.user_login_count}}</p>\n' +
    '                <div class="user_login_count-graph"></div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="col-md-6">\n' +
    '            <div class="well m-file-storage-wrap">\n' +
    '                <span class="metrics-graph-header">File storage used: {{getSize(apiMetrics.range.overall.file_storage_used)}}</span>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\applications.js":[function(require,module,exports){
'use strict';
//Third party modules
var angular                            = require('third-party-modules/angular');
var uiRouter                           = require('third-party-modules/angular-ui-router');
var resolvers                          = require('../resolvers');

//controllers
var applicationsCtrl                   = require('./controllers/applications-ctrl');
var ownershipActivationCtrl            = require('./controllers/ownership-activation-ctrl');

//directives
var applicationItem                    = require('./directives/application-item');

//Templates
var applicationsTemplate               = require('./partials/applications.html');
var ownershipActivationTemplate        = require('./partials/ownership-activation.html');

module.exports = angular.module('built.applications', ['ui.router'])
  .controller('applicationsCtrl', applicationsCtrl)
  .controller('ownershipActivationCtrl', ownershipActivationCtrl)
  .directive('app', applicationItem)
  .config([
    '$stateProvider',
    function($stateProvider) {
      $stateProvider
        .state('app.applications', {
          url: '/applications',
          resolve: resolvers.resolve(['currentUser', 'apps', 'accounts']),
          template: applicationsTemplate,
          controller: 'applicationsCtrl',
          data: {
            layout: {
              leftMenu: false
            }
          }
        })
        .state('app.appOwnerShipActivation', {
          url: '/application/:authtoken/accept_application_ownership',
          template: ownershipActivationTemplate,
          controller: 'ownershipActivationCtrl',
          data: {
            layout: {
              leftMenu: false
            }
          }
        })
    }
]);
},{"../resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/applications-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\controllers\\applications-ctrl.js","./controllers/ownership-activation-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\controllers\\ownership-activation-ctrl.js","./directives/application-item":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\directives\\application-item.js","./partials/applications.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\partials\\applications.html","./partials/ownership-activation.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\partials\\ownership-activation.html","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-router\\release\\angular-ui-router.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\controllers\\applications-ctrl.js":[function(require,module,exports){
'use strict';

var newAppModal = require('../partials/new-app-modal.html');

module.exports = [
  '$scope',
  '$state',
  '$location',
  'apps',
  'builtApi',
  'constants',
  'appCacheService',
  'alertService',
  'utilsService',
  'modalService',
  'menuService',
  'libraryService',
  '$injector',
  function($scope, $state, $location, apps, builtApi, constants, appCacheService, Alert, Utils, Modal, Menu, LIB, $injector) {

    var account = appCacheService.get('currentAccount')[0];
    $scope.apps = apps;
    $scope.myApps = [];
    $scope.sharedApps = [];
    $scope.isAppInEditMode = false;
    $scope.validUid = null;
    $scope.newApp = {};
    $scope.searchApplicationText = "";

    for (var i = 0; i < apps.length; i++) {
      if (account.name === apps[i].account_name) {
        $scope.myApps.push(apps[i])
      } else {
        $scope.sharedApps.push(apps[i])
      }
    };

    //Get Account Metrics
    builtApi.ApiMetrics.get({
      options: {
        metricsType: 'account_api_metrics'
      }
    }).then(function(accountApiMetrics) {
      $scope.apiMetrics = accountApiMetrics;
    })

    $scope.createApp = function() {
      var button = $('.js-btn-create-new-app');

      button.button('loading');
      builtApi.Application.addOne({
          body: {
            "application": $scope.newApp
          }
        })
        .then(function(res) {
          $scope.apps.unshift(res.application);
          $scope.myApps.unshift(res.application);
          console.log("Apps cache: ", appCacheService.get('apps'))
          $scope.resetAppEditMode();
          Alert.notify({
            title: 'Success',
            content: res.notice,
            type: 'success'
          });
        }, function(xhr) {
          Alert.notify({
            title: xhr.entity.error_message,
            content: Utils.parseError(xhr.entity),
            type: 'error'
          });
        }).finally(function() {
          button.button('reset');
          $scope.validUid = null;
        })
    }

    $scope.invokeAppEditMode = function() {
      $scope.searchApplicationText = "";
      $scope.isAppInEditMode = true;
      setTimeout(function() {
        $('.js-new-app-name-input').focus();
      }, 10);
    }

    $scope.resetAppEditMode = function() {
      $scope.isAppInEditMode = false;
      $scope.newApp = {};
    }

    /**
     * Validates UID for any non alphanumeric characters and changes color of the UID input.
     */
    $scope.validateUID = function() {
      var uid = $scope.newApp.uid;

      if (_.isEmpty(uid)) {
        $scope.validUid = null;
        return;
      }

      $scope.validUid = uid.match(constants.regex.uid) == null ? false : true;
    }

    /**
     * Auto populates the uid field with valid charecters.
     */
    $scope.autoFillUID = function() {
      $scope.newApp.uid = Utils.createUID($scope.newApp.name);
      $scope.validUid = null;
    }

  }
]
},{"../partials/new-app-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\partials\\new-app-modal.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\controllers\\ownership-activation-ctrl.js":[function(require,module,exports){
'use strict';

module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  function($scope, $location, $state, builtApi, Alert, Utils) {
    var authtoken = $state.params.authtoken;
    $scope.transferStatus = "checking";
    builtApi.Application.ownershipActivation({
      options: {
        authtoken: authtoken
      },
      body: {}
    }).then(function(res) {
      $scope.transferStatus = "success";
      Alert.notify({
        title: "Success",
        content: res.notice,
        type: 'success'
      })
    }, function(xhr) {
      $scope.transferStatus = "failed";
      Alert.notify({
        title: "Redirecting Failed",
        content: xhr.entity.error_message,
        type: 'error'
      });
    })
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\directives\\application-item.js":[function(require,module,exports){
'use strict';
var appItemTemplate = require('./partials/application-item.html')
var transferOwnerShipModalTemplate = require('../partials/transfer-ownership-modal.html');
module.exports = [
  '$state',
  '$location',
  'builtApi',
  'appCacheService',
  'alertService',
  'utilsService',
  'modalService',
  'menuService',
  'manageUtils',
  '$timeout',
  function($state, $location, builtApi, appCacheService, Alert, Utils, Modal, Menu, manageUtils, $timeout) {
    return {
      template: appItemTemplate,
      restrict: 'A',
      replace: true,
      link: function(scope, elem, attrs) {
        var account = appCacheService.get('currentAccount')[0];

        scope.renameAppMode = false;
        scope.appMenu = Menu.getMenu(scope.app.api_restriction).slice().reverse();
        scope.isShared = account.name === scope.app.account_name ? false : true;

        scope.stateQueryParam = {
          api_key: scope.app.api_key,
          p: 1
        }
 
        scope.checkKeyCode = function(e) {
          if (e.keyCode === 13) {
            scope.renameApp(e);
          } else if (e.keyCode === 27) {
            scope.resetRenameAppMode();
          }
        }

        scope.invokeRenameAppMode = function() {
          scope.renameAppMode = true;
          setTimeout(function() {
            $(elem).find('.js-rename-app-input').focus();
          }, 0);
        }

        scope.resetRenameAppMode = function() {
          scope.renameAppMode = false;
        }

        //delete Application
        scope.deleteApp = function() {
          Alert.confirm({
              title: 'Are you sure you want to delete this application?',
              content: 'All data within this application will permenantly be lost. This action cannot be undone.'
            })
            .then(function() {
              builtApi.Application.deleteOne({
                  headers: {
                    application_api_key: scope.app.api_key,
                    application_uid: scope.app.uid
                  },
                  options: {
                    appUid: scope.app.uid
                  }
                })
                .then(function(res) {
                  scope.apps.splice(scope.apps.indexOf(scope.app), 1);

                  // Splice the deleted app from my apps array as well.
                  if (!scope.isShared)
                    scope.myApps.splice(scope.myApps.indexOf(scope.app), 1);


                  Alert.notify({
                    title: 'Success',
                    content: res.notice,
                    type: 'success'
                  });
                }, function(xhr) {
                  Alert.notify({
                    title: xhr.entity.error_message,
                    content: Utils.parseError(xhr.entity),
                    type: 'error'
                  });
                })
            })
          return false;
        }


        //Update Application Info on update
        scope.renameApp = function(e) {
            var newAppName = $.trim($(e.currentTarget).val());
            if (newAppName === '' || newAppName === scope.app.name) {
              scope.resetRenameAppMode();
              return false;
            }

            builtApi.Application.editOne({
                headers: {
                  application_api_key: scope.app.api_key,
                  application_uid: scope.app.uid
                },
                options: {
                  appUid: scope.app.uid
                },
                body: {
                  app_api_key: scope.app.api_key,
                  app_uid: scope.app.uid,
                  application: {
                    name: newAppName
                  }
                }
              })
              .then(function(res) {
                scope.resetRenameAppMode();
                scope.app.name = newAppName;
                Alert.notify({
                  title: 'Success',
                  content: res.notice,
                  type: 'success'
                });
              }, function(xhr) {
                Alert.notify({
                  title: xhr.entity.error_message,
                  content: Utils.parseError(xhr.entity),
                  type: 'error'
                });
              })
          }
          //Transfer OwnerShip
        scope.transferOwnerShip = function() {
          Modal.openModal({
              email: "",
              app: scope.app
            }, transferOwnerShipModalTemplate, transferOwnerShipCtrl, {
              size: 'sm'
            })
            .then(function(res) {
              Alert.notify({
                title: 'Success',
                content: res.notice,
                type: 'success'
              });
            })
          return false;
        }

        var transferOwnerShipCtrl = function($scope, $modalInstance, data) {
          $scope.data = data;
          var app = data.app;

          $scope.tranfer = function() {
            $scope.ok();
          }

          $scope.ok = function() {
            builtApi.Application.transferOwnerShip({
                headers: {
                  application_api_key: app.api_key,
                  application_uid: app.uid
                },
                options: {
                  appUid: app.uid
                },
                body: {
                  app_api_key: app.api_key,
                  app_uid: app.uid,
                  transfer_to: $scope.data.email
                }
              })
              .then(function(res) {
                $modalInstance.close(res);
              }, function(xhr) {
                Alert.notify({
                  title: xhr.entity.error_message,
                  content: Utils.parseError(xhr.entity),
                  type: 'error'
                });
                $modalInstance.dismiss('cancel');
              })
            return false;
          };

          $scope.cancel = function() {
            $modalInstance.dismiss('cancel');
          };
        }

        function bindClicks() {
          $(elem).find('.js-menu-link').off('click').on('click', function(e) {
            var restrictStatus = manageUtils.applications.checkRestriction($(e.currentTarget).data('menu-item')['restrict'], scope.isShared);
            if (restrictStatus) {
              appCacheService.set('currentApp', scope.app);
              manageUtils.setAppHeaders(scope.app);
            }
            
            return restrictStatus;
          });
        }

        $timeout(function() {
          bindClicks();
        }, 0)
      }
    }
  }
]
},{"../partials/transfer-ownership-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\partials\\transfer-ownership-modal.html","./partials/application-item.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\directives\\partials\\application-item.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\directives\\partials\\application-item.html":[function(require,module,exports){
module.exports = '<div class="app-box">\n' +
    '	<div class="btn-group app-actions" ng-if="!isShared">\n' +
    '		<button class="btn btn-default btn-xs dropdown-toggle" data-toggle="dropdown">\n' +
    '			<i class="fa fa-caret-down"></i>\n' +
    '		</button>\n' +
    '		<ul class="dropdown-menu">\n' +
    '			\n' +
    '			<li>\n' +
    '				<a href="javascript:void(0)" ng-click="invokeRenameAppMode()"><i class="fa fa-pencil mr5"></i>Rename application</a>\n' +
    '			</li>\n' +
    '			<li>\n' +
    '				<a href="javascript:void(0)" ng-click="transferOwnerShip()"><i class="fa fa-legal mr5"></i>Transfer ownership</a>\n' +
    '			</li>\n' +
    '			<li>\n' +
    '				<a href="javascript:void(0)" ng-click="deleteApp()"><i class="fa fa-trash-o mr5"></i>Delete app</a>\n' +
    '			</li>\n' +
    '		</ul>\n' +
    '	</div>\n' +
    '	<div class="app-info">\n' +
    '		<div class="app-name">\n' +
    '			<div class="clearfix" ng-if="!renameAppMode">\n' +
    '				<a ui-sref="app.dashboard.classes-user-list({{stateQueryParam}})" href="js-menu-link" class="an-text text-ellipsis" title="{{app.name}}">{{app.name}}</a>\n' +
    '			</div>\n' +
    '			<input type="text" ng-value="app.name" class="new-app-name-input js-rename-app-input" ng-if="renameAppMode" ng-blur="renameApp($event)" ng-keyup="checkKeyCode($event)">\n' +
    '		</div>\n' +
    '		<div class="app-meta">\n' +
    '			<div class="text-ellipsis" title="{{app.uid}}">\n' +
    '				<span class="key">UID:</span> {{app.uid}}\n' +
    '			</div>\n' +
    '			<div>\n' +
    '				<span class="key">API key:</span> {{app.api_key}}\n' +
    '			</div>\n' +
    '			<div class="shared-icon" ng-if="isShared">\n' +
    '				<i class="fa fa-group"></i> Shared with you\n' +
    '			</div>\n' +
    '		</div>\n' +
    '	</div>\n' +
    '	<div class="app-menu">\n' +
    '		<div class="am-btns">\n' +
    '			<a class="btn js-menu-link" data-menu-item="{{m}}" ui-sref="{{m.state}}({{stateQueryParam}})" ng-repeat="m in appMenu" title="{{m.title}}" rel="tooltip" data-placement="bottom"><i class="fa {{m.icon}}"></i></a>\n' +
    '		</div>\n' +
    '	</div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\partials\\applications.html":[function(require,module,exports){
module.exports = '<div id="main" role=\'main\'>\n' +
    '	<div class="dash-tool-bar application-dtb">\n' +
    '		<div class="container clearfix">\n' +
    '			<div class="count-wrap hidden-xs">\n' +
    '				<span>\n' +
    '					{{apps.length || \'No\'}} Application<span ng-if="apps.length != 1">s</span>\n' +
    '				</span>\n' +
    '			</div>\n' +
    '			<div class="search-wrap">\n' +
    '				<div class="icon-addon addon-md">\n' +
    '	          <input type="text" placeholder="Search" class="form-control" ng-model="searchApplicationText" >\n' +
    '	          <label class="fa fa-search"></label>\n' +
    '	      </div>\n' +
    '			</div>\n' +
    '			<div class="dash-btns">\n' +
    '				<a ng-click="invokeAppEditMode()" class="btn btn-labeled btn-primary hidden-xs">\n' +
    '					<span class="btn-label">\n' +
    '						<i class="fa fa-plus-square"></i>\n' +
    '					</span>\n' +
    '					Create new application\n' +
    '				</a>\n' +
    '				<a ng-click="invokeAppEditMode()" class="btn btn-primary visible-xs">\n' +
    '					<i class="fa fa-plus-square"></i>\n' +
    '				</a>\n' +
    '			</div>\n' +
    '		</div>\n' +
    '	</div>\n' +
    '	<div class="content animated fadeInDown">\n' +
    '		<div class="application-list-wrap with-dash-tool-bar">\n' +
    '			<div class="container">\n' +
    '		    <div class="row applications-wrap">\n' +
    '	       	<div class="col-md-9">\n' +
    '       			<div class="my-apps-wrap">\n' +
    '	 			      <h3 ng-if="myApps.length"> My applications  <span class="label label-default">{{myApps.length}}</span></h3>\n' +
    '	       			<div class="row">\n' +
    '	 			       	<div class="col-md-6 sample-app-wrap" ng-class="{\'hidden\': !isAppInEditMode}">\n' +
    '	 				       	<div class="app-box sample-app animated pulse" ng-class="{\'app-edit-mode\': isAppInEditMode}">\n' +
    '	 				       		<div class="app-info">\n' +
    '	 				       			<div class="app-details" ng-show="isAppInEditMode">\n' +
    '	 				       				<form method="POST" ng-submit="createApp()">\n' +
    '	 					       				<div class="form-group">\n' +
    '	 						       				<input class="new-app-name-input js-new-app-name-input" ng-keyup="autoFillUID()" type="text" ng-model="newApp.name" required placeholder="Enter your app name">\n' +
    '	 					       				</div>\n' +
    '	 					       				<div class="form-group" ng-class="{\'has-error\':validUid == false, \'has-success\': validUid == true}">\n' +
    '	 						       				<input class="new-app-uid-input" ng-keyup="validateUID()" type="text" ng-model="newApp.uid" required placeholder="Enter your app UID">\n' +
    '	 					       				</div>\n' +
    '	 					       				<div class="form-actions clearfix">\n' +
    '	 					       					<button type="submit" class="btn btn-primary btn-xs pull-right js-btn-create-new-app" data-loading-text="Creating...">Create</button>\n' +
    '	 					       					<a class="btn btn-default btn-xs pull-left hand js-clear-app-form" ng-click="resetAppEditMode()">Cancel</a>\n' +
    '	 					       				</div>\n' +
    '	 				       				</form>\n' +
    '	 				       			</div>\n' +
    '	 				       		</div>\n' +
    '	 				       	</div>\n' +
    '	 				      </div>\n' +
    '         				<div class="col-md-6" ng-show="myApps.length" ng-repeat="app in myApps | filter:searchApplicationText">\n' +
    '	 			       		<div app></div>\n' +
    '	 		       		</div>\n' +
    '	 		       		<div class="no-msg" ng-if="!myApps.length">\n' +
    '	 		       			You have not created any applications yet.\n' +
    '	 		       		</div>\n' +
    '	 		       		<div class="no-msg" ng-if="myApps.length">\n' +
    '	 		       			No apps found.\n' +
    '	 		       		</div>\n' +
    '	 		       	</div>\n' +
    '	 		      </div>\n' +
    ' 		       	<div class="shared-apps-wrap" ng-if="sharedApps.length">\n' +
    ' 		       		<h3> Shared with me <span class="label label-default">{{sharedApps.length}}</span></h3>\n' +
    '	   		      <div class="row">\n' +
    '	 		       		<div class="col-md-6" ng-repeat="app in sharedApps | filter:searchApplicationText">\n' +
    '	 			       		<div app></div>\n' +
    '	 		       		</div>\n' +
    '	 		       		<div class="no-msg">\n' +
    '	 		       			No shared apps found\n' +
    '	 		       		</div>\n' +
    '	 		       	</div>\n' +
    ' 		       	</div>\n' +
    '	       	</div>\n' +
    '	       	<div class="col-md-3">\n' +
    '	       		<h3 class="v-hidden">dum</h3>\n' +
    '	       		<div metrics-widget api-metrics="apiMetrics"></div>\n' +
    '	       	</div>\n' +
    '		    </div>\n' +
    '			</div>\n' +
    '		</div>\n' +
    '	</div>\n' +
    '</div>\n' +
    '\n' +
    '\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\partials\\new-app-modal.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <h3 class="modal-title">Upload File</h3>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '    <div class="row-fluid">\n' +
    '        <div class="span3">\n' +
    '            <div class="title">Name</div>\n' +
    '        </div>\n' +
    '        <div class="span9">\n' +
    '            <input type="text" class="c-a-name-input" ng-model="data.name">\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div class="row-fluid">\n' +
    '        <div class="span3">\n' +
    '            <div class="title">UID</div>\n' +
    '        </div>\n' +
    '        <div class="span9">\n' +
    '            <input type="text" class="c-a-uid-input" ng-model="data.uid" >\n' +
    '        </div>\n' +
    '    </div>\n' +
    '\n' +
    '</div>\n' +
    '<div class="modal-footer">\n' +
    '    <button class="btn btn-primary" ng-click="ok()">Create</button>\n' +
    '    <button class="btn btn-warning" ng-click="cancel()">Cancel</button>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\partials\\ownership-activation.html":[function(require,module,exports){
module.exports = '<div id="main" role="main">\n' +
    '    <!-- MAIN CONTENT -->\n' +
    '    <div id="content" class="container">\n' +
    '        <h2 ng-show="transferStatus===\'checking\'" class="no-msg">Please wait...</h2>\n' +
    '        <h2 ng-show="transferStatus===\'success\'" class="no-msg">\n' +
    '          <a href="/#/">Continue</a>\n' +
    '        </h2>\n' +
    '        <h2 ng-show="transferStatus===\'failed\'" class="no-msg">Something went wrong!</h2>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\partials\\transfer-ownership-modal.html":[function(require,module,exports){
module.exports = '<form method="" action="" ng-submit="ok()">\n' +
    '    <div class="modal-header">\n' +
    '        <h3 class="modal-title">Transfer ownership</h3>\n' +
    '    </div>\n' +
    '    <div class="modal-body">\n' +
    '      <div class="form-horizontal">\n' +
    '          <fieldset>\n' +
    '              <div class="form-group">\n' +
    '                  <label class="col-md-2 control-label">Email</label>\n' +
    '                  <div class="col-md-10">\n' +
    '                      <input type="email" name="email" ng-model="data.email" required class="form-control">\n' +
    '                  </div>\n' +
    '              </div>\n' +
    '          </fieldset>\n' +
    '      </div>\n' +
    '    </div>\n' +
    '\n' +
    '    <div class="modal-footer">\n' +
    '        <div class="button-wrap">\n' +
    '            <a ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                </span>Cancel\n' +
    '            </a>\n' +
    '            <button type="submit" class="btn btn-labeled btn-primary btn-sm pull-right">\n' +
    '                <span class="btn-label">\n' +
    '                  <i class="fa fa-check"></i>\n' +
    '                </span>\n' +
    '                <span>\n' +
    '                  Transfer\n' +
    '                </span>\n' +
    '            </button>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</form>\n' +
    '    \n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\auth.js":[function(require,module,exports){
//Third Party Modules
var angular                   = require('third-party-modules/angular');
var uiRouter                  = require('third-party-modules/angular-ui-router');

//Controllers
var signinCtrl                = require('./controllers/signin-ctrl');
var signupCtrl                = require('./controllers/signup-ctrl');
var resetPasswordCtrl         = require('./controllers/reset-password-ctrl');
var appActivationCtrl         = require('./controllers/app-activation-ctrl');
//Templates
var signinTemplate            = require('./partials/signin.html');
var signupTemplate            = require('./partials/signup.html');
var resetPasswordTemplate     = require('./partials/reset-password.html');
var appActivationTemplate     = require('./partials/app-activation.html');

module.exports = angular.module('built.auth', [uiRouter])

.controller('signinCtrl', signinCtrl)
  .controller('signupCtrl', signupCtrl)
  .controller('resetPasswordCtrl', resetPasswordCtrl)  
  .controller('appActivationCtrl', appActivationCtrl)
  .config([
    '$stateProvider',
    function($stateProvider) {
      $stateProvider
        .state('app.signin', {
          url: '/',
          template: signinTemplate,
          resolvers: ['serverConfig'],
          controller: 'signinCtrl',
          data: {
            extraPage: true,
            layout: {
              leftMenu: false
            }
          }
        })
        .state('app.signup', {
          url: '/signup',
          template: signupTemplate,
          controller: 'signupCtrl',
          resolvers: ['serverConfig'],
          data: {
            extraPage: true,
            layout: {
              leftMenu: false
            }
          }
        })
        .state('app.systemResetPassword', {
          url: '/user/reset_password_submit/:authtoken',
          template: resetPasswordTemplate,
          controller: 'resetPasswordCtrl',
          data: {
            extraPage: true,
            layout: {
              leftMenu: false
            }
          }
        })
        .state('app.appUserResetPassword', {
          url: '/application/users/reset_password/:authtoken',
          template: resetPasswordTemplate,
          controller: 'resetPasswordCtrl',
          data: {
            appUser: true,
            extraPage: true,
            layout: {
              leftMenu: false
            }
          }
        })
        .state('app.systemUserActivations', {
          url: '/activations/:authtoken',
          template: appActivationTemplate,
          controller: 'appActivationCtrl',
          data: {
            extraPage: true,
            layout: {
              leftMenu: false
            }
          }
        })
        .state('app.appUserActivations', {
          url: '/application/users/:appUserUid/activate/:authtoken',
          template: appActivationTemplate,
          controller: 'appActivationCtrl',
          data: {
            appUser: true,
            extraPage: true,
            layout: {
              leftMenu: false
            }
          }
        });
    }
  ]);
},{"./controllers/app-activation-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\controllers\\app-activation-ctrl.js","./controllers/reset-password-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\controllers\\reset-password-ctrl.js","./controllers/signin-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\controllers\\signin-ctrl.js","./controllers/signup-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\controllers\\signup-ctrl.js","./partials/app-activation.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\partials\\app-activation.html","./partials/reset-password.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\partials\\reset-password.html","./partials/signin.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\partials\\signin.html","./partials/signup.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\partials\\signup.html","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-router\\release\\angular-ui-router.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\controllers\\app-activation-ctrl.js":[function(require,module,exports){
'use strict';

module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  function($scope, $location, $state, builtApi, Alert, Utils) {
    var appUserUid = $state.params.appUserUid;
    var authtoken = $state.params.authtoken;
    var isAppUser = $state.current.data.appUser;
    $scope.activationStatus = "checking";


    function userTypeAppActivationCall() {
      if (isAppUser)
       return builtApi.AppUserSession.activateAccount({
          options: {
            appUserUid: appUserUid,
            authtoken: authtoken
          }
        })
      else
      return builtApi.SystemUserSession.activateAccount({
          options: {
            authtoken: authtoken
          }
        })
    }

    userTypeAppActivationCall()
      .then(function(res) {
        if (isAppUser)
          $scope.activationStatus = "success";
        else
          $state.go('app.signin');
        Alert.notify({
          title: "Success",
          content: res.notice,
          type: 'success'
        })
      }, function(xhr) {
        $scope.activationStatus = "fail";
        Alert.notify({
          title: "Redirecting Failed",
          content: xhr.entity.error_message,
          type: 'error'
        });
      })
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\controllers\\reset-password-ctrl.js":[function(require,module,exports){
'use strict';

module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  function($scope, $location, $state, builtApi, Alert, Utils) {
    var authtoken = $state.params.authtoken;
    var btnSubmit = $('#reset-form .btn-submit');
    var isAppUser = $state.current.data.appUser;
    $scope.onSetPassword = false;
    $scope.userCredential = {
      password: "",
      password_confirmation: "",
      reset_password_token: authtoken
    };


    function validatePswd() {
       //both should not be empty and both should match
      return (!_.isEmpty($scope.userCredential.password) && !_.isEmpty($scope.userCredential.password_confirmation))
    }

    function matchPswd(){
     return ($scope.userCredential.password === $scope.userCredential.password_confirmation) 
    }

    $scope.cancel = function() {
      $state.go('app.signin');
    }

    function userTypeResetPswdCall() {
      if (isAppUser)
       return  builtApi.AppUserSession.resetPassword({
          body: {
            application_user: $scope.userCredential
          }
        })
      else
       return builtApi.SystemUserSession.resetPassword({
          body: {
            user: $scope.userCredential
          }
        })

    }

    $scope.resetPswd = function() {
      btnSubmit.button('loading');
      if (validatePswd()){
        if(matchPswd()){
        userTypeResetPswdCall()
        .then(function(res) {
            if (isAppUser)
              $scope.onSetPassword = true;
            else
              $state.go('app.signin');
            btnSubmit.button('reset');
            Alert.notify({
              title: "Success",
              content: res.notice,
              type: 'success'
            });
          },
          function(xhr) {
            btnSubmit.button('reset');
            Alert.notify({
              title: "Password reset failed",
              content: xhr.entity.error_message,
              type: 'error'
            });
          });
        }else{
            btnSubmit.button('reset');
            Alert.notify({
              title: "Password reset failed",
              content: "password and confirmation must match",
              type: 'error'
            });
        }
      }else{
        btnSubmit.button('reset');
        Alert.notify({
              title: "Password reset failed",
              content: "Invalid!",
              type: 'error'
            });
      }
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\controllers\\signin-ctrl.js":[function(require,module,exports){
'use strict';
var forgotPassword = require('../partials/forgot-password.html');

module.exports = [
  '$scope',
  '$state',
  'builtApi',
  'appCacheService',
  'alertService',
  'utilsService',
  'modalService',
  'serverConfig',
  function($scope, $state, builtApi, appCacheService, Alert, Utils, Modal, serverConfig) {
    var btnSubmit = $('#login-form .btn-submit');
    btnSubmit.button('loading...');

    $scope.resReg = serverConfig.restricted_registration;

    appCacheService.then('currentUser', builtApi.SystemUserSession.get())
      .then(function(result) {
        $state.go('app.applications');
      }, function(error) {

      })
      .finally(function() {
        btnSubmit.button('reset');
      });

    $scope.login = function(credentials) {
      btnSubmit.button('loading');

      var params = {
        "body": {
          "user": {
            "email": credentials.email,
            "password": credentials.password
          }
        }
      };

      builtApi.SystemUserSession.login(params)
        .then(function(data) {
          $state.go('app.applications');
        }, function(xhr) {
          Alert.notify({
            title: xhr.entity.error_message,
            content: Utils.parseError(xhr.entity),
            type: 'error'
          });
        })
        .finally(function() {
          btnSubmit.button('reset');
        });
    }

    $scope.signUp = function() {
      $state.go('app.signup');
    }

    $scope.showResetPasswordModal = function() {

      Modal.openModal({
          email: ""
        }, forgotPassword, ModalInstanceCtrl, {
          size: 'sm'
        })
        .then(function(res) {

          builtApi.SystemUserSession.postForgotPassword({
            body: {
              user: res
            }
          }).then(function(res) {
            Alert.notify({
              title: 'Success',
              content: res.notice,
              type: 'success'
            });

          }, function(xhr) {
            Alert.notify({
              title: xhr.entity.error_message,
              content: Utils.parseError(xhr.entity),
              type: 'error'
            });
          })

        })

      return false;

    }

    var ModalInstanceCtrl = function($scope, $modalInstance, data) {

      $scope.data = data;
      $scope.ok = function() {
        $modalInstance.close($scope.data);
      };

      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      };
    }
  }
]
},{"../partials/forgot-password.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\partials\\forgot-password.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\controllers\\signup-ctrl.js":[function(require,module,exports){
'use strict';

module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  'serverConfig',
  function($scope, $location, $state, builtApi, Alert, Utils, serverConfig) {

    var btnSubmit = $('#sign-up .btn-signup');
    var searchQuery = Utils.queryDecoder(window.location.search) || undefined;
    $scope.userData = {};
    $scope.btnLabel = {
      loading: serverConfig.restricted_registration ? 'Creating...' : 'Signing up...',
      normal: serverConfig.restricted_registration ? 'Create Account' : 'Start building killer apps!'
    }

    if (searchQuery) {
      if (searchQuery.email)
        $scope.userData['email'] = searchQuery.email;

      if (searchQuery.referral)
        $scope.userData['promo_code'] = searchQuery.referral;
    }

    $scope.createAccount = function() {

      btnSubmit.button('loading');
      $('#divSmallBoxes').empty();

      if (searchQuery) {
        var source = searchQuery.blt_source || searchQuery.utm_campaign;

        if ($.trim(source))
          $scope.userData['source'] = source;

        if (serverConfig.onPremise === false && searchQuery.plan_id)
          $scope.userData['plan_id'] = searchQuery.plan_id;

        if (!$scope.termAgreement) {
          Alert.notify({
            title: "Terms and conditions agreement",
            content: "In order to use built.io, you must agree to the terms of service and privacy policy.",
            type: 'error'
          });
          btnSubmit.button('reset');
          return false;
        }

        var params = {
          "body": {
            "user": $scope.userData
          }
        };

        builtApi.SystemUserSession.signUp(params)
          .then(function(res) {
            $state.go('app.signin');
            setTimeout(function() {
              Alert.notify({
                title: "Success",
                content: res.notice,
                type: 'success'
              })
            }, 1000);


          }, function(xhr) {
            Alert.notify({
              title: xhr.entity.error_message,
              content: Utils.parseError(xhr.entity),
              type: 'error'
            });
          })
          .finally(function() {
            btnSubmit.button('reset');
          });
      }
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\partials\\app-activation.html":[function(require,module,exports){
module.exports = '<div id="main" role="main">\n' +
    '    <!-- MAIN CONTENT -->\n' +
    '    <div id="content" class="container">\n' +
    '        <h2 ng-show="activationStatus==\'checking\'" class="no-msg">Please wait...</h2>\n' +
    '        <h2 ng-show="activationStatus==\'success\'" class="no-msg">Your account has been activated successfully!</h2>\n' +
    '        <h2 ng-show="activationStatus==\'fail\'" class="no-msg">Please try again later!</h2>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\partials\\forgot-password.html":[function(require,module,exports){
module.exports = '<form class="forgot-password-ov" action="" method="" ng-submit="ok()">\n' +
    '    <div class="modal-header">\n' +
    '        <button type="button" class="close" ng-click=\'cancel()\'>\n' +
    '          &times;\n' +
    '        </button>\n' +
    '        <h4 class="modal-title">Send password reset request</h4>\n' +
    '    </div>\n' +
    '    <div class="modal-body">\n' +
    '    <fieldset>\n' +
    '        <div class="form-group">\n' +
    '            <label class="no-placeholder">Enter your email address</label>\n' +
    '            <input required ng-model="data.email" name="email" type="email" class="form-control" placeholder="Enter your email address">\n' +
    '        </div>\n' +
    '    </fieldset>\n' +
    '    </div>\n' +
    '\n' +
    '    <div class="modal-footer">\n' +
    '        <div class="button-wrap">\n' +
    '            <a ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                </span>Cancel\n' +
    '            </a>\n' +
    '            <button type="submit" class="btn btn-labeled btn-primary btn-sm pull-right">\n' +
    '                <span class="btn-label">\n' +
    '                  <i class="fa fa-check"></i>\n' +
    '                </span>\n' +
    '                Send Request\n' +
    '            </button>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</form>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\partials\\reset-password.html":[function(require,module,exports){
module.exports = '<div id="main" role="main">\n' +
    '    <!-- MAIN CONTENT -->\n' +
    '    <div id="content" class="container">\n' +
    '\n' +
    '        <div class="row">\n' +
    '            <div class="col-md-5 col-md-offset-4 col-lg-4 col-sm-6 col-sm-offset-3" ng-hide="onSetPassword">\n' +
    '                <div class="well no-padding login-form-wrap">\n' +
    '                    <form id="reset-form" ng-submit="resetPswd()" name="resetForm" class="form-signin smart-form client-form" role="form" method="POST" action="">\n' +
    '                        <header>\n' +
    '                            Reset your password\n' +
    '                        </header>\n' +
    '                        <fieldset>\n' +
    '                            <section>\n' +
    '                                <label class="label">New password</label>\n' +
    '                                <label class="input"> <i class="icon-append fa fa-lock"></i>\n' +
    '                                    <input type="password" name="password" ng-model="userCredential.password" required autofocus>\n' +
    '                                </label>\n' +
    '                            </section>\n' +
    '                            <section>\n' +
    '                                <label class="label">Confirm Password</label>\n' +
    '                                <label class="input"> <i class="icon-append fa fa-lock"></i>\n' +
    '                                    <input type="password" name="password" ng-model="userCredential.password_confirmation" >\n' +
    '                                </label>\n' +
    '                            </section>\n' +
    '                        </fieldset>\n' +
    '                        <footer>\n' +
    '                            <button type="submit" class="btn btn-primary btn-submit" data-loading-text="Reseting...">Reset</button>\n' +
    '                            <button ng-click="cancel()" class="btn btn-default">Cancel</button>\n' +
    '                        </footer>\n' +
    '                    </form>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <h2 ng-show="onSetPassword">\n' +
    '                Your password has been updated successfully!\n' +
    '            </h2>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\partials\\signin.html":[function(require,module,exports){
module.exports = '<div id="main" role="main">\n' +
    '    <!-- MAIN CONTENT -->\n' +
    '    <div id="content" class="container">\n' +
    '\n' +
    '        <div class="row">\n' +
    '            <div class="col-md-5 col-md-offset-4 col-lg-4 col-sm-6 col-sm-offset-3">\n' +
    '                <div class="well no-padding login-form-wrap">\n' +
    '                    <form id="login-form" ng-submit="login(credentials)" name="loginForm" class="form-signin smart-form client-form" role="form" method="POST" action="">\n' +
    '                        <header>\n' +
    '                            Sign In\n' +
    '                        </header>\n' +
    '\n' +
    '                        <fieldset>\n' +
    '\n' +
    '                            <section>\n' +
    '                                <label class="label">E-mail</label>\n' +
    '                                <label class="input"> <i class="icon-append fa fa-user"></i>\n' +
    '                                    <input type="email" name="email" id="email" ng-model="credentials.email" required autofocus>\n' +
    '                                    <b class="tooltip tooltip-top-right"><i class="fa fa-user txt-color-teal"></i> Please enter your email address</b>\n' +
    '                                </label>\n' +
    '                            </section>\n' +
    '\n' +
    '                            <section>\n' +
    '                                <label class="label">Password</label>\n' +
    '                                <label class="input"> <i class="icon-append fa fa-lock"></i>\n' +
    '                                    <input type="password" name="password" ng-model="credentials.password">\n' +
    '                                    <b class="tooltip tooltip-top-right"><i class="fa fa-lock txt-color-teal"></i> Enter your password</b> \n' +
    '                                </label>\n' +
    '                            </section>\n' +
    '                            <section>\n' +
    '                                <div class="mbm"> <a href="#" ng-click=\'showResetPasswordModal()\' class="btn-forgot-password font-size-14">Forgot your password?</a> \n' +
    '                                </div>\n' +
    '                            </section>\n' +
    '                        </fieldset>\n' +
    '                        <footer>\n' +
    '                            <button type="submit" class="btn btn-primary btn-submit" data-loading-text="Signing in...">\n' +
    '                                Sign in\n' +
    '                            </button>\n' +
    '                        </footer>\n' +
    '                    </form>\n' +
    '                </div>\n' +
    '\n' +
    '                <div ng-if="resReg" class="lf-info">\n' +
    '                    If you are considering dedicated built.io, <a href="#/signup">sign up</a> now for a 90-day free trial of built.io running on VMware vCloud Air.\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\partials\\signup.html":[function(require,module,exports){
module.exports = '<div id="main" role="main">\n' +
    '    <!-- MAIN CONTENT -->\n' +
    '    <div id="content" class="container">\n' +
    '        <div class="col-md-offset-3 col-md-6 col-sm-offset-3 col-sm-6">\n' +
    '            <div class="well no-padding signup-form-wrap">\n' +
    '                <form action="" method="POST" ng-submit="createAccount(userData)" id="sign-up" class="smart-form client-form user-signup-form">\n' +
    '                    <header ng-if="resReg">\n' +
    '                        <h5>\n' +
    '                            Sign up now for a 90-day free trial of built.io running on VMware vCloud Air.\n' +
    '                        </h5>\n' +
    '                    </header>\n' +
    '\n' +
    '                    <header ng-if="!resReg">\n' +
    '                        Sign up\n' +
    '                    </header>\n' +
    '\n' +
    '                    <fieldset>\n' +
    '                        <section>\n' +
    '                            <label class="label">E-mail <sup class="mandatory-star">*</sup></label>\n' +
    '                            <label class="input"> <i class="icon-append fa fa-envelope"></i>\n' +
    '                                <input required type="email" name="email" placeholder="Email address" ng-model="userData.email">\n' +
    '                                <b class="tooltip tooltip-bottom-right">Needed to verify your account</b> </label>\n' +
    '                        </section>\n' +
    '\n' +
    '                        <section>\n' +
    '                            <label class="label">Password <sup class="mandatory-star">*</sup></label>\n' +
    '                            <label class="input"> <i class="icon-append fa fa-lock"></i>\n' +
    '                                <input required type="password" name="password" placeholder="Password" id="password" ng-model="userData.password">\n' +
    '                                <b class="tooltip tooltip-bottom-right">Don\'t forget your password</b> </label>\n' +
    '                        </section>\n' +
    '\n' +
    '                        <section>\n' +
    '                            <label class="label">Confirm password <sup class="mandatory-star">*</sup></label>\n' +
    '                            <label class="input"> <i class="icon-append fa fa-lock"></i>\n' +
    '                                <input required type="password" name="passwordConfirm" placeholder="Confirm password" ng-model="userData.password_confirmation">\n' +
    '                                <b class="tooltip tooltip-bottom-right">Don\'t forget your password</b> </label>\n' +
    '                        </section>\n' +
    '                    </fieldset>\n' +
    '\n' +
    '                    <fieldset>\n' +
    '                        <div class="row">\n' +
    '                            <section class="col col-6">\n' +
    '                                <label class="label">First name</label>\n' +
    '                                <label class="input">\n' +
    '                                    <input type="text" name="firstname" placeholder="First name" ng-model="userData.first_name">\n' +
    '                                </label>\n' +
    '                            </section>\n' +
    '                            <section class="col col-6">\n' +
    '                                <label class="label">Last name</label>\n' +
    '                                <label class="input">\n' +
    '                                    <input type="text" name="lastname" placeholder="Last name" ng-model="userData.last_name">\n' +
    '                                </label>\n' +
    '                            </section>\n' +
    '                        </div>\n' +
    '\n' +
    '                        <div class="row">\n' +
    '                            <section class="col col-6">\n' +
    '                                <label class="label">Company</label>\n' +
    '                                <label class="input">\n' +
    '                                    <input type="text" name="company" placeholder="Company" ng-model="userData.company">\n' +
    '                                </label>\n' +
    '                            </section>\n' +
    '                            <section class="col col-6" ng-if="userData.promo_code">\n' +
    '                                <label class="label">Referral</label>\n' +
    '                                <label class="input">\n' +
    '                                    <input type="text" placeholder="Referral" ng-model="userData.promo_code">\n' +
    '                                </label>\n' +
    '                            </section>\n' +
    '                        </div>\n' +
    '\n' +
    '                        <section>\n' +
    '                            <label class="checkbox">\n' +
    '                                <input type="checkbox" ng-model="termAgreement" name="terms" id="terms">\n' +
    '                                <i></i>\n' +
    '                                 I agree to built.io <a href="http://www.built.io/termsofservice.html" target="_blank">Terms of Service</a> and <a href="http://www.built.io/privacy.html" target="_blank">Privacy Policy</a>.\n' +
    '                                </label>\n' +
    '                        </section>\n' +
    '                    </fieldset>\n' +
    '                    <footer>\n' +
    '                        <button type="submit" data-loading-text="{{btnLabel.loading}}" class="btn btn-primary btn-signup">\n' +
    '                            {{btnLabel.normal}}\n' +
    '                        </button>\n' +
    '                    </footer>\n' +
    '                </form>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        \n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\base\\base.js":[function(require,module,exports){
'use strict';

var angular = require('third-party-modules/angular');
var uiRouter = require('angular-ui-router');
var resolvers = require('../resolvers');

var baseCtrl = require('./controllers/base-ctrl');
var baseTemplate = require('./partials/base.html');

module.exports = angular.module('built.base', ['ui.router'])
	.controller('baseCtrl', baseCtrl)
	.config([
		'$stateProvider',
		function($stateProvider) {
			$stateProvider
				.state('app', {
					template: baseTemplate,
					resolve: resolvers.resolve(['currentApiHost', 'serverConfig', 'plans']),
					controller: 'baseCtrl'
				})
		}
	])
},{"../resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/base-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\base\\controllers\\base-ctrl.js","./partials/base.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\base\\partials\\base.html","angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\angular-ui-router\\release\\angular-ui-router.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\base\\controllers\\base-ctrl.js":[function(require,module,exports){
module.exports = [
  '$scope',
  '$location',
  '$state',
  '$timeout',
  'builtApi',
  'appCacheService',
  'utilsService',
  'serverConfig',
  'plans',
  'alertService',
  'libraryService',
  '$injector',
  'manageUtils',
  function($scope, $location, $state, $timeout, builtApi, appCacheService, Utils, serverConfig, plans, Alert, LIB, $injector, manageUtils) {

    
    $scope.resReg = serverConfig.restricted_registration;
    $scope.year = new Date().getFullYear();

    $scope.showAllApps = function() {
      $state.go('app.applications');
    }

    $scope.openApp = function(api_key) {

      manageUtils.cache.clearAppHeaderKeys();
      manageUtils.cache.clearAppRelatedCache();

      var currentApp = appCacheService.set('currentApp', _.find($scope.apps, function(app) {
        return app.api_key === api_key;
      }));

      manageUtils.setAppHeaders(currentApp);
      
      $state.go('app.dashboard.classes-user-list', {
        api_key: api_key,
        p: 1
      });

      return false;
    }

    $scope.logout = function() {
      /**
      *Remove current user broadcast should 
      always be written above logout call so as to resolve current user bug.
      **/
      appCacheService.remove('currentUser');
      builtApi.SystemUserSession.logout()
        .then(function(user) {
            $location.search({});
            $state.go('app.signin');
        }, function(error) {});
    };

    //Get Current User
    function getCurrentUser() {
      var user = appCacheService.get('currentUser');
      $scope.userName = null;
      $timeout(function() {
        if (user) {
          user.first_name = user.first_name ? user.first_name.trim() : '';
          user.last_name  = user.last_name ?  user.last_name.trim() : '';
          $scope.userName = (user.first_name || user.last_name) ? user.first_name + " " + user.last_name : user.email;
        } else {
          $scope.userName = null;
        }
      }, 500);
    }

    $scope.$on('currentUser', function(event, args) {
      getCurrentUser();
    });

    function getCurrentApp() {
      var app = appCacheService.get('currentApp');
      if (app) {
        $scope.currentApp = app;
        
      } else {
        $scope.currentApp = null;
      }
    }

    $scope.$on('currentApp', function(event, args) {
      getCurrentApp()
    });

    function getAllApps(app) {
      var apps = appCacheService.get('apps');
      $scope.apps = [];
      if (apps) {
        $scope.apps = apps;
      } else {
        $scope.apps = [];
      }
    }

    $scope.$on('apps', function(event, args) {
      getAllApps();
    });

    getCurrentUser();
    getAllApps();
    getCurrentApp();


    var goForMap = false;

    function getMap() {
      if (!serverConfig.features.maps.enabled || goForMap) return;
      var key = "";
      if (serverConfig.features.maps.meta.api_key)
        key = "?key=" + serverConfig.features.maps.meta.api_key;

      $injector.invoke(['thirdPartyService',
        function(TPS) {
          TPS.getMap(key).then(function(MapStatus) {
            goForMap = MapStatus;
            LIB.register('googleMaps');
          });
        }
      ]);

    }

    getMap();
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\base\\partials\\base.html":[function(require,module,exports){
module.exports = '<!-- #HEADER -->\n' +
    '<header id="header">\n' +
    '    <div id="logo-group">\n' +
    '        <a id="logo" href="" ng-click="showAllApps()">\n' +
    '            <img src="images/logo/built_io_logo.png" alt="built.io">\n' +
    '        </a>\n' +
    '    </div>\n' +
    '\n' +
    '    <span id="extr-page-header-space" ng-if="\'app.signup\' | isState">\n' +
    '        <span class="hidden-mobile">Already registered?</span>\n' +
    '        <a ui-sref="app.signin" class="btn btn-danger">Sign In</a>\n' +
    '    </span>\n' +
    '\n' +
    '    <span id="extr-page-header-space" ng-if="(\'app.signin\' | isState) && !resReg">\n' +
    '        <span class="hidden-mobile">New to built.io?</span>\n' +
    '        <a ui-sref="app.signup" class="btn btn-danger">Create account</a>\n' +
    '    </span>\n' +
    '\n' +
    '    <!-- #PROJECTS: projects dropdown -->\n' +
    '    <div class="project-context hidden-xs header-dropdown" data-bc="{{currentApp.name}}" ng-if=\'userName && currentApp\'>\n' +
    '\n' +
    '        <span class="label">Applications:</span>\n' +
    '        <span class="project-selector dropdown-toggle" data-toggle="dropdown">{{currentApp.name}}</span>\n' +
    '        <i class="fa fa-angle-down hand ml5 dropdown-toggle" data-toggle="dropdown"></i>\n' +
    '\n' +
    '        <ul class="dropdown-menu">\n' +
    '            <li ng-repeat="app in apps" ng-class="{\'active\' : app.api_key === currentApp.api_key}">\n' +
    '                <a ng-click="openApp(app.api_key)" href="" title="{{app.name}}">{{app.name}}</a>\n' +
    '            </li>\n' +
    '        </ul>\n' +
    '        <!-- end dropdown-menu-->\n' +
    '\n' +
    '    </div>\n' +
    '    <!-- end projects dropdown -->\n' +
    '\n' +
    '    <!-- #TOGGLE LAYOUT BUTTONS -->\n' +
    '    <!-- pulled right: nav area -->\n' +
    '    <div class="pull-right header-buttons">\n' +
    '        <div id="hide-menu" class="btn-header pull-right visible-sm visible-xs" ng-if=\'currentApp\'>\n' +
    '            <span>\n' +
    '                <a href="#" data-action="toggleMenu" title="Collapse Menu">\n' +
    '                    <i class="fa fa-reorder"></i>\n' +
    '                </a>\n' +
    '            </span>\n' +
    '        </div>\n' +
    '        \n' +
    '        <!-- end logout button -->\n' +
    '        <div class="project-context pull-right animated fadeIn account-dropdown" ng-if=\'userName\'>\n' +
    '            <span class="label">User:</span>\n' +
    '            <span class="project-selector dropdown-toggle user-name" data-toggle="dropdown">{{userName}}</span>\n' +
    '            <i class="fa fa-angle-down hand dropdown-toggle" data-toggle="dropdown"></i>\n' +
    '            <ul class="dropdown-menu">\n' +
    '                <li>\n' +
    '                    <a ui-sref="app.account.personalInfo"><i class="fa fa-cogs"></i> Account settings</a>\n' +
    '                </li>\n' +
    '                <li>\n' +
    '                    <a ng-click="logout()" class="hand"><i class="fa fa-sign-out"></i> Sign out</a>\n' +
    '                </li>\n' +
    '            </ul>\n' +
    '        </div>\n' +
    '\n' +
    '    </div>\n' +
    '    <!-- end pulled right: nav area -->\n' +
    '\n' +
    '</header>\n' +
    '<!-- END HEADER -->\n' +
    '<div ui-view></div>\n' +
    '\n' +
    '<div class="page-loader body-loader">\n' +
    '    <div class="logo-cubes">\n' +
    '        <div class="cube-1 cube"></div>\n' +
    '        <div class="cube-2 cube"></div>\n' +
    '        <div class="cube-3 cube"></div>\n' +
    '    </div>\n' +
    '</div>\n' +
    '\n' +
    '<footer class="page-footer">\n' +
    '    <div class="row">\n' +
    '        <div class="col-xs-12">\n' +
    '            <p class="footer-text">\n' +
    '                <span>\n' +
    '                    <a href="mailto:support@built.io" target="_blank">support@built.io</a>\n' +
    '                    |\n' +
    '                    <a href="http://built.io/privacy.html" target="_blank">Privacy Policy</a>\n' +
    '                    |\n' +
    '                    <a href="http://built.io/termsofservice.html" target="_blank">Terms of Service</a>\n' +
    '                    |\n' +
    '                </span>\n' +
    '                <span>\n' +
    '                    Copyright © {{year}}\n' +
    '                    <a href="http://www.raweng.com/" target="_blank" class=""> \n' +
    '                        raw engineering, inc.\n' +
    '                    </a> \n' +
    '                </span>\n' +
    '                <span>\n' +
    '                    All Rights Reserved.\n' +
    '                </span>\n' +
    '            </p>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</footer>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\classes.js":[function(require,module,exports){
'use strict';

var angular              = require('third-party-modules/angular');
var uiRouter             = require('third-party-modules/angular-ui-router');
var resolvers            = require('../resolvers');
var list                 = require('./controllers/list/list-ctrl');
var create               = require('./controllers/create/create-ctrl');
var edit                 = require('./controllers/edit/edit-ctrl');
var createTemplate       = require('./controllers/create/partials/create.html');
var editTemplate         = require('./controllers/edit/partials/edit.html');
var listTemplate         = require('./controllers/list/partials/list.html');

require('third-party-modules/angular-tr-ng-grid');


module.exports = angular.module('built.classes', ['ui.router'])
  .controller('classListCtrl', list)
  .controller('classCreateCtrl', create)
  .controller('classEditCtrl', edit)
  .config([
    '$stateProvider',
    function($stateProvider) {
      $stateProvider
        .state('app.dashboard.classes-edit', {
          url: '/classes/:class_uid/edit',
          template: editTemplate,
          resolve: resolvers.resolve(['currentClass', 'currentFieldTypes']),
          controller: 'classEditCtrl',
          data: {
            breadcrumbs: [{
              name: 'Classes',
            }, {
              name: '{{currentClass.title}}'
            }, {
              name: 'Edit'
            }]
          }
        })
        .state('app.dashboard.classes-create', {
          url: '/classes/create',
          template: createTemplate,
          resolve: resolvers.resolve(['currentFieldTypes']),
          controller: 'classCreateCtrl',
          data: {
            breadcrumbs: [{
              name: 'Classes',
            }, {
              name: 'Create'
            }]
          }
        })
        .state('app.dashboard.classes-user-list', {
          url: '/classes/list?p',
          template: listTemplate,
          controller: 'classListCtrl',
          data: {
            breadcrumbs: [{
              name: 'Classes',
            }, {
              name: 'User classes'
            }]
          }
        })
        .state('app.dashboard.classes-system-list', {
          url: '/classes/system/list?p',
          template: listTemplate,
          controller: 'classListCtrl',
          data: {
            breadcrumbs: [{
              name: 'Classes',
            }, {
              name: 'System classes'
            }]
          }
        })
    }
  ])
  .run(["$rootScope",
  "menuService",
  function($rootScope, menu) {
    var menuItem = {
      id: 'classes',
      title: 'Data',
      order: 1,
      icon: 'fa-sitemap',
      sub_menu: [{
        id: 'user-classes',
        title: 'User classes',
        state: 'app.dashboard.classes-user-list'
      }, {
        id: 'system-classes',
        title: 'System classes',
        state: 'app.dashboard.classes-system-list'
      }]
    }
    menu.add(menuItem);
  }]);

},{"../resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/create/create-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\create\\create-ctrl.js","./controllers/create/partials/create.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\create\\partials\\create.html","./controllers/edit/edit-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\edit\\edit-ctrl.js","./controllers/edit/partials/edit.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\edit\\partials\\edit.html","./controllers/list/list-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\list\\list-ctrl.js","./controllers/list/partials/list.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\list\\partials\\list.html","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-tr-ng-grid":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-tr-ng-grid\\trnggrid.shim.js","third-party-modules/angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-router\\release\\angular-ui-router.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\create\\create-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  'currentFieldTypes',
  'constants',
  'previousStateService',
  function($scope, $location, $state, builtApi, Alert, Utils, currentFieldTypes, constants, previousState) {
    var apiKey = $state.params.api_key;
    $scope.apikey = apiKey;
    $scope.clssdata = {
      uid: '',
      title: '',
      schema: []
    };

    //get all datatype and it relevants fields
    $scope.dtypes = currentFieldTypes;

    // DOM
    $scope.classSteps = constants.classes.creationSteps;
    $scope.activeStep = $scope.classSteps[0];
    $scope.btnStatus  = false;

    $scope.changeStep = function(step) {
      $scope.activeStep = step;
    }

    function validateClassInfo(klass) {
      klass.uid = klass.uid ? klass.uid.trim() : undefined;
      klass.title = klass.uid ? klass.title.trim() : undefined;
      if (klass.uid && klass.title)
        return true;
      else
        return false;
    }

    //Create new class
    $scope.createClass = function() {
      $scope.btnStatus  = true;
      if (!_.isEmpty($scope.clssdata)) {
        var params = {
          body: {
            "class": $scope.clssdata,
            "app_api_key": apiKey
          }
        };
        builtApi.Classes.addOne(params)
          .then(function(res) {
            $scope.btnStatus  = false;
            Alert.notify({
              title: 'Success',
              content: res.notice,
              type: 'success'
            });
            navigateToList();
          }, function(xhr) {
            $scope.btnStatus  = false;
            xhr = xhr.entity;
            Alert.notify({
              title: xhr.error_message,
              content: Utils.parseError(xhr, params.body.class.schema),
              type: 'error'
            });
          })
      } else {
        alert("Inputs are incomplete");
      }

    }

    $scope.cancel = function() {
      navigateToList();
    }

    function navigateToList() { 
        previousState.go('app.dashboard.classes-user-list', {
        api_key: $scope.apikey,
        p : 1
      });
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\create\\partials\\create.html":[function(require,module,exports){
module.exports = '<div class="well well-sm max-width-1000 class-crud-wrap">\n' +
    '	<div class="form-actions form-actions-top mb20">\n' +
    '        <ul class="bootstrapWizard form-wizard clearfix">\n' +
    '            <li ng-class="{\'active\': activeStep == classSteps[0]}">\n' +
    '                <a data-toggle="tab" ng-click="changeStep(classSteps[0])"> <span class="step">1</span> <span class="title">Enter class title and UID</span> </a>\n' +
    '            </li>\n' +
    '            <li ng-class="{\'active\': activeStep == classSteps[1]}">\n' +
    '                <a ng-click="changeStep(classSteps[1])" data-toggle="tab"> <span class="step">2</span> <span class="title">Add fields</span> </a>\n' +
    '            </li>\n' +
    '            <li ng-class="{\'active\': activeStep == classSteps[2]}">\n' +
    '                <a ng-click="changeStep(classSteps[2])" data-toggle="tab"> <span class="step">3</span> <span class="title">Configure</span> </a>\n' +
    '            </li>\n' +
    '        </ul>\n' +
    '    </div>\n' +
    '    <div classbuilder clssdata="clssdata" dtypes="dtypes" data-id="{{clssdata}}" apikey="apikey" active-step="activeStep" class-steps="classSteps"></div>\n' +
    '    <div class="form-actions">\n' +
    '        <div class="button-wrap">\n' +
    '             <button ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left" ng-show="activeStep == classSteps[0]">\n' +
    '                 <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                 </span>Cancel\n' +
    '             </button>\n' +
    '\n' +
    '             <button ng-click=\'changeStep(classSteps[classSteps.indexOf(activeStep) -1])\' ng-show="activeStep != classSteps[0]" class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                 <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                 </span>Back\n' +
    '             </button>\n' +
    '             <button ng-click=\'changeStep(classSteps[classSteps.indexOf(activeStep) + 1])\' ng-show="activeStep != classSteps[2]" class="btn btn-labeled btn-default btn-sm pull-right">\n' +
    '                 <span class="btn-label"><i class="fa fa-arrow-right"></i>\n' +
    '                 </span>Next\n' +
    '             </button>\n' +
    '\n' +
    '             <button btn-loader="btnStatus" loading-text="Creating..." ng-click=\'createClass()\' class="btn btn-labeled btn-primary btn-sm pull-right" ng-show="activeStep == classSteps[2]" >\n' +
    '                 <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '                 </span> <span class="js-btn-text">Create</span>\n' +
    '             </button>\n' +
    '         </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\edit\\edit-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'currentClass',
  'currentFieldTypes',
  'alertService',
  'utilsService',
  'constants',
  'previousStateService',
  function($scope, $location, $state, builtApi, currentClass, currentFieldTypes, Alert, Utils, constants, previousState) {
    var apiKey = $state.params.api_key;
    var appUid = $state.params.app_uid;
    var classUid = $state.params.class_uid;
    $scope.apikey = apiKey;

    console.log("$state", $state);
    //set current class data to be edited
    $scope.clssdata = _.cloneDeep(currentClass);

    //get all datatype and it relevants fields
    $scope.dtypes = currentFieldTypes;

    // DOM
    $scope.classSteps = constants.classes.creationSteps;
    $scope.activeStep = $scope.classSteps[0];
    $scope.btnStatus  = false;

    $scope.changeStep = function(step) {
      $scope.activeStep = step;
    }

    //get all Classes(Required For reference)
    //save edited class
    $scope.save = function() {
      $scope.btnStatus  = true;
      var params = {
        options: {
          classUid: classUid
        },
        body: {
          app_api_key: apiKey,
          class: $scope.clssdata
        }
      }
      builtApi.Classes.editOne(params)
        .then(function(res) {
          Alert.notify({
            title: res.notice,
            content: 'Success',
            type: 'success'
          });
          navigateToList();
        }, function(xhr) {
          xhr = xhr.entity;
          Alert.notify({
            title: xhr.error_message,
            content: Utils.parseError(xhr, params.body.class.schema),
            type: 'error'
          });

        }).finally(function(){
          $scope.btnStatus  = false;
        });
    }

    $scope.cancel = function() {
      navigateToList();
    }

    function navigateToList() {
      previousState.go('app.dashboard.classes-user-list', {
        api_key: apiKey,
        p : 1
      });
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\edit\\partials\\edit.html":[function(require,module,exports){
module.exports = '<div class="well well-sm max-width-1000 class-crud-wrap">\n' +
    '    <div class="form-actions form-actions-top mb20">\n' +
    '        <ul class="bootstrapWizard form-wizard clearfix">\n' +
    '            <li ng-class="{\'active\': activeStep == classSteps[0]}">\n' +
    '                <a data-toggle="tab" ng-click="changeStep(classSteps[0])"> <span class="step">1</span> <span class="title">Edit class title</span> </a>\n' +
    '            </li>\n' +
    '            <li ng-class="{\'active\': activeStep == classSteps[1]}">\n' +
    '                <a ng-click="changeStep(classSteps[1])" data-toggle="tab"> <span class="step">2</span> <span class="title">Edit fields</span> </a>\n' +
    '            </li>\n' +
    '            <li ng-class="{\'active\': activeStep == classSteps[2]}">\n' +
    '                <a ng-click="changeStep(classSteps[2])" data-toggle="tab"> <span class="step">3</span> <span class="title">Configure</span> </a>\n' +
    '            </li>\n' +
    '        </ul>\n' +
    '    </div>\n' +
    '    <div classbuilder clssdata="clssdata" dtypes="dtypes" data-id="{{clssdata}}" apikey="apikey" active-step="activeStep" class-steps="classSteps"></div>\n' +
    '    <div class="form-actions">\n' +
    '        <div class="button-wrap">\n' +
    '            <button ng-click=\'changeStep(classSteps[classSteps.indexOf(activeStep) + 1])\' ng-show="activeStep != classSteps[2]" class="btn btn-labeled btn-default btn-sm pull-right">\n' +
    '                 <span class="btn-label"><i class="fa fa-arrow-right"></i>\n' +
    '                 </span>Next\n' +
    '             </button>\n' +
    '             <button ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left" ng-show="activeStep == classSteps[0]">\n' +
    '                 <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                 </span>Cancel\n' +
    '             </button>\n' +
    '             <button btn-loader="btnStatus" loading-text="Saving..." ng-click=\'save()\' class="btn btn-labeled btn-primary btn-sm pull-right" ng-show="activeStep == classSteps[2]" >\n' +
    '                 <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '                 </span> \n' +
    '                 <span class="js-btn-text">Done</span>\n' +
    '             </button>\n' +
    '\n' +
    '             <button ng-click=\'changeStep(classSteps[classSteps.indexOf(activeStep) -1])\' ng-show="activeStep != classSteps[0]" class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                 <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                 </span>Back\n' +
    '             </button>\n' +
    '             \n' +
    '\n' +
    '         </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\list\\list-ctrl.js":[function(require,module,exports){
'use strict';
require('third-party-modules/footable');
var importClassModalTemplate = require('./partials/import-class-modal.html');
module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  'appCacheService',
  'postMessageUploadService',
  'modalService',
  'currentApiHost',
  'currentUser',
  'constants',
  '$sce',
  'dataGridService',
  function($scope, $location, $state, builtApi, Alert, Utils, appCacheService, postMessageUploadService, Modal, currentApiHost, currentUser, constants, $sce, dataGrid) {

    var tenantUid = $state.params.tenant_uid;

    var previousFilter = undefined;
    var dataTableContainer = $('.data-tbl');
    $scope.apiKey = $state.params.api_key;
    $scope.isSystemClassesList = $state.is('app.dashboard.classes-system-list');
    $scope.actions = ['edit', 'export', 'delete'];
    $scope.loading = true;

    if ($scope.isSystemClassesList)
      $scope.cannotCreate = true;


    //Table data
    $scope.dataGrid = dataGrid;
    $scope.listRows = [];
    $scope.classColumns = [{
      'label': 'Title',
      'key': 'title'
    }, {
      'label': 'Updated at',
      'key': 'updated_at'
    }];

    dataGrid.addResponsiveAttrs($scope.classColumns, 'phone');

    //paging
    var pagno = (parseInt($location.search().p) - 1);
    $scope.myPageItemsCount = constants.queryLimit;
    $scope.mycurrentPage = (pagno < 0 ? 0 : pagno) || 0;

    $scope.onServerSideItemsRequested = function(currentPage, filterBy, filterByFields, orderBy, orderByReverse, myPageItemsCount, gridItemuid) {
      $scope.loading = true;

      var skip = currentPage * myPageItemsCount;
      dataGrid.checkFilter(filterBy, previousFilter, $scope.mycurrentPage, skip);

      var params = {
        options: {
          query: {
            skip: skip,
            limit: myPageItemsCount,
            include_count: true,
            desc: 'created_at',
            query: {
              inbuilt_klass: $scope.isSystemClassesList
            }
          }
        }
      };

      if (filterBy) {
        params.options.query.query.$or = [{
          uid: {
            $regex: filterBy,
            $options: 'i'
          }
        }, {
          title: {
            $regex: filterBy,
            $options: 'i'
          }
        }]
      }

      params.options.query.query = JSON.stringify(params.options.query.query);

      builtApi.Classes.getAll(params)
        .then(function(data) {
          $scope.listRows = data.classes;
          $scope.myItemsTotalCount = data.count;
          dataGrid.initFootable(dataTableContainer);

          // url paging allocation
          $location.search({
            p: currentPage + 1
          });
        })
        .finally(function() {
          $scope.loading = false;
        });
    }

    $scope.action = function(act, klass) {
      if (act === 'delete') {
        deleteClass(klass);
        return;
      }

      if (act === 'export') {
        $('#export-class-iframe').attr('src', '/' + constants.api_version + '/classes/' + klass.uid + '/export.json?APPLICATION_API_KEY=' + $scope.apiKey)
        return
      }
      if (act === 'import') {
        importClass();
        return
      }
      var params = {};
      if (act === 'create') {
        appCacheService.remove('currentClass');
      } else {
        params['class_uid'] = klass.uid;
        appCacheService.set('currentClass', klass);
      }

      navigateTo(act, params);
    }

    function importClass() {
      Modal.openModal({
          file: "",
          randvalue: Utils.getRand(),
          apihost: currentApiHost.api_host,
          apiKey: $scope.apiKey,
          authtoken: currentUser.authtoken,
          url: "classes/import"
        }, importClassModalTemplate, ModalInstanceCtrl, {
          size: 'sm'
        })
        .then(function(res) {
          console.log("resres", res);
          $scope.listRows.unshift(res.class);
          $scope.myItemsTotalCount++;
          Alert.notify({
            title: 'Success',
            content: res.notice,
            type: 'success'
          });
        })
    }

    var ModalInstanceCtrl = function($scope, $modalInstance, data) {
      $scope.data = data;
      $scope.progressstatus = false;

      $scope.ok = function() {
        $scope.progressstatus = true;
        $('.modal-body').find('form').trigger('submit');

        postMessageUploadService.getPostMessage(data.randvalue).then(function(res) {
          $scope.progressstatus = false;
          if (res.hasOwnProperty('error_code')) {
            Alert.notify({
              title: "Class import failed!",
              content: res.error_message,
              type: 'error'
            });
          } else {
            $modalInstance.close(res);
          }
        }, function(xhr) {
          $scope.progressstatus = false;
          Alert.notify({
            title: xhr.entity.error_message,
            content: Utils.parseError(xhr.entity),
            type: 'error'
          });
        });
      };
      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      };
    }

    function navigateTo(act, params) {
      $state.go('app.dashboard.classes-' + act, params);
    }

    //Navigate from selected class its objects
    $scope.showObjects = function(klass) {

      $state.go('app.dashboard.classes-objects-list.all', {
        class_uid: klass.uid
      });
    }

    function deleteClass(klass) {
      var index = $scope.listRows.indexOf(klass);

      Alert.confirm({
          title: 'Delete class',
          content: 'Are you sure you want to delete this class?'
        })
        .then(function() {
          var params = {};
          params["options"] = {
            classUid: klass.uid
          };

          builtApi.Classes.deleteOne(params)
            .then(function(data) {
              $scope.listRows.splice(index, 1);
              Alert.notify({
                title: 'Success',
                content: data.notice,
                type: 'success'
              });
            }, function(xhr) {
              Alert.notify({
                title: xhr.entity.error_message,
                content: Utils.parseError(xhr.entity),
                type: 'error'
              });
            })
        });
    }
  }
]
},{"./partials/import-class-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\list\\partials\\import-class-modal.html","third-party-modules/footable":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\footable\\footable.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\list\\partials\\import-class-modal.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <h3 class="modal-title">Import class</h3>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '    <div class="form-horizontal">\n' +
    '        <fieldset>\n' +
    '            <div ng-show="progressstatus" class="object-asset-progress">\n' +
    '                <div class="col-md-12">\n' +
    '                    <div class="progress progress-striped active">\n' +
    '                        <div class="progress-bar bg-color-darken" role="progressbar" style="width: 100%">\n' +
    '                            Uploading...\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="form-group" ng-show="!progressstatus" file-upload authtoken="data.authtoken" url="data.url" apikey="data.apiKey" apihost="data.apihost" randvalue="data.randvalue">\n' +
    '                <div class="col-md-12">\n' +
    '                    <p>Choose a class JSON file</p>\n' +
    '                </div>\n' +
    '                <div class="col-md-12">\n' +
    '                    <input type="file" class="btn btn-default" name="import" required>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '    </div>\n' +
    '</div>\n' +
    '<div class="modal-footer">\n' +
    '    <div class="button-wrap">\n' +
    '        <a ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                </span>Cancel\n' +
    '        </a>\n' +
    '        <button btn-loader="btnStatus" loading-text="Creating..." ng-click=\'ok()\' class="btn btn-labeled btn-primary btn-sm pull-right">\n' +
    '            <span class="btn-label">\n' +
    '                  <i class="fa fa-check"></i>\n' +
    '                </span>\n' +
    '            <span class="js-btn-text">\n' +
    '                  Import\n' +
    '                </span>\n' +
    '        </button>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\controllers\\list\\partials\\list.html":[function(require,module,exports){
module.exports = '<div class="button-wrap mb10" ng-hide="cannotCreate">\n' +
    '    <a ng-click="action(\'create\')" class="btn btn-labeled btn-primary pull-left mr10">\n' +
    '        <span class="btn-label"><i class="fa fa-plus-square"></i>\n' +
    '        </span>Create new class\n' +
    '    </a>\n' +
    '    <a ng-click="action(\'import\')" class="btn btn-labeled btn-default pull-left">\n' +
    '        <span class="btn-label"><i class="fa fa-download"></i>\n' +
    '        </span>Import Class\n' +
    '    </a>\n' +
    '</div>\n' +
    '<div class="data-tbl-wrap">\n' +
    '    <table tr-ng-grid="" items="listRows" class="table data-tbl" page-items="myPageItemsCount" total-items="myItemsTotalCount" current-page="mycurrentPage" on-data-required="onServerSideItemsRequested(mycurrentPage, filterBy, filterByFields, orderBy, orderByReverse,myPageItemsCount, gridItem.uid)" enable-selections="false">\n' +
    '        <thead>\n' +
    '            <tr class="dt-tools">\n' +
    '                <th colspan="100">\n' +
    '                    <div class="row">\n' +
    '                        <div class="col-md-4 col-xs-12">\n' +
    '                            <form class="form-inline table-search-wrap" ng-show="!selectedRows.length">\n' +
    '                                <div tr-ng-grid-global-filter=""></div>\n' +
    '                            </form>\n' +
    '                        </div>\n' +
    '                        <div class="col-md-8 col-xs-12">\n' +
    '                            <span tr-ng-grid-pager=""></span>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '            <tr class="dt-head-tr" ng-show="loading || listRows.length">\n' +
    '                <th class="dt-{{column.key}}-th" ng-repeat=\'column in classColumns\' field-name="{{column.label}}" data-toggle="{{column.dataToggle}}" data-hide="{{column.dataHide}}">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        {{column.label}} \n' +
    '                    </div>\n' +
    '                </th>\n' +
    '                <th class="dt-actions-th">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        Actions\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '        </thead>\n' +
    '        <tbody ng-show="!loading">\n' +
    '            <tr>\n' +
    '                <td class="dt-{{column.key}}-td" ng-repeat=\'column in classColumns\' field-name="{{column.label}}">\n' +
    '                    <a class="dt-clickable" ng-href="#/dashboard/{{apiKey}}/classes/{{gridItem.uid}}/objects/all?p=1" ng-if="column.key===\'title\'">{{dataGrid.getCell(gridItem, column)}}</a>\n' +
    '                    <span ng-if="column.key===\'updated_at\'">{{dataGrid.getCell(gridItem, column)}}</span>\n' +
    '                </td>\n' +
    '                <td>\n' +
    '                    <span title="{{act}}" ng-repeat=\'act in actions\' ng-click=\'action(act, gridItem)\' class="hand fa fa-lg edit_evnt ml10 dt-action-item" ng-class="{\'fa-share\':act == \'export\',\'fa-pencil\' : act == \'edit\', \'fa-trash-o\' : act == \'delete\'}"></span>\n' +
    '                </td>\n' +
    '            </tr>\n' +
    '        </tbody>\n' +
    '        <tfoot class="hidden">\n' +
    '        </tfoot>\n' +
    '    </table>\n' +
    '    <div class="tab-loader" ng-show="loading">\n' +
    '        <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '    </div>\n' +
    '    <div class="no-msg" ng-show="!loading && !listRows.length">\n' +
    '        No classes found.\n' +
    '    </div>\n' +
    '    <iframe id="export-class-iframe" height="0" width="0" class="hidden"></iframe>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\dashboard\\controllers\\dashboard-ctrl.js":[function(require,module,exports){
module.exports = [
  '$scope',
  '$state',
  '$timeout',
  'appCacheService',
  'menuService',
  'currentApp',
  'builtApi',
  'manageUtils',
  function($scope, $state, $timeout, appCacheService, menu, currentApp, builtApi, manageUtils) {
    $scope.currentApp = currentApp;
    $scope.menu = menu.getMenu(currentApp.api_restriction);
    $scope.tenant = "";

    $scope.stateQueryParam = {
      api_key: currentApp.api_key,
      p: 1
    }

    $scope.isActiveMenu = function(s) {
      return $state.is(s);
    }

    $scope.checkIfParent = function(menu) {
      return menu.hasOwnProperty('sub_menu');
    }
    $scope.toggleMenu = function(e, menu) {
      if (menu.sub_menu) {
        e.stopPropagation();
        return false;
      }
    }

    $scope.isActive = function(uid) {
      if ($scope.activeMenu === uid) {
        return true;
      } else {
        return false;
      }
    }


    $scope.$on('currentTenant', function(event, args) {
      $scope.tenant = args.data;
    });

    function setTenant(){
      $scope.tenant = appCacheService.get('currentTenant');
    }

    function bindClicks() {
      $('#left-panel .js-menu-link').off('click').on('click', function(e) {
        return manageUtils.applications.checkRestriction($(e.currentTarget).data('menu-item')['restrict'], $scope.isShared);
      });
    }

    setTenant();
    $timeout(function() {
      initApp.leftNav();
      bindClicks();
    }, 0);

  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\dashboard\\dashboard.js":[function(require,module,exports){
'use strict';
var angular           = require('third-party-modules/angular');
var uiRouter          = require('third-party-modules/angular-ui-router');
var resolvers         = require('../resolvers');
var dashboardCtrl     = require('./controllers/dashboard-ctrl');
var dashboardTemplate = require('./partials/dashboard.html');  

module.exports = angular.module('built.dashboard', ['ui.router'])
  .controller('dashboardCtrl', dashboardCtrl)
  .config([
    '$stateProvider',
    function($stateProvider) {

      $stateProvider
        .state('app.dashboard', {
          url: '/dashboard/:api_key',
          abstract: true,
          template: dashboardTemplate,
          resolve: resolvers.resolve(['currentApp','currentUser', 'accounts', 'apps']),
          controller: 'dashboardCtrl'
        })
    }
  ]);

},{"../resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/dashboard-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\dashboard\\controllers\\dashboard-ctrl.js","./partials/dashboard.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\dashboard\\partials\\dashboard.html","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-router\\release\\angular-ui-router.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\dashboard\\partials\\dashboard.html":[function(require,module,exports){
module.exports = '<aside id="left-panel">\n' +
    '    <!-- User info -->\n' +
    '    <div class="login-info hidden">\n' +
    '        <p>\n' +
    '            <i class="fa fa-lg fa-fw fa-list-alt mr5 form-icon"></i> \n' +
    '            <span class="menu-item-parent">Forms</span>\n' +
    '            <i class="fa fa-angle ml5"></i>\n' +
    '        </p>\n' +
    '    </div>\n' +
    '    <nav>\n' +
    '        <ul>\n' +
    '            <li ng-repeat="menuItem in menu" ng-class="{\'active\': isActiveMenu(menuItem.state)}">\n' +
    '                <a ng-if="menuItem.sub_menu.length" title="{{menuItem.title}}" ng-click="toggleMenu($event, menuItem)">\n' +
    '                    <i class="fa fa-lg fa-fw {{menuItem.icon}}"></i>\n' +
    '                    <span ng-class="{\'menu-item-parent\':checkIfParent(menuItem)}">{{menuItem.title}}</span>\n' +
    '                </a>\n' +
    '\n' +
    '                <a ng-if="!menuItem.sub_menu.length" class="js-menu-link" data-menu-item="{{menuItem}}" ui-sref="{{menuItem.state}}({{stateQueryParam}})" title="{{menuItem.title}}">\n' +
    '                    <i class="fa fa-lg fa-fw {{menuItem.icon}}"></i>\n' +
    '                    <span ng-class="{\'menu-item-parent\':checkIfParent(menuItem)}">{{menuItem.title}}</span>\n' +
    '                </a>\n' +
    '\n' +
    '                <ul ng-if="menuItem.sub_menu.length">\n' +
    '                    <li ng-repeat="subMenuItem in menuItem.sub_menu" ng-class="{\'active\': isActiveMenu(subMenuItem.state)}">\n' +
    '                        <a class="js-menu-link" data-menu-item="{{menuItem}}" ui-sref="{{subMenuItem.state}}({{stateQueryParam}})">{{subMenuItem.title}}</a>\n' +
    '                    </li>\n' +
    '                </ul>\n' +
    '            </li>\n' +
    '            <li class="dash-app-info">\n' +
    '                <a>\n' +
    '                    <i class="fa fa-lg fa-fw fa-cube"></i> \n' +
    '                    Application info\n' +
    '                </a>\n' +
    '                <ul>\n' +
    '                    <dl>\n' +
    '                      <dt>API Key</dt>\n' +
    '                      <dd>{{currentApp.api_key}}</dd>\n' +
    '                      <dt>UID</dt>\n' +
    '                      <dd class="text-ellipsis" title="{{currentApp.uid}}">{{currentApp.uid}}</dd>\n' +
    '                      <dt ng-if="tenant">Tenant</dt>\n' +
    '                      <dd ng-if="tenant" class="text-ellipsis" title="{{currentApp.uid}}">{{tenant}}</dd>\n' +
    '                    </dl>\n' +
    '                </ul>\n' +
    '            </li>\n' +
    '        </ul>\n' +
    '    </nav>\n' +
    '</aside>\n' +
    '\n' +
    '<!-- MAIN PANEL -->\n' +
    '<div id="main">\n' +
    '\n' +
    '    <!-- RIBBON -->\n' +
    '    <div id="ribbon">\n' +
    '        <div breadcrumbs></div>\n' +
    '    </div>\n' +
    '    <!-- CONTENT -->\n' +
    '    <div id="content" ui-view class="animated fadeInDown">\n' +
    '\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\directives\\bookmarks.js":[function(require,module,exports){
'use strict';
var bookmarksTemplate = require('./partials/bookmarks.html')

module.exports = [
  'utilsService',
  'alertService',
  '$timeout',
  function(Utils, Alert, $timeout) {
    return {
      template: bookmarksTemplate,
      restrict: 'A',
      replace: true,
      scope: {
        onSelectBookmark: '=',
        onSaveBookmark: "=",
        onDeleteBookmark: "=",
        bookmarks: "="
      },
      link: function(scope, elem, attrs) {
        
        scope.showBookmarkTag = true;
        scope.inputbookmark = "";
        scope.selectedBookmark = null;
        scope.loading = false;

        // Show bookmark input
        scope.showBookmarkInput = function() {
          scope.showBookmarkTag = false;
          $timeout(function() {
            $(elem).find('.js-bookmark-input').focus();
          },0);
        }

        scope.checkKey = function(e){
          if(e.keyCode === 13)
            scope.saveBookmark();
        }

        //hide bookmark input
        scope.hideBookmarkInput = function() {
          scope.showBookmarkTag = true;
          scope.inputbookmark = "";
        }

        scope.selectBookmark = function(bookmark) {
          scope.onSelectBookmark(bookmark);
          scope.selectedBookmark = bookmark;
        }

        //Save Bookmarks
        scope.saveBookmark = function() {
          if(scope.loading)
            return;
          
          scope.loading = true;
          scope.onSaveBookmark(scope.inputbookmark, function() {
            scope.hideBookmarkInput();
            scope.loading = false;
          });
        }

        //Remove a Bookmark
        scope.removeBookmark = function(bookmark) {
          Alert.confirm({
            title: 'Delete Bookmark',
            content: 'Are you sure you want to delete this bookmark?'
          }).then(function() {
            scope.onDeleteBookmark(bookmark, $.noop);
          })
        }
      }
    }
  }
]
},{"./partials/bookmarks.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\directives\\partials\\bookmarks.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\directives\\metrics-widget.js":[function(require,module,exports){
'use strict';
var metricsWidget = require('./partials/metrics-widget.html')

module.exports = [
  'alertService',
  'utilsService',
  'libraryService',
  'constants',
  '$injector',
  '$timeout',
  function(Alert, Utils, LIB, constants, $injector, $timeout) {
    return {
      template: metricsWidget,
      restrict: 'A',
      replace: true,
      scope: {
        apiMetrics: "="
      },
      link: function(scope, elem, attrs) {
        var lineChartData = _.cloneDeep(constants.charts.defaults.line);
        scope.metricsLoader = true;
        scope.modGraphData = [];

        // Customize Chart
        lineChartData.chart.height = 100;
        lineChartData.yAxis.endOnTick = false;
        lineChartData.yAxis.maxPadding = 0.7;
        lineChartData.xAxis.title.text = "";
        lineChartData.yAxis.title.text = "";
        lineChartData.xAxis.labels.enabled = false;
        lineChartData.yAxis.labels.enabled = false;
        lineChartData.tooltip = {
          positioner: function() {
            return {
              x: 0,
              y: -10
            };
          },
          shadow: false,
          borderWidth: 0,
          hideDelay: 0,
          backgroundColor: 'transparent'
        };

        function loadApiMetrics() {
          scope.$watch('apiMetrics', function(newValue, oldValue) {
            if (scope.apiMetrics) {
              scope.metricsLoader = false;
              $timeout(function() {
                showGraph();
              }, 10);
            }
          })
        }
        
        loadApiMetrics();

        // Bifercate my apps and shared apps
        scope.humanizeNumber = function(v) {
          return Utils.humanizeNumber(v);
        }

        scope.getSize = function(mb) {
          if (mb == 0)
            return mb
          return Utils.bytesToSize(mb * 1024 * 1024);
        }


        function prepareGraphData() {
          var rawGraphData = $.extend(true, {}, scope.apiMetrics);
          var metrics = rawGraphData["range"]["stats"];
          scope.modGraphData.length = 0;

          for (var key in metrics) {
            var series = [];
            var stat = metrics[key];

            for (var date in stat) {
              series.push([new Date(date).getTime(), stat[date]])
            }

            scope.modGraphData.push({
              'name': key.charAt(0).toUpperCase() + key.slice(1).replace('_', ' '), // transform to uppercase and remove underscore.
              'data': series,
              'el': $("." + key + '-graph')
            });
          }
          scope.modGraphData.sort(function(a, b) {
            return a.name > b.name;
          })
        }

        function renderGraphs() {
          for (var i = 0; i < scope.modGraphData.length; i++) {
            var hcOptions = $.extend(true, {}, lineChartData);
            hcOptions.colors = [constants.charts.colorPalette[i]];
            hcOptions.series = [scope.modGraphData[i]];
            hcOptions.legend = {
              enabled: false
            }
            $injector.invoke(['chartService',
              function(hc) {
                hc.drawChart({
                  el: scope.modGraphData[i].el,
                  options: hcOptions
                })
              }
            ]);
          };
        }

        function showGraph() {
          LIB.get('charts').then(function() {
            prepareGraphData();
            renderGraphs();
          });
        }



        $(elem).find('.w-graph').hover(
          function() {
            $(this).parent().find('.w-stat').addClass('v-hidden');
          },
          function() {
            $(this).parent().find('.w-stat').removeClass('v-hidden');
          }
        );
      }
    }
  }
]
},{"./partials/metrics-widget.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\directives\\partials\\metrics-widget.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\directives\\partials\\bookmarks.html":[function(require,module,exports){
module.exports = '<div class="bookmarks-wrap">\n' +
    '    <div class="btn-group" ng-show="showBookmarkTag">\n' +
    '        <button class="btn btn-default btn-sm dropdown-toggle btn-choose-bookmark" data-toggle="dropdown">\n' +
    '            <span class="b-name text-ellipsis">Bookmarks</span>\n' +
    '            <span class="caret"></span>\n' +
    '        </button>\n' +
    '        <a ng-click="showBookmarkInput()" ng-if="showBookmarkTag" class="btn btn-default btn-sm">\n' +
    '            <i class="fa fa-plus fa-fw"></i>\n' +
    '        </a>\n' +
    '        <ul class="dropdown-menu">\n' +
    '            <li ng-repeat="bookmark in bookmarks" ng-if="bookmarks.length">\n' +
    '                <a ng-click="selectBookmark(bookmark)" href="" title="{{bookmark.name}}">\n' +
    '                    {{bookmark.name}}\n' +
    '                </a>\n' +
    '                <span class="btn-delete-bookmark" ng-click="removeBookmark(bookmark)"><i class="fa fa-times"></i></span>\n' +
    '            </li>\n' +
    '            <li ng-if="!bookmarks.length">\n' +
    '                <p> No bookmarks yet</p>\n' +
    '            </li>\n' +
    '        </ul>\n' +
    '    </div>\n' +
    '    <div class="input-group" ng-show="!showBookmarkTag">\n' +
    '        <input type="text" autofocus class="input-sm form-control js-bookmark-input" ng-model="inputbookmark" ng-value="inputbookmark" placeholder="Save bookmark as..." ng-keyup="checkKey($event)" /> \n' +
    '        <div class="input-group-btn">\n' +
    '            <button class="btn btn-default btn-sm" type="button" ng-click="hideBookmarkInput()" ng-disabled="loading">\n' +
    '                <i class="fa fa-times fa-fw"></i>\n' +
    '            </button>\n' +
    '            <button class="btn btn-primary btn-sm" type="button" ng-click="saveBookmark()" ng-disabled="loading">\n' +
    '                <i ng-if="!loading" class="fa fa-check fa-fw"></i>\n' +
    '                <i ng-if="loading" class="fa fa-spin fa-circle-o-notch fa-fw"></i>\n' +
    '            </button>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\directives\\partials\\metrics-widget.html":[function(require,module,exports){
module.exports = '<div class="widget-box acc-metrics-widget">\n' +
    '    <div class="w-head clearfix">\n' +
    '        <p>Last 30 Days</p>\n' +
    '        <a ui-sref="app.account.plans">Upgrade</a>\n' +
    '\n' +
    '    </div>\n' +
    '    <div class="w-body">\n' +
    '        <div class="tab-loader" ng-if="metricsLoader">\n' +
    '            <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '        </div>\n' +
    '        <div ng-hide="metricsLoader" class="animated fadeIn">\n' +
    '            <div class="w-block">\n' +
    '                <p class="w-stat">\n' +
    '                    <span class="value">{{humanizeNumber(apiMetrics.range.overall.total_api_usage)}}</span>\n' +
    '                    <span class="key">API calls made </span>\n' +
    '                </p>\n' +
    '                <div class="w-graph">\n' +
    '\n' +
    '                    <div class="api_usage-graph"></div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="w-block mt10">\n' +
    '                <p class="w-stat">\n' +
    '                    <span class="value">{{humanizeNumber(apiMetrics.range.overall.push_notifications)}}</span>\n' +
    '                    <span class="key">push notifications sent </span>\n' +
    '                </p>\n' +
    '                <div class="w-graph">\n' +
    '                    <div class="push_notifications-graph"></div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="w-block mt10">\n' +
    '                <p class="w-stat">\n' +
    '                    <span class="value">{{getSize(apiMetrics.range.overall.file_storage_used)}}</span>\n' +
    '                    <span class="key">storage used </span>\n' +
    '                </p>\n' +
    '            </div>\n' +
    '            <div class="w-block">\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div class="w-foot">\n' +
    '        <a ui-sref="app.account.metrics">View full account metrics</a>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\global.js":[function(require,module,exports){
'use strict';
var menu                  = require('./services/menu');
var thirdParty            = require('./services/third-party');
var dataGridService       = require('./services/data-grid');
var manageUtils						= require('./services/manage-utils')
var bookmarks             = require('./directives/bookmarks'); 
var metricsWidget         = require('./directives/metrics-widget'); 

module.exports = angular.module('built.global', [])
.directive('bookmarks', bookmarks)
.directive('metricsWidget', metricsWidget)
.service('menuService', menu)
.service('manageUtils', manageUtils)
.service('thirdPartyService', thirdParty)
.service('dataGridService', dataGridService);

},{"./directives/bookmarks":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\directives\\bookmarks.js","./directives/metrics-widget":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\directives\\metrics-widget.js","./services/data-grid":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\services\\data-grid.js","./services/manage-utils":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\services\\manage-utils.js","./services/menu":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\services\\menu.js","./services/third-party":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\services\\third-party.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\services\\data-grid.js":[function(require,module,exports){
'use strict';
module.exports = [
  function() {
    var self = this;

    this.getCell = function(gridItem, column) {
      return isDate(column.key) ? formatDate(gridItem[column.key]) : gridItem[column.key];
    }

    this.addResponsiveAttrs = function(columns, attrs) {
      _.map(columns, function(column) {
        column['dataHide'] = attrs;
      });
      columns[0]['dataHide'] = '';
      columns[0]['dataToggle'] = true;
    }

    this.initFootable = function(el) {
      el.footable();
      setTimeout(function() {
        el.trigger('footable_redraw');
      }, 1000);
    }

    this.checkFilter = function(filterBy, previousFilter, currentPage, skip){
      // HOT fix as filter by is null at the first time. We set it to undefined.
      if (_.isEmpty(filterBy))
        filterBy = undefined;

      // HOT FIX to reset current page to 1 and skip to 0 when filterBy changes.
      // Also trNgGrid triggers this function when mycurrentPage is changed.
      // So we just change my current page and return. After that, this function is called again.
      // This time the filterBy and the previous filter are equal so the below condition is skipped and 
      // the function works normally.
      if (filterBy != previousFilter) {
        previousFilter = filterBy;
        if (currentPage != 0) {
          skip = 0;
          currentPage = 0;
          return true;
        }
      }
    }

    this.selectRow = function(isSelected, gridItem, selectedRows) {
      isSelected ? selectedRows.push(gridItem) : selectedRows.splice(selectedRows.indexOf(gridItem), 1)
    }

    this.selectAllRows = function(areAllSelected, selectedRows, listRows) {
      areAllSelected ? selectedRows.push.apply(selectedRows, listRows) : selectedRows.splice(0, selectedRows.length)
    }

    this.resetRows = function(areAllSelected, selectedRows){
      areAllSelected = false;
      selectedRows.length = 0;
    }

    function formatDate(date) {
      return moment(new Date(date)).format('ddd MMM Do, YYYY, h:mm:ss a');
    }

    function isDate(key) {
      var dateKeys = ['created_at', 'updated_at']; // add your date field keys here.
      return dateKeys.indexOf(key) >= 0;
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\services\\manage-utils.js":[function(require,module,exports){
'use strict';
module.exports = [
  'appCacheService',
  'builtApi',
  'alertService',
  '$state',
  'constants',
  'utilsService',
  function(appCacheService, builtApi, Alert, $state, constants, Utils) {
    this.applications = {

      getRestrictionMsg: function(isShared) {
        return {
          title: isShared ? 'Access denied' : 'Upgrade your plan!',
          classes: isShared ? 'fa-exclamation-triangle txt-color-redLight' : 'fa-lock txt-color-green',
          content: isShared ? 'You do not have sufficient permissions to access this functionaliy. Please contact the owner of this application.' : 'This feature is not available in your current plan or your API limit for this feature is exceeded. Do you want to upgrade your plan?'
        }
      },
      checkRestriction: function(restricted, isShared) {
        if (!!!restricted)
          return true;

        var options = this.getRestrictionMsg(isShared);

        if (isShared)
          Alert.confirm(_.extend({
            buttons: '[Dismiss]'
          }, options));
        else
          Alert.confirm(options)
          .then(function() {
            $state.go('app.account.plans');
          });

        return false;
      }
    }
    this.cache = {
      clearAppHeaderKeys: function() {
        builtApi.removeHeaderKey('application_api_key');
        builtApi.removeHeaderKey('tenant_uid');
      },
      clearAppRelatedCache: function() {
        appCacheService.remove('currentClass', 'currentObject', 'events', 'segBookmarks', 'currentTenant');
      }
    }

    this.klass = {
      isAppUser : function(uid){
        return uid==='built_io_application_user';
      },
      isBltInstallation : function(uid){
        return uid==='built_io_installation_data';
      },
      schema: {
        addDeviceType: function(schema){
          var index = _.findIndex(schema, {uid : 'device_type'});
          schema[index] = configureSelectField(schema[index], constants.deviceType)
          return schema;
        },
        addTimezone : function(schema){
           var index = _.findIndex(schema, {uid : 'timezone'});
          schema[index] = configureSelectField(schema[index], constants.timezones);
          return schema;
        },
        addPasswordField : function(schema){
          var index = _.findIndex(schema, {uid : 'password'});
          
          //set current password field type as password
          schema[index] = changeCurrentFieldDateType(schema[index], "password");
          schema.splice(index + 1, 0, {
            display_name: "Password confirmation",
            uid: "password_confirmation",
            data_type: "password",
            field_metadata: {
              inbuilt_field: true
            },
            unique: null,
            mandatory: false,
            multiple: false
          });
          return schema;
        }
      }
    }

    this.setAppHeaders = function(app){
      var headers = {
        application_api_key: app.api_key
      };
      
      if (Utils.isTenantSet(app)) {
        headers['tenant_uid'] = app.discrete_variables.tenant;
        appCacheService.set('currentTenant', headers['tenant_uid']);
      }else{
        appCacheService.remove('currentTenant');
      }

      builtApi.setHeaders(headers);
    }


    function changeCurrentFieldDateType(data, type){
      data.data_type = type;
      return data;
    }

    function configureSelectField(field, typeData) {
      console.log("field", field);
      field.data_type = 'select';
      field.field_metadata['__blt_data'] = {
        __blt_select: typeData
      };
    return field;
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\services\\menu.js":[function(require,module,exports){
'use strict';
module.exports = [
	'$q',
	'appCacheService',
	'utilsService',
	function($q, appCacheService, Utils) {
		var menu = [];

		var makeMenu = R.compose(checkFeatures, addInitialMenuState, sortMenu);

		function sortMenu(menu) {
			menu.sort(function(a, b) {
				if (a.order > b.order) {
					return 1;
				}
				if (a.order < b.order) {
					return -1;
				}
				return 0;
			});

			return menu;
		}

		/**
		 * Checks sub_menu in the menu object. If available, sets 1st sub_menu object's state as menu state.
		 */
		function addInitialMenuState(menu) {
			menu.forEach(function(menuItem, index, array) {
				if (!menuItem.state && menuItem['sub_menu'] && menuItem['sub_menu'].length)
					menuItem.state = menuItem['sub_menu'][0]['state'];
			});

			return menu;
		}

		/**
		 * Checks features in the admin/config call and removes the menu item if feature is not available.
		 * @return {undefined}
		 */
		function checkFeatures(menu) {
			var features = appCacheService.get('serverConfig')['features'];
			menu = menu.filter(function(m) {
				if (!features[m.id])
					return true;

				return features[m.id]['enabled'];
			});
			return menu;
		}

		/**
		 * Checks API restriction by matching menu id in the api_restriciton object
		 * @param  {object} apiRestriction
		 * @return {undefined}
		 */
		function checkAPIRestriction(menu, apiRestriction) {
			menu.forEach(function(menuItem, index, array) {
				if (_.has(apiRestriction, menuItem.id) && apiRestriction[menuItem.id] === true)
					menuItem['restrict'] = true;

			});
			return menu;
		}


		/**
		 * CHECKS:
		 * 1. Admin config: Check if enabled: true ? Add in menu array : Do not add in menu array.
		 *
		 * 2. Applications: check api_restriction for analytics, extensions, integration, push_limit, storage_limit:
		 *    true ? {restrict: true} : Do not add restrict object.
		 */
		this.getMenu = function(apiRestriction) {
			var clonedMenu = _.map(menu, function(menuItem) {
				return _.cloneDeep(menuItem);
			});

			var madeMenu = makeMenu(clonedMenu);

			if (apiRestriction)
				checkAPIRestriction(madeMenu, apiRestriction);

			return clonedMenu;
		}

		this.add = function(menuItem) {
			menu.push(menuItem)
		}
	}
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\services\\third-party.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$q',
  function($q) {
    var mapRetryCount = 0;
    var deferred = $q.defer();

    this.getMap = function(key) {
      var mapScript = window.location.protocol + '//www.google.com/jsapi' + key;
      var xmlhttp = $.getScript(mapScript).done(function(script, textStatus) {
        console.log("Google jsapi loaded");
        google.load("maps", "3", {
          other_params: 'sensor=false&libraries=drawing',
          callback: function() {
            deferred.resolve(true);
          }
        });
      }).fail(function(jqxhr, settings, exception) {
        console.log("Google maps loading failed");
        if (mapRetryCount < 3) {
          console.log("Retrying: " + mapRetryCount);
          this.getMap();
        } else {
          console.log("No Go for map");
        }
        mapRetryCount++;
      });
      return deferred.promise;
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\manage.js":[function(require,module,exports){
if (window.location.pathname != "" && window.location.pathname != "/") {
	window.location.href = window.location.protocol + "//" + window.location.host + "/" + window.location.search + "#/" + window.location.pathname
}

_ = require('third-party-modules/lodash');
R = require('third-party-modules/ramda');
moment = require('third-party-modules/moment');

var angular = require('third-party-modules/angular');
var uiRouter = require('angular-ui-router');

require('third-party-modules/pace');


/**
 * Default Modules
 */

var base 					= require('./base/base');
var core 					= require('../core/core');
var auth 					= require('./auth/auth');
var global 				= require('./global/global');
var applications 	= require('./applications/applications');
var dashboard 		= require('./dashboard/dashboard');
var classes 			= require('./classes/classes');
var objects 			= require('./objects/objects');
var uploads 			= require('./uploads/uploads');
var settings 			= require('./settings/settings');
var account 			= require('./account/account');
var apiMetrics 		= require('./api-metrics/api-metrics');


/**
 * Plugins
 */

var plugins = []

// PLUGINS GO HERE

var analytics = require('../analytics/analytics');plugins.push(analytics.name);var extensions = require('../extensions/extensions');plugins.push(extensions.name);var notifications = require('../notifications/notifications');plugins.push(notifications.name);var integration = require('../integration/integration');plugins.push(integration.name);

// PLUGINS END HERE

var baseModules = [
	uiRouter,
	'trNgGrid',
	analytics.name,
	extensions.name,
	integration.name,
	notifications.name,
	core.name,
	global.name,
	base.name,
	auth.name,
	applications.name,
	dashboard.name,
	classes.name,
	objects.name,
	uploads.name,
	settings.name,
	account.name,
	apiMetrics.name
];


/**
 * Concat base modules with plugins
 */
baseModules = baseModules.concat(plugins);


/**
 * Initialize manage angular module
 */
angular.module('manage', baseModules)
	.config([
		'$stateProvider',
		'$urlRouterProvider',
		function($stateProvider, $urlRouterProvider) {
			$urlRouterProvider
				.otherwise('/applications')
				.when('', '/');
		}
	])
	.run(["$rootScope",
		"utilsService",
		'$state',
		'appCacheService',
		'alertService',
		'$q',
		'builtApi',
		'previousStateService',
		'manageUtils',
		function($rootScope, Utils, $state, appCacheService, Alert, $q, builtApi, previousStateService, manageUtils) {

			var infoMessageFlag = false;
			var warningMessageFlag = false;
			var h = $('html');
			h.addClass('its-' + Utils.getOS());

			if (document.createElement("input").placeholder == undefined) {
				h.addClass('no-placeholder-support');
			}

			/**
        Initialize Smart Admin
      */
			setTimeout(function() {
				h.addClass('app-loaded');
				pageSetUp();
				initApp.addDeviceType();
				initApp.menuPos();
				initApp.domReadyMisc();
				initApp.SmartActions();
			}, 400);


			$rootScope.$on('currentApp', function() {
				appCacheService.remove('assetGallery:all', 'assetGallery:images', 'assetGallery:videos');
			});

			$rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {

				console.log('StateChangeError: ', error);

				if (Utils.getPath(error, 'status.code') === 401) {
					$state.go('app.signin')
					return;
				}

				Alert.notify({
					title: Utils.getPath(error, 'entity.error_message') || "Something went wrong!",
					content: error.entity ? Utils.parseError(error.entity) : error.message,
					type: 'error',
					delay: 30000
				});
			});

			$rootScope.$on('$stateChangeStart', function(event, next, toParams, fromState, fromParams) {

				/**
				 * Clear cached data when route changes.
				 */
				switch (next.name) {
					case 'app.signin':
						appCacheService.remove('currentApp', 'currentUser', 'currentAccount');
						break;

					case 'app.applications':
						appCacheService.remove('apps', 'currentApp');
						manageUtils.cache.clearAppHeaderKeys();
						manageUtils.cache.clearAppRelatedCache();
						break;

					case 'app.dashboard.classes-user-list':
					case 'app.dashboard.classes-system-list':
						appCacheService.remove('currentClass', 'currentObject');
						break;

					case 'app.dashboard.classes-objects-list':
					case 'app.dashboard.classes-objects-list.all':
						appCacheService.remove('currentObject');
						break;

					// case 'app.dashboard.classes-objects-list':
					// 	appCacheService.remove('currentClass');
					// 	break;

					// case 'app.dashboard.classes-objects-list.all':
					// 	appCacheService.remove('currentClass', 'currentObject');
					// 	break;
				}
			});

			$rootScope.$on('$stateChangeSuccess', function(event, next, toParams, fromState, fromParams) {

				previousStateService.set(fromState.name, fromParams);

				showInitialMessages();

				/**
          Always scroll to top on page change.
        */
				Utils.scrollTo(0, $('html, body'));
				$('body').removeClass('nooverflow');
				$('#divSmallBoxes').empty();

				/**
          Add a class to html if the page is an extra page.
        */
				if (!_.isUndefined(Utils.getPath(next['data'], 'extraPage'))) {
					h.attr('id', 'extr-page').addClass('animated fadeInDown').removeClass('hidden-menu-mobile-lock');
				} else {
					h.removeAttr('id').removeClass('animated fadeInDown');
				}

				/**
          Add a class to html if left menu is false.
        */
				if (!_.isUndefined(Utils.getPath(next['data'], 'layout.leftMenu')) && next['data']['layout']['leftMenu'] === false) {
					h.addClass('no-left-menu');
				} else {
					h.removeClass('no-left-menu');
				}
			});

			function showInitialMessages() {
				//Set Information Message on  state change
				if (!_.isEmpty(appCacheService.get('currentAccount'))) {
					var InfoMsg = appCacheService.get('currentAccount')[0].info_messages;
					if (!_.isEmpty(InfoMsg))
						if (!infoMessageFlag) {
							Utils.setInfoMessage(InfoMsg, 'info');
							infoMessageFlag = true;
						}
						//Set Warning Message on  state change
					var warningMsg = appCacheService.get('currentAccount')[0].warning_messages;
					if (!_.isEmpty(warningMsg))
						if (!warningMessageFlag) {
							Utils.setInfoMessage(warningMsg, 'warning');
							warningMessageFlag = true;
						}
				}

			}
		}
	]);
},{"../analytics/analytics":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\analytics\\analytics.js","../core/core":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\core\\core.js","../extensions/extensions":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\extensions\\extensions.js","../integration/integration":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\integration\\integration.js","../notifications/notifications":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\notifications.js","./account/account":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\account\\account.js","./api-metrics/api-metrics":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\api-metrics\\api-metrics.js","./applications/applications":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\applications\\applications.js","./auth/auth":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\auth\\auth.js","./base/base":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\base\\base.js","./classes/classes":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\classes\\classes.js","./dashboard/dashboard":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\dashboard\\dashboard.js","./global/global":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\global\\global.js","./objects/objects":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\objects.js","./settings/settings":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\settings.js","./uploads/uploads":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\uploads\\uploads.js","angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\angular-ui-router\\release\\angular-ui-router.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/lodash":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\lodash\\lodash.shim.js","third-party-modules/moment":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\moment\\moment.shim.js","third-party-modules/pace":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\pace\\pace.shim.js","third-party-modules/ramda":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\ramda\\ramda.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\create\\create-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$state',
  'currentUser',
  'builtApi',
  'appCacheService',
  'currentClass',
  'currentApiHost',
  'alertService',
  'utilsService',
  'modalService',
  'appAclService',
  'constants',
  'previousStateService',
  'manageUtils',
  function($scope, $state, currentUser, builtApi, appCacheService, currentClass, currentApiHost, Alert, Utils, Modal, appAclService, constants, previousState, manageUtils) {
    var classUid = currentClass.uid;
    var apiKey = $state.params.api_key;

    $scope.btnStatus = false;
    $scope.viewonly = false;
    $scope.mclass = _.cloneDeep(currentClass);

    //Modify the context of schema for builtio system classes
    if(manageUtils.klass.isAppUser($scope.mclass.uid)){
      $scope.mclass.schema = manageUtils.klass.schema.addDeviceType($scope.mclass.schema);
      $scope.mclass.schema = manageUtils.klass.schema.addPasswordField($scope.mclass.schema);
    }$scope.mclass
    if(manageUtils.klass.isBltInstallation($scope.mclass.uid)){
      $scope.mclass.schema = manageUtils.klass.schema.addDeviceType($scope.mclass.schema);
      $scope.mclass.schema = manageUtils.klass.schema.addTimezone($scope.mclass.schema);
    }

    $scope.mobject = {
      ACL: constants.defaultACL,
      published: true,
      __loc: null
    };
    $scope.apikey = apiKey;
    $scope.authtoken = currentUser.authtoken;
    $scope.apihost = currentApiHost.api_host;

    $scope.create = function() {
      $scope.btnStatus = true;
      var params = {
        options: {
          classUid: classUid
        },
        body: {
          "class_uid": classUid,
          "app_api_key": apiKey,
          "object": $scope.mobject
        }
      }
      builtApi.Objects.addOne(params)
        .then(function(data) {
            Alert.notify({
              title: 'Success',
              content: data.notice,
              type: 'success'
            });
            navigateToList();
          },
          function(xhr) {
            xhr = xhr.entity;
            Alert.notify({
              title: xhr.error_message,
              content: Utils.parseError(xhr),
              type: 'error'
            });
          }).finally(function(){
              $scope.btnStatus = false;
          })
    }

    $scope.cancel = function() {
      navigateToList();
    }

    $scope.configureObjAcl = function() {
      Modal.openModal({
        ACL: _.cloneDeep($scope.mobject.ACL),
        isClass: true,
        esckey: false,
        apiKey: apiKey,
        rights: ["read", "update", "delete"]
      }, appAclService.aclOverlayTemplate, appAclService.aclCtrl)
        .then(function(ObjAcl) {
          $scope.mobject.ACL = ObjAcl.ACL;
        })
    }

    function navigateToList() {
      previousState.go("app.dashboard.classes-objects-list.all", {
        class_uid: classUid,
        p : 1
      });
    }

  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\create\\partials\\create.html":[function(require,module,exports){
module.exports = '<section id="widget-grid" class="form-builder-widget-grid">\n' +
    '    <!-- row -->\n' +
    '    <div class="row fb-row">\n' +
    '        <!-- SINGLE GRID -->\n' +
    '        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12 fb-article">\n' +
    '\n' +
    '            <div class="jarviswidget jarviswidget-color-blueDark jarviswidget-form-builder" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false">\n' +
    '\n' +
    '                <header>\n' +
    '                    <h2>New Object</h2>\n' +
    '                </header>\n' +
    '                <!-- widget div-->\n' +
    '\n' +
    '                <div>\n' +
    '                    <!-- widget edit box -->\n' +
    '                    <div class="jarviswidget-editbox">\n' +
    '                        <!-- This area used as dropdown edit box -->\n' +
    '                        <input class="form-control" type="text">\n' +
    '                    </div>\n' +
    '                    <!-- end widget edit box -->\n' +
    '\n' +
    '                    <!-- widget content -->\n' +
    '                    <div class="widget-body">\n' +
    '                        <div class="widget-body-toolbar">\n' +
    '                            <div class="button-wrap">\n' +
    '                                <button ng-if="!singleton" ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                                    <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                                    </span>Cancel\n' +
    '                                </button>\n' +
    '                                <button btn-loader="btnStatus" loading-text="Creating..." ng-click=\'create()\' class="btn btn-labeled btn-primary btn-sm pull-right ml10">\n' +
    '                                    <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '                                    </span>\n' +
    '                                    <span class="js-btn-text">Create</span>\n' +
    '                                </button>\n' +
    '                                <button ng-click=\'configureObjAcl()\' class="btn btn-labeled bg-color-blue txt-color-white btn-sm pull-right">\n' +
    '                                    <span class="btn-label"><i class="fa fa-lock"></i>\n' +
    '                                    </span>Configure ACL\n' +
    '                                </button>\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                        <div formbuilder cls="mclass" classes="mclasses" obj="mobject" apikey="apikey" authtoken="authtoken" apihost="apihost" class="form-builder-wrap" viewonly="viewonly"></div>\n' +
    '                        <div class="widget-footer">\n' +
    '                            <div class="button-wrap button-wrap-bottom">\n' +
    '                                <button btn-loader="btnStatus" loading-text="Creating..." ng-click=\'create()\' class="btn btn-labeled btn-primary btn-sm pull-right ml10">\n' +
    '                                    <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '                                    </span>\n' +
    '                                    <span class="js-btn-text">Create</span>\n' +
    '                                </button>\n' +
    '                                <button ng-if="!singleton" ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                                    <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                                    </span>Cancel\n' +
    '                                </button>\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <!-- end widget content -->\n' +
    '                </div>\n' +
    '                <!-- end widget div -->\n' +
    '            </div>\n' +
    '            <!-- end widget -->\n' +
    '        </article>\n' +
    '        <!-- GRID END -->\n' +
    '    </div>\n' +
    '    <!-- end row -->\n' +
    '</section>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\edit\\edit-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$state',
  'currentUser',
  'builtApi',
  'currentClass',
  'currentObject',
  'currentApiHost',
  'alertService',
  'utilsService',
  'appAclService',
  'modalService',
  'constants',
  'previousStateService',
  'manageUtils',
  function($scope, $state, currentUser, builtApi, currentClass, currentObject, currentApiHost, Alert, Utils, appAclService, Modal, constants, previousState, manageUtils) {
    var classUid = $state.params.class_uid;
    var objectUid = $state.params.obj_uid;
    var apiKey = $state.params.api_key;
    $scope.viewonly = false;
    $scope.mclass = _.cloneDeep(currentClass);
    $scope.mobject = _.cloneDeep(currentObject);
    
    //Modify the context of schema for builtio system classes
    if(manageUtils.klass.isAppUser($scope.mclass.uid)){
      //Remove email if its blank in application user class i.e. general settings are set to be hidden for email
      if(_.isEmpty($scope.mobject.email))
        removeEmail();   
      $scope.mclass.schema = manageUtils.klass.schema.addDeviceType($scope.mclass.schema);
      $scope.mclass.schema = manageUtils.klass.schema.addPasswordField($scope.mclass.schema);
    }
    
    if(manageUtils.klass.isBltInstallation($scope.mclass.uid)){
      $scope.mclass.schema = manageUtils.klass.schema.addDeviceType($scope.mclass.schema);
      $scope.mclass.schema = manageUtils.klass.schema.addTimezone($scope.mclass.schema);
    }
    
    $scope.mobject.ACL  = $scope.mobject.ACL ? $scope.mobject.ACL : _.cloneDeep(constants.defaultACL);
    $scope.apikey       = apiKey;
    $scope.authtoken    = currentUser.authtoken;
    $scope.apihost      = currentApiHost.api_host;
    $scope.btnStatus    = false;

    $scope.save = function() {
      $scope.btnStatus = true;
      var params = {
        options: {
          classUid: classUid,
          objectUid: objectUid
        },
        body: {
          "class_uid": classUid,
          "app_api_key": apiKey,
          "object_uid": objectUid,
          "object": $scope.mobject
        }
      };

      builtApi.Objects.editOne(params)
        .then(function(data) {          
          Alert.notify({
            title: data.notice,
            content: 'Success',
            type: 'success'
          });
          navigateToList();
        }, function(xhr) {
          xhr = xhr.entity;
          Alert.notify({
            title: xhr.error_message,
            content: Utils.parseError(xhr),
            type: 'error'
          });
        }).finally(function(){
          $scope.btnStatus = false;
        })
    }

    $scope.cancel = function() {

      navigateToList();
    }

    $scope.configureObjAcl = function() {
      Modal.openModal({
          ACL: $scope.mobject.ACL,
          esckey: false,
          rights: ["read", "update", "delete"]
        }, appAclService.aclOverlayTemplate, appAclService.aclCtrl, {keyboard: false})
        .then(function(res) {
          $scope.mobject.ACL = res.ACL;
        })
    }

    //Remove email from schema and context object
    function removeEmail(){
      delete $scope.mobject.email;
      $scope.mclass.schema.splice(_.findIndex($scope.mclass.schema, function(field) { return field.uid == 'email'; }), 1);
    }

    function navigateToList() {
      previousState.go('app.dashboard.classes-objects-list.all', {
        class_uid: classUid,
        p: 1
      });
    }

  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\edit\\partials\\edit.html":[function(require,module,exports){
module.exports = '<section id="widget-grid" class="form-builder-widget-grid">\n' +
    '    <!-- row -->\n' +
    '    <div class="row fb-row">\n' +
    '        <!-- SINGLE GRID -->\n' +
    '        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12 fb-article">\n' +
    '\n' +
    '            <div class="jarviswidget jarviswidget-color-blueDark jarviswidget-form-builder" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false">\n' +
    '\n' +
    '                <header>\n' +
    '                    <h2>{{mclass.title}}</h2>\n' +
    '                </header>\n' +
    '                <!-- widget div-->\n' +
    '\n' +
    '                <div>\n' +
    '                    <!-- widget edit box -->\n' +
    '                    <div class="jarviswidget-editbox">\n' +
    '                        <!-- This area used as dropdown edit box -->\n' +
    '                        <input class="form-control" type="text">\n' +
    '                    </div>\n' +
    '                    <!-- end widget edit box -->\n' +
    '\n' +
    '                    <!-- widget content -->\n' +
    '                    <div class="widget-body">\n' +
    '                        <div class="widget-body-toolbar">\n' +
    '                            <div class="button-wrap">\n' +
    '                                <button  btn-loader="btnStatus" loading-text="Saving..." ng-click=\'save()\' class="btn btn-labeled btn-primary btn-sm pull-right ml10">\n' +
    '                                    <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '                                    </span>\n' +
    '                                    <span class="js-btn-text">Save</span>\n' +
    '                                </button>\n' +
    '                                <button ng-if="!singleton" ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                                    <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                                    </span>Cancel\n' +
    '                                </button>\n' +
    '                                <button ng-click=\'configureObjAcl()\' class="btn btn-labeled bg-color-blue txt-color-white btn-sm pull-right">\n' +
    '                                    <span class="btn-label"><i class="fa fa-lock"></i>\n' +
    '                                    </span>Configure ACL\n' +
    '                                </button>\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                        <div formbuilder cls="mclass" classes="mclasses" obj="mobject" apikey="apikey" authtoken="authtoken" apihost="apihost" class="form-builder-wrap" viewonly="viewonly">+</div>\n' +
    '                        <div class="widget-footer">\n' +
    '                            <div class="button-wrap button-wrap-bottom">\n' +
    '                                <button  btn-loader="btnStatus" loading-text="Saving..." ng-click=\'save()\' class="btn btn-labeled btn-primary btn-sm pull-right ml10">\n' +
    '                                    <span class="btn-label"><i class="fa fa-check"></i>\n' +
    '                                    </span>\n' +
    '                                    <span class="js-btn-text">Save</span>\n' +
    '                                </button>\n' +
    '                                <button ng-if="!singleton" ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                                    <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                                    </span>Cancel\n' +
    '                                </button>\n' +
    '                                \n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <!-- end widget content -->\n' +
    '                </div>\n' +
    '                <!-- end widget div -->\n' +
    '            </div>\n' +
    '            <!-- end widget -->\n' +
    '        </article>\n' +
    '        <!-- GRID END -->\n' +
    '    </div>\n' +
    '    <!-- end row -->\n' +
    '</section>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\list\\list-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$state',
  '$location',
  'currentUser',
  'currentClass',
  'builtApi',
  'appCacheService',
  '$q',
  'alertService',
  'utilsService',
  'constants',
  'dataGridService',
  '$stateParams',
  'tip',
  function($scope, $state, $location, currentUser, currentClass, builtApi, appCacheService, $q, Alert, Utils, constants, dataGrid, $stateParams, TIP) {
    var apiKey = $state.params.api_key;
    var classUid = $state.params.class_uid;
    var previousFilter = undefined;
    var dataTableContainer = $('.data-tbl');
    var classSelectBox = $('.objects-wrap .js-class-select-box');
    var searchObjectSelct = $('#js-search-object-select');
    $scope.currentClass = currentClass;
    $scope.actions = ['view', 'edit', 'delete'];
    $scope.loading = true;


    // Advanced search query
    var advancedSearchParams = undefined;
    var viewQueryNow = false;
    var myFilterBy = $location.search().search || undefined;
    $scope.viewableQuery = null;
    $scope.advancedSearch = false;
    $scope.getQueryNow = false;
    $scope.intermediateQuery = [];

    // Table Data
    $scope.dataGrid = dataGrid;
    $scope.listRows = [];
    $scope.classColumns = [];
    $scope.selectedRows = [];
    $scope.queryObjectType = "all";
    $scope.myFilterBy = myFilterBy;
    previousFilter = myFilterBy;

    searchObjectSelct.val($scope.queryObjectType).select2({
        containerCssClass: 'select2-sm',
        data: [{
          id: "all",
          text: "all"
        }, {
          id: "published",
          text: "published"
        }, {
          id: "unpublished",
          text: "unpublished"
        }]
      })
      .on('change', function(e) {
        $scope.queryObjectType = e.val;
      })

    // If title of object is set , use it.
    if (currentClass.hasOwnProperty('options')) {
      $scope.classColumns.push({
        'label': currentClass.options.title,
        'key': currentClass.options.title
      })
    }

    $scope.classColumns.push({
      'label': 'UID',
      'key': 'uid'
    }, {
      'label': 'Created at',
      'key': 'created_at'
    }, {
      'label': 'Updated at',
      'key': 'updated_at'
    })

    dataGrid.addResponsiveAttrs($scope.classColumns, 'phone, tablet');

    // paging
    var pagno = (parseInt($location.search().p) - 1);
    $scope.myPageItemsCount = 2;
    $scope.myCurrentPage = (pagno < 0 ? 0 : pagno) || 0;

    // Watch if any Row is selected from list of uploads
    $scope.$watch("selectedRows.length", function(newLength) {
      if (newLength > 0) {
        $('#bulkDelete').show();
      } else {
        $('#bulkDelete').hide();
      }
    });

    $scope.toggleAdvancedSearch = function() {
      TIP.destroyAll($('.query-builder'));
      $scope.advancedSearch = !$scope.advancedSearch;
      if ($scope.advancedSearch == false) {
        advancedSearchParams = null;
        $location.search({
          p: 1
        });
        $scope.queryObjectType = "all";
        getObjects();
      }
    }

    // Bulk Delete call for deleting multiple objects at same time
    $scope.bulkDelete = function() {
      Alert.confirm({
        title: 'Delete objects',
        content: 'Are you sure you want to delete selected objects?'
      }).then(function() {

        builtApi.Objects.deleteSelected({
            options: {
              classUid: classUid,
              query: JSON.stringify({
                uid: {
                  "$in": _.pluck($scope.selectedRows, 'uid')
                }
              })
            }
          })
          .then(function(data) {
            $scope.myItemsTotalCount -= $scope.selectedRows.length;
            $scope.selectedRows.map(function(selectedRow) {
              $scope.listRows.splice($scope.listRows.indexOf(selectedRow), 1);
            });
            
            // Reset the selected rows
            resetRows();
            Alert.notify({
              title: 'Success',
              content: data.notice,
              type: 'success'
            });
          }, function(xhr) {
            Alert.notify({
              title: xhr.entity.error_message,
              content: Utils.parseError(xhr.entity),
              type: 'error'
            });
          })
      })
    }

    // Get advanced search query
    $scope.getAdvancedSearchQuery = function() {
      if(checkFirstObjectIfEmpty())
        getObjects();
      else
        $scope.getQueryNow = true;
    };

    function checkFirstObjectIfEmpty(){
      return _.isEmpty($scope.intermediateQuery[0]._value[0]._key) && _.isEmpty($scope.intermediateQuery[0]._value[0]._value)
    }

    $scope.viewQuery = function() {
      $scope.getQueryNow = true;
      viewQueryNow = true;
    };

    $scope.hideViewableQuery = function() {
      viewQueryNow = false;
      $scope.viewableQuery = null;
    };



    $scope.getQueryCallback = function(getQuery) {
      getQuery.then(function(res) {
        if (viewQueryNow) {
          $scope.viewableQuery = JSON.stringify(res);
        } else {
          advancedSearchParams = res;
          getObjects();
        }
      }, function() {
        console.log("came in error callback")
      }).finally(function() {
        $scope.getQueryNow = false;
      });
    }

    console.log("LAsun")

    // Gets called when the table is interacted.
    $scope.onServerSideItemsRequested = function(currentPage, filterBy, filterByFields, orderBy, orderByReverse, myPageItemsCount, gridItemuid) {
      
      $scope.loading = true;
      
      // Reset Selected rows
      var skip = currentPage * myPageItemsCount;
      resetRows()
      
      dataGrid.checkFilter(filterBy, previousFilter, $scope.mycurrentPage, skip);

      // Build query parameter for objects type : published (Default)
      var params = {
        options: {
          classUid: classUid,
          query: {
            skip: skip,
            limit: myPageItemsCount,
            include_count: true
          }
        }
      }

      if (filterBy) {
        params.options.query.typeahead = filterBy;
      }

      if (advancedSearchParams) {
        params.options.query.query = JSON.stringify(advancedSearchParams);
        delete params.options.query.typeahead;
      }

      switch ($scope.queryObjectType) {
        case 'all':
          params.options.query["include_unpublished"] = true;
          break;
        case 'published':
          break;
        case 'unpublished':
          params.options.query["include_unpublished"] = true;
          params.options.query["published"] = false;
          break;
      }


      //Get objects call according to query parameters
      builtApi.Objects.getAll(params)
        .then(function(data) {
          $scope.listRows = data.objects;
          $scope.myItemsTotalCount = data.count;
          dataGrid.initFootable(dataTableContainer);

          $("[rel=tooltip]").tooltip();

          /*url paging allocation*/

          var queryParams = {
            p: currentPage + 1
          };

          if(filterBy && !$scope.advancedSearch){
            queryParams['search'] = filterBy;
          }

          $location.search(queryParams)

        })
        .finally(function() {
          $scope.loading = false;
        });
    }

    $scope.action = function(act, object) {
      if (act === 'delete') {
        deleteObject(object);
        return;
      }
      var params = {
        class_uid: classUid
      }
      if (act === 'create') {
        appCacheService.remove('currentObject');
      } else {
        params['obj_uid'] = object.uid;
        appCacheService.set('currentObject', object);
      }
      navigateTo(act, params);
    }


    function deleteObject(gridItem) {
      var index = $scope.listRows.indexOf(gridItem);
      var uid = gridItem.uid;

      Alert.confirm({
          title: 'Delete object',
          content: 'Are you sure you want to delete this object?'
        })
        .then(function() {
          builtApi.Objects.deleteOne({
              options: {
                classUid: classUid,
                objectUid: uid
              }
            })
            .then(function(data) {
              resetRows();
              $scope.listRows.splice(index, 1);
              $scope.myItemsTotalCount -= 1; 
              Alert.notify({
                title: data.notice,
                content: 'Success',
                type: 'success'
              });
            }, function(xhr) {
              Alert.notify({
                title: xhr.entity.error_message,
                content: Utils.parseError(xhr.entity),
                type: 'error'
              });
            })
        });
    }

    function getObjects() {
      $scope.myFilterBy = null;
      $scope.myCurrentPage = 0;
      $scope.onServerSideItemsRequested(0, undefined, undefined, undefined, undefined, $scope.myPageItemsCount, undefined)
    }

    function resetRows() {
      $scope.areAllSelected = false;
      $scope.selectedRows.length = 0;
    }

    function navigateTo(act, params) {
      $state.go('app.dashboard.classes-objects-' + act, params);
    }

    // Initializing Select2
    function formatClassResult(state) {
      return "<small class='text-muted'> Class: </small>" + state.text;
    }

    function configurePublishOptions(){
      $scope.publishOptions = true;
     if(currentClass.options)
      if(currentClass.options.inbuiltFields)
        $scope.publishOptions  = currentClass.options.inbuiltFields.publish; 
    }


    classSelectBox.select2({
      minimumInputLength: 1,
      formatSelection: formatClassResult,
      escapeMarkup: function(m) {
        return m;
      },
      initSelection: function(element, callback) {
        return callback({
          id: classUid,
          text: currentClass.title
        })
      },
      query: function(query) {
        //Search Class Throttling call
        Utils.getClassSearch(builtApi, query.term)().then(query.callback);
      }
    });

    //Change Class Select Box
    classSelectBox.on('change', function(e) {
      appCacheService.set('currentClass', classSelectBox.select2('data'));
      $state.go('app.dashboard.classes-objects-list.all', {
        class_uid: $(this).select2('val'),
        objectsType: "all",
        p: 1,
        search: null
      });
    })

    setTimeout(function(){
      configurePublishOptions();
    });
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\list\\partials\\list.html":[function(require,module,exports){
module.exports = '<div class="tab-pane fade active in">\n' +
    '    <div class="button-wrap">\n' +
    '        <a ng-click=\'action("create")\' class="btn btn-labeled btn-primary pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-plus-square"></i>\n' +
    '            </span>Create new object\n' +
    '        </a>\n' +
    '        <div class="pull-right">\n' +
    '            <div class="js-class-select-box"></div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div class="data-tbl-wrap">\n' +
    '        <table tr-ng-grid="" items="listRows" selected-items="selectedRows" class="table data-tbl" page-items="myPageItemsCount" total-items="myItemsTotalCount" current-page="myCurrentPage" filter-by="myFilterBy" on-data-required="onServerSideItemsRequested(myCurrentPage, filterBy, filterByFields, orderBy, orderByReverse,myPageItemsCount, gridItem.uid)" enable-selections="false">\n' +
    '            <thead>\n' +
    '                <tr class="dt-tools">\n' +
    '                    <th colspan="100">\n' +
    '                        <div class="row">\n' +
    '                            <div class="col-md-6 col-xs-12">\n' +
    '                                <button class="btn btn-danger dt-action-btn" id="bulkDelete" ng-click="bulkDelete()" ng-show="selectedRows.length" rel="tooltip" data-placement="right" data-original-title="<i class=\'fa fa-exclaimation-triangle text-danger\'></i> Delete selected objects" data-html="true">\n' +
    '                                    <i class="fa fa-trash-o"></i>\n' +
    '                                </button>\n' +
    '                                <form class="form-inline table-search-wrap" ng-hide="advancedSearch || selectedRows.length">\n' +
    '                                    <div tr-ng-grid-global-filter=""></div>\n' +
    '                                </form>\n' +
    '                                <a ng-click="toggleAdvancedSearch()" class="btn-advanced-search" ng-show="!selectedRows.length">\n' +
    '                                    <span ng-if="advancedSearch">Hide a</span><span ng-if="!advancedSearch">A</span>dvanced search\n' +
    '                                </a>\n' +
    '                            </div>\n' +
    '                            <div class="col-md-6 col-xs-12">\n' +
    '                                <span tr-ng-grid-pager=""></span>\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </th>\n' +
    '                </tr>\n' +
    '                <tr ng-show="advancedSearch" class="advanced-search-wrap">\n' +
    '                    <th colspan="100">\n' +
    '                        <legend class="mb0" >Advanced search on <input ng-show="publishOptions" type="hidden" id="js-search-object-select"/> objects:</legend>\n' +
    '                        <div ng-class="{\'false-hidden\': viewableQuery}">\n' +
    '                            <div objects-query-builder="intermediateQuery" cls="currentClass" get-query-now="getQueryNow" get-query-callback="getQueryCallback" class="qb-responsive"></div>\n' +
    '                            <div class=\'button-wrap\'>\n' +
    '                                <a class=\'btn btn-primary btn-sm\' ng-click="getAdvancedSearchQuery()">Get objects</a>\n' +
    '                                <a class=\'btn btn-default btn-sm ml5\' ng-click="viewQuery()">View query</a>\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                        <div class="view-query-wrap" ng-class="{\'hidden\': !viewableQuery}">\n' +
    '                            <textarea class="form-control mt10" rows="3" ng-model="viewableQuery"></textarea>\n' +
    '                        </div>\n' +
    '                        <div class=\'button-wrap\' ng-class="{\'hidden\': !viewableQuery}">\n' +
    '                            <a class=\'btn btn-default btn-sm\' ng-click="hideViewableQuery()">Hide query</a>\n' +
    '                        </div>\n' +
    '                    </th>\n' +
    '                </tr>\n' +
    '                <tr class="dt-head-tr" ng-show="loading || listRows.length">\n' +
    '                    <th class="dt-checkbox-th">\n' +
    '                        <div class="checkbox dt-checkbox">\n' +
    '                            <label>\n' +
    '                                <input class="checkbox style-0" type="checkbox" ng-model="areAllSelected" ng-change="dataGrid.selectAllRows(areAllSelected, selectedRows, listRows)">\n' +
    '                                <span></span>\n' +
    '                            </label>\n' +
    '                        </div>\n' +
    '                    </th>\n' +
    '                    <th class="dt-{{column.key}}-th" ng-repeat=\'column in classColumns\' field-name="{{column.label}}" data-toggle="{{column.dataToggle}}" data-hide="{{column.dataHide}}">\n' +
    '                        <div class="tr-ng-title">\n' +
    '                            {{column.label}}\n' +
    '                        </div>\n' +
    '                    </th>\n' +
    '                    <th class="dt-actions-th">\n' +
    '                        <div class="tr-ng-title">\n' +
    '                            Actions\n' +
    '                        </div>\n' +
    '                    </th>\n' +
    '                </tr>\n' +
    '            </thead>\n' +
    '            <tbody ng-show="!loading">\n' +
    '                <tr>\n' +
    '                    <td>\n' +
    '                        <div class="checkbox dt-checkbox">\n' +
    '                            <label>\n' +
    '                                <input class="checkbox style-0" type="checkbox" ng-model="isSelected" ng-checked="selectedRows.indexOf(gridItem)>=0" ng-change="dataGrid.selectRow(isSelected, gridItem, selectedRows)">\n' +
    '                                <span></span>\n' +
    '                            </label>\n' +
    '                        </div>\n' +
    '                    </td>\n' +
    '                    <td class="dt-{{column.key}}-td" ng-repeat=\'column in classColumns\' field-name="{{column.label}}">\n' +
    '                        {{dataGrid.getCell(gridItem, column)}}\n' +
    '                    </td>\n' +
    '                    <td>\n' +
    '                        <span title="{{act}}" rel="tooltip" data-placement="bottom" ng-repeat=\'act in actions\' ng-click=\'action(act, gridItem)\' class="hand fa fa-lg edit_evnt ml10 dt-action-item" ng-class="{\'fa-eye\':act == \'view\',\'fa-pencil\' : act == \'edit\', \'fa-trash-o\' : act == \'delete\'}"></span>\n' +
    '                    </td>\n' +
    '                </tr>\n' +
    '            </tbody>\n' +
    '            <tfoot class="hidden">\n' +
    '            </tfoot>\n' +
    '        </table>    \n' +
    '        <div class="tab-loader" ng-show="loading">\n' +
    '            <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '        </div>\n' +
    '        <div class="no-msg" ng-show="!loading && !listRows.length">\n' +
    '            No objects found.\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\objects\\objects-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$state',
  function($scope, $state) {
    
    //Set object Type by default to all
    $scope.objectsType = "all";
    var classUid = $state.params.class_uid;
    $scope.getObjectsType = function(type) {
      $state.go('app.dashboard.classes-objects-list.' + type, {
        class_uid: classUid
      });
    }

    //Watch if any Row is selected from list of objects
    $scope.$watch("selectedRows.length", function(newLength) {
      if (newLength > 0) {
        $('#bulkDelete').show();
      } else {
        $('#bulkDelete').hide();
      }
    });
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\objects\\partials\\objects.html":[function(require,module,exports){
module.exports = '<div class="objects-wrap">\n' +
    '	<!--<ul class="nav nav-tabs">\n' +
    '	    <li ng-class="{active:objectsType===\'all\'}">\n' +
    '	        <a data-toggle="tab" ng-click="getObjectsType(\'all\')">All</a>\n' +
    '	    </li>\n' +
    '	    <li ng-class="{active:objectsType===\'published\'}">\n' +
    '	        <a data-toggle="tab" ng-click="getObjectsType(\'published\')">Published</a>\n' +
    '	    </li>\n' +
    '	    <li ng-class="{active:objectsType===\'unpublished\'}">\n' +
    '	        <a data-toggle="tab" ng-click="getObjectsType(\'unpublished\')">Unpublished</a>\n' +
    '	    </li>\n' +
    '	</ul>-->\n' +
    '	<div ui-view>\n' +
    '	</div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\view\\partials\\view.html":[function(require,module,exports){
module.exports = '<section id="widget-grid" class="form-builder-widget-grid">\n' +
    '    <!-- row -->\n' +
    '    <div class="row fb-row">\n' +
    '        <!-- SINGLE GRID -->\n' +
    '        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12 fb-article">\n' +
    '\n' +
    '            <div class="jarviswidget jarviswidget-color-blueDark jarviswidget-form-builder" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false">\n' +
    '\n' +
    '                <header>\n' +
    '                    <h2>{{mclass.title}}</h2>\n' +
    '                </header>\n' +
    '                <!-- widget div-->\n' +
    '\n' +
    '                <div>\n' +
    '                    <!-- widget edit box -->\n' +
    '                    <div class="jarviswidget-editbox">\n' +
    '                        <!-- This area used as dropdown edit box -->\n' +
    '                        <input class="form-control" type="text">\n' +
    '                    </div>\n' +
    '                    <!-- end widget edit box -->\n' +
    '\n' +
    '                    <!-- widget content -->\n' +
    '                    <div class="widget-body">\n' +
    '                        <div class="widget-body-toolbar">\n' +
    '                            <div class="button-wrap">\n' +
    '                                <a ng-if="!singleton" ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                                    <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                                    </span>Close\n' +
    '                                </a>\n' +
    '\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                        <div formbuilder cls="mclass" obj="mobject" apikey="apikey" authtoken="authtoken" apihost="apihost" viewonly="viewonly" classes="mclasses" class="form-builder-wrap"></div>\n' +
    '                        <div class="widget-footer">\n' +
    '                            <div class="button-wrap button-wrap-bottom">\n' +
    '                                <a ng-if="!singleton" ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '                                    <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '                                    </span>Close\n' +
    '                                </a>\n' +
    '\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <!-- end widget content -->\n' +
    '                </div>\n' +
    '                <!-- end widget div -->\n' +
    '            </div>\n' +
    '            <!-- end widget -->\n' +
    '        </article>\n' +
    '        <!-- GRID END -->\n' +
    '    </div>\n' +
    '    <!-- end row -->\n' +
    '</section>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\view\\view-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$state',
  'currentUser',
  'appCacheService',
  'currentApp',
  'currentClass',
  'currentObject',
  'currentApiHost',
  'alertService',
  'utilsService',
  'previousStateService',
  function($scope, $state, currentUser, appCacheService, currentApp, currentClass, currentObject, currentApiHost, Alert, Utils, previousState) {
    var apiKey = $state.params.api_key;
    var headers = {};
    headers["application_api_key"] = apiKey;
    var classUid = currentClass.uid;
    var objectUid = currentObject.uid;
    $scope.mclass = currentClass;
    $scope.mobject = _.cloneDeep(currentObject);
    $scope.apikey = apiKey;
    $scope.authtoken = currentUser.authtoken;
    $scope.apihost = currentApiHost.api_host;
    $scope.viewonly = true;

    $scope.cancel = function() {
      navigateToList();
    }
    function navigateToList() {
      previousState.go('app.dashboard.classes-objects-list.all', {
        class_uid: classUid,
        p: 1
      });
    }
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\objects.js":[function(require,module,exports){
'use strict';
//Include Modules
var angular = require('third-party-modules/angular');
var uiRouter = require('angular-ui-router');
var resolvers = require('../resolvers');
//Include Controllers
var createCtrl = require('./controllers/create/create-ctrl');
var editCtrl = require('./controllers/edit/edit-ctrl');
var viewCtrl = require('./controllers/view/view-ctrl');
var listCtrl = require('./controllers/list/list-ctrl');
var objectsCtrl = require('./controllers/objects/objects-ctrl');
//Include Partials
var listTemplate = require('./controllers/list/partials/list.html');
var viewTemplate = require('./controllers/view/partials/view.html');
var createTemplate = require('./controllers/create/partials/create.html');
var editTemplate = require('./controllers/edit/partials/edit.html');
var objectsTemplate = require('./controllers/objects/partials/objects.html');

module.exports = angular.module('built.objects', [uiRouter])
	.controller('createCtrl', createCtrl)
	.controller('editCtrl', editCtrl)
	.controller('viewCtrl', viewCtrl)
	.controller('listCtrl', listCtrl)
	.controller('objectsCtrl', objectsCtrl)
	.config([
		'$stateProvider',
		function($stateProvider) {
			$stateProvider
				.state('app.dashboard.classes-objects-list', {
					url: '/classes/:class_uid/objects/all',
					template: objectsTemplate,
					resolve: resolvers.resolve(['currentClass']),
					abstract: true
					//controller: 'objectsCtrl'

				})
				.state('app.dashboard.classes-objects-list.all', {
					url: '?p&search',
					template: listTemplate,
					controller: 'listCtrl',
					reloadOnSearch: false,
					data: {
						breadcrumbs: [{
							state: 'app.dashboard.classes-user-list',
							name: 'Classes',
							params: {
								p : 1 
							}
						}, {
							name: '{{currentClass.title}}'
						}, {
							name: 'Objects'
						}, {
							name: 'All'
						}]
					}
				})
				.state('app.dashboard.classes-objects-view', {
					url: '/classes/:class_uid/objects/:obj_uid/view',
					template: viewTemplate,
					resolve: resolvers.resolve(['currentClass', 'currentObject']),
					controller: 'viewCtrl',
					data: {
						breadcrumbs: [{
							state: 'app.dashboard.classes-user-list',
							name: 'Classes',
							params: {
								p : 1 
							}
						}, {
							name: '{{currentClass.title}}'
						}, {
							state: 'app.dashboard.classes-objects-list.all',
							name: 'Objects',
							params: {
								class_uid: '{{currentClass.uid}}',
								p: 1
							}
						}, {
							name: '{{currentObject.uid}}'
						}, {
							name: 'View'
						}]
					}
				})
				.state('app.dashboard.classes-objects-create', {
					url: '/classes/:class_uid/objects/create',
					template: createTemplate,
					resolve: resolvers.resolve(['currentClass']),
					controller: 'createCtrl',
					data: {
						breadcrumbs: [{
							state: 'app.dashboard.classes-user-list',
							name: 'Classes',
							params: {
								p : 1 
							}
						}, {
							name: '{{currentClass.title}}'
						}, {
							state: 'app.dashboard.classes-objects-list.all',
							name: 'Objects',
							params: {
								class_uid: '{{currentClass.uid}}',
								p: 1
							}
						}, {
							name: 'Create'
						}]
					}
				})
				.state('app.dashboard.classes-objects-edit', {
					url: '/classes/:class_uid/objects/:obj_uid/edit',
					template: editTemplate,
					resolve: resolvers.resolve(['currentClass', 'currentObject']),
					controller: 'editCtrl',
					data: {
						breadcrumbs: [{
							state: 'app.dashboard.classes-user-list',
							name: 'Classes',
							params: {
								p : 1 
							}

						}, {
							name: '{{currentClass.title}}'
						}, {
							state: 'app.dashboard.classes-objects-list.all',
							name: 'Objects',
							params: {
								class_uid: '{{currentClass.uid}}',
								p: 1
							}
						}, {
							name: '{{currentObject.uid}}'
						}, {
							name: 'Edit'
						}]
					}
				})
		}
	]);
},{"../resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/create/create-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\create\\create-ctrl.js","./controllers/create/partials/create.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\create\\partials\\create.html","./controllers/edit/edit-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\edit\\edit-ctrl.js","./controllers/edit/partials/edit.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\edit\\partials\\edit.html","./controllers/list/list-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\list\\list-ctrl.js","./controllers/list/partials/list.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\list\\partials\\list.html","./controllers/objects/objects-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\objects\\objects-ctrl.js","./controllers/objects/partials/objects.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\objects\\partials\\objects.html","./controllers/view/partials/view.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\view\\partials\\view.html","./controllers/view/view-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\objects\\controllers\\view\\view-ctrl.js","angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\angular-ui-router\\release\\angular-ui-router.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js":[function(require,module,exports){
'use strict';

var R = require('third-party-modules/ramda');

var resolvers = {
  currentApiHost: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.get('currentApiHost') || appCacheService.then('currentApiHost', builtApi.ApiHost.getApiHost());
    }
  ],
  events: [
    'appCacheService',
    'builtApi',
    '$stateParams',
    function(appCacheService, builtApi, $stateParams) {
      var params = {
        options: {
          query: {}
        }
      };
      return appCacheService.get('events') || appCacheService.then('events', builtApi.Analytics.getEvents(params));
    }
  ],
  funnels: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return builtApi.Analytics.getAnalytics({
        options: {
          eventType: "analytics/funnels"
        }
      });
    }
  ],
  segBookmarks: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.get('segBookmarks') || appCacheService.then('segBookmarks', builtApi.Analytics.getAnalytics({
        options: {
          eventType: "analytics/segments"
        }
      }));
    }
  ],
  serverConfig: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.get('serverConfig') || appCacheService.then('serverConfig', builtApi.ServerConfig.getServerConfig());
    }
  ],
  paymentHistory: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.then('paymentHistory', builtApi.Accounts.getPaymentHistory());
    },
  ],
  plans: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.get('plans') || appCacheService.then('plans', builtApi.Plans.getPlans());
    },

  ],
  billingInfo: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.then('billingInfo', builtApi.Accounts.getBillingInfo());
    },

  ],
  appSettings: [
    'builtApi',
    function(builtApi) {
      return builtApi.Application.getAppSettings({
        options: {
          settingType: 'settings'
        }
      });
    }
  ],
  collaborators: [
    'builtApi',
    function(builtApi) {
      return builtApi.Application.getAppSettings({
        options: {
          settingType: 'collaborators'
        }
      });
    }
  ],
  tenants: [
    'builtApi',
    function(builtApi) {
      return builtApi.Tenants.getAll();
    }
  ],
  integration: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.get('integration') || appCacheService.then('integration', builtApi.Integration.get());
    }
  ],
  notificationCredentials: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.get('notificationCredentials') || appCacheService.then('notificationCredentials', builtApi.Notifications.getCredentialsDetails());
    }
  ],
  currentUser: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.get('currentUser') || appCacheService.then('currentUser', builtApi.SystemUserSession.get());
    }
  ],
  accounts: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.get('currentAccount') || appCacheService.then('currentAccount', builtApi.Accounts.getAccounts());
    }
  ],
  apps: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.get('apps') || appCacheService.then('apps', builtApi.Application.getApps());
    }
  ],
  accountApiMetrics: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.then('ApiMetrics', builtApi.ApiMetrics.get({
        options: {
          metricsType: 'account_api_metrics'
        }
      }));
    }
  ],
  applicationApiMetrics: [
    'appCacheService',
    'builtApi',
    function(appCacheService, builtApi) {
      return appCacheService.then('applicationApiMetrics', builtApi.ApiMetrics.get({
        options: {
          metricsType: 'application_api_metrics',
        }
      }));
    }
  ],
  ccLogs: [
    'builtApi',
    '$stateParams',
    function(builtApi, $stateParams) {
      return builtApi.Extensions.get({
        options: {
          paramId: 'logs',
          query: {
            app_api_key: $stateParams.api_key
          }
        }
      });
    }
  ],
  currentApp: [
    'appCacheService',
    'builtApi',
    '$stateParams',
    'utilsService',
    'manageUtils',
    function(appCacheService, builtApi, $stateParams, Utils, manageUtils) {
      builtApi.setHeaders({
        application_api_key: $stateParams.api_key
      });

      var app = appCacheService.get('currentApp');
      
      if (app)
        return app;

      var promise = appCacheService.then('currentApp', builtApi.Application.getApp());
      return promise.then(function(data) {
        manageUtils.setAppHeaders(data);
        return data;
      });

    }
  ],
  currentClass: [
    'builtApi',
    'appCacheService',
    '$stateParams',
    function(builtApi, appCacheService, $stateParams) {
      var params = {
        options: {
          classUid: $stateParams.class_uid
        }
      }
      return appCacheService.get('currentClass') || appCacheService.then('currentClass', builtApi.Classes.getOne(params));
    }
  ],
  currentFieldTypes: [
    'builtApi',
    'appCacheService',
    '$stateParams',
    function(builtApi, appCacheService, $stateParams) {
      return appCacheService.get('currentFieldTypes') || appCacheService.then('currentFieldTypes', builtApi.FieldTypes.getDataTypes());
    }
  ],
  currentObject: [
    'appCacheService',
    'builtApi',
    '$stateParams',
    'currentApp',
    function(appCacheService, builtApi, $stateParams, currentApp) {
      var params = {
        options: {
          classUid: $stateParams.class_uid,
          objectUid: $stateParams.obj_uid,
          query: {
            'include_unpublished': true
          }
        }
      }
      return appCacheService.get('currentObject') || appCacheService.then('currentObject', builtApi.Objects.getOne(params));
    }
  ],
  resolve: function(args) {
    return R.pick(args)(this);
  }
};

module.exports = resolvers;
},{"third-party-modules/ramda":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\ramda\\ramda.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\collaborators\\collaborators-ctrl.js":[function(require,module,exports){
'use strict';
var inviteUserTemplate = require('./partials/invite-user-template.html')
module.exports = [
	'$scope',
	'$state',
	'$location',
	'builtApi',
	'alertService',
	'utilsService',
	'modalService',
	'collaborators',
	'currentUser',
	'constants',
	'dataGridService',
	function($scope, $state, $location, builtApi, Alert, Utils, Modal, collaborators, currentUser, constants, dataGrid) {

		var apiKey = $state.params.api_key;
		var dataTableContainer = $('.data-tbl');
		collaborators = collaborators.users;	
		
		//Table data
		$scope.dataGrid = dataGrid;
		$scope.listRows = [];
		$scope.classColumns = [{
			'label': 'Email',
			'key': 'email'
		}];

		//paging
		var pagno = 0;
		$scope.myPageItemsCount = constants.queryLimit;
		$scope.mycurrentPage = (pagno < 0 ? 0 : pagno) || 0;

		$scope.onServerSideItemsRequested = function(currentPage, filterBy, filterByFields, orderBy, orderByReverse, myPageItemsCount, gridItemuid) {
			$scope.listRows =_.map(collaborators, function(user) {
				if (user.email === currentUser.email) {
					user['isCurrentUser'] = true;
					if (user.is_owner)
						$scope.isAdmin = true
				}
				return user;
			});

			$scope.myItemsTotalCount = collaborators.length;

		

		}

		$scope.inviteUsers = function() {
			Modal.openModal({
				emails: "",
				message: ""
			}, inviteUserTemplate, ModalInstanceCtrl)
				.then(function(res) {
					_.forEach(res.data.emails.split(','), function(email) {
						$scope.listRows.push({
							email: email
						});
					})

					Alert.notify({
						title: 'Success',
						content: res.notice,
						type: 'success'
					});
				})
		}
		var ModalInstanceCtrl = function($scope, $modalInstance, data) {
			$scope.data = data;
			$scope.btnStatus = false;
			$scope.ok = function() {
				$scope.btnStatus = true;
				builtApi.Application.postAppSettings({
					options: {
						settingType: "invite"
					},
					body: {
						app_api_key: apiKey,
						emails: $scope.data.emails.split(','),
						message: $scope.data.message
					}
				})
					.then(function(res) {
						$scope.btnStatus = false;
						res["data"] = data;
						$modalInstance.close(res);
					}, function(xhr) {
						$scope.btnStatus = false;
						xhr = xhr.entity;
						Alert.notify({
							title: xhr.error_message,
							content: Utils.parseError(xhr),
							type: 'error'
						});
					});
			}
			$scope.cancel = function() {
				$modalInstance.dismiss('cancel');
			};
		}

		$scope.deleteCollaborator = function(collaborator, index) {
			var collaboratorData = {
					app_api_key: apiKey
				};
			if(!_.isEqual(currentUser.email, collaborator.email))
				collaboratorData.unshare_from = collaborator.email;

			builtApi.Application.postAppSettings({
				options: {
					settingType: "unshare"
				},
				body: collaboratorData
			})
				.then(function(res) {
					$scope.listRows.splice(index, 1);
					Alert.notify({
						title: 'Success',
						content: res.notice,
						type: 'success'
					});
				$state.go('app.applications', {
					api_key : apiKey
				})	
				}, function(xhr) {
					xhr = xhr.entity;
					Alert.notify({
						title: xhr.error_message,
						content: Utils.parseError(xhr),
						type: 'error'
					});
				})
		}
	}
]
},{"./partials/invite-user-template.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\collaborators\\partials\\invite-user-template.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\collaborators\\partials\\collaborators.html":[function(require,module,exports){
module.exports = ' <div class="button-wrap mb10">\n' +
    '    <a ng-click=\'inviteUsers()\' class="btn btn-labeled btn-primary pull-left">\n' +
    '        <span class="btn-label"><i class="fa fa-user"></i>\n' +
    '        </span>Invite Users\n' +
    '    </a>\n' +
    '</div>\n' +
    '<div class="data-tbl-wrap">\n' +
    '    <table tr-ng-grid="" items="listRows" class="table data-tbl" page-items="myPageItemsCount" total-items="myItemsTotalCount" current-page="mycurrentPage" on-data-required="onServerSideItemsRequested(mycurrentPage, filterBy, filterByFields, orderBy, orderByReverse,myPageItemsCount, gridItem.uid)" enable-selections="false">\n' +
    '        <thead>\n' +
    '            <tr class="dt-head-tr">\n' +
    '                <th class="dt-{{column.key}}-th" ng-repeat=\'column in classColumns\' field-name="{{column.label}}" data-toggle="{{column.dataToggle}}" data-hide="{{column.dataHide}}">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        {{column.label}} \n' +
    '                    </div>\n' +
    '                </th>\n' +
    '                <th class="dt-actions-th">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        Actions\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '        </thead>\n' +
    '        <tbody>\n' +
    '            <tr>\n' +
    '                <td class="dt-{{column.key}}-td" ng-repeat=\'column in classColumns\' field-name="{{column.label}}" title="{{gridItem[column.label]}}">\n' +
    '                    <span>{{gridItem[column.key]}} <span ng-if="gridItem.isCurrentUser">(You)</span></span>\n' +
    '                    <span class="label label-success" ng-if="gridItem.is_owner">Owner</span>\n' +
    '                </td>\n' +
    '                <td>\n' +
    '                    <span title="Delete" ng-click=\'deleteCollaborator(gridItem, $index)\' class="hand fa fa-trash-o fa-lg edit_evnt ml10 dt-action-item" ng-if = "(isAdmin && !gridItem.isCurrentUser) || (!isAdmin &&gridItem.isCurrentUser)"></span>\n' +
    '                </td>\n' +
    '            </tr>\n' +
    '        </tbody>\n' +
    '        <tfoot class="hidden">\n' +
    '        </tfoot>\n' +
    '    </table>\n' +
    '</div>\n' +
    '\n' +
    '\n' +
    '\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\collaborators\\partials\\invite-user-template.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '  <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="cancel()">\n' +
    '      ×\n' +
    '  </button>\n' +
    '    <h3 class="modal-title">Invite users</h3>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '  <div class="form-horizontal">\n' +
    '      <fieldset>\n' +
    '          <div class="form-group">\n' +
    '              <label class="col-md-2 control-label">Emails</label>\n' +
    '              <div class="col-md-10">\n' +
    '                  <textarea placeholder="Enter Comma(,) separated Emails" ng-model="data.emails" class="form-control"></textarea>\n' +
    '              </div>\n' +
    '          </div>\n' +
    '          <div class="form-group">\n' +
    '              <label class="col-md-2 control-label">Message</label>\n' +
    '              <div class="col-md-10">\n' +
    '                  <textarea ng-model="data.message" class="form-control"></textarea>\n' +
    '              </div>\n' +
    '          </div>\n' +
    '      </fieldset>\n' +
    '  </div>\n' +
    '</div>\n' +
    '\n' +
    '<div class="modal-footer">\n' +
    '    <div class="button-wrap">\n' +
    '        <button  btn-loader="btnStatus" loading-text="Sending..." type="submit" class="btn btn-labeled btn-primary btn-sm pull-right" ng-click="ok()">\n' +
    '            <span class="btn-label">\n' +
    '              <i class="fa fa-check"></i>\n' +
    '            </span>\n' +
    '            <span class="js-btn-text">\n' +
    '              Send invitation\n' +
    '            </span>\n' +
    '        </button>\n' +
    '        <button ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '            </span>Cancel\n' +
    '        </button>\n' +
    '    </div>\n' +
    '</div>\n' +
    '    \n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\general\\general-ctrl.js":[function(require,module,exports){
var traverse = require('traverse');
'use strict';
module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  'appSettings',
  function($scope, $location, $state, builtApi, Alert, Utils, appSettings) {
    var apiKey = $state.params.api_key;
    appSettings = appSettings.app_settings;
    $scope.btnStatus = false;
    $scope.uploadTypeVariable = "";
    $scope.profileTypeVariable = "";
    $scope.appSettings = _.cloneDeep(appSettings);

    var appSettingsArray = []

    traverse($scope.appSettings.application_variables).forEach(function(x) {
      if (this.isLeaf) {
        appSettingsArray.push({
          key: this.key,
          value: $scope.appSettings.application_variables[this.key]
        });
      }

    });
    $scope.appSettingsVariables = appSettingsArray

    $scope.appVariableKey = "";
    $scope.appVariableValue = "";

    //Remove application variable
    $scope.removeAppVariable = function(appSetting) {
      var index = $scope.appSettingsVariables.indexOf(appSetting);
      $scope.appSettingsVariables.splice(index, 1);
    }

    //On key press of return key
    $('.js-app-variables input').keyup(function(e) {
      //Check if return key is pressed
      if (e.which === 13) {

        Utils.sa($scope, function() {
          $scope.addNewAppVariable();
        })
      }
    })

    $("[rel=popover-hover]").popover({
      trigger: "hover"
    })

    $scope.addNewAppVariable = function() {
      if (!$scope.appVariableKey)
        return false;

      $scope.appSettingsVariables.push({
        key: $scope.appVariableKey,
        value: $scope.appVariableValue
      });
      $scope.appVariableKey = "";
      $scope.appVariableValue = "";
    }

    //Save General Settings  
    $scope.saveGeneralSettings = function() {
      var tempAppSettingsObject = {};
      var tempAppSettingsArr = []
      $scope.btnStatus = true;
      $scope.addNewAppVariable();
      $scope.addUploadType();

      tempAppSettingsArr = $scope.appSettingsVariables.map(function(setting) {
        tempAppSettingsObject[setting.key] = setting.value;
      })
      $scope.appSettings["application_variables"] = tempAppSettingsObject;
      builtApi.Application.postAppSettings({
          options: {
            settingType: "settings"
          },
          body: {
            app_api_key: apiKey,
            app_settings: $scope.appSettings
          }
        })
        .then(function(res) {
          $scope.btnStatus = false;
          Alert.notify({
            title: 'Success',
            content: res.notice,
            type: 'success'
          });
        }, function(xhr) {
          $scope.btnStatus = false;
          console.log(xhr)
          Alert.notify({
            title: xhr.entity.error_message,
            content: Utils.parseError(xhr.entity),
            type: 'error'
          });
        })
    }

    $('.js-upload-type').keyup(function(e) {
      if (e.which === 13) {
        Utils.sa($scope, function() {
          $scope.addUploadType();
        });
      }
    });

    $scope.addUploadType = function() {
      //Upload variable type
      if (!$scope.uploadTypeVariable)
        return;
      $scope.appSettings.upload_type_restriction.list.push($scope.uploadTypeVariable);
      $scope.uploadTypeVariable = "";
    }

    $scope.removeUploadType = function(type) {
      $scope.appSettings.upload_type_restriction.list.splice($scope.appSettings.upload_type_restriction.list.indexOf(type), 1);
    }

    $('.js-Profile-type').keyup(function(e) {
      if (e.which === 13) {
        Utils.sa($scope, function() {
          $scope.addProfileType();
        });
      }
    });

    $scope.addProfileType = function() {
      //Upload variable type
      if (!$scope.profileTypeVariable)
        return;
      $scope.appSettings.restricted_profile_update.keys.push($scope.profileTypeVariable);
      $scope.profileTypeVariable = "";
    }

    $scope.removeProfileType = function(type) {
      $scope.appSettings.restricted_profile_update.keys.splice($scope.appSettings.restricted_profile_update.keys.indexOf(type), 1);
    }
  }
]
},{"traverse":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\traverse\\index.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\general\\partials\\general.html":[function(require,module,exports){
module.exports = '<div class="well well-sm max-width-800">\n' +
    '    <legend class="pg-header">\n' +
    '        General settings\n' +
    '    </legend>\n' +
    '    <p class="pg-tagline">\n' +
    '        Configure general settings for this application.\n' +
    '    </p>\n' +
    '\n' +
    '    <div class="form-horizontal settings-form">\n' +
    '\n' +
    '        <fieldset>\n' +
    '            <legend>Client notifications</legend>\n' +
    '\n' +
    '            <div class="radio">\n' +
    '                <label>\n' +
    '                    <input class="radiobox style-0" name="allow_client_notification" type="radio" ng-model="appSettings.allow_client_notifications" ng-value="true">\n' +
    '                    <span>Enable client notifications</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="radio">\n' +
    '                <label>\n' +
    '                    <input class="radiobox style-0" name="allow_client_notification" type="radio" ng-model="appSettings.allow_client_notifications" ng-value="false" />\n' +
    '                    <span>Disable client notifications</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '\n' +
    '        <fieldset>\n' +
    '            <legend class="mtvl">Security</legend>\n' +
    '\n' +
    '            <div class="radio">\n' +
    '                <label>\n' +
    '                    <input class="radiobox style-0" type="radio" ng-value="false" ng-model="appSettings.hide_email">\n' +
    '                    <span>Show emails in the entire application</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="radio">\n' +
    '                <label>\n' +
    '                    <input class="radiobox style-0" type="radio" ng-value="true" ng-model="appSettings.hide_email">\n' +
    '                    <span>Hide emails in the entire application</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '\n' +
    '        <fieldset>\n' +
    '            <legend>Tenants</legend>\n' +
    '\n' +
    '            <div class="radio">\n' +
    '                <label>\n' +
    '                    <input class="radiobox style-0" type="radio" ng-value="true" ng-model="appSettings.auto_create_tenants">\n' +
    '                    <span>Create tenants automatically</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="radio">\n' +
    '                <label>\n' +
    '                    <input class="radiobox style-0" type="radio" ng-value="false" ng-model="appSettings.auto_create_tenants">\n' +
    '                    <span>Create tenants manually</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '\n' +
    '\n' +
    '        <fieldset>\n' +
    '\n' +
    '            <legend>Mail</legend>\n' +
    '            <p class="sub-legend"> Activation</p>\n' +
    '\n' +
    '            <div class="radio">\n' +
    '                <label class="radio">\n' +
    '                    <input class="radiobox style-0" type="radio" ng-value="true" ng-model="appSettings.activation_template.use">\n' +
    '                    <span>Send activation mail</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="radio">\n' +
    '                <label class="radio">\n' +
    '                    <input class="radiobox style-0" type="radio" ng-value="false" ng-model="appSettings.activation_template.use">\n' +
    '                    <span>Don\'t send activation mail (Auto activate user)</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '            <p class="sub-legend mt15"> Welcome</p>\n' +
    '\n' +
    '            <div class="radio">\n' +
    '                <label class="radio">\n' +
    '                    <input class="radiobox style-0" ng-model="appSettings.welcome_template.use" type="radio" ng-value="true">\n' +
    '                    <span>Send welcome mail</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="radio">\n' +
    '                <label class="radio">\n' +
    '                    <input class="radiobox style-0" ng-model="appSettings.welcome_template.use" type="radio" ng-value="false">\n' +
    '                    <span>Don\'t send welcome mail</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '\n' +
    '        <fieldset>\n' +
    '            <legend>Permitted login schemes</legend>\n' +
    '            <p>\n' +
    '                Enable or disable various schemes for logging in to your app. To ensure security, select only the minimum required schemes." data-original-title="Permitted login schemes\n' +
    '            </p>\n' +
    '            <div class="checkbox">\n' +
    '                <label>\n' +
    '                    <input type="checkbox" class="checkbox style-0" ng-model="appSettings.login_schemes.traditional">\n' +
    '                    <span>Traditional login</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="checkbox">\n' +
    '                <label>\n' +
    '                    <input type="checkbox" class="checkbox style-0" ng-model="appSettings.login_schemes.google">\n' +
    '                    <span>Google</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '\n' +
    '            <div class="checkbox">\n' +
    '                <label>\n' +
    '                    <input type="checkbox" class="checkbox style-0" ng-model="appSettings.login_schemes.facebook">\n' +
    '                    <span>Facebook</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '\n' +
    '            <div class="checkbox">\n' +
    '                <label>\n' +
    '                    <input type="checkbox" class="checkbox style-0" ng-model="appSettings.login_schemes.twitter">\n' +
    '                    <span>Twitter</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="checkbox">\n' +
    '                <label>\n' +
    '                    <input type="checkbox" class="checkbox style-0" ng-model="appSettings.login_schemes.tibbr">\n' +
    '                    <span>tibbr</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '\n' +
    '            <div class="checkbox">\n' +
    '                <label>\n' +
    '                    <input type="checkbox" class="checkbox style-0" ng-model="appSettings.login_schemes.anyauth">\n' +
    '                    <span>AnyAuth login</span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '        <!--Profile REstriction -->\n' +
    '        <fieldset>\n' +
    '            <legend class="smart-form">\n' +
    '                Restrict user profile fields\n' +
    '                <label class="toggle">\n' +
    '                    <input type="checkbox" name="checkbox-toggle" ng-model="appSettings.restricted_profile_update.enabled" ng-change="appSettings.restricted_profile_update.enabled!=appSettings.restricted_profile_update.enabled"><i data-swchon-text="ON" data-swchoff-text="OFF"></i>\n' +
    '                </label>\n' +
    '            </legend>\n' +
    '            <p>\n' +
    '                You can whitelist or blacklist certain fields on the appliation user\'s profile. Doing so will result in the user being unable to update the restricted fields.\n' +
    '            </p>\n' +
    '            <div class="checkbox">\n' +
    '                <label>\n' +
    '                    <input type="checkbox" ng-disabled="!appSettings.restricted_profile_update.enabled" class="checkbox style-0" ng-model="appSettings.restricted_profile_update.whitelist" ng-change="appSettings.restricted_profile_update.whitelist!=appSettings.restricted_profile_update.whitelist" />\n' +
    '                    <span ng-if="appSettings.restricted_profile_update.whitelist">\n' +
    '                        Whitelist: The application user can update only the following fields.\n' +
    '                    </span>\n' +
    '                    <span ng-if="!appSettings.restricted_profile_update.whitelist">\n' +
    '                        Blacklist: The application user cannot update the following fields.\n' +
    '                    </span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '\n' +
    '            <div class="key-value-wrap">\n' +
    '                <div class="clearfix" ng-repeat="type in appSettings.restricted_profile_update.keys track by $index">\n' +
    '                    <input type="text" placeholder="Add field name..." class="u-input" ng-model="appSettings.restricted_profile_update.keys[$index]" ng-value="appSettings.restricted_profile_update.keys[$index]" ng-disabled="!appSettings.restricted_profile_update.enabled">\n' +
    '                    <a class="btn" ng-class="{\'disabled btn-default\':!appSettings.restricted_profile_update.enabled, \'btn-danger\':appSettings.restricted_profile_update.enabled}" ng-click="removeProfileType($index )">\n' +
    '                        <i class="fa fa-trash-o"></i>\n' +
    '                    </a>\n' +
    '                </div>\n' +
    '\n' +
    '                <div class="clearfix">\n' +
    '                    <input type="text" placeholder="Add field name..." class="app-key-input u-input js-Profile-type" ng-model="profileTypeVariable" ng-disabled="!appSettings.restricted_profile_update.enabled">\n' +
    '                    <a ng-class="{\'disabled btn-default\':!appSettings.restricted_profile_update.enabled,\'bg-color-blue txt-color-white\': appSettings.restricted_profile_update.enabled}" class="btn" ng-click="addProfileType()">\n' +
    '                        <i class="fa fa-plus"></i>\n' +
    '                   </a>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '\n' +
    '        <!--Restricted Uploads-->\n' +
    '        <fieldset>\n' +
    '            <legend class="smart-form">\n' +
    '                Upload file type restriction\n' +
    '                <label class="toggle">\n' +
    '                    <input type="checkbox" name="checkbox-toggle" ng-model="appSettings.upload_type_restriction.enabled" ng-change="appSettings.upload_type_restriction.enabled!=appSettings.upload_type_restriction.enabled"><i data-swchon-text="ON" data-swchoff-text="OFF"></i>\n' +
    '                </label>\n' +
    '                \n' +
    '            </legend>\n' +
    '            <p>\n' +
    '                 You can whitelist or blacklist certian file types. Uploading files with a restricted content-type results in an error.\n' +
    '            </p>\n' +
    '            <div class="checkbox">\n' +
    '                <label>\n' +
    '                    <input type="checkbox" ng-disabled="!appSettings.upload_type_restriction.enabled" class="checkbox style-0" ng-model="appSettings.upload_type_restriction.whitelist" ng-change="appSettings.upload_type_restriction.whitelist!=appSettings.upload_type_restriction.whitelist" />\n' +
    '                    <span ng-if="appSettings.upload_type_restriction.whitelist">\n' +
    '                        Whitelist: Only files with following content-types are allowed.\n' +
    '                    </span>\n' +
    '                    <span ng-if="!appSettings.upload_type_restriction.whitelist">\n' +
    '                        Blacklist: Files with the following content-types are not allowed.\n' +
    '                    </span>\n' +
    '                </label>\n' +
    '            </div>\n' +
    '           \n' +
    '            <div class="key-value-wrap">\n' +
    '                <div class="clearfix" ng-repeat="type in appSettings.upload_type_restriction.list track by $index">\n' +
    '                    <input type="text" placeholder="Eg: image/jpg" class="u-input" ng-model="appSettings.upload_type_restriction.list[$index]" ng-value="appSettings.upload_type_restriction.list[$index]" ng-disabled="!appSettings.upload_type_restriction.enabled">\n' +
    '                    <a class="btn" ng-class="{\'disabled btn-default\':!appSettings.upload_type_restriction.enabled, \'btn-danger\': appSettings.upload_type_restriction.enabled}" ng-click="removeUploadType($index )">\n' +
    '                        <i class="fa fa-trash-o"></i>\n' +
    '                    </a>\n' +
    '                </div>\n' +
    '\n' +
    '                <div class="clearfix">\n' +
    '                    <input type="text" placeholder="Eg: image/jpg" class="app-key-input u-input js-upload-type" ng-model="uploadTypeVariable" ng-disabled="!appSettings.upload_type_restriction.enabled">\n' +
    '                    <a ng-class="{\'disabled btn-default\':!appSettings.upload_type_restriction.enabled, \'bg-color-blue txt-color-white\': appSettings.upload_type_restriction.enabled}" class="btn" ng-click="addUploadType()">\n' +
    '                        <i class="fa fa-plus"></i>\n' +
    '                   </a>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '\n' +
    '        <fieldset>\n' +
    '            <legend>Application variables</legend>\n' +
    '            <p>\n' +
    '                Specify custom application variables in your application. These variables will be available globally in the application environment. For example, you may use these variables in mail templates or elsewhere in the application.\n' +
    '            </p>\n' +
    '            <div class="key-value-wrap">\n' +
    '                <div class="clearfix" ng-repeat="app in appSettingsVariables track by $index">\n' +
    '                    <input type="text" placeholder="Key" class="u-input" ng-model="appSettingsVariables[$index].key" ng-value="appSettingsVariables[$index].key">\n' +
    '\n' +
    '                    <input type="text" placeholder="Value" class="u-input" ng-model="appSettingsVariables[$index].value" ng-value="appSettingsVariables[$index].value">\n' +
    '\n' +
    '                    <a class="btn btn-danger" ng-click="removeAppVariable(appSettingsVariables[$index])">\n' +
    '                        <i class="fa fa-trash-o"></i>\n' +
    '                    </a>\n' +
    '                </div>\n' +
    '\n' +
    '                <div class="js-app-variables clearfix">\n' +
    '                    <input type="text" placeholder="Key" class="app-key-input u-input" ng-model="appVariableKey">\n' +
    '                    <input type="text" placeholder="Value" class="app-value-input u-input" ng-model="appVariableValue">\n' +
    '\n' +
    '                    <a class="btn bg-color-blue txt-color-white" ng-click="addNewAppVariable()">\n' +
    '                        <i class="fa fa-plus"></i>\n' +
    '                    </a>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '        <div class="form-actions">\n' +
    '            <button btn-loader="btnStatus" loading-text="Saving..." class="btn btn-primary btn-labeled"  ng-click="saveGeneralSettings()">\n' +
    '                <span class="btn-label">\n' +
    '          <i class="fa fa-check"></i>\n' +
    '        </span>\n' +
    '                <span class="js-btn-text">Save settings</span>\n' +
    '            </button>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\info\\info-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
    '$scope',
    '$location',
    '$state',
    'builtApi',
    'alertService',
    'utilsService',
    'currentApp',
    function($scope, $location, $state, builtApi, Alert, Utils, currentApp) {
        $scope.currentApp = currentApp;
        $scope.downloadUrl = "/v1/applications/" + $state.params.api_key + "/export_postman_collection?APPLICATION_UID=" + $state.params.api_key + "&APPLICATION_API_KEY=" + $state.params.api_key;

        $scope.selectInput = function(event) {
            $(event.currentTarget).select();
        }
    }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\info\\partials\\info.html":[function(require,module,exports){
module.exports = '<!-- widget grid -->\n' +
    '<section id="widget-grid" class="">\n' +
    '\n' +
    '    <!-- START ROW -->\n' +
    '    <div class="row">\n' +
    '\n' +
    '        <!-- NEW COL START -->\n' +
    '        <article class="col-sm-12 col-md-4">\n' +
    '\n' +
    '          <div class="jarviswidget jarviswidget-color-blueDark">\n' +
    '              <header>\n' +
    '                  <h2>Info</h2>\n' +
    '              </header>\n' +
    '\n' +
    '              <!-- widget div-->\n' +
    '              <div role="content">\n' +
    '                <!-- widget content -->\n' +
    '                <div class="widget-body">\n' +
    '                  <div class="form-horizontal settings-form s-info-form">\n' +
    '                    <fieldset>\n' +
    '                        <legend>Application Info</legend>\n' +
    '                        <div class="form-group">\n' +
    '                            <label class="col-md-4 control-label">Application Name</label>\n' +
    '                            <div class="col-md-8">\n' +
    '                                <input type="text" ng-click="selectInput($event)" readonly="" class="u-input form-control" type="text" ng-value="currentApp.name">\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                        <div class="form-group">\n' +
    '                            <label class="col-md-4 control-label">Application UID</label>\n' +
    '                            <div class="col-md-8">\n' +
    '                                <input type="text" ng-click="selectInput($event)" readonly="" class="u-input form-control" type="text" ng-value="currentApp.uid">\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </fieldset>\n' +
    '\n' +
    '                    <fieldset>\n' +
    '                        <legend>Application Keys</legend>\n' +
    '                        <div class="form-group">\n' +
    '                            <label class="col-md-4 control-label">API key</label>\n' +
    '                            <div class="col-md-8">\n' +
    '                                <input type="text" ng-click="selectInput($event)" readonly="" class="u-input form-control" type="text" ng-value="currentApp.api_key">\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                        <div class="form-group">\n' +
    '                            <label class="col-md-4 control-label">Master key</label>\n' +
    '                            <div class="col-md-8">\n' +
    '                                <input type="text" ng-click="selectInput($event)" readonly="" class="u-input form-control" type="text" ng-value="currentApp.master_key">\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </fieldset>\n' +
    '                      \n' +
    '                  </div>\n' +
    '                </div>\n' +
    '                <!-- end widget content -->\n' +
    '              </div>\n' +
    '              <!-- end widget div -->\n' +
    '          </div>\n' +
    '          <!-- end widget -->\n' +
    '      </article>\n' +
    '      <!-- END COL -->\n' +
    '      <!-- NEW COL START -->\n' +
    '        <article class="col-sm-12 col-md-8">\n' +
    '\n' +
    '          <div class="jarviswidget jarviswidget-color-blueDark">\n' +
    '              <header>\n' +
    '                  <h2>Downloads</h2>\n' +
    '              </header>\n' +
    '\n' +
    '              <!-- widget div-->\n' +
    '              <div role="content">\n' +
    '                <!-- widget content -->\n' +
    '                <div class="widget-body">\n' +
    '                    <div class="form-horizontal">\n' +
    '                        <fieldset>\n' +
    '                            <legend>\n' +
    '                                <h4>Postman collection</h4>\n' +
    '                            </legend>\n' +
    '                            \n' +
    '                            <h5 class="mt0 mb20">\n' +
    '                                <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en" target="_blank">Postman</a> is a chrome extension that allows you to make REST calls. It also supports <b>collections</b>, which is a packaged bunch of calls. You can import the <b>built.io</b> postman collection to help trying out the REST API.\n' +
    '                            </h5>\n' +
    '\n' +
    '                            <p>Follow the steps below to import built.io postman collection to your postman extension.</p>\n' +
    '\n' +
    '                            <ol>\n' +
    '                                <li>\n' +
    '                                    Export all the API calls related to your application in the form of postman collection from here.\n' +
    '                                </li>\n' +
    '                                <li>\n' +
    '                                    The collection will be downloaded in the form of a JSON file named as <i class="muted">your_application_name_postman_collection.json</i>.\n' +
    '                                </li>\n' +
    '                                <li>\n' +
    '                                    Import this JSON file inside the postman extension for Chrome, and start sending API calls to your application.\n' +
    '                                </li>\n' +
    '                                <li>\n' +
    '                                    Some of the requests might have data-placeholders, which are enclosed inside double-braces\n' +
    '                                    <code>{{place_holder_here}}</code>.\n' +
    '                                </li>\n' +
    '                                <li>\n' +
    '                                    You can set this placeholders inside your global configuration of postman or can be replaced with actual values.\n' +
    '                                </li>\n' +
    '                            </ol>\n' +
    '                        </fieldset>\n' +
    '                        <div class="form-actions">\n' +
    '                            <a ng-href="{{downloadUrl}}" class="btn btn-labeled btn-primary">\n' +
    '                                <span class="btn-label"><i class="fa fa-download"></i>\n' +
    '                                </span> Download\n' +
    '                            </a>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '                <!-- end widget content -->\n' +
    '              </div>\n' +
    '              <!-- end widget div -->\n' +
    '          </div>\n' +
    '          <!-- end widget -->\n' +
    '      </article>\n' +
    '      <!-- END COL -->\n' +
    '    </div>\n' +
    '    <!-- END ROW -->\n' +
    '</section>\n' +
    '<!-- widget grid -->\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\mail\\mail-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
	'$scope',
	'$location',
	'$state',
	'builtApi',
	'alertService',
	'utilsService',
	'appSettings',
	function($scope, $location, $state, builtApi, Alert, Utils, appSettings) {
		appSettings = appSettings.app_settings;
		$scope.apiKey = $state.params.api_key;
		$scope.btnStatus = false;
		if (_.isEmpty(appSettings.smtp_settings)) {
			defaultSMTPSettings();
		}

		$scope.appSettings = _.cloneDeep(appSettings);
		$scope.revertSettings = {
			smtp_settings: {
				reset: false,
				save: false
			},
			activation_template: {
				reset: false,
				save: false
			},
			welcome_template: {
				reset: false,
				save: false
			},
			forgot_password_template: {
				reset: false,
				save: false
			}
		}

		function defaultSMTPSettings() {
			$scope.appSettings = {
				smtp_settings: {
					"address": null,
					"port": null,
					"from": null,
					"user_name": null,
					"password": null,
					"domain": null,
					"transport_layer_security": false
				}
			}
		}
		$scope.resetTemplateSettings = function(key) {
			$scope.btnStatus = true;
			$scope.revertSettings[key].reset = true;
			var appSettings = {};
			appSettings[key] = null;

			builtApi.Application.postAppSettings({
					options: {
						settingType: "settings/reset"
					},
					body: {
						scope: appSettings
					}
				})
				.then(function(res) {
					$scope.revertSettings[key].reset = false;
					$scope.btnStatus = false;
					$scope.appSettings[key] = res.app_settings[key];
					Alert.notify({
						title: 'Success',
						content: res.notice,
						type: 'success'
					});
				}, function(xhr) {
					$scope.revertSettings[key].reset = false;
					$scope.btnStatus = false;
					xhr = xhr.entity;
					Alert.notify({
						title: xhr.error_message,
						content: Utils.parseError(xhr),
						type: 'error'
					});
				})
		}

		//Save General Settings  
		$scope.saveMailSettings = function(key) {
			$scope.btnStatus = true;
			var appSettings = {};
			$scope.revertSettings[key].save = true;

			appSettings[key] = $scope.appSettings[key];
			if (key === 'smtp_settings')
				appSettings[key]['port'] = parseInt(appSettings[key]['port']) || appSettings[key]['port'];

			console.log(appSettings[key])
			builtApi.Application.postAppSettings({
					options: {
						settingType: "settings"
					},
					body: {
						app_settings: appSettings
					}
				})
				.then(function(res) {
					$scope.revertSettings[key].save = false;
					$scope.btnStatus = false;
					Alert.notify({
						title: 'Success',
						content: res.notice,
						type: 'success'
					});
				}, function(xhr) {
					$scope.revertSettings[key].save = false;
					$scope.btnStatus = false;
					xhr = xhr.entity;
					Alert.notify({
						title: xhr.error_message,
						content: Utils.parseError(xhr),
						type: 'error'
					});
				})
		}
	}
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\mail\\partials\\mail.html":[function(require,module,exports){
module.exports = '<!-- widget grid -->\n' +
    '<section id="widget-grid" class="">\n' +
    '\n' +
    '    <!-- START ROW -->\n' +
    '    <div class="row">\n' +
    '\n' +
    '        <!-- NEW COL START -->\n' +
    '        <article class="col-sm-12 col-md-6 col-lg-6">\n' +
    '\n' +
    '            <div class="jarviswidget jarviswidget-color-blueDark">\n' +
    '                <header>\n' +
    '                    <h2>SMTP settings</h2>\n' +
    '                </header>\n' +
    '\n' +
    '                <!-- widget div-->\n' +
    '                <div role="content">\n' +
    '                    <!-- widget content -->\n' +
    '                    <div class="widget-body">\n' +
    '                        <div class="form-horizontal">\n' +
    '\n' +
    '                        		<div class="alert alert-info">\n' +
    '                        		    <p>Provide custom SMTP settings for mail sent by built.io to your application users.</p>\n' +
    '                        		</div>\n' +
    '\n' +
    '                        		<div class="form-group">\n' +
    '                        		    <label class="col-md-2 control-label">Address</label>\n' +
    '                        		    <div class="col-md-10">\n' +
    '                        		        <input type="text" class="u-input form-control" placeholder="<smtp.yourdomain.com>" ng-model="appSettings.smtp_settings.address" ng-value="appSettings.smtp_settings.address">\n' +
    '                        		    </div>\n' +
    '                        		</div>\n' +
    '\n' +
    '                        		<div class="form-group">\n' +
    '                        		    <label class="col-md-2 control-label">Port</label>\n' +
    '                        		    <div class="col-md-10">\n' +
    '                        		        <input type="text" class="u-input form-control" placeholder="<your smtp port>" ng-model="appSettings.smtp_settings.port" ng-value="appSettings.smtp_settings.port">\n' +
    '                        		    </div>\n' +
    '                        		</div>\n' +
    '\n' +
    '                        		<div class="form-group">\n' +
    '                        		    <label class="col-md-2 control-label">Sender Name</label>\n' +
    '                        		    <div class="col-md-10">\n' +
    '                        		        <input type="text" class="u-input form-control" placeholder="<Name to be displayed in the mail>" ng-model="appSettings.smtp_settings.from" ng-value="appSettings.smtp_settings.from">\n' +
    '                        		    </div>\n' +
    '                        		</div>\n' +
    '\n' +
    '                        		<div class="form-group">\n' +
    '                        		    <label class="col-md-2 control-label">Userame</label>\n' +
    '                        		    <div class="col-md-10">\n' +
    '                        		        <input type="text" class="u-input form-control" placeholder="<your smtp username>" ng-model="appSettings.smtp_settings.user_name" ng-value="appSettings.smtp_settings.user_name">\n' +
    '                        		    </div>\n' +
    '                        		</div>\n' +
    '\n' +
    '                        		<div class="form-group">\n' +
    '                        		    <label class="col-md-2 control-label">Password</label>\n' +
    '                        		    <div class="col-md-10">\n' +
    '                        		        <input type="password" class="u-input form-control" autocomplete="off" placeholder="<your smtp password>" ng-model="appSettings.smtp_settings.password" ng-value="appSettings.smtp_settings.password">\n' +
    '                        		    </div>\n' +
    '                        		</div>\n' +
    '\n' +
    '                        		<div class="form-group">\n' +
    '                        		    <label class="col-md-2 control-label">Domain</label>\n' +
    '                        		    <div class="col-md-10">\n' +
    '                        		        <input type="text" class="u-input form-control" placeholder="<your smtp domain>" ng-model="appSettings.smtp_settings.domain" ng-value="appSettings.smtp_settings.domain">\n' +
    '                        		    </div>\n' +
    '                        		</div>\n' +
    '\n' +
    '                            <fieldset>\n' +
    '                                <legend>Network security</legend>\n' +
    '\n' +
    '                                <div class="radio">\n' +
    '                                    <label>\n' +
    '                                        <input class="radiobox style-0" type="radio" ng-model="appSettings.smtp_settings.transport_layer_security" ng-value="true">\n' +
    '                                        <span>Enable transport layer security.</span>\n' +
    '                                    </label>\n' +
    '                                </div>\n' +
    '\n' +
    '                                <div class="radio">\n' +
    '                                    <label>\n' +
    '                                        <input class="radiobox style-0" type="radio" ng-model="appSettings.smtp_settings.transport_layer_security" ng-value="false">\n' +
    '                                        <span>Disable transport layer security</span>\n' +
    '                                    </label>\n' +
    '                                </div>\n' +
    '\n' +
    '                            </fieldset>\n' +
    '\n' +
    '                            <div class="form-actions">\n' +
    '                            		<div class="button-wrap">\n' +
    '                                        <button  btn-loader="revertSettings.smtp_settings.save" loading-text="Saving..." class="btn btn-labeled btn-primary btn-sm pull-right" data-loading-text="Saving..." ng-click="saveMailSettings(\'smtp_settings\')">\n' +
    '                                            <span class="btn-label">\n' +
    '                                              <i class="fa fa-check"></i>\n' +
    '                                            </span>\n' +
    '                                            <span class="js-btn-text">\n' +
    '                                                Save settings\n' +
    '                                            </span>\n' +
    '                                        </button>\n' +
    '                            		    <button  btn-loader="revertSettings.smtp_settings.reset" loading-text="Reseting..." class="btn btn-labeled btn-default btn-sm pull-left" data-loading-text="Reseting..." ng-click="resetTemplateSettings(\'smtp_settings\')">\n' +
    '                            		        <span class="btn-label">\n' +
    '                            		        	<i class="fa fa-refresh"></i>\n' +
    '                            		        </span>\n' +
    '                                            <span class="js-btn-text">Reset settings</span>\n' +
    '                            		    </button>\n' +
    '                            		</div>\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <!-- end widget content -->\n' +
    '                </div>\n' +
    '                <!-- end widget div -->\n' +
    '            </div>\n' +
    '            <!-- end widget -->\n' +
    '\n' +
    '            <div class="jarviswidget jarviswidget-color-blueDark">\n' +
    '                <header>\n' +
    '                    <h2>Activation mail</h2>\n' +
    '                </header>\n' +
    '\n' +
    '                <!-- widget div-->\n' +
    '                <div role="content">\n' +
    '                    <!-- widget content -->\n' +
    '                    <div class="widget-body">\n' +
    '                        <div class="form-horizontal">\n' +
    '                        	<div class="alert alert-info mts mbm mail-tmpl-info">\n' +
    '                        	    <p>Customize the activation mail that is sent to your application users. You can use variables in the templates. These variables can be your application variables as well as some predefined variables that are given below. You can also specify your application user values here such as firstname, lastname, email, activation_token, uid in the application user class.</p>\n' +
    '                        	    <p class="mbs">\n' +
    '                        	        <strong>Predefined variables:</strong>\n' +
    '                        	    </p>\n' +
    '                        	    <p class="mb0">\n' +
    '                        	        <strong>{{</strong>confirm_link\n' +
    '                        	        <strong>}}</strong> - The default confirmation link provided by built.io.</p>\n' +
    '                        	    <p class="mb0">\n' +
    '                        	        <strong>{{</strong>application_link\n' +
    '                        	        <strong>}}</strong> - The application link that you can customize in <a class="bold-text" ng-href="#/dashboard/{{apiKey}}/settings/general">application variables</a>.</p>\n' +
    '                        	    <p class="mb0">\n' +
    '                        	        <strong>{{</strong>login_link\n' +
    '                        	        <strong>}}</strong> - The link that your user may go to for logging into your application.</p>\n' +
    '                        	    <p class="mbs mtm">\n' +
    '                        	        <strong>Predefined user variables:</strong>\n' +
    '                        	    </p>\n' +
    '                        	    <p class="mb0">\n' +
    '                        	        <strong>{{</strong>user.email\n' +
    '                        	        <strong>}}</strong> - The user\'s email.</p>\n' +
    '                        	    <p class="mb0">\n' +
    '                        	        <strong>{{</strong>user.first_name\n' +
    '                        	        <strong>}}</strong> - The user\'s first name.</p>\n' +
    '                        	    <p class="mb0">\n' +
    '                        	        <strong>{{</strong>user.last_name\n' +
    '                        	        <strong>}}</strong> - The user\'s last name.</p>\n' +
    '                        	    <p class="mb0">\n' +
    '                        	        <strong>{{</strong>user.activation_token\n' +
    '                        	        <strong>}}</strong> - The activation token for activating the user\'s account.</p>\n' +
    '                        	    <p class="mb0">\n' +
    '                        	        <strong>{{</strong>user.uid\n' +
    '                        	        <strong>}}</strong> - The user\'s unique identifier.</p>\n' +
    '                        	</div>\n' +
    '                        	<fieldset>\n' +
    '                    		  	<div class="form-group">\n' +
    '                    				    <label class="col-md-2 control-label">Subject</label>\n' +
    '                    				    <div class="col-md-10">\n' +
    '                    				        <input type="text" class="form-control" ng-model="appSettings.activation_template.subject" ng-value="appSettings.activation_template.subject">\n' +
    '                    				    </div>\n' +
    '                    				</div>\n' +
    '                    				<div class="form-group">\n' +
    '                    				    <label class="col-md-2 control-label">Reply to</label>\n' +
    '                    				    <div class="col-md-10">\n' +
    '                    				        <input type="text" class="form-control" ng-model="appSettings.activation_template.reply_to" ng-value="appSettings.activation_template.reply_to">\n' +
    '                    				    </div>\n' +
    '                    				</div>\n' +
    '                    				<div class="form-group">\n' +
    '                    				    <label class="col-md-2 control-label">Message</label>\n' +
    '                    				    <div class="col-md-10">\n' +
    '                    				    		<textarea class="form-control" rows="6" ng-model="appSettings.activation_template.template">{{appSettings.activation_template.template}}</textarea>\n' +
    '                    				    </div>\n' +
    '                    				</div>\n' +
    '                        	</fieldset>\n' +
    '                        	<div class="form-actions">\n' +
    '                        			<div class="button-wrap">\n' +
    '                        			    <button btn-loader="revertSettings.activation_template.save" loading-text="Saving..." class="btn btn-labeled btn-primary btn-sm pull-right" data-loading-text="Saving..." ng-click="saveMailSettings(\'activation_template\')">\n' +
    '                        			        <span class="btn-label">\n' +
    '                        			          <i class="fa fa-check"></i>\n' +
    '                        			        </span>\n' +
    '                        			        <span class="js-btn-text">\n' +
    '                        			         	Save\n' +
    '                        			        </span>\n' +
    '                        			    </button>\n' +
    '                                        <button btn-loader="revertSettings.activation_template.reset" loading-text="Reseting..." class="btn btn-labeled btn-default btn-sm pull-left" data-loading-text="Reseting..." ng-click="resetTemplateSettings(\'activation_template\')">\n' +
    '                                            <span class="btn-label">\n' +
    '                                                <i class="fa fa-refresh"></i>\n' +
    '                                            </span>\n' +
    '                                            <span class="js-btn-text">Reset template</span>\n' +
    '                                        </button>\n' +
    '                        			</div>\n' +
    '                        	</div>\n' +
    '                       	</div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <!-- end widget -->\n' +
    '\n' +
    '        </article>\n' +
    '        <!-- END COL -->\n' +
    '\n' +
    '\n' +
    '        <!-- NEW COL START -->\n' +
    '        <article class="col-sm-12 col-md-6 col-lg-6">\n' +
    '        	<div class="jarviswidget jarviswidget-color-blueDark">\n' +
    '        	    <header>\n' +
    '        	        <h2>Welcome mail</h2>\n' +
    '        	    </header>\n' +
    '\n' +
    '        	    <!-- widget div-->\n' +
    '        	    <div role="content">\n' +
    '        	        <!-- widget content -->\n' +
    '        	        <div class="widget-body">\n' +
    '        	            <div class="form-horizontal">\n' +
    '        	            	<div class="alert alert-info mts mbm">\n' +
    '                            <p>Customize the e-mail sent to your users when they verify their email address. The variables that can be used are the same as that of the activation template.</p>\n' +
    '                        </div>\n' +
    '        	            	<fieldset>\n' +
    '        	        		  	<div class="form-group">\n' +
    '        	        				    <label class="col-md-2 control-label">Subject</label>\n' +
    '        	        				    <div class="col-md-10">\n' +
    '        	        				        <input type="text" class="form-control" ng-model="appSettings.welcome_template.subject" ng-value="appSettings.welcome_template.subject">\n' +
    '        	        				    </div>\n' +
    '        	        				</div>\n' +
    '        	        				<div class="form-group">\n' +
    '        	        				    <label class="col-md-2 control-label">Reply to</label>\n' +
    '        	        				    <div class="col-md-10">\n' +
    '        	        				        <input type="text" class="form-control" ng-model="appSettings.welcome_template.reply_to" ng-value="appSettings.welcome_template.reply_to">\n' +
    '        	        				    </div>\n' +
    '        	        				</div>\n' +
    '        	        				<div class="form-group">\n' +
    '        	        				    <label class="col-md-2 control-label">Message</label>\n' +
    '        	        				    <div class="col-md-10">\n' +
    '        	        				    		<textarea class="form-control" rows="6" ng-model="appSettings.welcome_template.template">{{appSettings.welcome_template.template}}</textarea>\n' +
    '        	        				    </div>\n' +
    '        	        				</div>\n' +
    '        	            	</fieldset>\n' +
    '        	            	<div class="form-actions">\n' +
    '                                    <div class="button-wrap">\n' +
    '        	            			    <button btn-loader="revertSettings.welcome_template.save" loading-text="Saving..." class="btn btn-labeled btn-primary btn-sm pull-right" data-loading-text="Saving..." ng-click="saveMailSettings(\'welcome_template\')">\n' +
    '        	            			        <span class="btn-label">\n' +
    '        	            			          <i class="fa fa-check"></i>\n' +
    '        	            			        </span>\n' +
    '        	            			        <span class="js-btn-text">\n' +
    '        	            			         	Save\n' +
    '        	            			        </span>\n' +
    '        	            			    </button>\n' +
    '                                        <button btn-loader="revertSettings.welcome_template.reset" loading-text="Reseting..."  class="btn btn-labeled btn-default btn-sm pull-left" data-loading-text="Reseting..." ng-click="resetTemplateSettings(\'welcome_template\')">\n' +
    '                                            <span class="btn-label">\n' +
    '                                                <i class="fa fa-refresh"></i>\n' +
    '                                            </span>\n' +
    '                                            <span class="js-btn-text">Reset template</span>\n' +
    '                                        </button>\n' +
    '        	            			</div>\n' +
    '        	            	</div>\n' +
    '        	           	</div>\n' +
    '        	        </div>\n' +
    '        	    </div>\n' +
    '        	</div>\n' +
    '        	<!-- end widget -->\n' +
    '\n' +
    '        	<div class="jarviswidget jarviswidget-color-blueDark">\n' +
    '        	    <header>\n' +
    '        	        <h2>Forgot password mail</h2>\n' +
    '        	    </header>\n' +
    '\n' +
    '        	    <!-- widget div-->\n' +
    '        	    <div role="content">\n' +
    '        	        <!-- widget content -->\n' +
    '        	        <div class="widget-body">\n' +
    '        	            <div class="form-horizontal settings-form">\n' +
    '        	            	<div class="alert alert-info mts mbm">\n' +
    '                            <p>Customize the forgot password template. The variables are same as in activation template. In addititon, you can specify additional variables as given below:</p>\n' +
    '                        </div>\n' +
    '        	            	<fieldset>\n' +
    '        	        		  	<div class="form-group">\n' +
    '        	        				    <label class="col-md-2 control-label">Subject</label>\n' +
    '        	        				    <div class="col-md-10">\n' +
    '        	        				        <input type="text" class="form-control" ng-model="appSettings.forgot_password_template.subject" ng-value="appSettings.forgot_password_template.subject">\n' +
    '        	        				    </div>\n' +
    '        	        				</div>\n' +
    '        	        				<div class="form-group">\n' +
    '        	        				    <label class="col-md-2 control-label">Reply to</label>\n' +
    '        	        				    <div class="col-md-10">\n' +
    '        	        				        <input type="text" class="form-control" ng-model="appSettings.forgot_password_template.reply_to" ng-value="appSettings.forgot_password_template.reply_to">\n' +
    '        	        				    </div>\n' +
    '        	        				</div>\n' +
    '        	        				<div class="form-group">\n' +
    '        	        				    <label class="col-md-2 control-label">Message</label>\n' +
    '        	        				    <div class="col-md-10">\n' +
    '        	        				    		<textarea class="form-control" rows="6" ng-model="appSettings.forgot_password_template.template">{{appSettings.forgot_password_template.template}}</textarea>\n' +
    '        	        				    </div>\n' +
    '        	        				</div>\n' +
    '        	            	</fieldset>\n' +
    '        	            	<div class="form-actions">\n' +
    '        	            			<div class="button-wrap">\n' +
    '                                         <button btn-loader="revertSettings.forgot_password_template.save" loading-text="Saving..." class="btn btn-labeled btn-primary btn-sm pull-right" data-loading-text="Saving..." ng-click="saveMailSettings(\'forgot_password_template\')">\n' +
    '                                            <span class="btn-label">\n' +
    '                                              <i class="fa fa-check"></i>\n' +
    '                                            </span>\n' +
    '                                            <span class="js-btn-text">\n' +
    '                                                Save\n' +
    '                                            </span>\n' +
    '                                        </button>\n' +
    '        	            			    <button btn-loader="revertSettings.forgot_password_template.reset" loading-text="Reseting..." class="btn btn-labeled btn-default btn-sm pull-left" data-loading-text="Reseting..." ng-click="resetTemplateSettings(\'forgot_password_template\')">\n' +
    '        	            			        <span class="btn-label">\n' +
    '        	            			        	<i class="fa fa-refresh"></i>\n' +
    '        	            			        </span>\n' +
    '                                            <span class="js-btn-text">Reset template</span>\n' +
    '        	            			    </button>\n' +
    '        	            			</div>\n' +
    '        	            	</div>\n' +
    '        	           	</div>\n' +
    '        	        </div>\n' +
    '        	    </div>\n' +
    '        	</div>\n' +
    '        	<!-- end widget -->\n' +
    '            \n' +
    '        </article>\n' +
    '\n' +
    '    </div>\n' +
    '    <!-- END ROW -->\n' +
    '</section>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\tenants\\partials\\tenant-modal.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="cancel()">\n' +
    '        ×\n' +
    '    </button>\n' +
    '    <h3 class="modal-title">\n' +
    '        <span ng-if="!isTenantPresent">Add new tenant</span>\n' +
    '        <span ng-if="isTenantPresent">Edit tenant</span>\n' +
    '    </h3>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '  <div class="form-horizontal">\n' +
    '      <fieldset>\n' +
    '          <div class="form-group">\n' +
    '              <label class="col-md-2 control-label">UID</label>\n' +
    '              <div class="col-md-10">\n' +
    '            		<input type="text" class="form-control" ng-model="data.uid" ng-value="data.uid" ng-disabled="isTenantPresent">\n' +
    '              </div>\n' +
    '          </div>\n' +
    '          <div class="form-group">\n' +
    '              <label class="col-md-2 control-label">Name</label>\n' +
    '              <div class="col-md-10">\n' +
    '                  <input class="form-control" ng-model="data.name" ng-value="data.name">\n' +
    '              </div>\n' +
    '          </div>\n' +
    '          <div class="form-group">\n' +
    '              <label class="col-md-2 control-label">Description</label>\n' +
    '              <div class="col-md-10">\n' +
    '                  <textarea ng-model="data.description" ng-value="data.description" class="form-control"></textarea>\n' +
    '              </div>\n' +
    '          </div>\n' +
    '      </fieldset>\n' +
    '  </div>\n' +
    '</div>\n' +
    '\n' +
    '<div class="modal-footer">\n' +
    '    <div class="button-wrap">\n' +
    '        <button  btn-loader="btnStatus" loading-text="Saving..." class="btn btn-labeled btn-primary btn-sm pull-right" ng-click="ok()">\n' +
    '            <span class="btn-label">\n' +
    '              <i class="fa fa-check"></i>\n' +
    '            </span>\n' +
    '            <span class="js-btn-text">\n' +
    '              Done\n' +
    '            </span>\n' +
    '        </button >\n' +
    '        <button  ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '            </span>Cancel\n' +
    '        </button >\n' +
    '    </div>\n' +
    '</div>\n' +
    '    \n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\tenants\\partials\\tenants.html":[function(require,module,exports){
module.exports = '<div class="button-wrap mb10">\n' +
    '    <a ng-click="createNewTenant()" class="btn btn-labeled btn-primary pull-left">\n' +
    '        <span class="btn-label"><i class="fa fa-plus-square"></i>\n' +
    '        </span>Add a tenant\n' +
    '    </a>\n' +
    '</div>\n' +
    '\n' +
    '<div class="data-tbl-wrap">\n' +
    '    <table tr-ng-grid="" items="listRows" class="table data-tbl" page-items="myPageItemsCount" total-items="myItemsTotalCount" current-page="mycurrentPage" on-data-required="onServerSideItemsRequested(mycurrentPage, filterBy, filterByFields, orderBy, orderByReverse,myPageItemsCount, gridItem.uid)" enable-selections="false">\n' +
    '        <thead>\n' +
    '            <tr class="dt-head-tr" ng-show="listRows.length">\n' +
    '                <th class="dt-{{column.key}}-th" ng-repeat=\'column in classColumns\' field-name="{{column.label}}" data-toggle="{{column.dataToggle}}" data-hide="{{column.dataHide}}">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        {{column.label}} \n' +
    '                    </div>\n' +
    '                </th>\n' +
    '                <th class="dt-actions-th">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        Select Tenant\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '                <th class="dt-actions-th">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        Actions\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '        </thead>\n' +
    '        <tbody>\n' +
    '            <tr>\n' +
    '                <td class="dt-{{column.key}}-td" ng-repeat=\'column in classColumns\' field-name="{{column.label}}" title="{{gridItem[column.label]}}">\n' +
    '                    \n' +
    '                    <span>{{gridItem[column.key]}}</span>\n' +
    '                </td>\n' +
    '                <td>\n' +
    '                    <div class="checkbox cf-radio mt0 mb0">\n' +
    '                        <label>\n' +
    '                            <input type="checkbox" class="checkbox style-0 js-tenant-checkbox" ng-model="gridItem.selectedTenant" ng-click="selectTenant($event, gridItem)"></input>\n' +
    '                            <span></span>\n' +
    '                        </label>\n' +
    '                    </div>\n' +
    '                </td>\n' +
    '                <td>\n' +
    '                     <span title="{{act}}" ng-repeat=\'act in actions\' ng-click=\'action(act, gridItem)\' class="hand fa fa-lg edit_evnt ml10 dt-action-item" ng-class="{\'fa-pencil\':act == \'edit\', \'fa-trash-o\' : act == \'delete\'}"></span>                   \n' +
    '                </td>\n' +
    '            </tr>\n' +
    '        </tbody>\n' +
    '        <tfoot class="hidden">\n' +
    '        </tfoot>\n' +
    '    </table>\n' +
    '    <div class="no-msg" ng-show="!listRows.length">\n' +
    '        No tenants created yet.\n' +
    '    </div>\n' +
    '</div>\n' +
    '\n' +
    '\n' +
    '\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\tenants\\tenants-ctrl.js":[function(require,module,exports){
'use strict';
var tenantModal = require('./partials/tenant-modal.html')

module.exports = [
	'$scope',
	'$state',
	'$location',
	'builtApi',
	'alertService',
	'utilsService',
	'modalService',
	'currentUser',
	'tenants',
	'constants',
	'dataGridService',
	'manageUtils',
	'appCacheService',
	function($scope, $state, $location, builtApi, Alert, Utils, Modal, currentUser, tenants, constants, dataGrid, manageUtils, appCacheService) {
		var apiKey = $state.params.api_key;
		var dataTableContainer = $('.data-tbl');
		var currentApp = appCacheService.get('currentApp');

		var activeTenants = (typeof(currentApp.discrete_variables.tenant) === 'undefined' || currentApp.discrete_variables.tenant === "built_default_tenant") ? false : true;
		if (activeTenants) {
			$scope.selectedTenant = currentApp.discrete_variables.tenant;
		}

		//Table data
		$scope.dataGrid = dataGrid;
		$scope.listRows = [];
		$scope.actions = ['edit', 'delete'];
		$scope.classColumns = [{
			'label': 'Tenant UID',
			'key': 'uid',
		}, {
			'label': 'Tenant Name',
			'key': 'name'
		}];

		dataGrid.addResponsiveAttrs($scope.classColumns, 'phone');

		//paging
		var pagno = 0;
		$scope.myPageItemsCount = constants.queryLimit;
		$scope.mycurrentPage = (pagno < 0 ? 0 : pagno) || 0;


		$scope.onServerSideItemsRequested = function(currentPage, filterBy, filterByFields, orderBy, orderByReverse, myPageItemsCount, gridItemuid) {


			$scope.listRows = tenants.map(function(tenant) {
				if (tenant.uid === $scope.selectedTenant) {
					tenant['selectedTenant'] = true;
				} else {
					tenant['selectedTenant'] = false;
				}
				return tenant;
			});


			$scope.myItemsTotalCount = tenants.length;

			dataGrid.initFootable(dataTableContainer);


		}

		$scope.action = function(act, tenant) {
			if (act === 'edit') {
				editTenant(tenant);
				return;
			}

			if (act === 'delete') {
				deleteTenant(tenant);
				return;
			}
		}

		function deleteTenant(tenant) {
				Alert.confirm({
						title: 'Delete tenant',
						content: 'Are you sure you want to delete this tenant?'
					})
					.then(function() {
						if (builtApi.getHeaders().tenant_uid === tenant.uid) {
							builtApi.removeHeaderKey('tenant_uid');
							delete currentApp.discrete_variables.tenant;
							appCacheService.remove('currentTenant');
							updateAppSettings(getAppSettings());
						}


						builtApi.Tenants.deleteTenant({
								options: {
									tenantUid: tenant.uid
								},
								body: {
									app_api_key: apiKey,
									authtoken: currentUser.authtoken,
									tenant_uid: tenant.uid
								}
							})
							.then(function(res) {
								$scope.listRows.splice($scope.listRows.indexOf(tenant), 1);
								
								Alert.notify({
									title: 'Success',
									content: res.notice,
									type: 'success'
								});
							}, function(xhr) {
								xhr = xhr.entity;
								Alert.notify({
									title: xhr.error_message,
									content: Utils.parseError(xhr),
									type: 'error'
								});
							})
					})
			}
			//Select tenant
		function editTenant(tenant) {

			var index = $scope.listRows.indexOf(tenant);
			Modal.openModal({
					uid: tenant.uid,
					name: tenant.name,
					description: tenant.description
				}, tenantModal, editTenantModalCtrl)
				.then(function(res) {
					$scope.listRows.splice(index, 1, res.tenant);
					Alert.notify({
						title: 'Success',
						content: res.notice,
						type: 'success'
					});
				})
		}

		var editTenantModalCtrl = function($scope, $modalInstance, data) {
			$scope.data = data;
			$scope.isTenantPresent = true;
			$scope.btnStatus = false;
			$scope.ok = function() {
				$scope.btnStatus = true;
				builtApi.Tenants.editTenant({
						options: {
							tenantUid: $scope.data.uid
						},
						body: {
							app_api_key: apiKey,
							authtoken: currentUser.authtoken,
							tenant: _.pick($scope.data, 'name', 'description')
						}
					})
					.then(function(res) {
						$scope.btnStatus = false;
						res["data"] = data;
						$modalInstance.close(res);
					}, function(xhr) {
						$scope.btnStatus = false;
						xhr = xhr.entity;
						Alert.notify({
							title: xhr.error_message,
							content: Utils.parseError(xhr),
							type: 'error'
						});
					});
			}
			$scope.cancel = function() {
				$modalInstance.dismiss('cancel');
			};
		}


		//Tenant Selection for current App
		$scope.selectTenant = function(e, tenant) {
			var app = getAppSettings();

			builtApi.removeHeaderKey('tenant_uid');

			if (e.currentTarget.checked) {
				$('.js-tenant-checkbox').prop('checked', false);
				$(e.currentTarget).prop('checked', true);
				app.discrete_variables.tenant = tenant.uid;
			}

			manageUtils.setAppHeaders(app);

			updateAppSettings(app)
				.then(function(res) {
					currentApp.discrete_variables.tenant = app.discrete_variables.tenant;
					Alert.notify({
						title: 'Success',
						content: "Woot! Tenant was updated successfully.",
						type: 'success'
					});
				}, function(xhr) {
					xhr = xhr.entity;
					Alert.notify({
						title: xhr.error_message,
						content: Utils.parseError(xhr),
						type: 'error'
					});
				});
		}

		$scope.createNewTenant = function() {
			Modal.openModal({
					uid: "",
					name: "",
					description: ""
				}, tenantModal, newTenantModalCtrl)
				.then(function(res) {
					$scope.listRows.push(res.tenant);
					Alert.notify({
						title: 'Success',
						content: res.notice,
						type: 'success'
					});
				});
		}

		var newTenantModalCtrl = function($scope, $modalInstance, data) {
			$scope.data = data;
			$scope.isTenantPresent = false;
			$scope.btnStatus = false;
			$scope.ok = function() {
				$scope.btnStatus = true;
				builtApi.Tenants.addTenant({
						body: {
							app_api_key: apiKey,
							authtoken: currentUser.authtoken,
							tenant: $scope.data
						}
					})
					.then(function(res) {
						$scope.btnStatus = false;
						res["data"] = data;
						$modalInstance.close(res);
					}, function(xhr) {
						$scope.btnStatus = false;
						xhr = xhr.entity;
						Alert.notify({
							title: xhr.error_message,
							content: Utils.parseError(xhr),
							type: 'error'
						});
					});
			}

			$scope.cancel = function() {
				$modalInstance.dismiss('cancel');
			};
		}

		function getAppSettings() {
			var app = {
				api_key: currentApp.api_key
			};

			var discreteVariables = {
				tenant: "built_default_tenant"
			}

			app['discrete_variables'] = _.extend({}, (currentApp['discrete_variables'] ? currentApp['discrete_variables'] : {}), discreteVariables);
			return app;
		}

		function updateAppSettings(app) {
			return builtApi.Application.postAppSettings({
				options: {
					settingType: "settings"
				},
				body: {
					app_api_key: apiKey,
					app_settings: app
				}
			})
		}
	}
]
},{"./partials/tenant-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\tenants\\partials\\tenant-modal.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\settings.js":[function(require,module,exports){
'use strict';

var angular                 = require('third-party-modules/angular');
var uiRouter                = require('third-party-modules/angular-ui-router');
var resolvers               = require('../resolvers');
var generalCtrl             = require('./controllers/general/general-ctrl');
var collaboratorsCtrl       = require('./controllers/collaborators/collaborators-ctrl');
var mailCtrl                = require('./controllers/mail/mail-ctrl');
var tenantsCtrl             = require('./controllers/tenants/tenants-ctrl');
var infoCtrl                = require('./controllers/info/info-ctrl');

var generalTemplate         = require('./controllers/general/partials/general.html');
var collaboratorsTemplate   = require('./controllers/collaborators/partials/collaborators.html');
var mailTemplate            = require('./controllers/mail/partials/mail.html');
var tenantsTemplate         = require('./controllers/tenants/partials/tenants.html');
var infoTemplate            = require('./controllers/info/partials/info.html');
require('third-party-modules/angular-tr-ng-grid');

module.exports = angular.module('built.settings', ['ui.router'])
  .controller('generalCtrl', generalCtrl)
  .controller('collaboratorsCtrl', collaboratorsCtrl)
  .controller('mailCtrl', mailCtrl)
  .controller('tenantsCtrl', tenantsCtrl)
  //.controller('downloadsCtrl', downloadsCtrl)
  .controller('infoCtrl', infoCtrl)
  .config([
    '$stateProvider',
    function($stateProvider) {
      $stateProvider
        .state('app.dashboard.general-settings', {
          url: '/settings/general',
          template: generalTemplate,
          resolve: resolvers.resolve(['appSettings']),
          controller: 'generalCtrl',
          data: {
            breadcrumbs: [{
              name: "Settings"
            }, {
              name: 'General'
            }]
          }
        })
      .state('app.dashboard.collaborators-settings', {
        url: '/settings/collaborators',
        template: collaboratorsTemplate,
        resolve: resolvers.resolve(['collaborators']),
        controller: 'collaboratorsCtrl',
        data: {
            breadcrumbs: [{
              name: "Settings"
            }, {
              name: 'Collaborators'
            }]
          }
      })
      .state('app.dashboard.mail-settings', {
        url: '/settings/mail',
        template: mailTemplate,
        resolve: resolvers.resolve(['appSettings']),
        controller: 'mailCtrl',
        data: {
            breadcrumbs: [{
              name: "Settings"
            }, {
              name: 'Mail'
            }]
          }
      })
      .state('app.dashboard.tenants-settings', {
        url: '/settings/tenants',
        template: tenantsTemplate,
        resolve: resolvers.resolve(['currentUser', 'tenants']),
        controller: 'tenantsCtrl',
        data: {
            breadcrumbs: [{
              name: "Settings"
            }, {
              name: 'Tenants'
            }]
          }
      })
      // .state('app.dashboard.downloads-settings', {
      //   url: '/settings/downloads',
      //   template: downloadsTemplate,
      //   resolve: resolvers.resolve(['currentApiHost']),
      //   controller: 'downloadsCtrl'
      // })
      .state('app.dashboard.info-settings', {
        url: '/settings/info',
        template: infoTemplate,
        controller: 'infoCtrl',
        data: {
            breadcrumbs: [{
              name: "Settings"
            }, {
              name: 'Download and Info.'
            }]
          }
      })
    }
  ])
  .run(["$rootScope",
    "menuService",
    function($rootScope, menu) {
      var menuItem = {
        id: 'settings',
        title: 'Settings',
        order: 10,
        icon: 'fa-gear',
        sub_menu: [{
          id: 'general-settings',
          title: 'General',
          state: 'app.dashboard.general-settings'
        }, {
          id: 'collaborators-settings',
          title: 'Collaborators',
          state: 'app.dashboard.collaborators-settings'
        }, {
          id: 'mail-settings',
          title: 'Mail',
          state: 'app.dashboard.mail-settings'
        }, {
          id: 'tenants-settings',
          title: 'Tenants',
          state: 'app.dashboard.tenants-settings'
        },
        //  {
        //   id: 'downloads-settings',
        //   title: 'Downloads',
        //   state: 'app.dashboard.downloads-settings'
        // },
         {
          id: 'info-settings',
          title: 'Download and Info.',
          state: 'app.dashboard.info-settings'
        }]
      }
      menu.add(menuItem);
    }
  ]);
},{"../resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/collaborators/collaborators-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\collaborators\\collaborators-ctrl.js","./controllers/collaborators/partials/collaborators.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\collaborators\\partials\\collaborators.html","./controllers/general/general-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\general\\general-ctrl.js","./controllers/general/partials/general.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\general\\partials\\general.html","./controllers/info/info-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\info\\info-ctrl.js","./controllers/info/partials/info.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\info\\partials\\info.html","./controllers/mail/mail-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\mail\\mail-ctrl.js","./controllers/mail/partials/mail.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\mail\\partials\\mail.html","./controllers/tenants/partials/tenants.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\tenants\\partials\\tenants.html","./controllers/tenants/tenants-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\settings\\controllers\\tenants\\tenants-ctrl.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-tr-ng-grid":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-tr-ng-grid\\trnggrid.shim.js","third-party-modules/angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-router\\release\\angular-ui-router.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\uploads\\controllers\\uploads-ctrl.js":[function(require,module,exports){
'use strict';
require('third-party-modules/footable');
var uploadModalTemplate = require('../partials/upload-modal.html');
module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'currentUser',
  'currentApiHost',
  'alertService',
  'utilsService',
  'modalService',
  'appAclService',
  'postMessageUploadService',
  'constants',
  'dataGridService',
  '$timeout',
  function($scope, $location, $state, builtApi, currentUser, currentApiHost, Alert, Utils, Modal, appAclService, postMessageUploadService, constants, dataGrid, $timeout) {

    var previousFilter = undefined;
    var apiKey = $state.params.api_key;
    var dataTableContainer = $('.data-tbl');
    $scope.actions = ['acl', 'delete'];
    $scope.authtoken = currentUser.authtoken;
    $scope.loading = true;

    //Table data
    $scope.dataGrid = dataGrid;
    $scope.listRows = [];
    $scope.classColumns = [{
      'label': 'File',
      'key': 'file'
    }, {
      'label': 'UID',
      'key': 'uid'
    }, {
      'label': 'Link To File',
      'key': 'url'
    }];

    dataGrid.addResponsiveAttrs($scope.classColumns, 'phone, tablet');

    //paging
    var pagno = (parseInt($location.search().p) - 1);
    $scope.myPageItemsCount = constants.queryLimit;
    $scope.mycurrentPage = (pagno < 0 ? 0 : pagno) || 0;

    $scope.onServerSideItemsRequested = function(currentPage, filterBy, filterByFields, orderBy, orderByReverse, myPageItemsCount, gridItemuid) {
      $scope.loading = true;

      var skip = currentPage * myPageItemsCount;

      dataGrid.checkFilter(filterBy, previousFilter, $scope.mycurrentPage, skip);

      var params = {
        options: {
          uploadType: "",
          query: {
            skip: skip,
            limit: myPageItemsCount,
            desc: 'created_at',
            include_count: true
          }
        }
      };

      if (filterBy) {
        params.options.query.query = {
          filename: {
            '$regex': filterBy,
            '$options': 'i'
          }
        }
      }

      if ($state.current.name.indexOf('images') != -1)
        params.options["uploadType"] = "images";

      if ($state.current.name.indexOf('videos') != -1)
        params.options["uploadType"] = "videos";


      params.options.query.query = JSON.stringify(params.options.query.query);

      builtApi.File.getUpload(params)
        .then(function(data) {

          $scope.listRows = data.uploads.map(function(obj) {

            //Below interpolation makes [filename, image, filesize] references under one key('file') for single iteration in trngrid 
            var tempObject = obj;
            tempObject['file'] = {
              filename: obj.filename,
              url: addAuthToken(obj.url),
              isImage: Utils.isImage(obj.filename),
              file_size: Utils.getFileInfo(obj)
            }
            return tempObject;
          });

          // Assign total count for trngrid
          $scope.myItemsTotalCount = data.count;

          dataGrid.initFootable(dataTableContainer);

          $("[rel=tooltip]").tooltip();

          //url paging allocation
          $location.search({
            p: currentPage + 1
          })
        })
        .finally(function() {
          $scope.loading = false;
        });
    }

    $scope.action = function(act, upload) {
      if (act === 'defaultAcl') {
        configureDefaultAcl();
        return;
      }
      if (act === 'acl') {
        configureUploadAcl(upload);
        return;
      }
      if (act === 'upload') {
        uploadFile();
        return;
      }
      if (act === 'delete') {
        deleteUpload(upload);
        return;
      }
    }

    function configureUploadAcl(upload) {

      var modalData = {
        ACL: _.cloneDeep(upload.ACL || {}),
        rights: ["read", "update", "delete"]
      };

      Modal.openModal(modalData, appAclService.aclOverlayTemplate, appAclService.aclCtrl, {
          keyboard: false
        })
        .then(function(res) {
          var params = {};
          params["options"] = {
            uploadUid: upload.uid
          };
          params["body"] = {
            app_api_key: apiKey,
            upload_uid: upload.uid,
            upload: {
              ACL: res.ACL
            }
          }

          builtApi.File.updateUploadACl(params)
            .then(function(res) {

              // Update upload object.
              upload.ACL = res.upload.ACL ? res.upload.ACL : {};

              //Notify on post upload Acl success
              Alert.notify({
                title: 'Success',
                content: res.notice,
                type: 'success'
              });
            }, function(xhr) {

              //Notify on file Acl failure
              Alert.notify({
                title: xhr.entity.error_message,
                content: Utils.parseError(xhr.entity),
                type: 'error'
              })
            })
        })
    }


    function configureDefaultAcl() {
      //set default_acl as parameter
      var params = {
        options: {
          uploadType: 'default_acl'
        }
      }

      //Get call for default_acl
      builtApi.File.getUpload(params)
        .then(function(defaultAcl) {
          var modalData = {
            ACL: _.cloneDeep(defaultAcl.DEFAULT_ACL),
            isDefault: true,
            rights: ["create", "read", "update", "delete"]
          };

          Modal.openModal(modalData, appAclService.aclOverlayTemplate, appAclService.aclCtrl, {
              keyboard: false
            })
            .then(function(res) {

              builtApi.File.postDefaultACl({
                  "body": {
                    "app_api_key": apiKey,
                    "DEFAULT_ACL": res.ACL
                  }
                })
                .then(function(res) {

                  //Notify on post upload Acl success
                  Alert.notify({
                    title: 'Success',
                    content: res.notice,
                    type: 'success'
                  });
                }, function(xhr) {

                  //Notify on file Acl failure
                  Alert.notify({
                    title: xhr.entity.error_message,
                    content: Utils.parseError(xhr.entity),
                    type: 'error'
                  })
                })
            })
        })

    }

    function uploadFile() {
      //Common Modal service 
      Modal.openModal({
        tags: "",
        apiKey: apiKey,
        apihost: currentApiHost.api_host,
        randvalue: Utils.getRand(),
        authtoken: currentUser.authtoken,
        url: "uploads",
        tenant_uid: builtApi.getHeaders().tenant_uid || ""
      }, uploadModalTemplate, ModalInstanceCtrl, {
        size: 'sm'
      }).then(function(res) {
        console.log("response in upload calll", res)
        //Below interpolation makes [filename, image, filesize] references under one key('file') for single iteration in trngrid 
        res.upload['file'] = {
          filename: res.upload.filename,
          url: res.upload.url,
          isImage: Utils.isImage(res.upload.filename),
          file_size: Utils.bytesToSize(res.upload.file_size)
        }

        //Prepend the upload to ListRows
        $scope.listRows.unshift(res.upload);

        //Increase the total upload count for trngrid
        $scope.myItemsTotalCount = $scope.myItemsTotalCount + 1;

        //Notify on file upload success
        Alert.notify({
          title: 'Success',
          content: res.notice,
          type: 'success'
        });
      });
    }

    var ModalInstanceCtrl = function($scope, $modalInstance, data) {
      $scope.data = data;
      $scope.progressstatus = false;

      $timeout(function() {
        $('#js-upload-tags').select2({
            multiple: true,
            tags: [],
            tokenSeparators: []
          })
          .on('change', function(e) {
            $scope.data.tags = e.val.join(',');
            $scope.$apply();
          });
      })

      $scope.ok = function() {
        if ($('.js-upload-selector').val()) {

          $scope.progressstatus = true;
          $('.modal-body').find('form').trigger('submit');
          postMessageUploadService.getPostMessage(data.randvalue).then(function(res) {
            if (res.hasOwnProperty('error_code')) {
              $scope.progressstatus = false;
              Alert.notify({
                title: "File upload failed!",
                content: res.error_message,
                type: 'error'
              })
            }else{
              $scope.progressstatus = false;
              $modalInstance.close(res);
            }
          });
        } else
          Alert.notify({
            title: "Invalid input",
            content: "Oops! the input file is either blank or invalid",
            type: 'error'
          });
      };
      $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
      };
    }

    //Delete Single Upload
    function deleteUpload(upload) {
      var index = $scope.listRows.indexOf(upload);

      Alert.confirm({
          title: 'Delete Upload',
          content: 'Are you sure you want to delete this upload?'
        })
        .then(function() {
          var params = {};
          params["options"] = {
            uploadUid: upload.uid
          };

          builtApi.File.deleteOne(params)
            .then(function(data) {
              //Clear the Selection
              $scope.selectedRows = [];

              //remove row from list of uploads
              $scope.listRows.splice(index, 1);

              //Decrement the count of total uploads by 1
              $scope.myItemsTotalCount = $scope.myItemsTotalCount - 1;

              //Notify on successful deletion of upload
              Alert.notify({
                title: 'Success',
                content: data.notice,
                type: 'success'
              });
            }, function(xhr) {
              Alert.notify({
                title: xhr.entity.error_message,
                content: Utils.parseError(xhr.entity),
                type: 'error'
              });
            })
        });
    }

    function addAuthToken(url) {
      return url += '?AUTHTOKEN=' + $scope.authtoken;
    }

    function navigateTo(act, params) {
      $state.go('app.dashboard.classes-' + act, params);
    }
  }
]
},{"../partials/upload-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\uploads\\partials\\upload-modal.html","third-party-modules/footable":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\footable\\footable.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\uploads\\partials\\upload-modal.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <h3 class="modal-title">Upload File</h3>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '    <fieldset>\n' +
    '        <div ng-show="progressstatus" class="object-asset-progress">\n' +
    '            <div class="progress progress-striped active">\n' +
    '                <div class="progress-bar bg-color-darken" role="progressbar" style="width: 100%">\n' +
    '                    Uploading...\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div class="form-group"  ng-show="!progressstatus" file-upload authtoken="data.authtoken" url="data.url" apikey="data.apiKey" apihost="data.apihost" randvalue="data.randvalue">\n' +
    '            <input type="hidden" name="TENANT_UID" value="{{data.tenant_uid}}" ng-if="data.tenant_uid">\n' +
    '            <input type="file" class="btn btn-default js-upload-selector" name="upload[upload]" required>\n' +
    '            <input type="hidden" name="upload[tags]" ng-model="data.tags" ng-value="data.tags">\n' +
    '        </div>\n' +
    '        <div class="form-group">\n' +
    '            <label>Tags</label>\n' +
    '            <div type="hidden" id="js-upload-tags"/>\n' +
    '        </div>\n' +
    '    </fieldset>\n' +
    '</div>\n' +
    '<div class="modal-footer">\n' +
    '    <div class="button-wrap">\n' +
    '        <button btn-loader="progressstatus" loading-text="Uploading..." class="btn btn-labeled btn-primary btn-sm pull-right" ng-click="ok()">\n' +
    '            <span class="btn-label">\n' +
    '              <i class="fa fa-check"></i>\n' +
    '            </span>\n' +
    '            <span class="js-btn-text">\n' +
    '              Upload\n' +
    '            </span>\n' +
    '        </button >\n' +
    '        <button  ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '            </span>Cancel\n' +
    '        </button >\n' +
    '    </div>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\uploads\\partials\\uploads.html":[function(require,module,exports){
module.exports = '<div class="button-wrap mb10">\n' +
    '    <a href="" ng-click="action(\'upload\')" class="btn btn-labeled btn-primary pull-left mr10">\n' +
    '        <span class="btn-label"><i class="fa fa-plus-square"></i>\n' +
    '        </span>Upload few file\n' +
    '    </a>\n' +
    '    <a href="" ng-click="action(\'defaultAcl\')" class="btn btn-labeled btn-default pull-left">\n' +
    '        <span class="btn-label"><i class="fa fa-lock"></i>\n' +
    '        </span>Configure default ACL\n' +
    '    </a>\n' +
    '</div>\n' +
    '\n' +
    '<div class="data-tbl-wrap">\n' +
    '    <table tr-ng-grid="" items="listRows" class="table data-tbl" selected-items="selectedRows" page-items="myPageItemsCount" total-items="myItemsTotalCount" current-page="mycurrentPage" on-data-required="onServerSideItemsRequested(mycurrentPage, filterBy, filterByFields, orderBy, orderByReverse,myPageItemsCount, gridItem.uid)" enable-selections="false">\n' +
    '        <thead>\n' +
    '            <tr class="dt-tools">\n' +
    '                <th colspan="100">\n' +
    '                    <div class="row">\n' +
    '                        <div class="col-md-4 col-xs-12">\n' +
    '                            <form class="form-inline table-search-wrap" ng-show="!selectedRows.length">\n' +
    '                                <div tr-ng-grid-global-filter=""></div>\n' +
    '                            </form>\n' +
    '                        </div>\n' +
    '                        <div class="col-md-8 col-xs-12">\n' +
    '                            <span tr-ng-grid-pager=""></span>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '            <tr class="dt-head-tr" ng-show="loading || listRows.length">\n' +
    '                <th class="dt-{{column.key}}-th" ng-repeat=\'column in classColumns\' field-name="{{column.label}}" data-toggle="{{column.dataToggle}}" data-hide="{{column.dataHide}}">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        {{column.label}}\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '                <th class="dt-actions-th">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        Actions\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '        </thead>\n' +
    '        <tbody ng-show="!loading">\n' +
    '            <tr>\n' +
    '                <td class="dt-{{column.key}}-td" ng-repeat=\'column in classColumns\' field-name="{{column.label}}" title="" class="dt-uploads-td">\n' +
    '\n' +
    '                    <a ng-if="column.key===\'url\'" ng-href="{{dataGrid.getCell(gridItem, column)}}">Download</a>\n' +
    '                    <span ng-if="column.key===\'uid\'">{{dataGrid.getCell(gridItem, column)}}</span>\n' +
    '\n' +
    '                    <div ng-if="column.key===\'file\'" class="media attachment-box">\n' +
    '                        <div class="media-image attachment-preview pull-left">\n' +
    '                            <a ng-hide="dataGrid.getCell(gridItem, column).isImage" href="{{dataGrid.getCell(gridItem, column).url}}" target="_blank">\n' +
    '                                <i class="attachment-file-icon fa fa-file-text-o"></i>\n' +
    '                            </a>\n' +
    '                            <a ng-hide="!dataGrid.getCell(gridItem, column).isImage" href="{{dataGrid.getCell(gridItem, column).url}}" target="_blank" class="attachment-preview-link">\n' +
    '                                <img ng-show="dataGrid.getCell(gridItem, column).isImage" ng-src="{{dataGrid.getCell(gridItem, column).url}}" alt="{{dataGrid.getCell(gridItem, column).filename}}" class="block-element">\n' +
    '                            </a>\n' +
    '                        </div>\n' +
    '                        <div class="media-body attachment-info">\n' +
    '                            <div class="attachment-name" title="{{dataGrid.getCell(gridItem, column).filename}}">{{dataGrid.getCell(gridItem, column).filename}}</div>\n' +
    '                            <div class="attachment-size">{{dataGrid.getCell(gridItem, column).file_size}}</div>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </td>\n' +
    '                <td>\n' +
    '                    <span ng-repeat=\'act in actions\' ng-click=\'action(act, gridItem)\' class="hand fa fa-lg edit_evnt ml10 dt-action-item" ng-class="{\'fa-lock\':act == \'acl\', \'fa-trash-o\' : act == \'delete\'}" rel="tooltip" data-placement="bottom" ng-attr-data-original-title="{{act == \'acl\' ? \'Configure ACL\' : \'Delete upload\'}}"></span>\n' +
    '                </td>\n' +
    '            </tr>\n' +
    '        </tbody>\n' +
    '        <tfoot class="hidden">\n' +
    '        </tfoot>\n' +
    '    </table>\n' +
    '    <div class="tab-loader" ng-show="loading">\n' +
    '        <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '    </div>\n' +
    '    <div class="no-msg" ng-show="!loading && !listRows.length">\n' +
    '        No uploads found.\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\uploads\\uploads.js":[function(require,module,exports){
'use strict';

var angular = require('third-party-modules/angular');
var uiRouter = require('angular-ui-router');
var resolvers = require('../resolvers');
var uploadsCtrl = require('./controllers/uploads-ctrl');
var uploadsTemplate = require('./partials/uploads.html');
require('third-party-modules/angular-tr-ng-grid');


module.exports = angular.module('built.uploads', ['ui.router'])
  .controller('uploadsCtrl', uploadsCtrl)
  .config([
    '$stateProvider',
    function($stateProvider) {

      $stateProvider
        .state('app.dashboard.all-uploads', {
          url: '/uploads/all?p',
          template: uploadsTemplate,
          controller: 'uploadsCtrl',
          data: {
            breadcrumbs: [{
              name: 'Uploads'
            }, {
              name: 'All'
            }]
          }
        })
        .state('app.dashboard.images-uploads', {
          url: '/uploads/images?p',
          template: uploadsTemplate,
          controller: 'uploadsCtrl',
          data: {
            breadcrumbs: [{
              name: 'Uploads'
            }, {
              name: 'Images'
            }]
          }
        })
        .state('app.dashboard.videos-uploads', {
          url: '/uploads/videos?p',
          template: uploadsTemplate,
          controller: 'uploadsCtrl',
          data: {
            breadcrumbs: [{
              name: 'Uploads'
            }, {
              name: 'Videos'
            }]
          }
        })
    }
  ])
  .run([
    "$rootScope",
    "menuService",
    function($rootScope, menu) {

      var menuItem = {
        id: 'uploads',
        title: 'Uploads',
        order: 2,
        icon: 'fa-upload',
        sub_menu: [{
          id: 'all-uploads',
          title: 'All',
          state: 'app.dashboard.all-uploads'
        }, {
          id: 'images-uploads',
          title: 'Images',
          state: 'app.dashboard.images-uploads'
        }, {
          id: 'videos-uploads',
          title: 'Videos',
          state: 'app.dashboard.videos-uploads'
        }]
      }
      menu.add(menuItem);
    }
  ]);
},{"../resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/uploads-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\uploads\\controllers\\uploads-ctrl.js","./partials/uploads.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\uploads\\partials\\uploads.html","angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\angular-ui-router\\release\\angular-ui-router.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js","third-party-modules/angular-tr-ng-grid":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-tr-ng-grid\\trnggrid.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\angular-ui-router\\release\\angular-ui-router.js":[function(require,module,exports){
/**
 * State-based routing for AngularJS
 * @version v0.2.13
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
  module.exports = 'ui.router';
}

(function (window, angular, undefined) {
/*jshint globalstrict:true*/
/*global angular:false*/
'use strict';

var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy;

function inherit(parent, extra) {
  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
}

function merge(dst) {
  forEach(arguments, function(obj) {
    if (obj !== dst) {
      forEach(obj, function(value, key) {
        if (!dst.hasOwnProperty(key)) dst[key] = value;
      });
    }
  });
  return dst;
}

/**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
function ancestors(first, second) {
  var path = [];

  for (var n in first.path) {
    if (first.path[n] !== second.path[n]) break;
    path.push(first.path[n]);
  }
  return path;
}

/**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
function objectKeys(object) {
  if (Object.keys) {
    return Object.keys(object);
  }
  var result = [];

  angular.forEach(object, function(val, key) {
    result.push(key);
  });
  return result;
}

/**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
function indexOf(array, value) {
  if (Array.prototype.indexOf) {
    return array.indexOf(value, Number(arguments[2]) || 0);
  }
  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

  if (from < 0) from += len;

  for (; from < len; from++) {
    if (from in array && array[from] === value) return from;
  }
  return -1;
}

/**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
function inheritParams(currentParams, newParams, $current, $to) {
  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

  for (var i in parents) {
    if (!parents[i].params) continue;
    parentParams = objectKeys(parents[i].params);
    if (!parentParams.length) continue;

    for (var j in parentParams) {
      if (indexOf(inheritList, parentParams[j]) >= 0) continue;
      inheritList.push(parentParams[j]);
      inherited[parentParams[j]] = currentParams[parentParams[j]];
    }
  }
  return extend({}, inherited, newParams);
}

/**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
function equalForKeys(a, b, keys) {
  if (!keys) {
    keys = [];
    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
  }

  for (var i=0; i<keys.length; i++) {
    var k = keys[i];
    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
  }
  return true;
}

/**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
function filterByKeys(keys, values) {
  var filtered = {};

  forEach(keys, function (name) {
    filtered[name] = values[name];
  });
  return filtered;
}

// like _.indexBy
// when you know that your index values will be unique, or you want last-one-in to win
function indexBy(array, propName) {
  var result = {};
  forEach(array, function(item) {
    result[item[propName]] = item;
  });
  return result;
}

// extracted from underscore.js
// Return a copy of the object only containing the whitelisted properties.
function pick(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  forEach(keys, function(key) {
    if (key in obj) copy[key] = obj[key];
  });
  return copy;
}

// extracted from underscore.js
// Return a copy of the object omitting the blacklisted properties.
function omit(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  for (var key in obj) {
    if (indexOf(keys, key) == -1) copy[key] = obj[key];
  }
  return copy;
}

function pluck(collection, key) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = isFunction(key) ? key(val) : val[key];
  });
  return result;
}

function filter(collection, callback) {
  var array = isArray(collection);
  var result = array ? [] : {};
  forEach(collection, function(val, i) {
    if (callback(val, i)) {
      result[array ? result.length : i] = val;
    }
  });
  return result;
}

function map(collection, callback) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = callback(val, i);
  });
  return result;
}

/**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
angular.module('ui.router.util', ['ng']);

/**
 * @ngdoc overview
 * @name ui.router.router
 * 
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
angular.module('ui.router.router', ['ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router.state
 * 
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 * 
 */
angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 * 
 * ## The main module for ui.router 
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes. 
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router - 
 * 
 * *You'll need to include **only** this module as the dependency within your angular app.*
 * 
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
angular.module('ui.router', ['ui.router.state']);

angular.module('ui.router.compat', ['ui.router']);

/**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
$Resolve.$inject = ['$q', '$injector'];
function $Resolve(  $q,    $injector) {
  
  var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
  

  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study` 
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
  this.study = function (invocables) {
    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
    var invocableKeys = objectKeys(invocables || {});
    
    // Perform a topological sort of invocables to build an ordered plan
    var plan = [], cycle = [], visited = {};
    function visit(value, key) {
      if (visited[key] === VISIT_DONE) return;
      
      cycle.push(key);
      if (visited[key] === VISIT_IN_PROGRESS) {
        cycle.splice(0, indexOf(cycle, key));
        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
      }
      visited[key] = VISIT_IN_PROGRESS;
      
      if (isString(value)) {
        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
      } else {
        var params = $injector.annotate(value);
        forEach(params, function (param) {
          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
        });
        plan.push(key, value, params);
      }
      
      cycle.pop();
      visited[key] = VISIT_DONE;
    }
    forEach(invocables, visit);
    invocables = cycle = visited = null; // plan is all that's required
    
    function isResolve(value) {
      return isObject(value) && value.then && value.$$promises;
    }
    
    return function (locals, parent, self) {
      if (isResolve(locals) && self === undefined) {
        self = parent; parent = locals; locals = null;
      }
      if (!locals) locals = NO_LOCALS;
      else if (!isObject(locals)) {
        throw new Error("'locals' must be an object");
      }       
      if (!parent) parent = NO_PARENT;
      else if (!isResolve(parent)) {
        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
      }
      
      // To complete the overall resolution, we have to wait for the parent
      // promise and for the promise for each invokable in our plan.
      var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;
          
      function done() {
        // Merge parent values we haven't got yet and publish our own $$values
        if (!--wait) {
          if (!merged) merge(values, parent.$$values); 
          result.$$values = values;
          result.$$promises = result.$$promises || true; // keep for isResolve()
          delete result.$$inheritedValues;
          resolution.resolve(values);
        }
      }
      
      function fail(reason) {
        result.$$failure = reason;
        resolution.reject(reason);
      }

      // Short-circuit if parent has already failed
      if (isDefined(parent.$$failure)) {
        fail(parent.$$failure);
        return result;
      }
      
      if (parent.$$inheritedValues) {
        merge(values, omit(parent.$$inheritedValues, invocableKeys));
      }

      // Merge parent values if the parent has already resolved, or merge
      // parent promises and wait if the parent resolve is still in progress.
      extend(promises, parent.$$promises);
      if (parent.$$values) {
        merged = merge(values, omit(parent.$$values, invocableKeys));
        result.$$inheritedValues = omit(parent.$$values, invocableKeys);
        done();
      } else {
        if (parent.$$inheritedValues) {
          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
        }        
        parent.then(done, fail);
      }
      
      // Process each invocable in the plan, but ignore any where a local of the same name exists.
      for (var i=0, ii=plan.length; i<ii; i+=3) {
        if (locals.hasOwnProperty(plan[i])) done();
        else invoke(plan[i], plan[i+1], plan[i+2]);
      }
      
      function invoke(key, invocable, params) {
        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
        var invocation = $q.defer(), waitParams = 0;
        function onfailure(reason) {
          invocation.reject(reason);
          fail(reason);
        }
        // Wait for any parameter that we have a promise for (either from parent or from this
        // resolve; in that case study() will have made sure it's ordered before us in the plan).
        forEach(params, function (dep) {
          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
            waitParams++;
            promises[dep].then(function (result) {
              values[dep] = result;
              if (!(--waitParams)) proceed();
            }, onfailure);
          }
        });
        if (!waitParams) proceed();
        function proceed() {
          if (isDefined(result.$$failure)) return;
          try {
            invocation.resolve($injector.invoke(invocable, self, values));
            invocation.promise.then(function (result) {
              values[key] = result;
              done();
            }, onfailure);
          } catch (e) {
            onfailure(e);
          }
        }
        // Publish promise synchronously; invocations further down in the plan may depend on it.
        promises[key] = invocation.promise;
      }
      
      return result;
    };
  };
  
  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via 
   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the 
   * resulting value will be used instead. Dependencies of invocables are resolved 
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` 
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains 
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises 
   * returned by injectables have been resolved. If any invocable 
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
   * same error. A rejection of a `parent` promise (if specified) will likewise be 
   * propagated immediately. Once the `$resolve` promise has been rejected, no 
   * further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter 
   * with the same name as the injectable, which will be fulfilled from the `parent` 
   * injectable of the same name. This allows inherited values to be decorated. 
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. 
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to 
   * be a service name to be passed to `$injector.get()`. This is supported primarily 
   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
   * routes.
   *
   * @param {object} invocables functions to invoke or 
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
  this.resolve = function (invocables, locals, parent, self) {
    return this.study(invocables)(locals, parent, self);
  };
}

angular.module('ui.router.util').service('$resolve', $Resolve);


/**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
function $TemplateFactory(  $http,   $templateCache,   $injector) {

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object. 
   *
   * @param {object} config Configuration object for which to load a template. 
   * The following properties are search in the specified order, and the first one 
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to 
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning 
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via 
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for 
   * that string,or `null` if no template is configured.
   */
  this.fromConfig = function (config, params, locals) {
    return (
      isDefined(config.template) ? this.fromString(config.template, params) :
      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
      null
    );
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that 
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that 
   * string.
   */
  this.fromString = function (template, params) {
    return isFunction(template) ? template(params) : template;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   * 
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function 
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromUrl = function (url, params) {
    if (isFunction(url)) url = url(params);
    if (url == null) return null;
    else return $http
        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})
        .then(function(response) { return response.data; });
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromProvider
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromProvider = function (provider, params, locals) {
    return $injector.invoke(provider, null, locals || { params: params });
  };
}

angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

var $$UMFP; // reference to $UrlMatcherFactoryProvider

/**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 * 
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon 
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 * 
 * Examples:
 * 
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 * @param {string} pattern  The pattern to compile into a matcher.
 * @param {Object} config  A configuration object hash:
 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
 *   an existing UrlMatcher
 *
 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the constructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when 
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New `UrlMatcher` object
 */
function UrlMatcher(pattern, config, parentMatcher) {
  config = extend({ params: {} }, isObject(config) ? config : {});

  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
  //   '*' name
  //   ':' name
  //   '{' name '}'
  //   '{' name ':' regexp '}'
  // The regular expression is somewhat complicated due to the need to allow curly braces
  // inside the regular expression. The placeholder regexp breaks down as follows:
  //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
  //    \{([\w\[\]]+)(?:\:( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
  //    [^{}\\]+                       - anything other than curly braces or backslash
  //    \\.                            - a backslash escape
  //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
  var placeholder       = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      searchPlaceholder = /([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      compiled = '^', last = 0, m,
      segments = this.segments = [],
      parentParams = parentMatcher ? parentMatcher.params : {},
      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
      paramNames = [];

  function addParameter(id, type, config, location) {
    paramNames.push(id);
    if (parentParams[id]) return parentParams[id];
    if (!/^\w+(-+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
    if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
    params[id] = new $$UMFP.Param(id, type, config, location);
    return params[id];
  }

  function quoteRegExp(string, pattern, squash) {
    var surroundPattern = ['',''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
    if (!pattern) return result;
    switch(squash) {
      case false: surroundPattern = ['(', ')'];   break;
      case true:  surroundPattern = ['?(', ')?']; break;
      default:    surroundPattern = ['(' + squash + "|", ')?'];  break;
    }
    return result + surroundPattern[0] + pattern + surroundPattern[1];
  }

  this.source = pattern;

  // Split into static segments separated by path parameter placeholders.
  // The number of segments is always 1 more than the number of parameters.
  function matchDetails(m, isSearch) {
    var id, regexp, segment, type, cfg, arrayMode;
    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
    cfg         = config.params[id];
    segment     = pattern.substring(last, m.index);
    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
    type        = $$UMFP.type(regexp || "string") || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp) });
    return {
      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
    };
  }

  var p, param, segment;
  while ((m = placeholder.exec(pattern))) {
    p = matchDetails(m, false);
    if (p.segment.indexOf('?') >= 0) break; // we're into the search part

    param = addParameter(p.id, p.type, p.cfg, "path");
    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash);
    segments.push(p.segment);
    last = placeholder.lastIndex;
  }
  segment = pattern.substring(last);

  // Find any search parameter names and remove them from the last segment
  var i = segment.indexOf('?');

  if (i >= 0) {
    var search = this.sourceSearch = segment.substring(i);
    segment = segment.substring(0, i);
    this.sourcePath = pattern.substring(0, last + i);

    if (search.length > 0) {
      last = 0;
      while ((m = searchPlaceholder.exec(search))) {
        p = matchDetails(m, true);
        param = addParameter(p.id, p.type, p.cfg, "search");
        last = placeholder.lastIndex;
        // check if ?&
      }
    }
  } else {
    this.sourcePath = pattern;
    this.sourceSearch = '';
  }

  compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
  segments.push(segment);

  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
  this.prefix = segments[0];
  this.$$paramNames = paramNames;
}

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * <pre>
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * </pre>
 *
 * @param {string} pattern  The pattern to append.
 * @param {Object} config  An object hash of the configuration for the matcher.
 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
 */
UrlMatcher.prototype.concat = function (pattern, config) {
  // Because order of search parameters is irrelevant, we can add our own search
  // parameters to the end of the new pattern. Parse the new pattern by itself
  // and then join the bits together, but it's much easier to do this on a string level.
  var defaultConfig = {
    caseInsensitive: $$UMFP.caseInsensitive(),
    strict: $$UMFP.strictMode(),
    squash: $$UMFP.defaultSquashPolicy()
  };
  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
};

UrlMatcher.prototype.toString = function () {
  return this.source;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
 *   x: '1', q: 'hello'
 * });
 * // returns { id: 'bob', q: 'hello', r: null }
 * </pre>
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
UrlMatcher.prototype.exec = function (path, searchParams) {
  var m = this.regexp.exec(path);
  if (!m) return null;
  searchParams = searchParams || {};

  var paramNames = this.parameters(), nTotal = paramNames.length,
    nPath = this.segments.length - 1,
    values = {}, i, j, cfg, paramName;

  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

  function decodePathArray(string) {
    function reverseString(str) { return str.split("").reverse().join(""); }
    function unquoteDashes(str) { return str.replace(/\\-/, "-"); }

    var split = reverseString(string).split(/-(?!\\)/);
    var allReversed = map(split, reverseString);
    return map(allReversed, unquoteDashes).reverse();
  }

  for (i = 0; i < nPath; i++) {
    paramName = paramNames[i];
    var param = this.params[paramName];
    var paramVal = m[i+1];
    // if the param value matches a pre-replace pair, replace the value before decoding.
    for (j = 0; j < param.replace; j++) {
      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
    }
    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
    values[paramName] = param.value(paramVal);
  }
  for (/**/; i < nTotal; i++) {
    paramName = paramNames[i];
    values[paramName] = this.params[paramName].value(searchParams[paramName]);
  }

  return values;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 * 
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
UrlMatcher.prototype.parameters = function (param) {
  if (!isDefined(param)) return this.$$paramNames;
  return this.params[param] || null;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#validate
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Checks an object hash of parameters to validate their correctness according to the parameter
 * types of this `UrlMatcher`.
 *
 * @param {Object} params The object hash of parameters to validate.
 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
 */
UrlMatcher.prototype.validates = function (params) {
  return this.params.$$validates(params);
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * </pre>
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
UrlMatcher.prototype.format = function (values) {
  values = values || {};
  var segments = this.segments, params = this.parameters(), paramset = this.params;
  if (!this.validates(values)) return null;

  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

  function encodeDashes(str) { // Replace dashes with encoded "\-"
    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
  }

  for (i = 0; i < nTotal; i++) {
    var isPathParam = i < nPath;
    var name = params[i], param = paramset[name], value = param.value(values[name]);
    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
    var squash = isDefaultValue ? param.squash : false;
    var encoded = param.type.encode(value);

    if (isPathParam) {
      var nextSegment = segments[i + 1];
      if (squash === false) {
        if (encoded != null) {
          if (isArray(encoded)) {
            result += map(encoded, encodeDashes).join("-");
          } else {
            result += encodeURIComponent(encoded);
          }
        }
        result += nextSegment;
      } else if (squash === true) {
        var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
        result += nextSegment.match(capture)[1];
      } else if (isString(squash)) {
        result += squash + nextSegment;
      }
    } else {
      if (encoded == null || (isDefaultValue && squash !== false)) continue;
      if (!isArray(encoded)) encoded = [ encoded ];
      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
      result += (search ? '&' : '?') + (name + '=' + encoded);
      search = true;
    }
  }

  return result;
};

/**
 * @ngdoc object
 * @name ui.router.util.type:Type
 *
 * @description
 * Implements an interface to define custom parameter types that can be decoded from and encoded to
 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
 * objects when matching or formatting URLs, or comparing or validating parameter values.
 *
 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
 * information on registering custom types.
 *
 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
 *        properties will override the default methods and/or pattern in `Type`'s public interface.
 * @example
 * <pre>
 * {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 * </pre>
 *
 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
 *           coming from a substring of a URL.
 *
 * @returns {Object}  Returns a new `Type` object.
 */
function Type(config) {
  extend(this, config);
}

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#is
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Detects whether a value is of a particular type. Accepts a native (decoded) value
 * and determines whether it matches the current `Type` object.
 *
 * @param {*} val  The value to check.
 * @param {string} key  Optional. If the type check is happening in the context of a specific
 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
 */
Type.prototype.is = function(val, key) {
  return true;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#encode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
 * only needs to be a representation of `val` that has been coerced to a string.
 *
 * @param {*} val  The value to encode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
 */
Type.prototype.encode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#decode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 *
 * @param {string} val  The URL parameter value to decode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {*}  Returns a custom representation of the URL parameter value.
 */
Type.prototype.decode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#equals
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Determines whether two decoded values are equivalent.
 *
 * @param {*} a  A value to compare against.
 * @param {*} b  A value to compare against.
 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
 */
Type.prototype.equals = function(a, b) {
  return a == b;
};

Type.prototype.$subPattern = function() {
  var sub = this.pattern.toString();
  return sub.substr(1, sub.length - 2);
};

Type.prototype.pattern = /.*/;

Type.prototype.toString = function() { return "{Type:" + this.name + "}"; };

/*
 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
 * e.g.:
 * - urlmatcher pattern "/path?{queryParam[]:int}"
 * - url: "/path?queryParam=1&queryParam=2
 * - $stateParams.queryParam will be [1, 2]
 * if `mode` is "auto", then
 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
 */
Type.prototype.$asArray = function(mode, isSearch) {
  if (!mode) return this;
  if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");
  return new ArrayType(this, mode);

  function ArrayType(type, mode) {
    function bindTo(type, callbackName) {
      return function() {
        return type[callbackName].apply(type, arguments);
      };
    }

    // Wrap non-array value as array
    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }
    // Unwrap array value for "auto" mode. Return undefined for empty array.
    function arrayUnwrap(val) {
      switch(val.length) {
        case 0: return undefined;
        case 1: return mode === "auto" ? val[0] : val;
        default: return val;
      }
    }
    function falsey(val) { return !val; }

    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
    function arrayHandler(callback, allTruthyMode) {
      return function handleArray(val) {
        val = arrayWrap(val);
        var result = map(val, callback);
        if (allTruthyMode === true)
          return filter(result, falsey).length === 0;
        return arrayUnwrap(result);
      };
    }

    // Wraps type (.equals) functions to operate on each value of an array
    function arrayEqualsHandler(callback) {
      return function handleArray(val1, val2) {
        var left = arrayWrap(val1), right = arrayWrap(val2);
        if (left.length !== right.length) return false;
        for (var i = 0; i < left.length; i++) {
          if (!callback(left[i], right[i])) return false;
        }
        return true;
      };
    }

    this.encode = arrayHandler(bindTo(type, 'encode'));
    this.decode = arrayHandler(bindTo(type, 'decode'));
    this.is     = arrayHandler(bindTo(type, 'is'), true);
    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
    this.pattern = type.pattern;
    this.$arrayMode = mode;
  }
};



/**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
 * is also available to providers under the name `$urlMatcherFactoryProvider`.
 */
function $UrlMatcherFactory() {
  $$UMFP = this;

  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

  function valToString(val) { return val != null ? val.toString().replace(/\//g, "%2F") : val; }
  function valFromString(val) { return val != null ? val.toString().replace(/%2F/g, "/") : val; }
//  TODO: in 1.0, make string .is() return false if value is undefined by default.
//  function regexpMatches(val) { /*jshint validthis:true */ return isDefined(val) && this.pattern.test(val); }
  function regexpMatches(val) { /*jshint validthis:true */ return this.pattern.test(val); }

  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
    string: {
      encode: valToString,
      decode: valFromString,
      is: regexpMatches,
      pattern: /[^/]*/
    },
    int: {
      encode: valToString,
      decode: function(val) { return parseInt(val, 10); },
      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },
      pattern: /\d+/
    },
    bool: {
      encode: function(val) { return val ? 1 : 0; },
      decode: function(val) { return parseInt(val, 10) !== 0; },
      is: function(val) { return val === true || val === false; },
      pattern: /0|1/
    },
    date: {
      encode: function (val) {
        if (!this.is(val))
          return undefined;
        return [ val.getFullYear(),
          ('0' + (val.getMonth() + 1)).slice(-2),
          ('0' + val.getDate()).slice(-2)
        ].join("-");
      },
      decode: function (val) {
        if (this.is(val)) return val;
        var match = this.capture.exec(val);
        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
      },
      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },
      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
    },
    json: {
      encode: angular.toJson,
      decode: angular.fromJson,
      is: angular.isObject,
      equals: angular.equals,
      pattern: /[^/]*/
    },
    any: { // does not encode/decode
      encode: angular.identity,
      decode: angular.identity,
      is: angular.identity,
      equals: angular.equals,
      pattern: /.*/
    }
  };

  function getDefaultConfig() {
    return {
      strict: isStrictMode,
      caseInsensitive: isCaseInsensitive
    };
  }

  function isInjectable(value) {
    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
  }

  /**
   * [Internal] Get the default value of a parameter, which may be an injectable function.
   */
  $UrlMatcherFactory.$$getDefaultValue = function(config) {
    if (!isInjectable(config.value)) return config.value;
    if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
    return injector.invoke(config.value);
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URL matching should be case sensitive (the default behavior), or not.
   *
   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
   * @returns {boolean} the current value of caseInsensitive
   */
  this.caseInsensitive = function(value) {
    if (isDefined(value))
      isCaseInsensitive = value;
    return isCaseInsensitive;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#strictMode
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URLs should match trailing slashes, or not (the default behavior).
   *
   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
   * @returns {boolean} the current value of strictMode
   */
  this.strictMode = function(value) {
    if (isDefined(value))
      isStrictMode = value;
    return isStrictMode;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Sets the default behavior when generating or matching URLs with default parameter values.
   *
   * @param {string} value A string that defines the default parameter URL squashing behavior.
   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
   *             the parameter value from the URL and replace it with this string.
   */
  this.defaultSquashPolicy = function(value) {
    if (!isDefined(value)) return defaultSquashPolicy;
    if (value !== true && value !== false && !isString(value))
      throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
    defaultSquashPolicy = value;
    return value;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
   *
   * @param {string} pattern  The URL pattern.
   * @param {Object} config  The config object hash.
   * @returns {UrlMatcher}  The UrlMatcher.
   */
  this.compile = function (pattern, config) {
    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
   *          implementing all the same methods.
   */
  this.isMatcher = function (o) {
    if (!isObject(o)) return false;
    var result = true;

    forEach(UrlMatcher.prototype, function(val, name) {
      if (isFunction(val)) {
        result = result && (isDefined(o[name]) && isFunction(o[name]));
      }
    });
    return result;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#type
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
   * generate URLs with typed parameters.
   *
   * @param {string} name  The type name.
   * @param {Object|Function} definition   The type definition. See
   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
   *        runtime starts.  The result of this function is merged into the existing `definition`.
   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   *
   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
   *
   * @example
   * This is a simple example of a custom type that encodes and decodes items from an
   * array, using the array index as the URL-encoded value:
   *
   * <pre>
   * var list = ['John', 'Paul', 'George', 'Ringo'];
   *
   * $urlMatcherFactoryProvider.type('listItem', {
   *   encode: function(item) {
   *     // Represent the list item in the URL using its corresponding index
   *     return list.indexOf(item);
   *   },
   *   decode: function(item) {
   *     // Look up the list item by index
   *     return list[parseInt(item, 10)];
   *   },
   *   is: function(item) {
   *     // Ensure the item is valid by checking to see that it appears
   *     // in the list
   *     return list.indexOf(item) > -1;
   *   }
   * });
   *
   * $stateProvider.state('list', {
   *   url: "/list/{item:listItem}",
   *   controller: function($scope, $stateParams) {
   *     console.log($stateParams.item);
   *   }
   * });
   *
   * // ...
   *
   * // Changes URL to '/list/3', logs "Ringo" to the console
   * $state.go('list', { item: "Ringo" });
   * </pre>
   *
   * This is a more complex example of a type that relies on dependency injection to
   * interact with services, and uses the parameter name from the URL to infer how to
   * handle encoding and decoding parameter values:
   *
   * <pre>
   * // Defines a custom type that gets a value from a service,
   * // where each service gets different types of values from
   * // a backend API:
   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
   *
   *   // Matches up services to URL parameter names
   *   var services = {
   *     user: Users,
   *     post: Posts
   *   };
   *
   *   return {
   *     encode: function(object) {
   *       // Represent the object in the URL using its unique ID
   *       return object.id;
   *     },
   *     decode: function(value, key) {
   *       // Look up the object by ID, using the parameter
   *       // name (key) to call the correct service
   *       return services[key].findById(value);
   *     },
   *     is: function(object, key) {
   *       // Check that object is a valid dbObject
   *       return angular.isObject(object) && object.id && services[key];
   *     }
   *     equals: function(a, b) {
   *       // Check the equality of decoded objects by comparing
   *       // their unique IDs
   *       return a.id === b.id;
   *     }
   *   };
   * });
   *
   * // In a config() block, you can then attach URLs with
   * // type-annotated parameters:
   * $stateProvider.state('users', {
   *   url: "/users",
   *   // ...
   * }).state('users.item', {
   *   url: "/{user:dbObject}",
   *   controller: function($scope, $stateParams) {
   *     // $stateParams.user will now be an object returned from
   *     // the Users service
   *   },
   *   // ...
   * });
   * </pre>
   */
  this.type = function (name, definition, definitionFn) {
    if (!isDefined(definition)) return $types[name];
    if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

    $types[name] = new Type(extend({ name: name }, definition));
    if (definitionFn) {
      typeQueue.push({ name: name, def: definitionFn });
      if (!enqueue) flushTypeQueue();
    }
    return this;
  };

  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
  function flushTypeQueue() {
    while(typeQueue.length) {
      var type = typeQueue.shift();
      if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
      angular.extend($types[type.name], injector.invoke(type.def));
    }
  }

  // Register default types. Store them in the prototype of $types.
  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });
  $types = inherit($types, {});

  /* No need to document $get, since it returns this */
  this.$get = ['$injector', function ($injector) {
    injector = $injector;
    enqueue = false;
    flushTypeQueue();

    forEach(defaultTypes, function(type, name) {
      if (!$types[name]) $types[name] = new Type(type);
    });
    return this;
  }];

  this.Param = function Param(id, type, config, location) {
    var self = this;
    config = unwrapShorthand(config);
    type = getType(config, type, location);
    var arrayMode = getArrayMode();
    type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
    if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
      config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
    var isOptional = config.value !== undefined;
    var squash = getSquashPolicy(config, isOptional);
    var replace = getReplace(config, arrayMode, isOptional, squash);

    function unwrapShorthand(config) {
      var keys = isObject(config) ? objectKeys(config) : [];
      var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
                        indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
      if (isShorthand) config = { value: config };
      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
      return config;
    }

    function getType(config, urlType, location) {
      if (config.type && urlType) throw new Error("Param '"+id+"' has two type configurations.");
      if (urlType) return urlType;
      if (!config.type) return (location === "config" ? $types.any : $types.string);
      return config.type instanceof Type ? config.type : new Type(config.type);
    }

    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
    function getArrayMode() {
      var arrayDefaults = { array: (location === "search" ? "auto" : false) };
      var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
      return extend(arrayDefaults, arrayParamNomenclature, config).array;
    }

    /**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
    function getSquashPolicy(config, isOptional) {
      var squash = config.squash;
      if (!isOptional || squash === false) return false;
      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
      if (squash === true || isString(squash)) return squash;
      throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
    }

    function getReplace(config, arrayMode, isOptional, squash) {
      var replace, configuredKeys, defaultPolicy = [
        { from: "",   to: (isOptional || arrayMode ? undefined : "") },
        { from: null, to: (isOptional || arrayMode ? undefined : "") }
      ];
      replace = isArray(config.replace) ? config.replace : [];
      if (isString(squash))
        replace.push({ from: squash, to: undefined });
      configuredKeys = map(replace, function(item) { return item.from; } );
      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
    }

    /**
     * [Internal] Get the default value of a parameter, which may be an injectable function.
     */
    function $$getDefaultValue() {
      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
      return injector.invoke(config.$$fn);
    }

    /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
    function $value(value) {
      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }
      function $replace(value) {
        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });
        return replacement.length ? replacement[0] : value;
      }
      value = $replace(value);
      return isDefined(value) ? self.type.decode(value) : $$getDefaultValue();
    }

    function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

    extend(this, {
      id: id,
      type: type,
      location: location,
      array: arrayMode,
      squash: squash,
      replace: replace,
      isOptional: isOptional,
      value: $value,
      dynamic: undefined,
      config: config,
      toString: toString
    });
  };

  function ParamSet(params) {
    extend(this, params || {});
  }

  ParamSet.prototype = {
    $$new: function() {
      return inherit(this, extend(new ParamSet(), { $$parent: this}));
    },
    $$keys: function () {
      var keys = [], chain = [], parent = this,
        ignore = objectKeys(ParamSet.prototype);
      while (parent) { chain.push(parent); parent = parent.$$parent; }
      chain.reverse();
      forEach(chain, function(paramset) {
        forEach(objectKeys(paramset), function(key) {
            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
        });
      });
      return keys;
    },
    $$values: function(paramValues) {
      var values = {}, self = this;
      forEach(self.$$keys(), function(key) {
        values[key] = self[key].value(paramValues && paramValues[key]);
      });
      return values;
    },
    $$equals: function(paramValues1, paramValues2) {
      var equal = true, self = this;
      forEach(self.$$keys(), function(key) {
        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
        if (!self[key].type.equals(left, right)) equal = false;
      });
      return equal;
    },
    $$validates: function $$validate(paramValues) {
      var result = true, isOptional, val, param, self = this;

      forEach(this.$$keys(), function(key) {
        param = self[key];
        val = paramValues[key];
        isOptional = !val && param.isOptional;
        result = result && (isOptional || !!param.type.is(val));
      });
      return result;
    },
    $$parent: undefined
  };

  this.ParamSet = ParamSet;
}

// Register as a provider so it's available to other providers
angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);

/**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`. 
 * When `$location` changes it runs through a list of rules one by one until a 
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
function $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {
  var rules = [], otherwise = null, interceptDeferred = false, listener;

  // Returns a string that is a prefix of all strings matching the RegExp
  function regExpPrefix(re) {
    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
  }

  // Interpolates matched values into a String.replace()-style pattern
  function interpolate(pattern, match) {
    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
      return match[what === '$' ? 0 : Number(what)];
    });
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider` to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {object} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.rule = function (rule) {
    if (!isFunction(rule)) throw new Error("'rule' must be a function");
    rules.push(rule);
    return this;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalid route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     return '/a/valid/url';
   *   });
   * });
   * </pre>
   *
   * @param {string|object} rule The url path you want to redirect to or a function 
   * rule that returns the url path. The function version is passed two params: 
   * `$injector` and `$location` services, and must return a url string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.otherwise = function (rule) {
    if (isString(rule)) {
      var redirect = rule;
      rule = function () { return redirect; };
    }
    else if (!isFunction(rule)) throw new Error("'rule' must be a function");
    otherwise = rule;
    return this;
  };


  function handleIfMatch($injector, handler, match) {
    if (!match) return false;
    var result = $injector.invoke(handler, handler, { $match: match });
    return isDefined(result) ? result : true;
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching. if handle is a string, it is
   * treated as a redirect, and is interpolated according to the syntax of match
   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|object} handler The path you want to redirect your user to.
   */
  this.when = function (what, handler) {
    var redirect, handlerIsString = isString(handler);
    if (isString(what)) what = $urlMatcherFactory.compile(what);

    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
      throw new Error("invalid 'handler' in when()");

    var strategies = {
      matcher: function (what, handler) {
        if (handlerIsString) {
          redirect = $urlMatcherFactory.compile(handler);
          handler = ['$match', function ($match) { return redirect.format($match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
        }, {
          prefix: isString(what.prefix) ? what.prefix : ''
        });
      },
      regex: function (what, handler) {
        if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

        if (handlerIsString) {
          redirect = handler;
          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path()));
        }, {
          prefix: regExpPrefix(what)
        });
      }
    };

    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

    for (var n in check) {
      if (check[n]) return this.rule(strategies[n](what, handler));
    }

    throw new Error("invalid 'what' in when()");
  };

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#deferIntercept
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Disables (or enables) deferring location change interception.
   *
   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
   * defer a transition but maintain the current URL), call this method at configuration time.
   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
   * `$locationChangeSuccess` event handler.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *
   *   // Prevent $urlRouter from automatically intercepting URL changes;
   *   // this allows you to configure custom behavior in between
   *   // location changes and route synchronization:
   *   $urlRouterProvider.deferIntercept();
   *
   * }).run(function ($rootScope, $urlRouter, UserService) {
   *
   *   $rootScope.$on('$locationChangeSuccess', function(e) {
   *     // UserService is an example service for managing user state
   *     if (UserService.isLoggedIn()) return;
   *
   *     // Prevent $urlRouter's default handler from firing
   *     e.preventDefault();
   *
   *     UserService.handleLogin().then(function() {
   *       // Once the user has logged in, sync the current URL
   *       // to the router:
   *       $urlRouter.sync();
   *     });
   *   });
   *
   *   // Configures $urlRouter's listener *after* your custom listener
   *   $urlRouter.listen();
   * });
   * </pre>
   *
   * @param {boolean} defer Indicates whether to defer location change interception. Passing
            no parameter is equivalent to `true`.
   */
  this.deferIntercept = function (defer) {
    if (defer === undefined) defer = true;
    interceptDeferred = defer;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   * @requires $browser
   *
   * @description
   *
   */
  this.$get = $get;
  $get.$inject = ['$location', '$rootScope', '$injector', '$browser'];
  function $get(   $location,   $rootScope,   $injector,   $browser) {

    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

    function appendBasePath(url, isHtml5, absolute) {
      if (baseHref === '/') return url;
      if (isHtml5) return baseHref.slice(0, -1) + url;
      if (absolute) return baseHref.slice(1) + url;
      return url;
    }

    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
    function update(evt) {
      if (evt && evt.defaultPrevented) return;
      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
      lastPushedUrl = undefined;
      if (ignoreUpdate) return true;

      function check(rule) {
        var handled = rule($injector, $location);

        if (!handled) return false;
        if (isString(handled)) $location.replace().url(handled);
        return true;
      }
      var n = rules.length, i;

      for (i = 0; i < n; i++) {
        if (check(rules[i])) return;
      }
      // always check otherwise last to allow dynamic updates to the set of rules
      if (otherwise) check(otherwise);
    }

    function listen() {
      listener = listener || $rootScope.$on('$locationChangeSuccess', update);
      return listener;
    }

    if (!interceptDeferred) listen();

    return {
      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#sync
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
       * with the transition by calling `$urlRouter.sync()`.
       *
       * @example
       * <pre>
       * angular.module('app', ['ui.router'])
       *   .run(function($rootScope, $urlRouter) {
       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
       *       // Halt state change from even starting
       *       evt.preventDefault();
       *       // Perform custom logic
       *       var meetsRequirement = ...
       *       // Continue with the update and state transition if logic allows
       *       if (meetsRequirement) $urlRouter.sync();
       *     });
       * });
       * </pre>
       */
      sync: function() {
        update();
      },

      listen: function() {
        return listen();
      },

      update: function(read) {
        if (read) {
          location = $location.url();
          return;
        }
        if ($location.url() === location) return;

        $location.url(location);
        $location.replace();
      },

      push: function(urlMatcher, params, options) {
        $location.url(urlMatcher.format(params || {}));
        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
        if (options && options.replace) $location.replace();
      },

      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#href
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * A URL generation method that returns the compiled URL for a given
       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
       *
       * @example
       * <pre>
       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
       *   person: "bob"
       * });
       * // $bob == "/about/bob";
       * </pre>
       *
       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
       * @param {object=} options Options object. The options are:
       *
       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
       *
       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
       */
      href: function(urlMatcher, params, options) {
        if (!urlMatcher.validates(params)) return null;

        var isHtml5 = $locationProvider.html5Mode();
        if (angular.isObject(isHtml5)) {
          isHtml5 = isHtml5.enabled;
        }
        
        var url = urlMatcher.format(params);
        options = options || {};

        if (!isHtml5 && url !== null) {
          url = "#" + $locationProvider.hashPrefix() + url;
        }
        url = appendBasePath(url, isHtml5, options.absolute);

        if (!options.absolute || !url) {
          return url;
        }

        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
        port = (port === 80 || port === 443 ? '' : ':' + port);

        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
      }
    };
  }
}

angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {

  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

  // Builds state properties from definition passed to registerState()
  var stateBuilder = {

    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
    // state.children = [];
    // if (parent) parent.children.push(state);
    parent: function(state) {
      if (isDefined(state.parent) && state.parent) return findState(state.parent);
      // regex matches any valid composite state name
      // would match "contact.list" but not "contacts"
      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
      return compositeName ? findState(compositeName[1]) : root;
    },

    // inherit 'data' from parent and override by own values (if any)
    data: function(state) {
      if (state.parent && state.parent.data) {
        state.data = state.self.data = extend({}, state.parent.data, state.data);
      }
      return state.data;
    },

    // Build a URLMatcher if necessary, either via a relative or absolute URL
    url: function(state) {
      var url = state.url, config = { params: state.params || {} };

      if (isString(url)) {
        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
        return (state.parent.navigable || root).url.concat(url, config);
      }

      if (!url || $urlMatcherFactory.isMatcher(url)) return url;
      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
    },

    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
    navigable: function(state) {
      return state.url ? state : (state.parent ? state.parent.navigable : null);
    },

    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
    ownParams: function(state) {
      var params = state.url && state.url.params || new $$UMFP.ParamSet();
      forEach(state.params || {}, function(config, id) {
        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
      });
      return params;
    },

    // Derive parameters for this state and ensure they're a super-set of parent's parameters
    params: function(state) {
      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();
    },

    // If there is no explicit multi-view configuration, make one up so we don't have
    // to handle both cases in the view directive later. Note that having an explicit
    // 'views' property will mean the default unnamed view properties are ignored. This
    // is also a good time to resolve view names to absolute names, so everything is a
    // straight lookup at link time.
    views: function(state) {
      var views = {};

      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
        views[name] = view;
      });
      return views;
    },

    // Keep a full path from the root down to this state as this is needed for state activation.
    path: function(state) {
      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
    },

    // Speed up $state.contains() as it's used a lot
    includes: function(state) {
      var includes = state.parent ? extend({}, state.parent.includes) : {};
      includes[state.name] = true;
      return includes;
    },

    $delegates: {}
  };

  function isRelative(stateName) {
    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
  }

  function findState(stateOrName, base) {
    if (!stateOrName) return undefined;

    var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = isRelative(name);

    if (path) {
      if (!base) throw new Error("No reference point given for path '"  + name + "'");
      base = findState(base);
      
      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

      for (; i < pathLength; i++) {
        if (rel[i] === "" && i === 0) {
          current = base;
          continue;
        }
        if (rel[i] === "^") {
          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
          current = current.parent;
          continue;
        }
        break;
      }
      rel = rel.slice(i).join(".");
      name = current.name + (current.name && rel ? "." : "") + rel;
    }
    var state = states[name];

    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
      return state;
    }
    return undefined;
  }

  function queueState(parentName, state) {
    if (!queue[parentName]) {
      queue[parentName] = [];
    }
    queue[parentName].push(state);
  }

  function flushQueuedChildren(parentName) {
    var queued = queue[parentName] || [];
    while(queued.length) {
      registerState(queued.shift());
    }
  }

  function registerState(state) {
    // Wrap a new object around the state so we can store our private details easily.
    state = inherit(state, {
      self: state,
      resolve: state.resolve || {},
      toString: function() { return this.name; }
    });

    var name = state.name;
    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

    // Get parent name
    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
        : (isString(state.parent)) ? state.parent
        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
        : '';

    // If parent is not registered yet, add state to queue and register later
    if (parentName && !states[parentName]) {
      return queueState(parentName, state.self);
    }

    for (var key in stateBuilder) {
      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
    }
    states[name] = state;

    // Register the state in the global state list and with $urlRouter if necessary.
    if (!state[abstractKey] && state.url) {
      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
          $state.transitionTo(state, $match, { inherit: true, location: false });
        }
      }]);
    }

    // Register any queued children
    flushQueuedChildren(name);

    return state;
  }

  // Checks text to see if it looks like a glob.
  function isGlob (text) {
    return text.indexOf('*') > -1;
  }

  // Returns true if glob matches current $state name.
  function doesStateMatchGlob (glob) {
    var globSegments = glob.split('.'),
        segments = $state.$current.name.split('.');

    //match greedy starts
    if (globSegments[0] === '**') {
       segments = segments.slice(indexOf(segments, globSegments[1]));
       segments.unshift('**');
    }
    //match greedy ends
    if (globSegments[globSegments.length - 1] === '**') {
       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
       segments.push('**');
    }

    if (globSegments.length != segments.length) {
      return false;
    }

    //match single stars
    for (var i = 0, l = globSegments.length; i < l; i++) {
      if (globSegments[i] === '*') {
        segments[i] = '*';
      }
    }

    return segments.join('') === globSegments.join('');
  }


  // Implicit root state that is always active
  root = registerState({
    name: '',
    url: '^',
    views: null,
    'abstract': true
  });
  root.navigable = null;


  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the 
   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
   * to add custom functionality to ui-router, for example inferring templateUrl 
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new 
   * properties within the state's internal definition. There is currently no clear 
   * use-case for this beyond accessing internal states (i.e. $state.$current), 
   * however, expect this to become increasingly relevant as we introduce additional 
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of 
   * execution of the builder functions in non-deterministic. Builder functions 
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
   *   or `null`.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to 
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view 
   *   name (i.e. "viewName@stateName") and each value is the config object 
   *   (template, controller) for the view. Even when you don't use the views object 
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template 
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state. 
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that 
   *   would pass a `$state.includes()` test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function (state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(views, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate. 
   * @param {object} func A function that is responsible for decorating the original 
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
  this.decorator = decorator;
  function decorator(name, func) {
    /*jshint validthis: true */
    if (isString(name) && !isDefined(func)) {
      return stateBuilder[name];
    }
    if (!isFunction(func) || !isString(name)) {
      return this;
    }
    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
      stateBuilder.$delegates[name] = stateBuilder[name];
    }
    stateBuilder[name] = func;
    return this;
  }

  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} stateConfig State configuration object.
   * @param {string|function=} stateConfig.template
   * <a id='template'></a>
   *   html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property 
   *   takes precedence over templateUrl.
   *   
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>template:
   *   "<h1>inline template definition</h1>" +
   *   "<div ui-view></div>"</pre>
   * <pre>template: function(params) {
   *       return "<h1>generated template</h1>"; }</pre>
   * </div>
   *
   * @param {string|function=} stateConfig.templateUrl
   * <a id='templateUrl'></a>
   *
   *   path or function that returns a path to an html
   *   template that should be used by uiView.
   *   
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
   *     applying the current state
   *
   * <pre>templateUrl: "home.html"</pre>
   * <pre>templateUrl: function(params) {
   *     return myTemplates[params.pageId]; }</pre>
   *
   * @param {function=} stateConfig.templateProvider
   * <a id='templateProvider'></a>
   *    Provider function that returns HTML content string.
   * <pre> templateProvider:
   *       function(MyTemplateService, params) {
   *         return MyTemplateService.getTemplate(params.pageId);
   *       }</pre>
   *
   * @param {string|function=} stateConfig.controller
   * <a id='controller'></a>
   *
   *  Controller fn that should be associated with newly
   *   related scope or the name of a registered controller if passed as a string.
   *   Optionally, the ControllerAs may be declared here.
   * <pre>controller: "MyRegisteredController"</pre>
   * <pre>controller:
   *     "MyRegisteredController as fooCtrl"}</pre>
   * <pre>controller: function($scope, MyService) {
   *     $scope.data = MyService.getData(); }</pre>
   *
   * @param {function=} stateConfig.controllerProvider
   * <a id='controllerProvider'></a>
   *
   * Injectable provider function that returns the actual controller or string.
   * <pre>controllerProvider:
   *   function(MyResolveData) {
   *     if (MyResolveData.foo)
   *       return "FooCtrl"
   *     else if (MyResolveData.bar)
   *       return "BarCtrl";
   *     else return function($scope) {
   *       $scope.baz = "Qux";
   *     }
   *   }</pre>
   *
   * @param {string=} stateConfig.controllerAs
   * <a id='controllerAs'></a>
   * 
   * A controller alias name. If present the controller will be
   *   published to scope under the controllerAs name.
   * <pre>controllerAs: "myCtrl"</pre>
   *
   * @param {object=} stateConfig.resolve
   * <a id='resolve'></a>
   *
   * An optional map&lt;string, function&gt; of dependencies which
   *   should be injected into the controller. If any of these dependencies are promises, 
   *   the router will wait for them all to be resolved before the controller is instantiated.
   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
   *   and the values of the resolved promises are injected into any controllers that reference them.
   *   If any  of the promises are rejected the $stateChangeError event is fired.
   *
   *   The map object is:
   *   
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
   *     it is injected and return value it treated as dependency. If result is a promise, it is 
   *     resolved before its value is injected into controller.
   *
   * <pre>resolve: {
   *     myResolve1:
   *       function($http, $stateParams) {
   *         return $http.get("/api/foos/"+stateParams.fooID);
   *       }
   *     }</pre>
   *
   * @param {string=} stateConfig.url
   * <a id='url'></a>
   *
   *   A url fragment with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any 
   *   parameters that were passed.
   *
   * examples:
   * <pre>url: "/home"
   * url: "/users/:userid"
   * url: "/books/{bookid:[a-zA-Z_-]}"
   * url: "/books/{categoryid:int}"
   * url: "/books/{publishername:string}/{categoryid:int}"
   * url: "/messages?before&after"
   * url: "/messages?{before:date}&{after:date}"</pre>
   * url: "/messages/:mailboxid?{before:date}&{after:date}"
   *
   * @param {object=} stateConfig.views
   * <a id='views'></a>
   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
   * manually/explicitly.
   *
   * Examples:
   *
   * Targets three named `ui-view`s in the parent state's template
   * <pre>views: {
   *     header: {
   *       controller: "headerCtrl",
   *       templateUrl: "header.html"
   *     }, body: {
   *       controller: "bodyCtrl",
   *       templateUrl: "body.html"
   *     }, footer: {
   *       controller: "footCtrl",
   *       templateUrl: "footer.html"
   *     }
   *   }</pre>
   *
   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
   * <pre>views: {
   *     'header@top': {
   *       controller: "msgHeaderCtrl",
   *       templateUrl: "msgHeader.html"
   *     }, 'body': {
   *       controller: "messagesCtrl",
   *       templateUrl: "messages.html"
   *     }
   *   }</pre>
   *
   * @param {boolean=} [stateConfig.abstract=false]
   * <a id='abstract'></a>
   * An abstract state will never be directly activated,
   *   but can provide inherited properties to its common children states.
   * <pre>abstract: true</pre>
   *
   * @param {function=} stateConfig.onEnter
   * <a id='onEnter'></a>
   *
   * Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onEnter: function(MyService, $stateParams) {
   *     MyService.foo($stateParams.myParam);
   * }</pre>
   *
   * @param {function=} stateConfig.onExit
   * <a id='onExit'></a>
   *
   * Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onExit: function(MyService, $stateParams) {
   *     MyService.cleanup($stateParams.myParam);
   * }</pre>
   *
   * @param {boolean=} [stateConfig.reloadOnSearch=true]
   * <a id='reloadOnSearch'></a>
   *
   * If `false`, will not retrigger the same state
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   * <pre>reloadOnSearch: false</pre>
   *
   * @param {object=} stateConfig.data
   * <a id='data'></a>
   *
   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
   *   prototypally inherited.  In other words, adding a data property to a state adds it to
   *   the entire subtree via prototypal inheritance.
   *
   * <pre>data: {
   *     requiredRole: 'foo'
   * } </pre>
   *
   * @param {object=} stateConfig.params
   * <a id='params'></a>
   *
   * A map which optionally configures parameters declared in the `url`, or
   *   defines additional non-url parameters.  For each parameter being
   *   configured, add a configuration object keyed to the name of the parameter.
   *
   *   Each parameter configuration object may contain the following properties:
   *
   *   - ** value ** - {object|function=}: specifies the default value for this
   *     parameter.  This implicitly sets this parameter as optional.
   *
   *     When UI-Router routes to a state and no value is
   *     specified for this parameter in the URL or transition, the
   *     default value will be used instead.  If `value` is a function,
   *     it will be injected and invoked, and the return value used.
   *
   *     *Note*: `undefined` is treated as "no default value" while `null`
   *     is treated as "the default value is `null`".
   *
   *     *Shorthand*: If you only need to configure the default value of the
   *     parameter, you may use a shorthand syntax.   In the **`params`**
   *     map, instead mapping the param name to a full parameter configuration
   *     object, simply set map it to the default parameter value, e.g.:
   *
   * <pre>// define a parameter's default value
   * params: {
   *     param1: { value: "defaultValue" }
   * }
   * // shorthand default values
   * params: {
   *     param1: "defaultValue",
   *     param2: "param2Default"
   * }</pre>
   *
   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
   *     treated as an array of values.  If you specified a Type, the value will be
   *     treated as an array of the specified Type.  Note: query parameter values
   *     default to a special `"auto"` mode.
   *
   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
   *     value (e.g.: `{ foo: '1' }`).
   *
   * <pre>params: {
   *     param1: { array: true }
   * }</pre>
   *
   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
   *     configured default squash policy.
   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
   *
   *   There are three squash settings:
   *
   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
   *       This can allow for cleaner looking URLs.
   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
   *
   * <pre>params: {
   *     param1: {
   *       value: "defaultId",
   *       squash: true
   * } }
   * // squash "defaultValue" to "~"
   * params: {
   *     param1: {
   *       value: "defaultValue",
   *       squash: "~"
   * } }
   * </pre>
   *
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   */
  this.state = state;
  function state(name, definition) {
    /*jshint validthis: true */
    if (isObject(name)) definition = name;
    else definition.name = name;
    registerState(definition);
    return this;
  }

  /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   * @requires ui.router.router.$urlRouter
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However 
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll 
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
  this.$get = $get;
  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {

    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
    var TransitionPrevented = $q.reject(new Error('transition prevented'));
    var TransitionAborted = $q.reject(new Error('transition aborted'));
    var TransitionFailed = $q.reject(new Error('transition failed'));

    // Handles the case where a state which is the target of a transition is not found, and the user
    // can optionally retry or defer the transition
    function handleRedirect(redirect, state, params, options) {
      /**
       * @ngdoc event
       * @name ui.router.state.$state#$stateNotFound
       * @eventOf ui.router.state.$state
       * @eventType broadcast on root scope
       * @description
       * Fired when a requested state **cannot be found** using the provided state name during transition.
       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
       *
       * @param {Object} event Event object.
       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
       * @param {State} fromState Current state object.
       * @param {Object} fromParams Current state params.
       *
       * @example
       *
       * <pre>
       * // somewhere, assume lazy.state has not been defined
       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
       *
       * // somewhere else
       * $scope.$on('$stateNotFound',
       * function(event, unfoundState, fromState, fromParams){
       *     console.log(unfoundState.to); // "lazy.state"
       *     console.log(unfoundState.toParams); // {a:1, b:2}
       *     console.log(unfoundState.options); // {inherit:false} + default options
       * })
       * </pre>
       */
      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

      if (evt.defaultPrevented) {
        $urlRouter.update();
        return TransitionAborted;
      }

      if (!evt.retry) {
        return null;
      }

      // Allow the handler to return a promise to defer state lookup retry
      if (options.$retry) {
        $urlRouter.update();
        return TransitionFailed;
      }
      var retryTransition = $state.transition = $q.when(evt.retry);

      retryTransition.then(function() {
        if (retryTransition !== $state.transition) return TransitionSuperseded;
        redirect.options.$retry = true;
        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
      }, function() {
        return TransitionAborted;
      });
      $urlRouter.update();

      return retryTransition;
    }

    root.locals = { resolve: null, globals: { $stateParams: {} } };

    $state = {
      params: {},
      current: root.self,
      $current: root,
      transition: null
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved, events are not re-fired, 
     * and controllers reinstantiated (bug with controllers reinstantiating right now, fixing soon).
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.reload = function reload() {
      return $state.transitionTo($state.current, $stateParams, { reload: true, inherit: false, notify: true });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls 
     * `$state.transitionTo` internally but automatically sets options to 
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
     * This allows you to easily use an absolute or relative to path and specify 
     * only the parameters you'd like to update (while letting unspecified parameters 
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state, 
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
     * defined parameters. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
    $state.go = function go(to, params, options) {
      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.transitionTo = function transitionTo(to, toParams, options) {
      toParams = toParams || {};
      options = extend({
        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
      }, options || {});

      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
      var evt, toState = findState(to, options.relative);

      if (!isDefined(toState)) {
        var redirect = { to: to, toParams: toParams, options: options };
        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

        if (redirectResult) {
          return redirectResult;
        }

        // Always retry once if the $stateNotFound was not prevented
        // (handles either redirect changed or state lazy-definition)
        to = redirect.to;
        toParams = redirect.toParams;
        options = redirect.options;
        toState = findState(to, options.relative);

        if (!isDefined(toState)) {
          if (!options.relative) throw new Error("No such state '" + to + "'");
          throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
        }
      }
      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
      if (!toState.params.$$validates(toParams)) return TransitionFailed;

      toParams = toState.params.$$values(toParams);
      to = toState;

      var toPath = to.path;

      // Starting from the root of the path, keep all levels that haven't changed
      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

      if (!options.reload) {
        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      }

      // If we're going to the same state and all locals are kept, we've got nothing to do.
      // But clear 'transition', as we still want to cancel any other pending transitions.
      // TODO: We may not want to bump 'transition' if we're called from a location change
      // that we've initiated ourselves, because we might accidentally abort a legitimate
      // transition initiated from code?
      if (shouldTriggerReload(to, from, locals, options)) {
        if (to.self.reloadOnSearch !== false) $urlRouter.update();
        $state.transition = null;
        return $q.when($state.current);
      }

      // Filter parameters before we pass them to event handlers etc.
      toParams = filterByKeys(to.params.$$keys(), toParams || {});

      // Broadcast start event and cancel the transition if requested
      if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeStart
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when the state transition **begins**. You can use `event.preventDefault()`
         * to prevent the transition from happening and then the transition promise will be
         * rejected with a `'transition prevented'` value.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         *
         * @example
         *
         * <pre>
         * $rootScope.$on('$stateChangeStart',
         * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
         * </pre>
         */
        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {
          $urlRouter.update();
          return TransitionPrevented;
        }
      }

      // Resolve locals for the remaining states, but don't update any global state just
      // yet -- if anything fails to resolve the current state needs to remain untouched.
      // We also set up an inheritance chain for the locals here. This allows the view directive
      // to quickly look up the correct definition for each view in the current state. Even
      // though we create the locals object itself outside resolveState(), it is initially
      // empty and gets filled asynchronously. We need to keep track of the promise for the
      // (fully resolved) current locals, and pass this down the chain.
      var resolved = $q.when(locals);

      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
        locals = toLocals[l] = inherit(locals);
        resolved = resolveState(state, toParams, state === to, resolved, locals, options);
      }

      // Once everything is resolved, we are ready to perform the actual transition
      // and return a promise for the new state. We also keep track of what the
      // current promise is, so that we can detect overlapping transitions and
      // keep only the outcome of the last transition.
      var transition = $state.transition = resolved.then(function () {
        var l, entering, exiting;

        if ($state.transition !== transition) return TransitionSuperseded;

        // Exit 'from' states not kept
        for (l = fromPath.length - 1; l >= keep; l--) {
          exiting = fromPath[l];
          if (exiting.self.onExit) {
            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
          }
          exiting.locals = null;
        }

        // Enter 'to' states not kept
        for (l = keep; l < toPath.length; l++) {
          entering = toPath[l];
          entering.locals = toLocals[l];
          if (entering.self.onEnter) {
            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
          }
        }

        // Run it again, to catch any transitions in callbacks
        if ($state.transition !== transition) return TransitionSuperseded;

        // Update globals in $state
        $state.$current = to;
        $state.current = to.self;
        $state.params = toParams;
        copy($state.params, $stateParams);
        $state.transition = null;

        if (options.location && to.navigable) {
          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
        }

        if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
        }
        $urlRouter.update(true);

        return $state.current;
      }, function (error) {
        if ($state.transition !== transition) return TransitionSuperseded;

        $state.transition = null;
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

        if (!evt.defaultPrevented) {
            $urlRouter.update();
        }

        return $q.reject(error);
      });

      return transition;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be
     * tested for strict equality against the current active params object, so all params
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * </pre>
     *
     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
     * test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it is the state.
     */
    $state.is = function is(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) { return undefined; }
      if ($state.$current !== state) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * Partial and relative names
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     *
     * // Using relative names (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
     * </pre>
     *
     * Basic globbing patterns
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name, relative name, or glob pattern
     * to be searched for within the current state name.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
     * that you'd like to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
     * .includes will test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
    $state.includes = function includes(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      if (isString(stateOrName) && isGlob(stateOrName)) {
        if (!doesStateMatchGlob(stateOrName)) {
          return false;
        }
        stateOrName = $state.$current.name;
      }

      var state = findState(stateOrName, options.relative);
      if (!isDefined(state)) { return undefined; }
      if (!isDefined($state.$current.includes[state.name])) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
    };


    /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     * 
     * @returns {string} compiled state url
     */
    $state.href = function href(stateOrName, params, options) {
      options = extend({
        lossy:    true,
        inherit:  true,
        absolute: false,
        relative: $state.$current
      }, options || {});

      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) return null;
      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
      
      var nav = (state && options.lossy) ? state.navigable : state;

      if (!nav || nav.url === undefined || nav.url === null) {
        return null;
      }
      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys(), params || {}), {
        absolute: options.absolute
      });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
     * @returns {Object|Array} State configuration object or array of all objects.
     */
    $state.get = function (stateOrName, context) {
      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });
      var state = findState(stateOrName, context || $state.$current);
      return (state && state.self) ? state.self : null;
    };

    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
      // Make a restricted $stateParams with only the parameters that apply to this state if
      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
      // we also need $stateParams to be available for any $injector calls we make during the
      // dependency resolution process.
      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
      var locals = { $stateParams: $stateParams };

      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
      // We're also including $stateParams in this; that way the parameters are restricted
      // to the set that should be visible to the state, and are independent of when we update
      // the global $state and $stateParams values.
      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
      var promises = [dst.resolve.then(function (globals) {
        dst.globals = globals;
      })];
      if (inherited) promises.push(inherited);

      // Resolve template and dependencies for all views.
      forEach(state.views, function (view, name) {
        var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
        injectables.$template = [ function () {
          return $view.load(name, { view: view, locals: locals, params: $stateParams, notify: options.notify }) || '';
        }];

        promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
          // References to the controller (only instantiated at link time)
          if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
            var injectLocals = angular.extend({}, injectables, locals);
            result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
          } else {
            result.$$controller = view.controller;
          }
          // Provide access to the state itself for internal use
          result.$$state = state;
          result.$$controllerAs = view.controllerAs;
          dst[name] = result;
        }));
      });

      // Wait for all the promises and then return the activation object
      return $q.all(promises).then(function (values) {
        return dst;
      });
    }

    return $state;
  }

  function shouldTriggerReload(to, from, locals, options) {
    if (to === from && ((locals === from.locals && !options.reload) || (to.self.reloadOnSearch === false))) {
      return true;
    }
  }
}

angular.module('ui.router.state')
  .value('$stateParams', {})
  .provider('$state', $StateProvider);


$ViewProvider.$inject = [];
function $ViewProvider() {

  this.$get = $get;
  /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
  $get.$inject = ['$rootScope', '$templateFactory'];
  function $get(   $rootScope,   $templateFactory) {
    return {
      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
      /**
       * @ngdoc function
       * @name ui.router.state.$view#load
       * @methodOf ui.router.state.$view
       *
       * @description
       *
       * @param {string} name name
       * @param {object} options option object.
       */
      load: function load(name, options) {
        var result, defaults = {
          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
        };
        options = extend(defaults, options);

        if (options.view) {
          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
        }
        if (result && options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$viewContentLoading
         * @eventOf ui.router.state.$view
         * @eventType broadcast on root scope
         * @description
         *
         * Fired once the view **begins loading**, *before* the DOM is rendered.
         *
         * @param {Object} event Event object.
         * @param {Object} viewConfig The view config properties (template, controller, etc).
         *
         * @example
         *
         * <pre>
         * $scope.$on('$viewContentLoading',
         * function(event, viewConfig){
         *     // Access to all the view config properties.
         *     // and one special property 'targetView'
         *     // viewConfig.targetView
         * });
         * </pre>
         */
          $rootScope.$broadcast('$viewContentLoading', options);
        }
        return result;
      }
    };
  }
}

angular.module('ui.router.state').provider('$view', $ViewProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
function $ViewScrollProvider() {

  var useAnchorScroll = false;

  /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
  this.useAnchorScroll = function () {
    useAnchorScroll = true;
  };

  /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
    if (useAnchorScroll) {
      return $anchorScroll;
    }

    return function ($element) {
      $timeout(function () {
        $element[0].scrollIntoView();
      }, 0, false);
    };
  }];
}

angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} name A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 * 
 * @example
 * A view can be unnamed or named. 
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div> 
 * 
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a 
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div> 
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 * 
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * But typically you'll only use the views property if you name your view or have more than one view 
 * in the same template. There's not really a compelling reason to name a view if its the only one, 
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre> 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div> 
 * <div ui-view="data"></div> 
 * </pre>
 * 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 */
$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];
function $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {

  function getService() {
    return ($injector.has) ? function(service) {
      return $injector.has(service) ? $injector.get(service) : null;
    } : function(service) {
      try {
        return $injector.get(service);
      } catch (e) {
        return null;
      }
    };
  }

  var service = getService(),
      $animator = service('$animator'),
      $animate = service('$animate');

  // Returns a set of DOM manipulation functions based on which Angular version
  // it should use
  function getRenderer(attrs, scope) {
    var statics = function() {
      return {
        enter: function (element, target, cb) { target.after(element); cb(); },
        leave: function (element, cb) { element.remove(); cb(); }
      };
    };

    if ($animate) {
      return {
        enter: function(element, target, cb) {
          var promise = $animate.enter(element, null, target, cb);
          if (promise && promise.then) promise.then(cb);
        },
        leave: function(element, cb) {
          var promise = $animate.leave(element, cb);
          if (promise && promise.then) promise.then(cb);
        }
      };
    }

    if ($animator) {
      var animate = $animator && $animator(scope, attrs);

      return {
        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
        leave: function(element, cb) { animate.leave(element); cb(); }
      };
    }

    return statics();
  }

  var directive = {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    compile: function (tElement, tAttrs, $transclude) {
      return function (scope, $element, attrs) {
        var previousEl, currentEl, currentScope, latestLocals,
            onloadExp     = attrs.onload || '',
            autoScrollExp = attrs.autoscroll,
            renderer      = getRenderer(attrs, scope);

        scope.$on('$stateChangeSuccess', function() {
          updateView(false);
        });
        scope.$on('$viewContentLoading', function() {
          updateView(false);
        });

        updateView(true);

        function cleanupLastView() {
          if (previousEl) {
            previousEl.remove();
            previousEl = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }

          if (currentEl) {
            renderer.leave(currentEl, function() {
              previousEl = null;
            });

            previousEl = currentEl;
            currentEl = null;
          }
        }

        function updateView(firstTime) {
          var newScope,
              name            = getUiViewName(scope, attrs, $element, $interpolate),
              previousLocals  = name && $state.$current && $state.$current.locals[name];

          if (!firstTime && previousLocals === latestLocals) return; // nothing to do
          newScope = scope.$new();
          latestLocals = $state.$current.locals[name];

          var clone = $transclude(newScope, function(clone) {
            renderer.enter(clone, $element, function onUiViewEnter() {
              if(currentScope) {
                currentScope.$emit('$viewContentAnimationEnded');
              }

              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                $uiViewScroll(clone);
              }
            });
            cleanupLastView();
          });

          currentEl = clone;
          currentScope = newScope;
          /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description           *
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           */
          currentScope.$emit('$viewContentLoaded');
          currentScope.$eval(onloadExp);
        }
      };
    }
  };

  return directive;
}

$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
function $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {
  return {
    restrict: 'ECA',
    priority: -400,
    compile: function (tElement) {
      var initial = tElement.html();
      return function (scope, $element, attrs) {
        var current = $state.$current,
            name = getUiViewName(scope, attrs, $element, $interpolate),
            locals  = current && current.locals[name];

        if (! locals) {
          return;
        }

        $element.data('$uiView', { name: name, state: locals.$$state });
        $element.html(locals.$template ? locals.$template : initial);

        var link = $compile($element.contents());

        if (locals.$$controller) {
          locals.$scope = scope;
          var controller = $controller(locals.$$controller, locals);
          if (locals.$$controllerAs) {
            scope[locals.$$controllerAs] = controller;
          }
          $element.data('$ngControllerController', controller);
          $element.children().data('$ngControllerController', controller);
        }

        link(scope);
      };
    }
  };
}

/**
 * Shared ui-view code for both directives:
 * Given scope, element, and its attributes, return the view's name
 */
function getUiViewName(scope, attrs, element, $interpolate) {
  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
  var inherited = element.inheritedData('$uiView');
  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));
}

angular.module('ui.router.state').directive('uiView', $ViewDirective);
angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

function parseStateRef(ref, current) {
  var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
  if (preparsed) ref = current + '(' + preparsed[1] + ')';
  parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
  return { state: parsed[1], paramExpr: parsed[3] || null };
}

function stateContext(el) {
  var stateData = el.parent().inheritedData('$uiView');

  if (stateData && stateData.state && stateData.state.name) {
    return stateData.state;
  }
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated 
 * URL, the directive will automatically generate & update the `href` attribute via 
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking 
 * the link will trigger a state transition with optional parameters. 
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be 
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative 
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the 
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the 
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 * 
 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
 */
$StateRefDirective.$inject = ['$state', '$timeout'];
function $StateRefDirective($state, $timeout) {
  var allowedOptions = ['location', 'inherit', 'reload'];

  return {
    restrict: 'A',
    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
    link: function(scope, element, attrs, uiSrefActive) {
      var ref = parseStateRef(attrs.uiSref, $state.current.name);
      var params = null, url = null, base = stateContext(element) || $state.$current;
      var newHref = null, isAnchor = element.prop("tagName") === "A";
      var isForm = element[0].nodeName === "FORM";
      var attr = isForm ? "action" : "href", nav = true;

      var options = { relative: base, inherit: true };
      var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};

      angular.forEach(allowedOptions, function(option) {
        if (option in optionsOverride) {
          options[option] = optionsOverride[option];
        }
      });

      var update = function(newVal) {
        if (newVal) params = angular.copy(newVal);
        if (!nav) return;

        newHref = $state.href(ref.state, params, options);

        var activeDirective = uiSrefActive[1] || uiSrefActive[0];
        if (activeDirective) {
          activeDirective.$$setStateInfo(ref.state, params);
        }
        if (newHref === null) {
          nav = false;
          return false;
        }
        attrs.$set(attr, newHref);
      };

      if (ref.paramExpr) {
        scope.$watch(ref.paramExpr, function(newVal, oldVal) {
          if (newVal !== params) update(newVal);
        }, true);
        params = angular.copy(scope.$eval(ref.paramExpr));
      }
      update();

      if (isForm) return;

      element.bind("click", function(e) {
        var button = e.which || e.button;
        if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {
          // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
          var transition = $timeout(function() {
            $state.go(ref.state, params, options);
          });
          e.preventDefault();

          // if the state has no URL, ignore one preventDefault from the <a> directive.
          var ignorePreventDefaultCount = isAnchor && !newHref ? 1: 0;
          e.preventDefault = function() {
            if (ignorePreventDefaultCount-- <= 0)
              $timeout.cancel(transition);
          };
        }
      });
    }
  };
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
 * ui-sref-active found at the same level or above the ui-sref will be used.
 *
 * Will activate when the ui-sref's target state or any child state is active. If you
 * need to activate only when the ui-sref target state is active and *not* any of
 * it's children, then you will use
 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 *
 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * The class name is interpolated **once** during the directives link time (any further changes to the
 * interpolated value are ignored).
 *
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 */

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active-eq
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
 * when the exact target state used in the `ui-sref` is active; no child states.
 *
 */
$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
function $StateRefActiveDirective($state, $stateParams, $interpolate) {
  return  {
    restrict: "A",
    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
      var state, params, activeClass;

      // There probably isn't much point in $observing this
      // uiSrefActive and uiSrefActiveEq share the same directive object with some
      // slight difference in logic routing
      activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);

      // Allow uiSref to communicate with uiSrefActive[Equals]
      this.$$setStateInfo = function (newState, newParams) {
        state = $state.get(newState, stateContext($element));
        params = newParams;
        update();
      };

      $scope.$on('$stateChangeSuccess', update);

      // Update route state
      function update() {
        if (isMatch()) {
          $element.addClass(activeClass);
        } else {
          $element.removeClass(activeClass);
        }
      }

      function isMatch() {
        if (typeof $attrs.uiSrefActiveEq !== 'undefined') {
          return state && $state.is(state.name, params);
        } else {
          return state && $state.includes(state.name, params);
        }
      }
    }]
  };
}

angular.module('ui.router.state')
  .directive('uiSref', $StateRefDirective)
  .directive('uiSrefActive', $StateRefActiveDirective)
  .directive('uiSrefActiveEq', $StateRefActiveDirective);

/**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
$IsStateFilter.$inject = ['$state'];
function $IsStateFilter($state) {
  var isFilter = function (state) {
    return $state.is(state);
  };
  isFilter.$stateful = true;
  return isFilter;
}

/**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
$IncludedByStateFilter.$inject = ['$state'];
function $IncludedByStateFilter($state) {
  var includesFilter = function (state) {
    return $state.includes(state);
  };
  includesFilter.$stateful = true;
  return  includesFilter;
}

angular.module('ui.router.state')
  .filter('isState', $IsStateFilter)
  .filter('includedByState', $IncludedByStateFilter);
})(window, window.angular);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\accounts.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util');

client = client.wrap(pathPrefix, {
  prefix: '/accounts'
});

module.exports = {
  //Get Account Details
  getAccounts: function() {
    return client({
      params: {
        can_create: true
      }
    }).then(util.wrapper('accounts'));
  },
  postPlans: function(args) {
    return client({
      path: "/select_plan",
      method: "POST",
      entity: args.body
    }).then(util.wrapper());
  },
  getBillingInfo: function() {
    return client({
      path: "/get_billing_info"
    }).then(util.wrapper());
  },
  getPaymentHistory: function() {
    return client({
      path: "/payment_history"
    }).then(util.wrapper('payment_history'));
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\analytics.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util')

var client = client.wrap(pathPrefix, {
  prefix: '/events'
});

var funnel = client.wrap(pathPrefix, {
  prefix: '/analytics/funnels'
});
var segment = client.wrap(pathPrefix, {
  prefix: '/analytics/segments'
});
module.exports = {
  getEvents: function(args) {
    return client({
      params: args.options.query,
      headers: args.headers
    }).then(util.wrapper('events'))
  },
  getPropAnalytics: function(args) {
    if (args.options) {
      if (args.options.eventUid)
        args.options.eventUid = '/' + args.options.eventUid;
      else
        args.options.eventUid = "";
    } else {
      args.options = {};
      args.options.eventUid = "";
    }
    return client({
      path: args.options.eventUid,
      headers: args.headers,
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  deleteEvents: function(args) {
    return client({
      path: '/' + args.options.eventUid,
      headers: args.headers,
      method: 'DELETE',
      entity: '{}'
    }).then(util.wrapper());
  },
  editEvents: function(args) {
    return client({
      path: '/' + args.options.eventUid,
      headers: args.headers,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },
  getAnalytics: function(args) {
    return client({
      path: '/' + args.options.eventType,
      headers: args.headers
    }).then(util.wrapper())
  },
  postAnalytics: function(args) {
    return client({
      path: '/' + args.options.eventType,
      headers: args.headers,
      method: 'POST',
      entity: args.body
    }).then(util.wrapper())
  },
  deleteFunnel: function(args) {
    return funnel({
      path: '/' + args.options.funnelUid,
      headers: args.headers,
      method: 'DELETE',
      entity: '{}'
    }).then(util.wrapper());
  },
  addFunnel: function(args) {
    return funnel({
      headers: args.headers,
      method: 'POST',
      entity: args.body
    }).then(util.wrapper())
  },
  editFunnel: function(args) {
    return funnel({
      path: '/' + args.options.funnelUid,
      headers: args.headers,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },
  deleteBookmarkSegment: function(args) {
    return segment({
      path: '/' + args.options.segmentUid,
      headers: args.headers,
      method: 'DELETE',
      entity: '{}'
    }).then(util.wrapper());
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\api-host.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util');

client = client.wrap(pathPrefix, {
  prefix: '/get_api_host'
});

module.exports = {
  getApiHost: function() {
    return client().then(util.wrapper());
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\api-metrics.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util');

client = client.wrap(pathPrefix, {
  prefix: '/api_metrics'
});

module.exports = {
  get: function(args) {
    return client({
      path: '/' + args.options.metricsType,
      headers: args.headers,
      params: args.options.query || {}
    }).then(util.wrapper());
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\app-user-session.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util')

var user_session = client.wrap(pathPrefix, {
    prefix: '/application/users'
});

module.exports = {
    login: function(args) {
        return user_session({
            path: '/login',
            method: 'POST',
            entity: args.body,
            headers: args.headers || {}
        }).then(util.wrapper())
    },
    get: function(args) {
        return user_session({
            path: '/current',
            headers: args.headers
        }).then(util.wrapper('application_user'));
    },
    logout: function(args) {
        return user_session({
            path: '/logout',
            headers: args.headers,
            method: 'DELETE',
            entity: '{}'
        }).then(util.wrapper());
    },
    resetPassword: function(args) {
        return user_session({
            path: '/forgot_password/reset_password',
            method: 'POST',
            entity: args.body,
            headers: args.headers || {}
        }).then(util.wrapper())

    },
    activateAccount: function(args) {
        return user_session({
            path: '/' + args.options.appUserUid + '/activate/' + args.options.authtoken
        }).then(util.wrapper());
    }

}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\application.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util')

client = client.wrap(pathPrefix, {
  prefix: '/applications'
});

module.exports = {
  getApp: function(args) {
    return client({
      path: '/' + args.headers.application_api_key,
      headers: args.headers
    }).then(util.wrapper('application'))
  },
  getApps: function() {
    return client({
      params: {
        include_discrete_variables: true
      }
    }).then(util.wrapper('applications'));
  },
  getAppSettings: function(args) {
    return client({
      path: '/' + args.headers.application_api_key + '/' + args.options.settingType,
      headers: args.headers
    }).then(util.wrapper())
  },
  postAppSettings: function(args) {
    return client({
      path: '/' + args.headers.application_api_key + '/' + args.options.settingType,
      method: 'POST',
      headers: args.headers,
      entity: args.body
    }).then(util.wrapper())
  },
  addOne: function(args) {
    return client({
      method: 'POST',
      headers: args.headers,
      entity: args.body
    }).then(util.wrapper())
  },
  deleteOne: function(args) {
    return client({
      path: '/' + args.options.appUid,
      headers: args.headers,
      method: 'DELETE'
    }).then(util.wrapper());
  },
  transferOwnerShip: function(args) {
    return client({
      method: 'POST',
      path: '/' + args.options.appUid + '/transfer_ownership',
      headers: args.headers,
      entity: args.body
    }).then(util.wrapper())
  },
  editOne: function(args) {
    return client({
      path: '/' + args.options.appUid,
      headers: args.headers,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },
  ownershipActivation: function(args) {
    return client({
      method: 'POST',
      path: '/' + args.options.authtoken + '/accept_application_ownership',
      headers: args.headers,
      entity: args.body
    }).then(util.wrapper())
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\bookmarks.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util');

// client = client.wrap(pathPrefix, {
//   prefix: '/cc'
// });

module.exports = {
  get: function(args) {
    return client({
      path: '/query_bookmarks',
      headers: args.headers,
    }).then(util.wrapper('query_bookmarks'));
  },
  delete: function(args) {
    return client({
      path: '/query_bookmarks/' + args.options.paramId,
      headers: args.headers,
      method: 'DELETE',
      entity: args.body || '{}'
    }).then(util.wrapper());
  },
  add: function(args) {
    return client({
      path: '/query_bookmarks',
      headers: args.headers,
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\built-api.js":[function(require,module,exports){
'use strict';

module.exports = {
   Apihost          : require('./api-host'),
  SystemUserSession : require('./system-user-session'),
  AppUserSession    : require('./app-user-session'),
  Application       : require('./application'),
  Classes           : require('./classes'),
  Objects           : require('./objects'),
  File              : require('./file'),
  Notifications     : require('./notifications'),
  FieldTypes        : require('./valid-field-types'),
  ServerConfig      : require('./server-config'),
  Plans             : require('./plans'),
  Accounts          : require('./accounts'),
  Tenants           : require('./tenants'),
  Extensions        : require('./extensions'),
  ApiMetrics        : require('./api-metrics'),
  Integration       : require('./integration'),
  Bookmarks         : require('./bookmarks'),
  Analytics         : require('./analytics'),
  Admin             : require('./super-admin')
};
},{"./accounts":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\accounts.js","./analytics":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\analytics.js","./api-host":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\api-host.js","./api-metrics":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\api-metrics.js","./app-user-session":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\app-user-session.js","./application":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\application.js","./bookmarks":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\bookmarks.js","./classes":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\classes.js","./extensions":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\extensions.js","./file":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\file.js","./integration":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\integration.js","./notifications":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\notifications.js","./objects":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\objects.js","./plans":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\plans.js","./server-config":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\server-config.js","./super-admin":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\super-admin.js","./system-user-session":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\system-user-session.js","./tenants":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\tenants.js","./valid-field-types":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\valid-field-types.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\classes.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util')

 client = client.wrap(pathPrefix, {
    prefix: '/classes'
  });

module.exports = {
    /*Get a single class built.io api call*/
    getAll: function(args) {
      args['options'] = args.options || {};
      return client({
        headers: args.headers,
        params: args.options.query || {}
      }).then(util.wrapper());
    },
    /*Get all classes built.io api call*/
    getOne: function(args) {
      return client({
        path: '/' + args.options.classUid,
        headers: args.headers
      }).then(util.wrapper('class'));
    },
    /*Edit single form*/
    editOne: function(args) {
      return client({
        path: '/' + args.options.classUid,
        headers: args.headers,
        method: 'PUT',
        entity: args.body
      }).then(util.wrapper());
    },
    /*Add a single form*/
    addOne: function(args) {
      return client({
        headers: args.headers,
        method: 'POST',
        entity: args.body
      }).then(util.wrapper());
    },
    deleteOne: function(args) {
      return client({
        path: '/'+args.options.classUid,
        headers: args.headers,
        method: 'DELETE',
        entity: '{}'
      }).then(util.wrapper());
    }
 }
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\extensions.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util');

client = client.wrap(pathPrefix, {
  prefix: '/cc'
});

module.exports = {
  get: function(args) {
    args.options.paramId = args.options.paramId || "";
    return client({
      path: '/' + args.options.paramId,
      headers: args.headers,
      params: args.options.query || {}
    }).then(util.wrapper());
  },
  delete: function(args) {
    return client({
      path: '/' + args.options.paramId,
      headers: args.headers,
      method: 'DELETE',
      entity: args.body || '{}'
    }).then(util.wrapper());
  },
  addDomain: function(args) {
    return client({
      path: '/' + args.options.paramId,
      headers: args.headers,
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  state: function(args) {
    return client({
      path: '/' + args.options.paramId,
      headers: args.headers,
      method: 'POST',
      entity: '{}'
    }).then(util.wrapper());
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\file.js":[function(require,module,exports){
'use strict';

var client      = require('./rest');
var pathPrefix  = require('rest/interceptor/pathPrefix');
var util        = require('./util')

client = client.wrap(pathPrefix, {
  prefix: '/uploads'
});

module.exports = {
  getUpload: function(args) {
    args.options.uploadType = args.options.uploadType || "";
    return client({
      headers: args.headers,
      path: '/' + args.options.uploadType,
      params: args.options.query || {}
    }).then(util.wrapper());
  },
  deleteOne: function(args) {
    return client({
      path: '/' + args.options.uploadUid,
      headers: args.headers,
      method: 'DELETE',
      entity: '{}'
    }).then(util.wrapper());
  },
  deleteSelected: function(args) {
    return client({
      headers: args.headers,
      params: {
        query: args.options.query
      },
      method: 'DELETE',
      entity: '{}'
    }).then(util.wrapper());
  },
  postDefaultACl: function(args) {
    return client({
      headers: args.headers,
      path: '/default_acl',
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  updateUploadACl: function(args) {
    return client({
      headers: args.headers,
      path: '/' + args.options.uploadUid,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\integration.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util')

var client = client.wrap(pathPrefix, {
  prefix: '/web_hooks'
});

module.exports = {
  get: function(args) {
    return client({
      headers: args.headers,
    }).then(util.wrapper('web_hooks'))
  },
  put: function(args) {
    return client({
      path: '/'+args.options.webHookUid,
      headers: args.headers,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },
  post: function(args) {
    return client({
      headers: args.headers,
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  delete: function(args) {
      return client({
        path: '/'+args.options.hookUid,
        headers: args.headers,
        method: 'DELETE',
        entity: '{}'
      }).then(util.wrapper());
    }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\notifications.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util')

var credentialsPrefix = client.wrap(pathPrefix, {
    prefix: '/notification_credentials/details'
  });

client = client.wrap(pathPrefix, {
    prefix: '/notifications'
  });

module.exports = {
    /*Get all notifications built.io api call*/
    getAll: function(args) {
      return client({
        path : '/' + args.options.pathId,
        headers: args.headers,
        params: args.options.query || {},
      }).then(util.wrapper());
    },
    addOne: function(args) {
      return client({
        path : '/' + args.options.pathId,
        headers: args.headers,
        method: 'POST',
        entity: args.body
      }).then(util.wrapper());
    },
    editOne: function(args) {
      return client({
        path : '/' + args.options.pathId+'/'+args.options.objectUid,
        headers: args.headers,
        method: 'PUT',
        entity: args.body
      }).then(util.wrapper());
    },
    deleteOne: function(args) {
      return client({
        path: '/'+args.options.pathId+'/'+ args.options.objectUid,
        headers: args.headers,
        method: 'DELETE',
        entity: '{}'
      });
    },
    getCredentialsDetails : function(args) {
      return credentialsPrefix({
        headers: args.headers,
      }).then(util.wrapper('notification_credentials'));
    }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\objects.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util')

var client = client.wrap(pathPrefix, {
  prefix: '/classes'
});

module.exports = {
  /*Get a single object built.io api call*/
  getOne: function(args) {
    return client({
      path: args.options.classUid + '/objects/' + args.options.objectUid,
      headers: args.headers,
      params: args.options.query
    }).then(util.wrapper('object'));
  },
  getAll: function(args) {
    var apiUrl = '/' + [args.options.classUid, 'objects'].join('/');
    return client({
      path: apiUrl,
      headers: args.headers,
      params: args.options.query
    }).then(util.wrapper());
  },
  editOne: function(args) {
    return client({
      path: args.options.classUid + '/objects/' + args.options.objectUid,
      headers: args.headers,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },
  addOne: function(args) {
    return client({
      path: args.options.classUid + '/objects',
      headers: args.headers,
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  deleteOne: function(args) {
    return client({
      path: args.options.classUid + '/objects/' + args.options.objectUid,
      headers: args.headers,
      method: 'DELETE',
      entity: '{}'
    }).then(util.wrapper());
  },
  deleteSelected: function(args) {
    var apiUrl = '/' + [args.options.classUid, 'objects'].join('/');
    return client({
      path: apiUrl,
      headers: args.headers,
      params: {
        query: args.options.query
      },
      method: 'DELETE',
      entity: '{}'
    }).then(util.wrapper());
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\plans.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util');

client = client.wrap(pathPrefix, {
    prefix: '/plans'
  });

module.exports = {
    /*Get Host api*/
    getPlans: function() {
      return client().then(util.wrapper('plans'));
    }
  }
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js":[function(require,module,exports){
'use strict';
var rest = require('rest');
var mime = require('rest/interceptor/mime');
var pathPrefix = require('rest/interceptor/pathPrefix');
var errorCode = require('rest/interceptor/errorCode');

rest = rest.wrap(mime, {
  mime: 'application/json'
})
  .wrap(pathPrefix, {
    prefix: '/v1'
  })
  .wrap(errorCode);


module.exports = rest
},{"rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\browser.js","rest/interceptor/errorCode":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\errorCode.js","rest/interceptor/mime":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\mime.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\server-config.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util');

client = client.wrap(pathPrefix, {
   prefix: '/admin/config'
  });

module.exports = {
     /*Get Host api*/
    getServerConfig: function() {
      return client().then(util.wrapper());
    }
  }
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\super-admin.js":[function(require,module,exports){
var client      = require('./rest');
var pathPrefix  = require('rest/interceptor/pathPrefix');
var util        = require('./util');

var adminSession = client.wrap(pathPrefix, {
  prefix: '/admin/admin_session'
});

var adminMetrics = client.wrap(pathPrefix, {
  prefix: '/admin/admin_metrics'
});

var adminConfig = client.wrap(pathPrefix, {
  prefix: '/admin/config'
});

var permittedRegistrations = client.wrap(pathPrefix, {
  prefix: '/admin/permitted_registrations'
});

var userConfigurations = client.wrap(pathPrefix, {
  prefix: '/admin/user_configurations'
});

var resendActivationMail = client.wrap(pathPrefix, {
  prefix: '/admin/resend_activation_email'
});

var promoCodes = client.wrap(pathPrefix, {
  prefix: '/admin/promo_codes'
});

var plans = client.wrap(pathPrefix, {
  prefix: '/admin/plans'
});

var trials = client.wrap(pathPrefix, {
  prefix: '/admin/trials'
});

var cron = client.wrap(pathPrefix, {
  prefix: '/admin/jobs/cron'
});

var adminSettings = client.wrap(pathPrefix, {
  prefix: '/admin/admin_settings'
});

module.exports = {
  //Admin session 
  login: function(args) {
    return adminSession({
      method: 'POST',
      entity: args.body
    }).then(util.wrapper())
  },
  logout: function() {
    return adminSession({
      method: 'DELETE',
      entity: '{}'
    });
  },

  //Admin Metrics
  getAdminMetrics: function(args) {
    var params  = args.options ? args.options.query : {}; 
    return adminMetrics({
      params: params
    }).then(util.wrapper());
  },

  getUserMetrics: function(args) {
    var params  = args.options ? args.options.query : {}; 
    return adminMetrics({
      path : "/user_metrics",
      params: params
    }).then(util.wrapper());
  },

  //Admin Config
  getAdminConfig : function() {
    return adminConfig().then(util.wrapper());
  },

  //Admin permitted registrations
  getPermittedRegistrations : function(){
    return permittedRegistrations().then(util.wrapper()); 
  },
  editPermittedRegistrations : function(args){
    return permittedRegistrations({
      path : '/'+ args.options.registrarUid,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper()); 
  },
  deletePermittedRegistrations : function(args){
    return permittedRegistrations({
      path : '/'+ args.options.registrarUid,
      method: 'DELETE',
      entity: args.body
    }).then(util.wrapper()); 
  },
  addPermittedRegistrations : function(args){
    return permittedRegistrations({
      method: 'POST',
      entity: args.body
    }).then(util.wrapper()); 
  },

  // User Configurations
  getUserConfigurations : function(args){
    return userConfigurations({
      params: args.options.query
    }).then(util.wrapper());
  },

  updateUserConfig : function(args){
    return userConfigurations({
      path: '/' + args.options.user_id,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },

  resendActivationMail : function(args){
    return resendActivationMail({
      method: 'POST',
      entity: args.body
    }).then(util.wrapper()); 
  },


  //Promo codes
  getPromoCodes : function(args){
    return promoCodes().then(util.wrapper('promo_codes'));
  },
  postPromoCodes : function(args){
    return promoCodes({
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  editPromoCodes : function(args){
    return promoCodes({
      path : '/'+ args.options.promoCodeUid,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },
  deletePromoCodes : function(args){
    return promoCodes({
      path : '/'+ args.options.promoCodeUid,
      method: 'DELETE',
      entity: args.body
    }).then(util.wrapper());
  },

  //Plans
  getPlans : function(args){
    return plans().then(util.wrapper('plans'));
  },
  postPlans : function(args){
    return plans({
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  editPlans : function(args){
    return plans({
      path : '/'+ args.options.planUid,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },
  deletePlans : function(args){
    return plans({
      path : '/'+ args.options.planUid,
      method: 'DELETE',
      entity: '{}'
    }).then(util.wrapper());
  },

  //Trials
  getTrials : function(args){
    return trials().then(util.wrapper());
  },
  postTrials : function(args){
    return trials({
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  editTrials : function(args){
    return trials({
      path : '/'+ args.options.trailUid,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },
  deleteTrials : function(args){
    return trials({
      path : '/'+ args.options.trailUid,
      method: 'DELETE',
      entity: args.body
    }).then(util.wrapper());
  },

  //Cron Jobs
  getCron : function(args){
    return cron().then(util.wrapper());
  },
  postCron : function(args){
    return cron({
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  getPredefinedCron : function(args){
    return cron({
      path : '/predefined'
    }).then(util.wrapper());
  },
  deleteCron : function(args){
    return cron({
      path : '/'+ args.options.cronUid,
      method: 'DELETE',
      entity: args.body
    }).then(util.wrapper());
  },

  //Settings
  getAdminSettings : function(){
    return adminSettings().then(util.wrapper('admin_settings'));
  },
  postAdminSettings : function(args){
    return adminSettings({
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\system-user-session.js":[function(require,module,exports){
var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util');

var user_session = client.wrap(pathPrefix, {
  prefix: '/user_session'
});

var user = client.wrap(pathPrefix, {
  prefix: '/user'
});


module.exports = {
  login: function(args) {
    return user_session({
      method: 'POST',
      entity: args.body
    }).then(util.wrapper())
  },
  get: function() {
    return user({}).then(util.wrapper('user'));
  },
  logout: function() {
    return user_session({
      method: 'DELETE',
      entity: '{}'
    });
  },
  postForgotPassword: function(args) {
    return user({
      path: '/forgot_password',
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  signUp: function(args) {
    return user({
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  update: function(args) {
    return user({
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },
  resetPassword: function(args) {
    return user({
      path: '/reset_password_submit',
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  },
  activateAccount: function(args) {
    return client({
      path: '/activations/' + args.options.authtoken + '/activate'
    }).then(util.wrapper());
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\tenants.js":[function(require,module,exports){
'use strict';

var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util');

client = client.wrap(pathPrefix, {
  prefix: '/tenants'
});

module.exports = {
  getAll: function(args) {
    return client({
      headers: args.headers
    }).then(util.wrapper('tenants'));
  },
  editTenant : function(args){
    return client({
      path: '/'+args.options.tenantUid,
      headers: args.headers,
      method: 'PUT',
      entity: args.body
    }).then(util.wrapper());
  },
  deleteTenant : function(args){
    return client({
      path: '/'+args.options.tenantUid,
      headers: args.headers,
      method: 'DELETE',
      entity: args.body
    }).then(util.wrapper());
  },
  addTenant: function(args) {
    return client({
      headers: args.headers,
      method: 'POST',
      entity: args.body
    }).then(util.wrapper());
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js":[function(require,module,exports){
module.exports = {
    wrapper: function(wrap) {
      if (typeof(wrap) != "undefined") {
        return function(res) {
          return res.entity[wrap];
        }
      } else {
        return function(res) {
          return res.entity;
        }
      }
    }
  }

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\valid-field-types.js":[function(require,module,exports){
var client = require('./rest');
var pathPrefix = require('rest/interceptor/pathPrefix');
var util = require('./util');

client = client.wrap(pathPrefix, {
  prefix: '/applications/valid_field_types'
});

module.exports = {
  getDataTypes: function() {
    return client().then(util.wrapper('field_types'))
  }
}
},{"./rest":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\rest.js","./util":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\built_modules\\built-api\\util.js","rest/interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\UrlBuilder.js":[function(require,module,exports){
/*
 * Copyright 2012-2013 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define, location) {
	'use strict';

	var undef;

	define(function (require) {

		var mixin, origin, urlRE, absoluteUrlRE, fullyQualifiedUrlRE;

		mixin = require('./util/mixin');

		urlRE = /([a-z][a-z0-9\+\-\.]*:)\/\/([^@]+@)?(([^:\/]+)(:([0-9]+))?)?(\/[^?#]*)?(\?[^#]*)?(#\S*)?/i;
		absoluteUrlRE = /^([a-z][a-z0-9\-\+\.]*:\/\/|\/)/i;
		fullyQualifiedUrlRE = /([a-z][a-z0-9\+\-\.]*:)\/\/([^@]+@)?(([^:\/]+)(:([0-9]+))?)?\//i;

		/**
		 * Apply params to the template to create a URL.
		 *
		 * Parameters that are not applied directly to the template, are appended
		 * to the URL as query string parameters.
		 *
		 * @param {string} template the URI template
		 * @param {Object} params parameters to apply to the template
		 * @return {string} the resulting URL
		 */
		function buildUrl(template, params) {
			// internal builder to convert template with params.
			var url, name, queryStringParams, re;

			url = template;
			queryStringParams = {};

			if (params) {
				for (name in params) {
					/*jshint forin:false */
					re = new RegExp('\\{' + name + '\\}');
					if (re.test(url)) {
						url = url.replace(re, encodeURIComponent(params[name]), 'g');
					}
					else {
						queryStringParams[name] = params[name];
					}
				}
				for (name in queryStringParams) {
					url += url.indexOf('?') === -1 ? '?' : '&';
					url += encodeURIComponent(name);
					if (queryStringParams[name] !== null && queryStringParams[name] !== undefined) {
						url += '=';
						url += encodeURIComponent(queryStringParams[name]);
					}
				}
			}
			return url;
		}

		function startsWith(str, test) {
			return str.indexOf(test) === 0;
		}

		/**
		 * Create a new URL Builder
		 *
		 * @param {string|UrlBuilder} template the base template to build from, may be another UrlBuilder
		 * @param {Object} [params] base parameters
		 * @constructor
		 */
		function UrlBuilder(template, params) {
			if (!(this instanceof UrlBuilder)) {
				// invoke as a constructor
				return new UrlBuilder(template, params);
			}

			if (template instanceof UrlBuilder) {
				this._template = template.template;
				this._params = mixin({}, this._params, params);
			}
			else {
				this._template = (template || '').toString();
				this._params = params || {};
			}
		}

		UrlBuilder.prototype = {

			/**
			 * Create a new UrlBuilder instance that extends the current builder.
			 * The current builder is unmodified.
			 *
			 * @param {string} [template] URL template to append to the current template
			 * @param {Object} [params] params to combine with current params.  New params override existing params
			 * @return {UrlBuilder} the new builder
			 */
			append: function (template,  params) {
				// TODO consider query strings and fragments
				return new UrlBuilder(this._template + template, mixin({}, this._params, params));
			},

			/**
			 * Create a new UrlBuilder with a fully qualified URL based on the
			 * window's location or base href and the current templates relative URL.
			 *
			 * Path variables are preserved.
			 *
			 * *Browser only*
			 *
			 * @return {UrlBuilder} the fully qualified URL template
			 */
			fullyQualify: function () {
				if (!location) { return this; }
				if (this.isFullyQualified()) { return this; }

				var template = this._template;

				if (startsWith(template, '//')) {
					template = origin.protocol + template;
				}
				else if (startsWith(template, '/')) {
					template = origin.origin + template;
				}
				else if (!this.isAbsolute()) {
					template = origin.origin + origin.pathname.substring(0, origin.pathname.lastIndexOf('/') + 1);
				}

				if (template.indexOf('/', 8) === -1) {
					// default the pathname to '/'
					template = template + '/';
				}

				return new UrlBuilder(template, this._params);
			},

			/**
			 * True if the URL is absolute
			 *
			 * @return {boolean}
			 */
			isAbsolute: function () {
				return absoluteUrlRE.test(this.build());
			},

			/**
			 * True if the URL is fully qualified
			 *
			 * @return {boolean}
			 */
			isFullyQualified: function () {
				return fullyQualifiedUrlRE.test(this.build());
			},

			/**
			 * True if the URL is cross origin. The protocol, host and port must not be
			 * the same in order to be cross origin,
			 *
			 * @return {boolean}
			 */
			isCrossOrigin: function () {
				if (!origin) {
					return true;
				}
				var url = this.parts();
				return url.protocol !== origin.protocol ||
				       url.hostname !== origin.hostname ||
				       url.port !== origin.port;
			},

			/**
			 * Split a URL into its consituent parts following the naming convention of
			 * 'window.location'. One difference is that the port will contain the
			 * protocol default if not specified.
			 *
			 * @see https://developer.mozilla.org/en-US/docs/DOM/window.location
			 *
			 * @returns {Object} a 'window.location'-like object
			 */
			parts: function () {
				/*jshint maxcomplexity:20 */
				var url, parts;
				url = this.fullyQualify().build().match(urlRE);
				parts = {
					href: url[0],
					protocol: url[1],
					host: url[3] || '',
					hostname: url[4] || '',
					port: url[6],
					pathname: url[7] || '',
					search: url[8] || '',
					hash: url[9] || ''
				};
				parts.origin = parts.protocol + '//' + parts.host;
				parts.port = parts.port || (parts.protocol === 'https:' ? '443' : parts.protocol === 'http:' ? '80' : '');
				return parts;
			},

			/**
			 * Expand the template replacing path variables with parameters
			 *
			 * @param {Object} [params] params to combine with current params.  New params override existing params
			 * @return {string} the expanded URL
			 */
			build: function (params) {
				return buildUrl(this._template, mixin({}, this._params, params));
			},

			/**
			 * @see build
			 */
			toString: function () {
				return this.build();
			}

		};

		origin = location ? new UrlBuilder(location.href).parts() : undef;

		return UrlBuilder;
	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); },
	typeof window !== 'undefined' ? window.location : void 0
	// Boilerplate for AMD and Node
));

},{"./util/mixin":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\mixin.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\browser.js":[function(require,module,exports){
/*
 * Copyright 2014 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (require) {

		var rest = require('./client/default'),
		    browser = require('./client/xhr');

		rest.setPlatformDefaultClient(browser);

		return rest;

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"./client/default":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\client\\default.js","./client/xhr":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\client\\xhr.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\client.js":[function(require,module,exports){
/*
 * Copyright 2014 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (/* require */) {

		/**
		 * Add common helper methods to a client impl
		 *
		 * @param {function} impl the client implementation
		 * @param {Client} [target] target of this client, used when wrapping other clients
		 * @returns {Client} the client impl with additional methods
		 */
		return function client(impl, target) {

			if (target) {

				/**
				 * @returns {Client} the target client
				 */
				impl.skip = function skip() {
					return target;
				};

			}

			/**
			 * Allow a client to easily be wrapped by an interceptor
			 *
			 * @param {Interceptor} interceptor the interceptor to wrap this client with
			 * @param [config] configuration for the interceptor
			 * @returns {Client} the newly wrapped client
			 */
			impl.wrap = function wrap(interceptor, config) {
				return interceptor(impl, config);
			};

			/**
			 * @deprecated
			 */
			impl.chain = function chain() {
				if (typeof console !== 'undefined') {
					console.log('rest.js: client.chain() is deprecated, use client.wrap() instead');
				}

				return impl.wrap.apply(this, arguments);
			};

			return impl;

		};

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\client\\default.js":[function(require,module,exports){
/*
 * Copyright 2014 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	var undef;

	define(function (require) {

		/**
		 * Plain JS Object containing properties that represent an HTTP request.
		 *
		 * Depending on the capabilities of the underlying client, a request
		 * may be cancelable. If a request may be canceled, the client will add
		 * a canceled flag and cancel function to the request object. Canceling
		 * the request will put the response into an error state.
		 *
		 * @field {string} [method='GET'] HTTP method, commonly GET, POST, PUT, DELETE or HEAD
		 * @field {string|UrlBuilder} [path=''] path template with optional path variables
		 * @field {Object} [params] parameters for the path template and query string
		 * @field {Object} [headers] custom HTTP headers to send, in addition to the clients default headers
		 * @field [entity] the HTTP entity, common for POST or PUT requests
		 * @field {boolean} [canceled] true if the request has been canceled, set by the client
		 * @field {Function} [cancel] cancels the request if invoked, provided by the client
		 * @field {Client} [originator] the client that first handled this request, provided by the interceptor
		 *
		 * @class Request
		 */

		/**
		 * Plain JS Object containing properties that represent an HTTP response
		 *
		 * @field {Object} [request] the request object as received by the root client
		 * @field {Object} [raw] the underlying request object, like XmlHttpRequest in a browser
		 * @field {number} [status.code] status code of the response (i.e. 200, 404)
		 * @field {string} [status.text] status phrase of the response
		 * @field {Object] [headers] response headers hash of normalized name, value pairs
		 * @field [entity] the response body
		 *
		 * @class Response
		 */

		/**
		 * HTTP client particularly suited for RESTful operations.
		 *
		 * @field {function} wrap wraps this client with a new interceptor returning the wrapped client
		 *
		 * @param {Request} the HTTP request
		 * @returns {ResponsePromise<Response>} a promise the resolves to the HTTP response
		 *
		 * @class Client
		 */

		 /**
		  * Extended when.js Promises/A+ promise with HTTP specific helpers
		  *q
		  * @method entity promise for the HTTP entity
		  * @method status promise for the HTTP status code
		  * @method headers promise for the HTTP response headers
		  * @method header promise for a specific HTTP response header
		  *
		  * @class ResponsePromise
		  * @extends Promise
		  */

		var client, target, platformDefault;

		client = require('../client');

		/**
		 * Make a request with the default client
		 * @param {Request} the HTTP request
		 * @returns {Promise<Response>} a promise the resolves to the HTTP response
		 */
		function defaultClient() {
			return target.apply(undef, arguments);
		}

		/**
		 * Change the default client
		 * @param {Client} client the new default client
		 */
		defaultClient.setDefaultClient = function setDefaultClient(client) {
			target = client;
		};

		/**
		 * Obtain a direct reference to the current default client
		 * @returns {Client} the default client
		 */
		defaultClient.getDefaultClient = function getDefaultClient() {
			return target;
		};

		/**
		 * Reset the default client to the platform default
		 */
		defaultClient.resetDefaultClient = function resetDefaultClient() {
			target = platformDefault;
		};

		/**
		 * @private
		 */
		defaultClient.setPlatformDefaultClient = function setPlatformDefaultClient(client) {
			if (platformDefault) {
				throw new Error('Unable to redefine platformDefaultClient');
			}
			target = platformDefault = client;
		};

		return client(defaultClient);

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"../client":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\client.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\client\\xhr.js":[function(require,module,exports){
/*
 * Copyright 2012-2014 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define, global) {
	'use strict';

	define(function (require) {

		var when, UrlBuilder, normalizeHeaderName, responsePromise, client, headerSplitRE;

		when = require('when');
		UrlBuilder = require('../UrlBuilder');
		normalizeHeaderName = require('../util/normalizeHeaderName');
		responsePromise = require('../util/responsePromise');
		client = require('../client');

		// according to the spec, the line break is '\r\n', but doesn't hold true in practice
		headerSplitRE = /[\r|\n]+/;

		function parseHeaders(raw) {
			// Note: Set-Cookie will be removed by the browser
			var headers = {};

			if (!raw) { return headers; }

			raw.trim().split(headerSplitRE).forEach(function (header) {
				var boundary, name, value;
				boundary = header.indexOf(':');
				name = normalizeHeaderName(header.substring(0, boundary).trim());
				value = header.substring(boundary + 1).trim();
				if (headers[name]) {
					if (Array.isArray(headers[name])) {
						// add to an existing array
						headers[name].push(value);
					}
					else {
						// convert single value to array
						headers[name] = [headers[name], value];
					}
				}
				else {
					// new, single value
					headers[name] = value;
				}
			});

			return headers;
		}

		function safeMixin(target, source) {
			Object.keys(source || {}).forEach(function (prop) {
				// make sure the property already exists as
				// IE 6 will blow up if we add a new prop
				if (source.hasOwnProperty(prop) && prop in target) {
					try {
						target[prop] = source[prop];
					}
					catch (e) {
						// ignore, expected for some properties at some points in the request lifecycle
					}
				}
			});

			return target;
		}

		return client(function xhr(request) {
			return responsePromise.promise(function (resolve, reject) {
				/*jshint maxcomplexity:20 */

				var client, method, url, headers, entity, headerName, response, XMLHttpRequest;

				request = typeof request === 'string' ? { path: request } : request || {};
				response = { request: request };

				if (request.canceled) {
					response.error = 'precanceled';
					reject(response);
					return;
				}

				XMLHttpRequest = request.engine || global.XMLHttpRequest;
				if (!XMLHttpRequest) {
					reject({ request: request, error: 'xhr-not-available' });
					return;
				}

				entity = request.entity;
				request.method = request.method || (entity ? 'POST' : 'GET');
				method = request.method;
				url = new UrlBuilder(request.path || '', request.params).build();

				try {
					client = response.raw = new XMLHttpRequest();

					// mixin extra request properties before and after opening the request as some properties require being set at different phases of the request
					safeMixin(client, request.mixin);
					client.open(method, url, true);
					safeMixin(client, request.mixin);

					headers = request.headers;
					for (headerName in headers) {
						/*jshint forin:false */
						if (headerName === 'Content-Type' && headers[headerName] === 'multipart/form-data') {
							// XMLHttpRequest generates its own Content-Type header with the
							// appropriate multipart boundary when sending multipart/form-data.
							continue;
						}

						client.setRequestHeader(headerName, headers[headerName]);
					}

					request.canceled = false;
					request.cancel = function cancel() {
						request.canceled = true;
						client.abort();
						reject(response);
					};

					client.onreadystatechange = function (/* e */) {
						if (request.canceled) { return; }
						if (client.readyState === (XMLHttpRequest.DONE || 4)) {
							response.status = {
								code: client.status,
								text: client.statusText
							};
							response.headers = parseHeaders(client.getAllResponseHeaders());
							response.entity = client.responseText;

							if (response.status.code > 0) {
								// check status code as readystatechange fires before error event
								resolve(response);
							}
							else {
								// give the error callback a chance to fire before resolving
								// requests for file:// URLs do not have a status code
								setTimeout(function () {
									resolve(response);
								}, 0);
							}
						}
					};

					try {
						client.onerror = function (/* e */) {
							response.error = 'loaderror';
							reject(response);
						};
					}
					catch (e) {
						// IE 6 will not support error handling
					}

					client.send(entity);
				}
				catch (e) {
					response.error = 'loaderror';
					reject(response);
				}

			});
		});

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); },
	typeof window !== 'undefined' ? window : void 0
	// Boilerplate for AMD and Node
));

},{"../UrlBuilder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\UrlBuilder.js","../client":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\client.js","../util/normalizeHeaderName":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\normalizeHeaderName.js","../util/responsePromise":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\responsePromise.js","when":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\when.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor.js":[function(require,module,exports){
/*
 * Copyright 2012-2015 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (require) {

		var defaultClient, mixin, responsePromise, client, when;

		defaultClient = require('./client/default');
		mixin = require('./util/mixin');
		responsePromise = require('./util/responsePromise');
		client = require('./client');
		when = require('when');

		/**
		 * Interceptors have the ability to intercept the request and/org response
		 * objects.  They may augment, prune, transform or replace the
		 * request/response as needed.  Clients may be composed by wrapping
		 * together multiple interceptors.
		 *
		 * Configured interceptors are functional in nature.  Wrapping a client in
		 * an interceptor will not affect the client, merely the data that flows in
		 * and out of that client.  A common configuration can be created once and
		 * shared; specialization can be created by further wrapping that client
		 * with custom interceptors.
		 *
		 * @param {Client} [target] client to wrap
		 * @param {Object} [config] configuration for the interceptor, properties will be specific to the interceptor implementation
		 * @returns {Client} A client wrapped with the interceptor
		 *
		 * @class Interceptor
		 */

		function defaultInitHandler(config) {
			return config;
		}

		function defaultRequestHandler(request /*, config, meta */) {
			return request;
		}

		function defaultResponseHandler(response /*, config, meta */) {
			return response;
		}

		function race(promisesOrValues) {
			// this function is different than when.any as the first to reject also wins
			return when.promise(function (resolve, reject) {
				promisesOrValues.forEach(function (promiseOrValue) {
					when(promiseOrValue, resolve, reject);
				});
			});
		}

		/**
		 * Alternate return type for the request handler that allows for more complex interactions.
		 *
		 * @param properties.request the traditional request return object
		 * @param {Promise} [properties.abort] promise that resolves if/when the request is aborted
		 * @param {Client} [properties.client] override the defined client with an alternate client
		 * @param [properties.response] response for the request, short circuit the request
		 */
		function ComplexRequest(properties) {
			if (!(this instanceof ComplexRequest)) {
				// in case users forget the 'new' don't mix into the interceptor
				return new ComplexRequest(properties);
			}
			mixin(this, properties);
		}

		/**
		 * Create a new interceptor for the provided handlers.
		 *
		 * @param {Function} [handlers.init] one time intialization, must return the config object
		 * @param {Function} [handlers.request] request handler
		 * @param {Function} [handlers.response] response handler regardless of error state
		 * @param {Function} [handlers.success] response handler when the request is not in error
		 * @param {Function} [handlers.error] response handler when the request is in error, may be used to 'unreject' an error state
		 * @param {Function} [handlers.client] the client to use if otherwise not specified, defaults to platform default client
		 *
		 * @returns {Interceptor}
		 */
		function interceptor(handlers) {

			var initHandler, requestHandler, successResponseHandler, errorResponseHandler;

			handlers = handlers || {};

			initHandler            = handlers.init    || defaultInitHandler;
			requestHandler         = handlers.request || defaultRequestHandler;
			successResponseHandler = handlers.success || handlers.response || defaultResponseHandler;
			errorResponseHandler   = handlers.error   || function () {
				// Propagate the rejection, with the result of the handler
				return when((handlers.response || defaultResponseHandler).apply(this, arguments), when.reject, when.reject);
			};

			return function (target, config) {

				if (typeof target === 'object') {
					config = target;
				}
				if (typeof target !== 'function') {
					target = handlers.client || defaultClient;
				}

				config = initHandler(config || {});

				function interceptedClient(request) {
					var context, meta;
					context = {};
					meta = { 'arguments': Array.prototype.slice.call(arguments), client: interceptedClient };
					request = typeof request === 'string' ? { path: request } : request || {};
					request.originator = request.originator || interceptedClient;
					return responsePromise(
						requestHandler.call(context, request, config, meta),
						function (request) {
							var response, abort, next;
							next = target;
							if (request instanceof ComplexRequest) {
								// unpack request
								abort = request.abort;
								next = request.client || next;
								response = request.response;
								// normalize request, must be last
								request = request.request;
							}
							response = response || when(request, function (request) {
								return when(
									next(request),
									function (response) {
										return successResponseHandler.call(context, response, config, meta);
									},
									function (response) {
										return errorResponseHandler.call(context, response, config, meta);
									}
								);
							});
							return abort ? race([response, abort]) : response;
						},
						function (error) {
							return when.reject({ request: request, error: error });
						}
					);
				}

				return client(interceptedClient, target);
			};
		}

		interceptor.ComplexRequest = ComplexRequest;

		return interceptor;

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"./client":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\client.js","./client/default":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\client\\default.js","./util/mixin":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\mixin.js","./util/responsePromise":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\responsePromise.js","when":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\when.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\errorCode.js":[function(require,module,exports){
/*
 * Copyright 2012-2013 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (require) {

		var interceptor, when;

		interceptor = require('../interceptor');
		when = require('when');

		/**
		 * Rejects the response promise based on the status code.
		 *
		 * Codes greater than or equal to the provided value are rejected.  Default
		 * value 400.
		 *
		 * @param {Client} [client] client to wrap
		 * @param {number} [config.code=400] code to indicate a rejection
		 *
		 * @returns {Client}
		 */
		return interceptor({
			init: function (config) {
				config.code = config.code || 400;
				return config;
			},
			response: function (response, config) {
				if (response.status && response.status.code >= config.code) {
					return when.reject(response);
				}
				return response;
			}
		});

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"../interceptor":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor.js","when":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\when.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\mime.js":[function(require,module,exports){
/*
 * Copyright 2012-2014 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (require) {

		var interceptor, mime, registry, noopConverter, when;

		interceptor = require('../interceptor');
		mime = require('../mime');
		registry = require('../mime/registry');
		when = require('when');

		noopConverter = {
			read: function (obj) { return obj; },
			write: function (obj) { return obj; }
		};

		/**
		 * MIME type support for request and response entities.  Entities are
		 * (de)serialized using the converter for the MIME type.
		 *
		 * Request entities are converted using the desired converter and the
		 * 'Accept' request header prefers this MIME.
		 *
		 * Response entities are converted based on the Content-Type response header.
		 *
		 * @param {Client} [client] client to wrap
		 * @param {string} [config.mime='text/plain'] MIME type to encode the request
		 *   entity
		 * @param {string} [config.accept] Accept header for the request
		 * @param {Client} [config.client=<request.originator>] client passed to the
		 *   converter, defaults to the client originating the request
		 * @param {Registry} [config.registry] MIME registry, defaults to the root
		 *   registry
		 * @param {boolean} [config.permissive] Allow an unkown request MIME type
		 *
		 * @returns {Client}
		 */
		return interceptor({
			init: function (config) {
				config.registry = config.registry || registry;
				return config;
			},
			request: function (request, config) {
				var type, headers;

				headers = request.headers || (request.headers = {});
				type = mime.parse(headers['Content-Type'] = headers['Content-Type'] || config.mime || 'text/plain');
				headers.Accept = headers.Accept || config.accept || type.raw + ', application/json;q=0.8, text/plain;q=0.5, */*;q=0.2';

				if (!('entity' in request)) {
					return request;
				}

				return config.registry.lookup(type).otherwise(function () {
					// failed to resolve converter
					if (config.permissive) {
						return noopConverter;
					}
					throw 'mime-unknown';
				}).then(function (converter) {
					var client = config.client || request.originator;

					return when.attempt(converter.write, request.entity, { client: client, request: request, mime: type, registry: config.registry })
						.otherwise(function() {
							throw 'mime-serialization';
						})
						.then(function(entity) {
							request.entity = entity;
							return request;
						});
				});
			},
			response: function (response, config) {
				if (!(response.headers && response.headers['Content-Type'] && response.entity)) {
					return response;
				}

				var type = mime.parse(response.headers['Content-Type']);

				return config.registry.lookup(type).otherwise(function () { return noopConverter; }).then(function (converter) {
					var client = config.client || response.request && response.request.originator;

					return when.attempt(converter.read, response.entity, { client: client, response: response, mime: type, registry: config.registry })
						.otherwise(function (e) {
							response.error = 'mime-deserialization';
							response.cause = e;
							throw response;
						})
						.then(function (entity) {
							response.entity = entity;
							return response;
						});
				});
			}
		});

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"../interceptor":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor.js","../mime":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime.js","../mime/registry":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\registry.js","when":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\when.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js":[function(require,module,exports){
/*
 * Copyright 2012-2013 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (require) {

		var interceptor, UrlBuilder;

		interceptor = require('../interceptor');
		UrlBuilder = require('../UrlBuilder');

		function startsWith(str, prefix) {
			return str.indexOf(prefix) === 0;
		}

		function endsWith(str, suffix) {
			return str.lastIndexOf(suffix) + suffix.length === str.length;
		}

		/**
		 * Prefixes the request path with a common value.
		 *
		 * @param {Client} [client] client to wrap
		 * @param {number} [config.prefix] path prefix
		 *
		 * @returns {Client}
		 */
		return interceptor({
			request: function (request, config) {
				var path;

				if (config.prefix && !(new UrlBuilder(request.path).isFullyQualified())) {
					path = config.prefix;
					if (request.path) {
						if (!endsWith(path, '/') && !startsWith(request.path, '/')) {
							// add missing '/' between path sections
							path += '/';
						}
						path += request.path;
					}
					request.path = path;
				}

				return request;
			}
		});

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"../UrlBuilder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\UrlBuilder.js","../interceptor":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\template.js":[function(require,module,exports){
/*
 * Copyright 2015 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (require) {

		var interceptor, uriTemplate, mixin;

		interceptor = require('../interceptor');
		uriTemplate = require('../util/uriTemplate');
		mixin = require('../util/mixin');

		/**
		 * Applies request params to the path as a URI Template
		 *
		 * Params are removed from the request object, as they have been consumed.
		 *
		 * @param {Client} [client] client to wrap
		 * @param {Object} [config.params] default param values
		 * @param {string} [config.template] default template
		 *
		 * @returns {Client}
		 */
		return interceptor({
			init: function (config) {
				config.params = config.params || {};
				config.template = config.template || '';
				return config;
			},
			request: function (request, config) {
				var template, params;

				template = request.path || config.template;
				params = mixin({}, request.params, config.params);

				request.path = uriTemplate.expand(template, params);
				delete request.params;

				return request;
			}
		});

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"../interceptor":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor.js","../util/mixin":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\mixin.js","../util/uriTemplate":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\uriTemplate.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime.js":[function(require,module,exports){
/*
* Copyright 2014 the original author or authors
* @license MIT, see LICENSE.txt for details
*
* @author Scott Andrews
*/

(function (define) {
	'use strict';

	var undef;

	define(function (/* require */) {

		/**
		 * Parse a MIME type into it's constituent parts
		 *
		 * @param {string} mime MIME type to parse
		 * @return {{
		 *   {string} raw the original MIME type
		 *   {string} type the type and subtype
		 *   {string} [suffix] mime suffix, including the plus, if any
		 *   {Object} params key/value pair of attributes
		 * }}
		 */
		function parse(mime) {
			var params, type;

			params = mime.split(';');
			type = params[0].trim().split('+');

			return {
				raw: mime,
				type: type[0],
				suffix: type[1] ? '+' + type[1] : '',
				params: params.slice(1).reduce(function (params, pair) {
					pair = pair.split('=');
					params[pair[0].trim()] = pair[1] ? pair[1].trim() : undef;
					return params;
				}, {})
			};
		}

		return {
			parse: parse
		};

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\registry.js":[function(require,module,exports){
/*
 * Copyright 2012-2014 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (require) {

		var mime, when, registry;

		mime = require('../mime');
		when = require('when');

		function Registry(mimes) {

			/**
			 * Lookup the converter for a MIME type
			 *
			 * @param {string} type the MIME type
			 * @return a promise for the converter
			 */
			this.lookup = function lookup(type) {
				var parsed;

				parsed = typeof type === 'string' ? mime.parse(type) : type;

				if (mimes[parsed.raw]) {
					return mimes[parsed.raw];
				}
				if (mimes[parsed.type + parsed.suffix]) {
					return mimes[parsed.type + parsed.suffix];
				}
				if (mimes[parsed.type]) {
					return mimes[parsed.type];
				}
				if (mimes[parsed.suffix]) {
					return mimes[parsed.suffix];
				}

				return when.reject(new Error('Unable to locate converter for mime "' + parsed.raw + '"'));
			};

			/**
			 * Create a late dispatched proxy to the target converter.
			 *
			 * Common when a converter is registered under multiple names and
			 * should be kept in sync if updated.
			 *
			 * @param {string} type mime converter to dispatch to
			 * @returns converter whose read/write methods target the desired mime converter
			 */
			this.delegate = function delegate(type) {
				return {
					read: function () {
						var args = arguments;
						return this.lookup(type).then(function (converter) {
							return converter.read.apply(this, args);
						}.bind(this));
					}.bind(this),
					write: function () {
						var args = arguments;
						return this.lookup(type).then(function (converter) {
							return converter.write.apply(this, args);
						}.bind(this));
					}.bind(this)
				};
			};

			/**
			 * Register a custom converter for a MIME type
			 *
			 * @param {string} type the MIME type
			 * @param converter the converter for the MIME type
			 * @return a promise for the converter
			 */
			this.register = function register(type, converter) {
				mimes[type] = when(converter);
				return mimes[type];
			};

			/**
			 * Create a child registry whoes registered converters remain local, while
			 * able to lookup converters from its parent.
			 *
			 * @returns child MIME registry
			 */
			this.child = function child() {
				return new Registry(Object.create(mimes));
			};

		}

		registry = new Registry({});

		// include provided serializers
		registry.register('application/hal', require('./type/application/hal'));
		registry.register('application/json', require('./type/application/json'));
		registry.register('application/x-www-form-urlencoded', require('./type/application/x-www-form-urlencoded'));
		registry.register('multipart/form-data', require('./type/multipart/form-data'));
		registry.register('text/plain', require('./type/text/plain'));

		registry.register('+json', registry.delegate('application/json'));

		return registry;

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"../mime":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime.js","./type/application/hal":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\type\\application\\hal.js","./type/application/json":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\type\\application\\json.js","./type/application/x-www-form-urlencoded":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\type\\application\\x-www-form-urlencoded.js","./type/multipart/form-data":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\type\\multipart\\form-data.js","./type/text/plain":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\type\\text\\plain.js","when":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\when.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\type\\application\\hal.js":[function(require,module,exports){
/*
 * Copyright 2013-2015 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (require) {

		var pathPrefix, template, find, lazyPromise, responsePromise, when;

		pathPrefix = require('../../../interceptor/pathPrefix');
		template = require('../../../interceptor/template');
		find = require('../../../util/find');
		lazyPromise = require('../../../util/lazyPromise');
		responsePromise = require('../../../util/responsePromise');
		when = require('when');

		function defineProperty(obj, name, value) {
			Object.defineProperty(obj, name, {
				value: value,
				configurable: true,
				enumerable: false,
				writeable: true
			});
		}

		/**
		 * Hypertext Application Language serializer
		 *
		 * Implemented to https://tools.ietf.org/html/draft-kelly-json-hal-06
		 *
		 * As the spec is still a draft, this implementation will be updated as the
		 * spec evolves
		 *
		 * Objects are read as HAL indexing links and embedded objects on to the
		 * resource. Objects are written as plain JSON.
		 *
		 * Embedded relationships are indexed onto the resource by the relationship
		 * as a promise for the related resource.
		 *
		 * Links are indexed onto the resource as a lazy promise that will GET the
		 * resource when a handler is first registered on the promise.
		 *
		 * A `requestFor` method is added to the entity to make a request for the
		 * relationship.
		 *
		 * A `clientFor` method is added to the entity to get a full Client for a
		 * relationship.
		 *
		 * The `_links` and `_embedded` properties on the resource are made
		 * non-enumerable.
		 */
		return {

			read: function (str, opts) {
				var client, console;

				opts = opts || {};
				client = opts.client;
				console = opts.console || console;

				function deprecationWarning(relationship, deprecation) {
					if (deprecation && console && console.warn || console.log) {
						(console.warn || console.log).call(console, 'Relationship \'' + relationship + '\' is deprecated, see ' + deprecation);
					}
				}

				return opts.registry.lookup(opts.mime.suffix).then(function (converter) {
					return when(converter.read(str, opts)).then(function (root) {

						find.findProperties(root, '_embedded', function (embedded, resource, name) {
							Object.keys(embedded).forEach(function (relationship) {
								if (relationship in resource) { return; }
								var related = responsePromise({
									entity: embedded[relationship]
								});
								defineProperty(resource, relationship, related);
							});
							defineProperty(resource, name, embedded);
						});
						find.findProperties(root, '_links', function (links, resource, name) {
							Object.keys(links).forEach(function (relationship) {
								var link = links[relationship];
								if (relationship in resource) { return; }
								defineProperty(resource, relationship, responsePromise.make(lazyPromise(function () {
									if (link.deprecation) { deprecationWarning(relationship, link.deprecation); }
									if (link.templated === true) {
										return template(client)({ path: link.href });
									}
									return client({ path: link.href });
								})));
							});
							defineProperty(resource, name, links);
							defineProperty(resource, 'clientFor', function (relationship, clientOverride) {
								var link = links[relationship];
								if (!link) {
									throw new Error('Unknown relationship: ' + relationship);
								}
								if (link.deprecation) { deprecationWarning(relationship, link.deprecation); }
								if (link.templated === true) {
									return template(
										clientOverride || client,
										{ template: link.href }
									);
								}
								return pathPrefix(
									clientOverride || client,
									{ prefix: link.href }
								);
							});
							defineProperty(resource, 'requestFor', function (relationship, request, clientOverride) {
								var client = this.clientFor(relationship, clientOverride);
								return client(request);
							});
						});

						return root;
					});
				});

			},

			write: function (obj, opts) {
				return opts.registry.lookup(opts.mime.suffix).then(function (converter) {
					return converter.write(obj, opts);
				});
			}

		};
	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"../../../interceptor/pathPrefix":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\pathPrefix.js","../../../interceptor/template":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\interceptor\\template.js","../../../util/find":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\find.js","../../../util/lazyPromise":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\lazyPromise.js","../../../util/responsePromise":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\responsePromise.js","when":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\when.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\type\\application\\json.js":[function(require,module,exports){
/*
 * Copyright 2012-2015 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (/* require */) {

		/**
		 * Create a new JSON converter with custom reviver/replacer.
		 *
		 * The extended converter must be published to a MIME registry in order
		 * to be used. The existing converter will not be modified.
		 *
		 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON
		 *
		 * @param {function} [reviver=undefined] custom JSON.parse reviver
		 * @param {function|Array} [replacer=undefined] custom JSON.stringify replacer
		 */
		function createConverter(reviver, replacer) {
			return {

				read: function (str) {
					return JSON.parse(str, reviver);
				},

				write: function (obj) {
					return JSON.stringify(obj, replacer);
				},

				extend: createConverter

			};
		}

		return createConverter();

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\type\\application\\x-www-form-urlencoded.js":[function(require,module,exports){
/*
 * Copyright 2012 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (/* require */) {

		var encodedSpaceRE, urlEncodedSpaceRE;

		encodedSpaceRE = /%20/g;
		urlEncodedSpaceRE = /\+/g;

		function urlEncode(str) {
			str = encodeURIComponent(str);
			// spec says space should be encoded as '+'
			return str.replace(encodedSpaceRE, '+');
		}

		function urlDecode(str) {
			// spec says space should be encoded as '+'
			str = str.replace(urlEncodedSpaceRE, ' ');
			return decodeURIComponent(str);
		}

		function append(str, name, value) {
			if (Array.isArray(value)) {
				value.forEach(function (value) {
					str = append(str, name, value);
				});
			}
			else {
				if (str.length > 0) {
					str += '&';
				}
				str += urlEncode(name);
				if (value !== undefined && value !== null) {
					str += '=' + urlEncode(value);
				}
			}
			return str;
		}

		return {

			read: function (str) {
				var obj = {};
				str.split('&').forEach(function (entry) {
					var pair, name, value;
					pair = entry.split('=');
					name = urlDecode(pair[0]);
					if (pair.length === 2) {
						value = urlDecode(pair[1]);
					}
					else {
						value = null;
					}
					if (name in obj) {
						if (!Array.isArray(obj[name])) {
							// convert to an array, perserving currnent value
							obj[name] = [obj[name]];
						}
						obj[name].push(value);
					}
					else {
						obj[name] = value;
					}
				});
				return obj;
			},

			write: function (obj) {
				var str = '';
				Object.keys(obj).forEach(function (name) {
					str = append(str, name, obj[name]);
				});
				return str;
			}

		};
	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\type\\multipart\\form-data.js":[function(require,module,exports){
/*
 * Copyright 2014 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Michael Jackson
 */

/* global FormData, File, Blob */

(function (define) {
	'use strict';

	define(function (/* require */) {

		function isFormElement(object) {
			return object &&
				object.nodeType === 1 && // Node.ELEMENT_NODE
				object.tagName === 'FORM';
		}

		function createFormDataFromObject(object) {
			var formData = new FormData();

			var value;
			for (var property in object) {
				if (object.hasOwnProperty(property)) {
					value = object[property];

					if (value instanceof File) {
						formData.append(property, value, value.name);
					} else if (value instanceof Blob) {
						formData.append(property, value);
					} else {
						formData.append(property, String(value));
					}
				}
			}

			return formData;
		}

		return {

			write: function (object) {
				if (typeof FormData === 'undefined') {
					throw new Error('The multipart/form-data mime serializer requires FormData support');
				}

				// Support FormData directly.
				if (object instanceof FormData) {
					return object;
				}

				// Support <form> elements.
				if (isFormElement(object)) {
					return new FormData(object);
				}

				// Support plain objects, may contain File/Blob as value.
				if (typeof object === 'object' && object !== null) {
					return createFormDataFromObject(object);
				}

				throw new Error('Unable to create FormData from object ' + object);
			}

		};
	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\mime\\type\\text\\plain.js":[function(require,module,exports){
/*
 * Copyright 2012 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (/* require */) {

		return {

			read: function (str) {
				return str;
			},

			write: function (obj) {
				return obj.toString();
			}

		};
	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\find.js":[function(require,module,exports){
/*
 * Copyright 2013 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (/* require */) {

		return {

			/**
			 * Find objects within a graph the contain a property of a certain name.
			 *
			 * NOTE: this method will not discover object graph cycles.
			 *
			 * @param {*} obj object to search on
			 * @param {string} prop name of the property to search for
			 * @param {Function} callback function to receive the found properties and their parent
			 */
			findProperties: function findProperties(obj, prop, callback) {
				if (typeof obj !== 'object' || obj === null) { return; }
				if (prop in obj) {
					callback(obj[prop], obj, prop);
				}
				Object.keys(obj).forEach(function (key) {
					findProperties(obj[key], prop, callback);
				});
			}

		};

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\lazyPromise.js":[function(require,module,exports){
/*
 * Copyright 2013 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (require) {

		var when;

		when = require('when');

		/**
		 * Create a promise whose work is started only when a handler is registered.
		 *
		 * The work function will be invoked at most once. Thrown values will result
		 * in promise rejection.
		 *
		 * @param {Function} work function whose ouput is used to resolve the
		 *   returned promise.
		 * @returns {Promise} a lazy promise
		 */
		function lazyPromise(work) {
			var defer, started, resolver, promise, then;

			defer = when.defer();
			started = false;

			resolver = defer.resolver;
			promise = defer.promise;
			then = promise.then;

			promise.then = function () {
				if (!started) {
					started = true;
					when.attempt(work).then(resolver.resolve, resolver.reject);
				}
				return then.apply(promise, arguments);
			};

			return promise;
		}

		return lazyPromise;

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"when":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\when.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\mixin.js":[function(require,module,exports){
/*
 * Copyright 2012-2013 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	// derived from dojo.mixin
	define(function (/* require */) {

		var empty = {};

		/**
		 * Mix the properties from the source object into the destination object.
		 * When the same property occurs in more then one object, the right most
		 * value wins.
		 *
		 * @param {Object} dest the object to copy properties to
		 * @param {Object} sources the objects to copy properties from.  May be 1 to N arguments, but not an Array.
		 * @return {Object} the destination object
		 */
		function mixin(dest /*, sources... */) {
			var i, l, source, name;

			if (!dest) { dest = {}; }
			for (i = 1, l = arguments.length; i < l; i += 1) {
				source = arguments[i];
				for (name in source) {
					if (!(name in dest) || (dest[name] !== source[name] && (!(name in empty) || empty[name] !== source[name]))) {
						dest[name] = source[name];
					}
				}
			}

			return dest; // Object
		}

		return mixin;

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\normalizeHeaderName.js":[function(require,module,exports){
/*
 * Copyright 2012 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (/* require */) {

		/**
		 * Normalize HTTP header names using the pseudo camel case.
		 *
		 * For example:
		 *   content-type         -> Content-Type
		 *   accepts              -> Accepts
		 *   x-custom-header-name -> X-Custom-Header-Name
		 *
		 * @param {string} name the raw header name
		 * @return {string} the normalized header name
		 */
		function normalizeHeaderName(name) {
			return name.toLowerCase()
				.split('-')
				.map(function (chunk) { return chunk.charAt(0).toUpperCase() + chunk.slice(1); })
				.join('-');
		}

		return normalizeHeaderName;

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\responsePromise.js":[function(require,module,exports){
/*
 * Copyright 2014-2015 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (require) {

		var when = require('when'),
			normalizeHeaderName = require('./normalizeHeaderName');

		function property(promise, name) {
			return promise.then(
				function (value) {
					return value && value[name];
				},
				function (value) {
					return when.reject(value && value[name]);
				}
			);
		}

		/**
		 * Obtain the response entity
		 *
		 * @returns {Promise} for the response entity
		 */
		function entity() {
			/*jshint validthis:true */
			return property(this, 'entity');
		}

		/**
		 * Obtain the response status
		 *
		 * @returns {Promise} for the response status
		 */
		function status() {
			/*jshint validthis:true */
			return property(property(this, 'status'), 'code');
		}

		/**
		 * Obtain the response headers map
		 *
		 * @returns {Promise} for the response headers map
		 */
		function headers() {
			/*jshint validthis:true */
			return property(this, 'headers');
		}

		/**
		 * Obtain a specific response header
		 *
		 * @param {String} headerName the header to retrieve
		 * @returns {Promise} for the response header's value
		 */
		function header(headerName) {
			/*jshint validthis:true */
			headerName = normalizeHeaderName(headerName);
			return property(this.headers(), headerName);
		}

		/**
		 * Follow a related resource
		 *
		 * The relationship to follow may be define as a plain string, an object
		 * with the rel and params, or an array containing one or more entries
		 * with the previous forms.
		 *
		 * Examples:
		 *   response.follow('next')
		 *
		 *   response.follow({ rel: 'next', params: { pageSize: 100 } })
		 *
		 *   response.follow([
		 *       { rel: 'items', params: { projection: 'noImages' } },
		 *       'search',
		 *       { rel: 'findByGalleryIsNull', params: { projection: 'noImages' } },
		 *       'items'
		 *   ])
		 *
		 * @param {String|Object|Array} rels one, or more, relationships to follow
		 * @returns ResponsePromise<Response> related resource
		 */
		function follow(rels) {
			/*jshint validthis:true */
			rels = [].concat(rels);
			return make(when.reduce(rels, function (response, rel) {
				if (typeof rel === 'string') {
					rel = { rel: rel };
				}
				if (typeof response.entity.clientFor !== 'function') {
					throw new Error('Hypermedia response expected');
				}
				var client = response.entity.clientFor(rel.rel);
				return client({ params: rel.params });
			}, this));
		}

		/**
		 * Wrap a Promise as an ResponsePromise
		 *
		 * @param {Promise<Response>} promise the promise for an HTTP Response
		 * @returns {ResponsePromise<Response>} wrapped promise for Response with additional helper methods
		 */
		function make(promise) {
			promise.status = status;
			promise.headers = headers;
			promise.header = header;
			promise.entity = entity;
			promise.follow = follow;
			return promise;
		}

		function responsePromise() {
			return make(when.apply(when, arguments));
		}

		responsePromise.make = make;
		responsePromise.reject = function (val) {
			return make(when.reject(val));
		};
		responsePromise.promise = function (func) {
			return make(when.promise(func));
		};

		return responsePromise;

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"./normalizeHeaderName":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\normalizeHeaderName.js","when":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\when.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\uriEncoder.js":[function(require,module,exports){
/*
 * Copyright 2015 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	define(function (/* require */) {

		var charMap;

		charMap = (function () {
			var strings = {
				alpha: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
				digit: '0123456789'
			};

			strings.genDelims = ':/?#[]@';
			strings.subDelims = '!$&\'()*+,;=';
			strings.reserved = strings.genDelims + strings.subDelims;
			strings.unreserved = strings.alpha + strings.digit + '-._~';
			strings.url = strings.reserved + strings.unreserved;
			strings.scheme = strings.alpha + strings.digit + '+-.';
			strings.userinfo = strings.unreserved + strings.subDelims + ':';
			strings.host = strings.unreserved + strings.subDelims;
			strings.port = strings.digit;
			strings.pchar = strings.unreserved + strings.subDelims + ':@';
			strings.segment = strings.pchar;
			strings.path = strings.segment + '/';
			strings.query = strings.pchar + '/?';
			strings.fragment = strings.pchar + '/?';

			return Object.keys(strings).reduce(function (charMap, set) {
				charMap[set] = strings[set].split('').reduce(function (chars, char) {
					chars[char] = true;
					return chars;
				}, {});
				return charMap;
			}, {});
		}());

		function encode(str, allowed) {
			if (typeof str !== 'string') {
				throw new Error('String required for URL encoding');
			}
			return str.split('').map(function (char) {
				if (allowed.hasOwnProperty(char)) {
					return char;
				}
				var code = char.charCodeAt(0);
				if (code <= 127) {
					return '%' + code.toString(16).toUpperCase();
				}
				else {
					return encodeURIComponent(char).toUpperCase();
				}
			}).join('');
		}

		function makeEncoder(allowed) {
			allowed = allowed || charMap.unreserved;
			return function (str) {
				return encode(str, allowed);
			};
		}

		function decode(str) {
			return decodeURIComponent(str);
		}

		return {

			/*
			 * Decode URL encoded strings
			 *
			 * @param {string} URL encoded string
			 * @returns {string} URL decoded string
			 */
			decode: decode,

			/*
			 * URL encode a string
			 *
			 * All but alpha-numerics and a very limited set of punctuation - . _ ~ are
			 * encoded.
			 *
			 * @param {string} string to encode
			 * @returns {string} URL encoded string
			 */
			encode: makeEncoder(),

			/*
			* URL encode a URL
			*
			* All character permitted anywhere in a URL are left unencoded even
			* if that character is not permitted in that portion of a URL.
			*
			* Note: This method is typically not what you want.
			*
			* @param {string} string to encode
			* @returns {string} URL encoded string
			*/
			encodeURL: makeEncoder(charMap.url),

			/*
			 * URL encode the scheme portion of a URL
			 *
			 * @param {string} string to encode
			 * @returns {string} URL encoded string
			 */
			encodeScheme: makeEncoder(charMap.scheme),

			/*
			 * URL encode the user info portion of a URL
			 *
			 * @param {string} string to encode
			 * @returns {string} URL encoded string
			 */
			encodeUserInfo: makeEncoder(charMap.userinfo),

			/*
			 * URL encode the host portion of a URL
			 *
			 * @param {string} string to encode
			 * @returns {string} URL encoded string
			 */
			encodeHost: makeEncoder(charMap.host),

			/*
			 * URL encode the port portion of a URL
			 *
			 * @param {string} string to encode
			 * @returns {string} URL encoded string
			 */
			encodePort: makeEncoder(charMap.port),

			/*
			 * URL encode a path segment portion of a URL
			 *
			 * @param {string} string to encode
			 * @returns {string} URL encoded string
			 */
			encodePathSegment: makeEncoder(charMap.segment),

			/*
			 * URL encode the path portion of a URL
			 *
			 * @param {string} string to encode
			 * @returns {string} URL encoded string
			 */
			encodePath: makeEncoder(charMap.path),

			/*
			 * URL encode the query portion of a URL
			 *
			 * @param {string} string to encode
			 * @returns {string} URL encoded string
			 */
			encodeQuery: makeEncoder(charMap.query),

			/*
			 * URL encode the fragment portion of a URL
			 *
			 * @param {string} string to encode
			 * @returns {string} URL encoded string
			 */
			encodeFragment: makeEncoder(charMap.fragment)

		};

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\uriTemplate.js":[function(require,module,exports){
/*
 * Copyright 2015 the original author or authors
 * @license MIT, see LICENSE.txt for details
 *
 * @author Scott Andrews
 */

(function (define) {
	'use strict';

	var undef;

	define(function (require) {

		var uriEncoder, operations, prefixRE;

		uriEncoder = require('./uriEncoder');

		prefixRE = /^([^:]*):([0-9]+)$/;
		operations = {
			'':  { first: '',  separator: ',', named: false, empty: '',  encoder: uriEncoder.encode },
			'+': { first: '',  separator: ',', named: false, empty: '',  encoder: uriEncoder.encodeURL },
			'#': { first: '#', separator: ',', named: false, empty: '',  encoder: uriEncoder.encodeURL },
			'.': { first: '.', separator: '.', named: false, empty: '',  encoder: uriEncoder.encode },
			'/': { first: '/', separator: '/', named: false, empty: '',  encoder: uriEncoder.encode },
			';': { first: ';', separator: ';', named: true,  empty: '',  encoder: uriEncoder.encode },
			'?': { first: '?', separator: '&', named: true,  empty: '=', encoder: uriEncoder.encode },
			'&': { first: '&', separator: '&', named: true,  empty: '=', encoder: uriEncoder.encode },
			'=': { reserved: true },
			',': { reserved: true },
			'!': { reserved: true },
			'@': { reserved: true },
			'|': { reserved: true }
		};

		function apply(operation, expression, params) {
			/*jshint maxcomplexity:11 */
			return expression.split(',').reduce(function (result, variable) {
				var opts, value;

				opts = {};
				if (variable.slice(-1) === '*') {
					variable = variable.slice(0, -1);
					opts.explode = true;
				}
				if (prefixRE.test(variable)) {
					var prefix = prefixRE.exec(variable);
					variable = prefix[1];
					opts.maxLength = parseInt(prefix[2]);
				}

				variable = uriEncoder.decode(variable);
				value = params[variable];

				if (value === undef || value === null) {
					return result;
				}
				if (typeof value === 'string') {
					if (opts.maxLength) {
						value = value.slice(0, opts.maxLength);
					}
					result += result.length ? operation.separator : operation.first;
					if (operation.named) {
						result += operation.encoder(variable);
						result += value.length ? '=' : operation.empty;
					}
					result += operation.encoder(value);
				}
				else if (Array.isArray(value)) {
					result += value.reduce(function (result, value) {
						if (result.length) {
							result += opts.explode ? operation.separator : ',';
							if (operation.named && opts.explode) {
								result += operation.encoder(variable);
								result += value.length ? '=' : operation.empty;
							}
						}
						else {
							result += operation.first;
							if (operation.named) {
								result += operation.encoder(variable);
								result += value.length ? '=' : operation.empty;
							}
						}
						result += operation.encoder(value);
						return result;
					}, '');
				}
				else {
					result += Object.keys(value).reduce(function (result, name) {
						if (result.length) {
							result += opts.explode ? operation.separator : ',';
						}
						else {
							result += operation.first;
							if (operation.named && !opts.explode) {
								result += operation.encoder(variable);
								result += value[name].length ? '=' : operation.empty;
							}
						}
						result += operation.encoder(name);
						result += opts.explode ? '=' : ',';
						result += operation.encoder(value[name]);
						return result;
					}, '');
				}

				return result;
			}, '');
		}

		function expandExpression(expression, params) {
			var operation;

			operation = operations[expression.slice(0,1)];
			if (operation) {
				expression = expression.slice(1);
			}
			else {
				operation = operations[''];
			}

			if (operation.reserved) {
				throw new Error('Reserved expression operations are not supported');
			}

			return apply(operation, expression, params);
		}

		function expandTemplate(template, params) {
			var start, end, uri;

			uri = '';
			end = 0;
			while (true) {
				start = template.indexOf('{', end);
				if (start === -1) {
					// no more expressions
					uri += template.slice(end);
					break;
				}
				uri += template.slice(end, start);
				end = template.indexOf('}', start) + 1;
				uri += expandExpression(template.slice(start + 1, end - 1), params);
			}

			return uri;
		}

		return {

			/**
			 * Expand a URI Template with parameters to form a URI.
			 *
			 * Full implementation (level 4) of rfc6570.
			 * @see https://tools.ietf.org/html/rfc6570
			 *
			 * @param {string} template URI template
			 * @param {Object} [params] params to apply to the template durring expantion
			 * @returns {string} expanded URI
			 */
			expand: expandTemplate

		};

	});

}(
	typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }
	// Boilerplate for AMD and Node
));

},{"./uriEncoder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\rest\\util\\uriEncoder.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-sortable\\sortable.min.js":[function(require,module,exports){
! function(a, b) {
  "use strict";
  b.module("ui.sortable", []).value("uiSortableConfig", {}).directive("uiSortable", ["uiSortableConfig", "$timeout", "$log",
    function(a, c, d) {
      return {
        require: "?ngModel",
        link: function(e, f, g, h) {
          
          function i(a, b) {
            return b && "function" == typeof b ? function(c, d) {
              a(c, d), b(c, d)
            } : a
          }

          function j(a, b) {
            var c = a.sortable("option", "helper");
            return "clone" === c || "function" == typeof c && b.item.sortable.isCustomHelperUsed()
          }
          var k, l = {},
            m = {
              receive: null,
              remove: null,
              start: null,
              stop: null,
              update: null
            },
            n = {
              helper: null
            };
          return b.extend(l, a, e.$eval(g.uiSortable)), b.element.fn && b.element.fn.jquery ? (h ? (e.$watch(g.ngModel + ".length", function() {
            c(function() {
              f.data("ui-sortable") && f.sortable("refresh")
            })
          }), m.start = function(a, b) {
            b.item.sortable = {
              index: b.item.index(),
              cancel: function() {
                b.item.sortable._isCanceled = !0
              },
              isCanceled: function() {
                return b.item.sortable._isCanceled
              },
              isCustomHelperUsed: function() {
                return !!b.item.sortable._isCustomHelperUsed
              },
              _isCanceled: !1,
              _isCustomHelperUsed: b.item.sortable._isCustomHelperUsed
            }
          }, m.activate = function() {
            k = f.contents();
            var a = f.sortable("option", "placeholder");
            if (a && a.element && "function" == typeof a.element) {
              var c = a.element();
              c = b.element(c);
              var d = f.find('[class="' + c.attr("class") + '"]');
              k = k.not(d)
            }
          }, m.update = function(a, b) {
            b.item.sortable.received || (b.item.sortable.dropindex = b.item.index(), b.item.sortable.droptarget = b.item.parent(), f.sortable("cancel")), j(f, b) && !b.item.sortable.received && (k = k.not(k.last())), k.appendTo(f), b.item.sortable.received && !b.item.sortable.isCanceled() && e.$apply(function() {
              h.$modelValue.splice(b.item.sortable.dropindex, 0, b.item.sortable.moved)
            })
          }, m.stop = function(a, b) {
            !b.item.sortable.received && "dropindex" in b.item.sortable && !b.item.sortable.isCanceled() ? e.$apply(function() {
              h.$modelValue.splice(b.item.sortable.dropindex, 0, h.$modelValue.splice(b.item.sortable.index, 1)[0])
            }) : "dropindex" in b.item.sortable && !b.item.sortable.isCanceled() || j(f, b) || k.appendTo(f)
          }, m.receive = function(a, b) {
            b.item.sortable.received = !0
          }, m.remove = function(a, b) {
            "dropindex" in b.item.sortable || (f.sortable("cancel"), b.item.sortable.cancel()), b.item.sortable.isCanceled() || e.$apply(function() {
              b.item.sortable.moved = h.$modelValue.splice(b.item.sortable.index, 1)[0]
            })
          }, n.helper = function(a) {
            return a && "function" == typeof a ? function(b, c) {
              var d = a(b, c);
              return c.sortable._isCustomHelperUsed = c !== d, d
            } : a
          }, e.$watch(g.uiSortable, function(a) {
            f.data("ui-sortable") && b.forEach(a, function(a, b) {
              m[b] ? ("stop" === b && (a = i(a, function() {
                e.$apply()
              })), a = i(m[b], a)) : n[b] && (a = n[b](a)), f.sortable("option", b, a)
            })
          }, !0), b.forEach(m, function(a, b) {
            l[b] = i(a, l[b])
          })) : d.info("ui.sortable: ngModel not provided!", f), void f.sortable(l)) : void d.error("ui.sortable: jQuery should be included before AngularJS!")
        }
      }
    }
  ])
}(window, window.angular);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-sortable\\sortable.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./sortable.min.js');
},{"./sortable.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-sortable\\sortable.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-summernote\\angular-summernote.min.js":[function(require,module,exports){
/*
  angular-summernote v0.2.2
  Copyright 2014 Jeonghoon Byun
  License: MIT
 */
angular.module("summernote", []).controller("SummernoteController", ["$scope", "$attrs",
	function($scope, $attrs) {
		"use strict";
		var currentElement, summernoteConfig = $scope.summernoteConfig || {};
		if (angular.isDefined($attrs.height) && (summernoteConfig.height = $attrs.height), angular.isDefined($attrs.focus) && (summernoteConfig.focus = !0), angular.isDefined($attrs.lang)) {
			if (!angular.isDefined($.summernote.lang[$attrs.lang])) throw new Error('"' + $attrs.lang + '" lang file must be exist.');
			summernoteConfig.lang = $attrs.lang
		}
		summernoteConfig.oninit = $scope.init, summernoteConfig.onenter = function(evt) {
			$scope.enter({
				evt: evt
			})
		}, summernoteConfig.onfocus = function(evt) {
			$scope.focus({
				evt: evt
			})
		}, summernoteConfig.onblur = function(evt) {
			$scope.blur({
				evt: evt
			})
		}, summernoteConfig.onpaste = function(evt) {
			$scope.paste({
				evt: evt
			})
		}, summernoteConfig.onkeydown = function(evt) {
			$scope.keydown({
				evt: evt
			})
		}, angular.isDefined($attrs.onImageUpload) && (summernoteConfig.onImageUpload = function(files, editor, welEditable) {
			$scope.imageUpload({
				files: files,
				editor: editor,
				welEditable: welEditable
			})
		}), this.activate = function(scope, element, ngModel) {
			var updateNgModel = function() {
				var newValue = element.code();
				ngModel && ngModel.$viewValue !== newValue && (ngModel.$setViewValue(newValue), ("$apply" !== $scope.$$phase || "$digest" !== $scope.$$phase) && scope.$apply())
			};
			summernoteConfig.onkeyup = function(evt) {
				updateNgModel(), $scope.keyup({
					evt: evt
				})
			}, element.summernote(summernoteConfig);
			var unwatchNgModel, editor$ = element.next(".note-editor");
			editor$.find(".note-toolbar").click(function() {
				updateNgModel(), editor$.hasClass("codeview") ? (editor$.on("keyup", updateNgModel), ngModel && (unwatchNgModel = scope.$watch(function() {
					return ngModel.$modelValue
				}, function(newValue) {
					editor$.find(".note-codable").val(newValue)
				}))) : (editor$.off("keyup", updateNgModel), angular.isFunction(unwatchNgModel) && unwatchNgModel())
			}), ngModel && (ngModel.$render = function() {
				element.code(ngModel.$viewValue || "")
			}), currentElement = element
		}, $scope.$on("$destroy", function() {
			currentElement.destroy()
		})
	}
]).directive("summernote", [
	function() {
		"use strict";
		return {
			restrict: "EA",
			transclude: !0,
			replace: !0,
			require: ["summernote", "^?ngModel"],
			controller: "SummernoteController",
			scope: {
				summernoteConfig: "=config",
				init: "&onInit",
				enter: "&onEnter",
				focus: "&onFocus",
				blur: "&onBlur",
				paste: "&onPaste",
				keyup: "&onKeyup",
				keydown: "&onKeydown",
				imageUpload: "&onImageUpload"
			},
			template: '<div class="summernote"></div>',
			link: function(scope, element, attrs, ctrls) {
				var summernoteController = ctrls[0],
					ngModel = ctrls[1];
				summernoteController.activate(scope, element, ngModel)
			}
		}
	}
]);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-summernote\\angular-summernote.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./angular-summernote.min.js');
},{"./angular-summernote.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-summernote\\angular-summernote.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-tr-ng-grid\\trNgGrid.js":[function(require,module,exports){
/// <reference path="../external/typings/jquery/jquery.d.ts"/>
/// <reference path="../external/typings/angularjs/angular.d.ts"/>
var TrNgGrid;
(function (TrNgGrid) {
    var tableDirective = "trNgGrid";

    var headerDirective = "trNgGridHeader";
    var headerDirectiveAttribute = "tr-ng-grid-header";
    TrNgGrid.columnHeaderTemplateId = headerDirective + ".html";

    var bodyDirective = "trNgGridBody";
    var bodyDirectiveAttribute = "tr-ng-grid-body";

    var footerDirective = "trNgGridFooter";
    var footerDirectiveAttribute = "tr-ng-grid-footer";

    var globalFilterDirective = "trNgGridGlobalFilter";
    var globalFilterDirectiveAttribute = "tr-ng-grid-global-filter";

    var pagerDirective = "trNgGridPager";
    var pagerDirectiveAttribute = "tr-ng-grid-pager";

    var columnDirective = "trNgGridColumn";
    var columnDirectiveAttribute = "tr-ng-grid-column";

    var sortDirective = "trNgGridColumnSort";
    var sortDirectiveAttribute = "tr-ng-grid-column-sort";
    TrNgGrid.columnSortTemplateId = sortDirective + ".html";

    var filterColumnDirective = "trNgGridColumnFilter";
    var filterColumnDirectiveAttribute = "tr-ng-grid-column-filter";
    TrNgGrid.columnFilterTemplateId = filterColumnDirective + ".html";

    var rowPageItemIndexAttribute = "tr-ng-grid-row-page-item-index";

    TrNgGrid.tableCssClass = "tr-ng-grid table table-bordered table-hover"; // at the time of coding, table-striped is not working properly with selection
    TrNgGrid.cellCssClass = "tr-ng-cell";
    TrNgGrid.columnHeaderContentsCssClass = "tr-ng-column-header";
    TrNgGrid.titleCssClass = "tr-ng-title";
    TrNgGrid.sortCssClass = "tr-ng-sort";
    TrNgGrid.filterColumnCssClass = "tr-ng-column-filter";
    TrNgGrid.filterInputWrapperCssClass = "";
    TrNgGrid.sortActiveCssClass = "tr-ng-sort-active text-info";
    TrNgGrid.sortInactiveCssClass = "tr-ng-sort-inactive text-muted";
    TrNgGrid.sortReverseOrderCssClass = "tr-ng-sort-order-reverse glyphicon glyphicon-chevron-up";
    TrNgGrid.sortNormalOrderCssClass = "tr-ng-sort-order-normal glyphicon glyphicon-chevron-down";
    TrNgGrid.selectedRowCssClass = "active";
    TrNgGrid.footerOpsContainerCssClass = "tr-ng-grid-footer form-inline";

    var GridController = (function () {
        function GridController($compile, $scope, $element, $attrs, $transclude, $parse, $timeout) {
            var _this = this;
            this.$compile = $compile;
            this.$parse = $parse;
            this.$timeout = $timeout;
            this.gridElement = $element;
            this.internalScope = $scope;
            this.scheduledRecompilationDereg = null;

            var scopeOptionsIdentifier = "gridOptions";

            // initialise the options
            this.gridOptions = {
                items: [],
                selectedItems: [],
                filterBy: null,
                filterByFields: {},
                orderBy: null,
                orderByReverse: false,
                pageItems: null,
                currentPage: 0,
                totalItems: null,
                enableFiltering: true,
                enableSorting: true,
                enableSelections: true,
                enableMultiRowSelections: true,
                onDataRequiredDelay: 10 // built.io modification.
            };
            this.gridOptions.onDataRequired = $attrs["onDataRequired"] ? $scope.onDataRequired : null;
            this.gridOptions.gridColumnDefs = [];
            $scope[scopeOptionsIdentifier] = this.gridOptions;

            this.externalScope = this.internalScope.$parent;

            //link the outer scope with the internal one
            this.linkScope(this.internalScope, scopeOptionsIdentifier, $attrs);

            //set up watchers for some of the special attributes we support
            if (this.gridOptions.onDataRequired) {
                $scope.$watchCollection("[gridOptions.filterBy, " + "gridOptions.filterByFields, " + "gridOptions.orderBy, " + "gridOptions.orderByReverse, " + "gridOptions.currentPage]", function () {
                    if (_this.dataRequestPromise) {
                        _this.$timeout.cancel(_this.dataRequestPromise);
                        _this.dataRequestPromise = null;
                    }

                    // built.io modification
                    var delay = !_.isEmpty(_this.gridOptions.filterBy) ? 1000 : _this.gridOptions.onDataRequiredDelay;

                    // for the time being, Angular is not able to bind only when losing focus, so we'll introduce a delay
                    _this.dataRequestPromise = _this.$timeout(function () {
                        _this.dataRequestPromise = null;
                        _this.gridOptions.onDataRequired(_this.gridOptions);
                    }, delay, true);
                });
            }

            this.internalScope.$watch("enableMultiRowSelections", function (newValue, oldValue) {
                if (newValue !== oldValue && !newValue) {
                    if (_this.gridOptions.selectedItems.length > 1) {
                        _this.gridOptions.selectedItems.splice(1);
                    }
                }
            });
            this.internalScope.$watch("enableSelections", function (newValue, oldValue) {
                if (newValue !== oldValue && !newValue) {
                    _this.gridOptions.selectedItems.splice(0);
                    _this.gridOptions.enableMultiRowSelections = false;
                }
            });
        }
        GridController.prototype.setColumnOptions = function (columnIndex, columnOptions) {
            if (columnIndex >= this.gridOptions.gridColumnDefs.length) {
                this.gridOptions.gridColumnDefs.push({});
                this.setColumnOptions(columnIndex, columnOptions);
            } else {
                this.gridOptions.gridColumnDefs[columnIndex] = columnOptions;
            }
        };

        GridController.prototype.toggleSorting = function (propertyName) {
            if (this.gridOptions.orderBy != propertyName) {
                // the column has changed
                this.gridOptions.orderBy = propertyName;
            } else {
                // the sort direction has changed
                this.gridOptions.orderByReverse = !this.gridOptions.orderByReverse;
            }
        };

        GridController.prototype.setFilter = function (propertyName, filter) {
            if (!filter) {
                delete (this.gridOptions.filterByFields[propertyName]);
            } else {
                this.gridOptions.filterByFields[propertyName] = filter;
            }

            // in order for someone to successfully listen to changes made to this object, we need to replace it
            this.gridOptions.filterByFields = $.extend({}, this.gridOptions.filterByFields);
        };

        GridController.prototype.toggleItemSelection = function (item) {
            if (!this.gridOptions.enableSelections)
                return;

            var itemIndex = this.gridOptions.selectedItems.indexOf(item);
            if (itemIndex >= 0) {
                this.gridOptions.selectedItems.splice(itemIndex, 1);
            } else {
                if (!this.gridOptions.enableMultiRowSelections) {
                    this.gridOptions.selectedItems.splice(0);
                }
                this.gridOptions.selectedItems.push(item);
            }
        };

        GridController.prototype.scheduleRecompilationOnAvailableItems = function () {
            var _this = this;
            if (this.scheduledRecompilationDereg || (this.gridOptions.items && this.gridOptions.items.length))
                // already have one set up
                return;

            this.scheduledRecompilationDereg = this.internalScope.$watch("items.length", function (newLength, oldLength) {
                if (newLength > 0) {
                    // unregister the watch
                    _this.scheduledRecompilationDereg();

                    // recompile
                    _this.$compile(_this.gridElement)(_this.externalScope);
                }
            });
        };

        GridController.prototype.linkScope = function (scope, scopeTargetIdentifier, attrs) {
            // this method shouldn't even be here
            // but it is because we want to allow people to either set attributes with either a constant or a watchable variable
            // watch for a resolution to issue #5951 on angular
            // https://github.com/angular/angular.js/issues/5951
            var target = scope[scopeTargetIdentifier];

            for (var propName in target) {
                var attributeExists = typeof (attrs[propName]) != "undefined" && attrs[propName] != null;

                if (attributeExists) {
                    var isArray = false;

                    // initialise from the scope first
                    if (typeof (scope[propName]) != "undefined" && scope[propName] != null) {
                        target[propName] = scope[propName];
                        isArray = target[propName] instanceof Array;
                    }

                    //allow arrays to be changed: if(!isArray){
                    var compiledAttr = this.$parse(attrs[propName]);
                    var dualDataBindingPossible = /*typeof(compiledAttr)!="array" &&*/ compiledAttr && compiledAttr.assign;
                    if (dualDataBindingPossible) {
                        (function (propName) {
                            // set up one of the bindings
                            scope.$watch(scopeTargetIdentifier + "." + propName, function (newValue, oldValue) {
                                if (newValue !== oldValue) {
                                    scope[propName] = target[propName];
                                }
                            });

                            // set up the other one
                            scope.$watch(propName, function (newValue, oldValue) {
                                if (newValue !== oldValue) {
                                    target[propName] = scope[propName];
                                }
                            });
                        })(propName);
                    }
                }
            }
        };

        GridController.prototype.splitByCamelCasing = function (input) {
            var splitInput = input.split(/(?=[A-Z])/);
            if (splitInput.length && splitInput[0].length) {
                splitInput[0] = splitInput[0][0].toLocaleUpperCase() + splitInput[0].substr(1);
            }

            return splitInput.join(" ");
        };
        return GridController;
    })();

    angular.module("trNgGrid", []).directive(tableDirective, [function () {
            return {
                restrict: 'A',
                // create an isolated scope, and remember the original scope can be found in the parent
                scope: {
                    items: '=',
                    selectedItems: '=?',
                    filterBy: '=?',
                    filterByFields: '=?',
                    orderBy: '=?',
                    orderByReverse: '=?',
                    pageItems: '=?',
                    currentPage: '=?',
                    totalItems: '=?',
                    enableFiltering: '=?',
                    enableSorting: '=?',
                    enableSelections: '=?',
                    enableMultiRowSelections: '=?',
                    onDataRequired: '&',
                    onDataRequiredDelay: '=?'
                },
                // executed prior to pre-linking phase but after compilation
                // as we're creating an isolated scope, we need something to link them
                controller: ["$compile", "$scope", "$element", "$attrs", "$transclude", "$parse", "$timeout", GridController],
                // dom manipulation in the compile stage
                compile: function (templateElement, tAttrs) {
                    templateElement.addClass(TrNgGrid.tableCssClass);
                    var insertFooterElement = false;
                    var insertHeadElement = false;

                    // make sure the header is present
                    var tableHeadElement = templateElement.children("thead");
                    if (tableHeadElement.length == 0) {
                        tableHeadElement = $("<thead>");
                        insertHeadElement = true;
                    }
                    var tableHeadRowTemplate = tableHeadElement.children("tr");
                    if (tableHeadRowTemplate.length == 0) {
                        tableHeadRowTemplate = $("<tr>").appendTo(tableHeadElement);
                    }
                    tableHeadRowTemplate.attr(headerDirectiveAttribute, "");

                    // help a bit with the attributes
                    tableHeadRowTemplate.children("th[field-name]").attr(columnDirectiveAttribute, "");

                    //discoverColumnDefinitionsFromUi(tableHeadRowTemplate);
                    // make sure the body is present
                    var tableBodyElement = templateElement.children("tbody");
                    if (tableBodyElement.length === 0) {
                        tableBodyElement = $("<tbody>").appendTo(templateElement);
                    }

                    var tableBodyRowTemplate = tableBodyElement.children("tr");
                    if (tableBodyRowTemplate.length === 0) {
                        tableBodyRowTemplate = $("<tr>").appendTo(tableBodyElement);
                    }
                    tableBodyElement.attr(bodyDirectiveAttribute, "");

                    // make sure the footer is present
                    var tableFooterElement = templateElement.children("tfoot");
                    if (tableFooterElement.length == 0) {
                        tableFooterElement = $("<tfoot>");
                        insertFooterElement = true;
                    }
                    var tableFooterRowTemplate = tableFooterElement.children("tr");
                    if (tableFooterRowTemplate.length == 0) {
                        tableFooterRowTemplate = $("<tr>").appendTo(tableFooterElement);
                    }
                    if (tableFooterRowTemplate.children("td").length == 0) {
                        var fullTableLengthFooterCell = $("<td>").attr("colspan", "999").appendTo(tableFooterRowTemplate);

                        var footerOpsContainer = $("<div>").attr(footerDirectiveAttribute, "").appendTo(fullTableLengthFooterCell);
                    }

                    if (insertHeadElement) {
                        templateElement.prepend(tableHeadElement);
                    }

                    if (insertFooterElement) {
                        tableFooterElement.insertBefore(tableBodyElement);
                    }
                }
            };
        }]).directive(headerDirective, [
        "$compile",
        function ($compile) {
            return {
                restrict: 'A',
                scope: false,
                require: '^' + tableDirective,
                compile: function (templateElement, tAttrs) {
                    return {
                        //pre linking function - executed before children get linked (be careful with the dom changes)
                        pre: function (scope, instanceElement, tAttrs, gridController) {
                            // deal with the situation where no column definition exists on the th elements in the table
                            if (instanceElement.children("th").length == 0) {
                                // no columns defined for the header, attempt to identify the properties and populate the columns definition
                                if (gridController.gridOptions.items && gridController.gridOptions.items.length > 0) {
                                    var columnNames = [];
                                    for (var propName in gridController.gridOptions.items[0]) {
                                        // exclude the library properties
                                        if (!propName.match(/^[_\$]/g)) {
                                            columnNames.push(propName);
                                        }
                                    }
                                    for (var columnIndex = 0; columnIndex < columnNames.length; columnIndex++) {
                                        // create the th definition and add the column directive, serialised
                                        var headerCellElement = $("<th>").attr(columnDirectiveAttribute, "").attr("field-name", columnNames[columnIndex]).appendTo(instanceElement);
                                        $compile(headerCellElement)(scope);
                                    }
                                } else {
                                    // watch for items to arrive and re-run the compilation then
                                    gridController.scheduleRecompilationOnAvailableItems();
                                }
                            }
                        }
                    };
                }
            };
        }
    ]).directive(columnDirective, [
        "$compile",
        function ($compile) {
            return {
                restrict: 'A',
                // column settings, dual-databinding is not necessary here
                scope: true,
                require: '^' + tableDirective,
                compile: function (templateElement, tAttrs) {
                    var columnIndex;
                    return {
                        //pre linking function, prepare a few things
                        pre: function (scope, instanceElement, tAttrs, controller) {
                            var isValid = instanceElement.prop("tagName") == "TH";
                            if (!isValid) {
                                throw "The template has an invalid header column template element. Column templates must be defined on TH elements inside THEAD/TR";
                            }

                            // set up the scope for the column inside the header
                            // the directive can be present on the header's td elements but also on the body's elements but we extract column information from the header only
                            columnIndex = instanceElement.parent().children("th").index(instanceElement);
                            if (columnIndex < 0)
                                return;

                            scope.gridOptions = controller.gridOptions;
                            scope.toggleSorting = function (propertyName) {
                                return controller.toggleSorting(propertyName);
                            };
                            scope.filter = "";
                            scope.$watch("filter", function (newValue, oldValue) {
                                if (newValue !== oldValue) {
                                    controller.setFilter(scope.currentGridColumnDef.fieldName, newValue);
                                }
                            });

                            // prepare the child scope
                            var columnDefSetup = function () {
                                scope.currentGridColumnDef.fieldName = tAttrs["fieldName"];
                                scope.currentGridColumnDef.displayName = typeof (tAttrs["displayName"]) == "undefined" ? controller.splitByCamelCasing(tAttrs["fieldName"]) : tAttrs["displayName"], scope.currentGridColumnDef.enableFiltering = tAttrs["enableFiltering"] == "true" || (typeof (tAttrs["enableFiltering"]) == "undefined" && scope.gridOptions.enableFiltering);
                                scope.currentGridColumnDef.enableSorting = tAttrs["enableSorting"] == "true" || (typeof (tAttrs["enableSorting"]) == "undefined" && scope.gridOptions.enableSorting);
                                scope.currentGridColumnDef.displayAlign = tAttrs["displayAlign"];
                                scope.currentGridColumnDef.displayFormat = tAttrs["displayFormat"];
                                scope.currentGridColumnDef.cellWidth = tAttrs["cellWidth"];
                                scope.currentGridColumnDef.cellHeight = tAttrs["cellHeight"];
                            };

                            scope.currentGridColumnDef = {};
                            columnDefSetup();

                            scope.$watchCollection("[gridOptions.enableFiltering,gridOptions.enableSorting]", function (newValue, oldValue) {
                                columnDefSetup();
                            });
                            controller.setColumnOptions(columnIndex, scope.currentGridColumnDef);
                            instanceElement.removeAttr(columnDirectiveAttribute);
                        },
                        //post linking function - executed after all the children have been linked, safe to perform DOM manipulations
                        post: function (scope, instanceElement, tAttrs, controller) {
                            // we're sure we're inside the header
                            if (scope.currentGridColumnDef) {
                                if (!scope.currentGridColumnDef.fieldName) {
                                    throw "The column definition for trNgGrid must contain the field name";
                                }

                                if (scope.currentGridColumnDef.cellWidth) {
                                    instanceElement.css("width", scope.currentGridColumnDef.cellWidth);
                                }
                                if (scope.currentGridColumnDef.cellHeight) {
                                    instanceElement.css("height", scope.currentGridColumnDef.cellHeight);
                                }

                                if (instanceElement.text() == "") {
                                    //prepopulate
                                    var cellContentsElement = $("<div>").addClass(TrNgGrid.cellCssClass).addClass(TrNgGrid.columnHeaderContentsCssClass);

                                    // the column title was not specified, attempt to include it and recompile
                                    var tileElement = $("<div>").addClass(TrNgGrid.titleCssClass).text(scope.currentGridColumnDef.displayName).appendTo(cellContentsElement);

                                    $("<div>").attr(sortDirectiveAttribute, "").appendTo(tileElement);

                                    $("<div>").attr(filterColumnDirectiveAttribute, "").appendTo(cellContentsElement);

                                    //instanceElement.append(cellContentsElement);
                                    // pass the outside scope
                                    instanceElement.append($compile(cellContentsElement)(scope));
                                }
                            }
                        }
                    };
                }
            };
        }
    ]).directive(sortDirective, [
        function () {
            return {
                restrict: 'A',
                replace: true,
                templateUrl: TrNgGrid.columnSortTemplateId
            };
        }
    ]).directive(filterColumnDirective, [
        function () {
            return {
                restrict: 'A',
                replace: true,
                templateUrl: TrNgGrid.columnFilterTemplateId
            };
        }
    ]).filter("paging", function () {
        return function (input, gridOptions) {
            //currentPage?:number, pageItems?:number
            if (input)
                gridOptions.totalItems = input.length;

            if (!gridOptions.pageItems || !input || input.length == 0)
                return input;

            if (!gridOptions.currentPage) {
                gridOptions.currentPage = 0;
            }

            var startIndex = gridOptions.currentPage * gridOptions.pageItems;
            if (startIndex >= input.length) {
                gridOptions.currentPage = 0;
                startIndex = 0;
            }
            var endIndex = gridOptions.currentPage * gridOptions.pageItems + gridOptions.pageItems;

            /*              Update: Not called for server-side paging
            if(startIndex>=input.length){
            // server side paging, ignore the operation
            return input;
            }
            */
            return input.slice(startIndex, endIndex);
        };
    }).directive(bodyDirective, [
        "$compile",
        function ($compile) {
            return {
                restrict: 'A',
                scope: true,
                require: '^' + tableDirective,
                replace: true,
                compile: function (templateElement, tAttrs) {
                    // we cannot allow angular to use the body row template just yet
                    var bodyOriginalTemplateRow = templateElement.children("tr");
                    templateElement.contents().remove();

                    //post linking function - executed after all the children have been linked, safe to perform DOM manipulations
                    return {
                        post: function (scope, compiledInstanceElement, tAttrs, controller) {
                            // set up the scope
                            scope.gridOptions = controller.gridOptions;
                            scope.toggleItemSelection = function (item) {
                                return controller.toggleItemSelection(item);
                            };

                            // find the body row template, which was initially excluded from the compilation
                            // apply the ng-repeat
                            var ngRepeatAttrValue = "gridItem in gridOptions.items";
                            if (scope.gridOptions.onDataRequired) {
                                // data is retrieved externally, watchers set up in the controller take care of calling this method
                            } else {
                                // the grid's internal mechanisms are active
                                ngRepeatAttrValue += " | filter:gridOptions.filterBy | filter:gridOptions.filterByFields | orderBy:gridOptions.orderBy:gridOptions.orderByReverse | paging:gridOptions";
                            }

                            // ng-switch calls the post-linking function to refresh the dom, so we can't mess the original template
                            var bodyTemplateRow = bodyOriginalTemplateRow.clone(true);

                            bodyTemplateRow.attr("ng-repeat", ngRepeatAttrValue);
                            if (!bodyTemplateRow.attr("ng-click")) {
                                bodyTemplateRow.attr("ng-click", "toggleItemSelection(gridItem)");
                            }
                            bodyTemplateRow.attr("ng-class", "{'" + TrNgGrid.selectedRowCssClass + "':gridOptions.selectedItems.indexOf(gridItem)>=0}");

                            bodyTemplateRow.attr(rowPageItemIndexAttribute, "{{$index}}");
                            angular.forEach(scope.gridOptions.gridColumnDefs, function (columnOptions, index) {
                                var cellTemplateElement = bodyTemplateRow.children("td:nth-child(" + (index + 1) + ")");
                                var cellTemplateFieldName = cellTemplateElement.attr("field-name");
                                var createInnerCellContents = false;

                                if (cellTemplateFieldName !== columnOptions.fieldName) {
                                    // inconsistencies between column definition and body cell template
                                    createInnerCellContents = true;

                                    var newCellTemplateElement = $("<td>");
                                    if (cellTemplateElement.length == 0)
                                        bodyTemplateRow.append(newCellTemplateElement);
                                    else
                                        cellTemplateElement.before(newCellTemplateElement);

                                    cellTemplateElement = newCellTemplateElement;
                                } else {
                                    // create the content if the td had no children
                                    createInnerCellContents = (cellTemplateElement.text() == "");
                                }

                                if (createInnerCellContents) {
                                    var cellContentsElement = $("<div>").addClass(TrNgGrid.cellCssClass);
                                    if (columnOptions.fieldName) {
                                        // according to the column options, a model bound cell is needed here
                                        cellContentsElement.attr("field-name", columnOptions.fieldName);
                                        var cellContentsElementText = "{{gridItem." + columnOptions.fieldName;
                                        if (columnOptions.displayFormat) {
                                            // add the display filter
                                            if (columnOptions.displayFormat[0] != '|' && columnOptions.displayFormat[0] != '.') {
                                                cellContentsElementText += " | "; // assume an angular filter by default
                                            }
                                            cellContentsElementText += columnOptions.displayFormat;
                                        }
                                        cellContentsElementText += "}}";
                                        cellContentsElement.text(cellContentsElementText);
                                    } else {
                                        cellContentsElement.text("Invalid column match inside the table body");
                                    }

                                    cellTemplateElement.append(cellContentsElement);
                                }

                                if (columnOptions.displayAlign) {
                                    cellTemplateElement.addClass("text-" + columnOptions.displayAlign);
                                }
                                if (columnOptions.cellWidth) {
                                    cellTemplateElement.css("width", columnOptions.cellWidth);
                                }
                                if (columnOptions.cellHeight) {
                                    cellTemplateElement.css("height", columnOptions.cellHeight);
                                }
                            });

                            // now we need to compile, but in order for this to work, we need to have the dom in place
                            // also we remove the column directive, it was just used to mark data bound body columns
                            compiledInstanceElement.append($compile(bodyTemplateRow)(scope));
                            compiledInstanceElement.removeAttr(bodyDirectiveAttribute);
                            compiledInstanceElement.children("td[" + columnDirectiveAttribute + "]").removeAttr(columnDirectiveAttribute);
                        }
                    };
                }
            };
        }
    ]).directive(footerDirective, [
        function () {
            return {
                restrict: 'A',
                scope: false,
                require: '^' + tableDirective,
                replace: true,
                template: '<div class="' + TrNgGrid.footerOpsContainerCssClass + '">' + '<span ' + globalFilterDirectiveAttribute + '=""/>' + '<span ' + pagerDirectiveAttribute + '=""/>' + '</div>'
            };
        }
    ]).directive(globalFilterDirective, [
        function () {
            return {
                restrict: 'A',
                replace: true,
                scope: true,
                require: '^' + tableDirective,
                template: function (templateElement, tAttrs) {
                    // built.io modification
                    //return '<span ng-show="gridOptions.enableFiltering" class="form-group">' + '<input class="form-control" type="text" ng-model="gridOptions.filterBy" placeholder="Search"/>' + '</span>';
                    return '<div class="icon-addon addon-md" ng-show="gridOptions.enableFiltering"><input type="text" placeholder="Search" class="form-control" ng-model="gridOptions.filterBy"><label class="fa fa-search"></label></div>';
                },
                compile: function (templateElement, tAttrs) {
                    //templateElement.attr("ng-show", "gridOptions.enableFiltering");
                    return {
                        pre: function (scope, compiledInstanceElement, tAttrs, controller) {
                            scope.gridOptions = controller.gridOptions;
                        },
                        post: function (scope, instanceElement, tAttrs, controller) {
                        }
                    };
                }
            };
        }
    ]).directive(pagerDirective, [
        function () {
            var setupScope = function (scope, controller) {
                scope.gridOptions = controller.gridOptions;
                scope.isPaged = !!scope.gridOptions.pageItems;

                // do not set scope.gridOptions.totalItems, it might be set from the outside
                scope.totalItemsCount = (typeof (scope.gridOptions.totalItems) != "undefined" && scope.gridOptions.totalItems != null) ? scope.gridOptions.totalItems : (scope.gridOptions.items ? scope.gridOptions.items.length : 0);

                scope.startItemIndex = scope.isPaged ? (scope.gridOptions.pageItems * scope.gridOptions.currentPage) : 0;
                scope.endItemIndex = scope.isPaged ? (scope.startItemIndex + scope.gridOptions.pageItems - 1) : scope.totalItemsCount - 1;
                if (scope.endItemIndex >= scope.totalItemsCount) {
                    scope.endItemIndex = scope.totalItemsCount - 1;
                }
                if (scope.endItemIndex < scope.startItemIndex) {
                    scope.endItemIndex = scope.startItemIndex;
                }
                scope.lastPageIndex = (!scope.totalItemsCount || !scope.isPaged) ? 0 : (Math.floor(scope.totalItemsCount / scope.gridOptions.pageItems) + ((scope.totalItemsCount % scope.gridOptions.pageItems) ? 0 : -1));

                scope.pageIndexes = [];
                for (var pageIndex = 0; pageIndex <= scope.lastPageIndex; pageIndex++) {
                    scope.pageIndexes.push(pageIndex);
                }
                scope.pageSelectionActive = scope.pageIndexes.length > 1;

                scope.pageCanGoBack = scope.isPaged && scope.gridOptions.currentPage > 0;
                scope.pageCanGoForward = scope.isPaged && scope.gridOptions.currentPage < scope.lastPageIndex;

                scope.navigateToPage = function ($event, pageIndex) {
                    scope.gridOptions.currentPage = pageIndex;
                    $event.preventDefault();
                    $event.stopPropagation();
                };

                scope.switchPageSelection = function ($event, pageSelectionActive) {
                    scope.pageSelectionActive = pageSelectionActive;
                    if ($event) {
                        $event.preventDefault();
                        $event.stopPropagation();
                    }
                };
            };

            //ng - model = "gridOptions.currentPage"
            return {
                restrict: 'A',
                scope: true,
                require: '^' + tableDirective,
                template: function (templateElement, tAttrs) {
                    // built.io modification
                    //return '<span class="pull-right form-group">' + '<ul class="pagination">' + '<li ng-show="pageCanGoBack" >' + '<a href="#" ng-click="navigateToPage($event, 0)" title="First Page">|&lArr;</a>' + '</li>' + '<li ng-show="pageCanGoBack" >' + '<a href="#" ng-click="navigateToPage($event, gridOptions.currentPage - 1)" title="Previous Page">&lArr;</a>' + '</li>' + '<li ng-show="pageSelectionActive" style="white-space: nowrap;">' + '<span class="page-select-box">Page: ' + '<select ng-model="gridOptions.currentPage" ng-options="pageIndex as (pageIndex+1) for pageIndex in pageIndexes"></select></span>' + '</li>' + '<li class="disabled" style="white-space: nowrap;">' + '<span ng-hide="totalItemsCount">No items to display</span>' + '<span ng-show="totalItemsCount" title="Select Page">' + '  {{startItemIndex+1}} - {{endItemIndex+1}} displayed' + '<span>, {{totalItemsCount}} in total</span>' + '</span > ' + '</li>' + '<li ng-show="pageCanGoForward">' + '<a href="#" ng-click="navigateToPage($event, gridOptions.currentPage + 1)" title="Next Page">&rArr;</a>' + '</li>' + '<li>' + '<li ng-show="pageCanGoForward">' + '<a href="#" ng-show="pageCanGoForward" ng-click="navigateToPage($event, lastPageIndex)" title="Last Page">&rArr;|</a>' + '</li>' + '</ul>' + '</span>';
                    return '<div class="tr-ng-grid-pager form-group tr-ng-grid-custom-pager"><div class="pager-buttons btn-group" ng-show="totalItemsCount"><button class="btn btn-default" ng-disabled="!pageCanGoBack" ng-click="navigateToPage($event, gridOptions.currentPage - 1)" title="Previous Page"><i class="fa fa-chevron-left"></i></button><button class="btn btn-default" ng-disabled="!pageCanGoForward" ng-click="navigateToPage($event, gridOptions.currentPage + 1)" title="Next Page"><i class="fa fa-chevron-right"></i></button></div><div class="pager-select" ng-show="totalItemsCount"><select class="form-control" ng-model="gridOptions.currentPage" ng-options="pageIndex as (pageIndex+1) for pageIndex in pageIndexes"></select></div><div class="pager-status"><p ng-show="totalItemsCount">Showing <span class="txt-color-darken">{{startItemIndex+1}}</span>&nbsp;to&nbsp;<span class="txt-color-darken">{{endItemIndex+1}}</span>&nbsp;of&nbsp;<span class="text-primary">{{totalItemsCount}}</span>&nbsp;entries</p><p ng-hide="totalItemsCount">No items to display</p></div></div>';
                },
                replace: true,
                link: {
                    pre: function (scope, compiledInstanceElement, tAttrs, controller) {
                        setupScope(scope, controller);
                    },
                    post: function (scope, instanceElement, tAttrs, controller) {
                        // equality checks: http://teropa.info/blog/2014/01/26/the-three-watch-depths-of-angularjs.html
                        scope.$watchCollection("[gridOptions.currentPage, gridOptions.items.length, gridOptions.totalItems, gridOptions.pageItems]", function (newValues, oldValues) {
                            setupScope(scope, controller);
                        });
                    }
                }
            };
        }
    ]).run([
        "$templateCache",
        function ($templateCache) {
            // set up default templates
            $templateCache.put(TrNgGrid.columnFilterTemplateId, "<div ng-show='currentGridColumnDef.enableFiltering' class='" + TrNgGrid.filterColumnCssClass + "'>" + "<div class='" + TrNgGrid.filterInputWrapperCssClass + "'>" + "<input class='form-control input-sm' type='text' ng-model='filter'/>" + "</div>" + "</div>");
            $templateCache.put(TrNgGrid.columnSortTemplateId, "<div ng-show='currentGridColumnDef.enableSorting' ng-click='toggleSorting(currentGridColumnDef.fieldName)' title='Sort' class='" + TrNgGrid.sortCssClass + "'>" + "<div " + "ng-class=\"{'" + TrNgGrid.sortActiveCssClass + "':gridOptions.orderBy==currentGridColumnDef.fieldName,'" + TrNgGrid.sortInactiveCssClass + "':gridOptions.orderBy!=currentGridColumnDef.fieldName,'" + TrNgGrid.sortNormalOrderCssClass + "':gridOptions.orderBy!=currentGridColumnDef.fieldName||!gridOptions.orderByReverse,'" + TrNgGrid.sortReverseOrderCssClass + "':gridOptions.orderBy==currentGridColumnDef.fieldName&&gridOptions.orderByReverse}\" " + " >" + "</div>" + "</div>");
        }
    ]);
})(TrNgGrid || (TrNgGrid = {}));
//# sourceMappingURL=trNgGrid.js.map

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-tr-ng-grid\\trnggrid.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./trNgGrid.js');
},{"./trNgGrid.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-tr-ng-grid\\trNgGrid.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-bootstrap\\ui-bootstrap-custom-tpls-0.10.0.min.js":[function(require,module,exports){
/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.11.0 - 2014-05-01
 * License: MIT
 */
angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.transition",[]).factory("$transition",["$q","$timeout","$rootScope",function(a,b,c){function d(a){for(var b in a)if(void 0!==f.style[b])return a[b]}var e=function(d,f,g){g=g||{};var h=a.defer(),i=e[g.animation?"animationEndEventName":"transitionEndEventName"],j=function(){c.$apply(function(){d.unbind(i,j),h.resolve(d)})};return i&&d.bind(i,j),b(function(){angular.isString(f)?d.addClass(f):angular.isFunction(f)?f(d):angular.isObject(f)&&d.css(f),i||h.resolve(d)}),h.promise.cancel=function(){i&&d.unbind(i,j),h.reject("Transition cancelled")},h.promise},f=document.createElement("trans"),g={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},h={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return e.transitionEndEventName=d(g),e.animationEndEventName=d(h),e}]),angular.module("ui.bootstrap.collapse",["ui.bootstrap.transition"]).directive("collapse",["$transition",function(a){return{link:function(b,c,d){function e(b){function d(){j===e&&(j=void 0)}var e=a(c,b);return j&&j.cancel(),j=e,e.then(d,d),e}function f(){k?(k=!1,g()):(c.removeClass("collapse").addClass("collapsing"),e({height:c[0].scrollHeight+"px"}).then(g))}function g(){c.removeClass("collapsing"),c.addClass("collapse in"),c.css({height:"auto"})}function h(){if(k)k=!1,i(),c.css({height:0});else{c.css({height:c[0].scrollHeight+"px"});{c[0].offsetWidth}c.removeClass("collapse in").addClass("collapsing"),e({height:0}).then(i)}}function i(){c.removeClass("collapsing"),c.addClass("collapse")}var j,k=!0;b.$watch(d.collapse,function(a){a?h():f()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(a,b,c){this.groups=[],this.closeOthers=function(d){var e=angular.isDefined(b.closeOthers)?a.$eval(b.closeOthers):c.closeOthers;e&&angular.forEach(this.groups,function(a){a!==d&&(a.isOpen=!1)})},this.addGroup=function(a){var b=this;this.groups.push(a),a.$on("$destroy",function(){b.removeGroup(a)})},this.removeGroup=function(a){var b=this.groups.indexOf(a);-1!==b&&this.groups.splice(b,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",transclude:!0,replace:!1,templateUrl:"template/accordion/accordion.html"}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/accordion/accordion-group.html",scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(a){this.heading=a}},link:function(a,b,c,d){d.addGroup(a),a.$watch("isOpen",function(b){b&&d.closeOthers(a)}),a.toggleOpen=function(){a.isDisabled||(a.isOpen=!a.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(a,b,c,d,e){d.setHeading(e(a,function(){}))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(a,b,c,d){a.$watch(function(){return d[c.accordionTransclude]},function(a){a&&(b.html(""),b.append(a))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(a,b){a.closeable="close"in b}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",templateUrl:"template/alert/alert.html",transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.bindHtml",[]).directive("bindHtmlUnsafe",function(){return function(a,b,c){b.addClass("ng-binding").data("$binding",c.bindHtmlUnsafe),a.$watch(c.bindHtmlUnsafe,function(a){b.html(a||"")})}}),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(a){this.activeClass=a.activeClass||"active",this.toggleEvent=a.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",link:function(a,b,c,d){var e=d[0],f=d[1];f.$render=function(){b.toggleClass(e.activeClass,angular.equals(f.$modelValue,a.$eval(c.btnRadio)))},b.bind(e.toggleEvent,function(){var d=b.hasClass(e.activeClass);(!d||angular.isDefined(c.uncheckable))&&a.$apply(function(){f.$setViewValue(d?null:a.$eval(c.btnRadio)),f.$render()})})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",link:function(a,b,c,d){function e(){return g(c.btnCheckboxTrue,!0)}function f(){return g(c.btnCheckboxFalse,!1)}function g(b,c){var d=a.$eval(b);return angular.isDefined(d)?d:c}var h=d[0],i=d[1];i.$render=function(){b.toggleClass(h.activeClass,angular.equals(i.$modelValue,e()))},b.bind(h.toggleEvent,function(){a.$apply(function(){i.$setViewValue(b.hasClass(h.activeClass)?f():e()),i.$render()})})}}}),angular.module("ui.bootstrap.carousel",["ui.bootstrap.transition"]).controller("CarouselController",["$scope","$timeout","$transition",function(a,b,c){function d(){e();var c=+a.interval;!isNaN(c)&&c>=0&&(g=b(f,c))}function e(){g&&(b.cancel(g),g=null)}function f(){h?(a.next(),d()):a.pause()}var g,h,i=this,j=i.slides=a.slides=[],k=-1;i.currentSlide=null;var l=!1;i.select=a.select=function(e,f){function g(){if(!l){if(i.currentSlide&&angular.isString(f)&&!a.noTransition&&e.$element){e.$element.addClass(f);{e.$element[0].offsetWidth}angular.forEach(j,function(a){angular.extend(a,{direction:"",entering:!1,leaving:!1,active:!1})}),angular.extend(e,{direction:f,active:!0,entering:!0}),angular.extend(i.currentSlide||{},{direction:f,leaving:!0}),a.$currentTransition=c(e.$element,{}),function(b,c){a.$currentTransition.then(function(){h(b,c)},function(){h(b,c)})}(e,i.currentSlide)}else h(e,i.currentSlide);i.currentSlide=e,k=m,d()}}function h(b,c){angular.extend(b,{direction:"",active:!0,leaving:!1,entering:!1}),angular.extend(c||{},{direction:"",active:!1,leaving:!1,entering:!1}),a.$currentTransition=null}var m=j.indexOf(e);void 0===f&&(f=m>k?"next":"prev"),e&&e!==i.currentSlide&&(a.$currentTransition?(a.$currentTransition.cancel(),b(g)):g())},a.$on("$destroy",function(){l=!0}),i.indexOfSlide=function(a){return j.indexOf(a)},a.next=function(){var b=(k+1)%j.length;return a.$currentTransition?void 0:i.select(j[b],"next")},a.prev=function(){var b=0>k-1?j.length-1:k-1;return a.$currentTransition?void 0:i.select(j[b],"prev")},a.isActive=function(a){return i.currentSlide===a},a.$watch("interval",d),a.$on("$destroy",e),a.play=function(){h||(h=!0,d())},a.pause=function(){a.noPause||(h=!1,e())},i.addSlide=function(b,c){b.$element=c,j.push(b),1===j.length||b.active?(i.select(j[j.length-1]),1==j.length&&a.play()):b.active=!1},i.removeSlide=function(a){var b=j.indexOf(a);j.splice(b,1),j.length>0&&a.active?i.select(b>=j.length?j[b-1]:j[b]):k>b&&k--}}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",require:"carousel",templateUrl:"template/carousel/carousel.html",scope:{interval:"=",noTransition:"=",noPause:"="}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/carousel/slide.html",scope:{active:"=?"},link:function(a,b,c,d){d.addSlide(a,b),a.$on("$destroy",function(){d.removeSlide(a)}),a.$watch("active",function(b){b&&d.select(a)})}}}),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$locale","orderByFilter",function(a,b){function c(a,b,c){return 1===b&&c>28?29===c&&(a%4===0&&a%100!==0||a%400===0):3===b||5===b||8===b||10===b?31>c:!0}this.parsers={};var d={yyyy:{regex:"\\d{4}",apply:function(a){this.year=+a}},yy:{regex:"\\d{2}",apply:function(a){this.year=+a+2e3}},y:{regex:"\\d{1,4}",apply:function(a){this.year=+a}},MMMM:{regex:a.DATETIME_FORMATS.MONTH.join("|"),apply:function(b){this.month=a.DATETIME_FORMATS.MONTH.indexOf(b)}},MMM:{regex:a.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(b){this.month=a.DATETIME_FORMATS.SHORTMONTH.indexOf(b)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(a){this.month=a-1}},M:{regex:"[1-9]|1[0-2]",apply:function(a){this.month=a-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a}},EEEE:{regex:a.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:a.DATETIME_FORMATS.SHORTDAY.join("|")}};this.createParser=function(a){var c=[],e=a.split("");return angular.forEach(d,function(b,d){var f=a.indexOf(d);if(f>-1){a=a.split(""),e[f]="("+b.regex+")",a[f]="$";for(var g=f+1,h=f+d.length;h>g;g++)e[g]="",a[g]="$";a=a.join(""),c.push({index:f,apply:b.apply})}}),{regex:new RegExp("^"+e.join("")+"$"),map:b(c,"index")}},this.parse=function(b,d){if(!angular.isString(b))return b;d=a.DATETIME_FORMATS[d]||d,this.parsers[d]||(this.parsers[d]=this.createParser(d));var e=this.parsers[d],f=e.regex,g=e.map,h=b.match(f);if(h&&h.length){for(var i,j={year:1900,month:0,date:1,hours:0},k=1,l=h.length;l>k;k++){var m=g[k-1];m.apply&&m.apply.call(j,h[k])}return c(j.year,j.month,j.date)&&(i=new Date(j.year,j.month,j.date,j.hours)),i}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(a,b){function c(a,c){return a.currentStyle?a.currentStyle[c]:b.getComputedStyle?b.getComputedStyle(a)[c]:a.style[c]}function d(a){return"static"===(c(a,"position")||"static")}var e=function(b){for(var c=a[0],e=b.offsetParent||c;e&&e!==c&&d(e);)e=e.offsetParent;return e||c};return{position:function(b){var c=this.offset(b),d={top:0,left:0},f=e(b[0]);f!=a[0]&&(d=this.offset(angular.element(f)),d.top+=f.clientTop-f.scrollTop,d.left+=f.clientLeft-f.scrollLeft);var g=b[0].getBoundingClientRect();return{width:g.width||b.prop("offsetWidth"),height:g.height||b.prop("offsetHeight"),top:c.top-d.top,left:c.left-d.left}},offset:function(c){var d=c[0].getBoundingClientRect();return{width:d.width||c.prop("offsetWidth"),height:d.height||c.prop("offsetHeight"),top:d.top+(b.pageYOffset||a[0].documentElement.scrollTop),left:d.left+(b.pageXOffset||a[0].documentElement.scrollLeft)}},positionElements:function(a,b,c,d){var e,f,g,h,i=c.split("-"),j=i[0],k=i[1]||"center";e=d?this.offset(a):this.position(a),f=b.prop("offsetWidth"),g=b.prop("offsetHeight");var l={center:function(){return e.left+e.width/2-f/2},left:function(){return e.left},right:function(){return e.left+e.width}},m={center:function(){return e.top+e.height/2-g/2},top:function(){return e.top},bottom:function(){return e.top+e.height}};switch(j){case"right":h={top:m[k](),left:l[j]()};break;case"left":h={top:m[k](),left:e.left-f};break;case"bottom":h={top:m[j](),left:l[k]()};break;default:h={top:e.top-g,left:l[k]()}}return h}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$timeout","$log","dateFilter","datepickerConfig",function(a,b,c,d,e,f,g,h){var i=this,j={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","minMode","maxMode","showWeeks","startingDay","yearRange"],function(c,e){i[c]=angular.isDefined(b[c])?8>e?d(b[c])(a.$parent):a.$parent.$eval(b[c]):h[c]}),angular.forEach(["minDate","maxDate"],function(d){b[d]?a.$parent.$watch(c(b[d]),function(a){i[d]=a?new Date(a):null,i.refreshView()}):i[d]=h[d]?new Date(h[d]):null}),a.datepickerMode=a.datepickerMode||h.datepickerMode,a.uniqueId="datepicker-"+a.$id+"-"+Math.floor(1e4*Math.random()),this.activeDate=angular.isDefined(b.initDate)?a.$parent.$eval(b.initDate):new Date,a.isActive=function(b){return 0===i.compare(b.date,i.activeDate)?(a.activeDateId=b.uid,!0):!1},this.init=function(a){j=a,j.$render=function(){i.render()}},this.render=function(){if(j.$modelValue){var a=new Date(j.$modelValue),b=!isNaN(a);b?this.activeDate=a:f.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'),j.$setValidity("date",b)}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var a=j.$modelValue?new Date(j.$modelValue):null;j.$setValidity("date-disabled",!a||this.element&&!this.isDisabled(a))}},this.createDateObject=function(a,b){var c=j.$modelValue?new Date(j.$modelValue):null;return{date:a,label:g(a,b),selected:c&&0===this.compare(a,c),disabled:this.isDisabled(a),current:0===this.compare(a,new Date)}},this.isDisabled=function(c){return this.minDate&&this.compare(c,this.minDate)<0||this.maxDate&&this.compare(c,this.maxDate)>0||b.dateDisabled&&a.dateDisabled({date:c,mode:a.datepickerMode})},this.split=function(a,b){for(var c=[];a.length>0;)c.push(a.splice(0,b));return c},a.select=function(b){if(a.datepickerMode===i.minMode){var c=j.$modelValue?new Date(j.$modelValue):new Date(0,0,0,0,0,0,0);c.setFullYear(b.getFullYear(),b.getMonth(),b.getDate()),j.$setViewValue(c),j.$render()}else i.activeDate=b,a.datepickerMode=i.modes[i.modes.indexOf(a.datepickerMode)-1]},a.move=function(a){var b=i.activeDate.getFullYear()+a*(i.step.years||0),c=i.activeDate.getMonth()+a*(i.step.months||0);i.activeDate.setFullYear(b,c,1),i.refreshView()},a.toggleMode=function(b){b=b||1,a.datepickerMode===i.maxMode&&1===b||a.datepickerMode===i.minMode&&-1===b||(a.datepickerMode=i.modes[i.modes.indexOf(a.datepickerMode)+b])},a.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var k=function(){e(function(){i.element[0].focus()},0,!1)};a.$on("datepicker.focus",k),a.keydown=function(b){var c=a.keys[b.which];if(c&&!b.shiftKey&&!b.altKey)if(b.preventDefault(),b.stopPropagation(),"enter"===c||"space"===c){if(i.isDisabled(i.activeDate))return;a.select(i.activeDate),k()}else!b.ctrlKey||"up"!==c&&"down"!==c?(i.handleKeyDown(c,b),i.refreshView()):(a.toggleMode("up"===c?1:-1),k())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/datepicker.html",scope:{datepickerMode:"=?",dateDisabled:"&"},require:["datepicker","?^ngModel"],controller:"DatepickerController",link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f)}}}).directive("daypicker",["dateFilter",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(b,c,d,e){function f(a,b){return 1!==b||a%4!==0||a%100===0&&a%400!==0?i[b]:29}function g(a,b){var c=new Array(b),d=new Date(a),e=0;for(d.setHours(12);b>e;)c[e++]=new Date(d),d.setDate(d.getDate()+1);return c}function h(a){var b=new Date(a);b.setDate(b.getDate()+4-(b.getDay()||7));var c=b.getTime();return b.setMonth(0),b.setDate(1),Math.floor(Math.round((c-b)/864e5)/7)+1}b.showWeeks=e.showWeeks,e.step={months:1},e.element=c;var i=[31,28,31,30,31,30,31,31,30,31,30,31];e._refreshView=function(){var c=e.activeDate.getFullYear(),d=e.activeDate.getMonth(),f=new Date(c,d,1),i=e.startingDay-f.getDay(),j=i>0?7-i:-i,k=new Date(f);j>0&&k.setDate(-j+1);for(var l=g(k,42),m=0;42>m;m++)l[m]=angular.extend(e.createDateObject(l[m],e.formatDay),{secondary:l[m].getMonth()!==d,uid:b.uniqueId+"-"+m});b.labels=new Array(7);for(var n=0;7>n;n++)b.labels[n]={abbr:a(l[n].date,e.formatDayHeader),full:a(l[n].date,"EEEE")};if(b.title=a(e.activeDate,e.formatDayTitle),b.rows=e.split(l,7),b.showWeeks){b.weekNumbers=[];for(var o=h(b.rows[0][0].date),p=b.rows.length;b.weekNumbers.push(o++)<p;);}},e.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth(),a.getDate())-new Date(b.getFullYear(),b.getMonth(),b.getDate())},e.handleKeyDown=function(a){var b=e.activeDate.getDate();if("left"===a)b-=1;else if("up"===a)b-=7;else if("right"===a)b+=1;else if("down"===a)b+=7;else if("pageup"===a||"pagedown"===a){var c=e.activeDate.getMonth()+("pageup"===a?-1:1);e.activeDate.setMonth(c,1),b=Math.min(f(e.activeDate.getFullYear(),e.activeDate.getMonth()),b)}else"home"===a?b=1:"end"===a&&(b=f(e.activeDate.getFullYear(),e.activeDate.getMonth()));e.activeDate.setDate(b)},e.refreshView()}}}]).directive("monthpicker",["dateFilter",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(b,c,d,e){e.step={years:1},e.element=c,e._refreshView=function(){for(var c=new Array(12),d=e.activeDate.getFullYear(),f=0;12>f;f++)c[f]=angular.extend(e.createDateObject(new Date(d,f,1),e.formatMonth),{uid:b.uniqueId+"-"+f});b.title=a(e.activeDate,e.formatMonthTitle),b.rows=e.split(c,3)},e.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth())-new Date(b.getFullYear(),b.getMonth())},e.handleKeyDown=function(a){var b=e.activeDate.getMonth();if("left"===a)b-=1;else if("up"===a)b-=3;else if("right"===a)b+=1;else if("down"===a)b+=3;else if("pageup"===a||"pagedown"===a){var c=e.activeDate.getFullYear()+("pageup"===a?-1:1);e.activeDate.setFullYear(c)}else"home"===a?b=0:"end"===a&&(b=11);e.activeDate.setMonth(b)},e.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(a,b,c,d){function e(a){return parseInt((a-1)/f,10)*f+1}var f=d.yearRange;d.step={years:f},d.element=b,d._refreshView=function(){for(var b=new Array(f),c=0,g=e(d.activeDate.getFullYear());f>c;c++)b[c]=angular.extend(d.createDateObject(new Date(g+c,0,1),d.formatYear),{uid:a.uniqueId+"-"+c});a.title=[b[0].label,b[f-1].label].join(" - "),a.rows=d.split(b,5)},d.compare=function(a,b){return a.getFullYear()-b.getFullYear()},d.handleKeyDown=function(a){var b=d.activeDate.getFullYear();"left"===a?b-=1:"up"===a?b-=5:"right"===a?b+=1:"down"===a?b+=5:"pageup"===a||"pagedown"===a?b+=("pageup"===a?-1:1)*d.step.years:"home"===a?b=e(d.activeDate.getFullYear()):"end"===a&&(b=e(d.activeDate.getFullYear())+f-1),d.activeDate.setFullYear(b)},d.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0}).directive("datepickerPopup",["$compile","$parse","$document","$position","dateFilter","dateParser","datepickerPopupConfig",function(a,b,c,d,e,f,g){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&"},link:function(h,i,j,k){function l(a){return a.replace(/([A-Z])/g,function(a){return"-"+a.toLowerCase()})}function m(a){if(a){if(angular.isDate(a)&&!isNaN(a))return k.$setValidity("date",!0),a;if(angular.isString(a)){var b=f.parse(a,n)||new Date(a);return isNaN(b)?void k.$setValidity("date",!1):(k.$setValidity("date",!0),b)}return void k.$setValidity("date",!1)}return k.$setValidity("date",!0),null}var n,o=angular.isDefined(j.closeOnDateSelection)?h.$parent.$eval(j.closeOnDateSelection):g.closeOnDateSelection,p=angular.isDefined(j.datepickerAppendToBody)?h.$parent.$eval(j.datepickerAppendToBody):g.appendToBody;h.showButtonBar=angular.isDefined(j.showButtonBar)?h.$parent.$eval(j.showButtonBar):g.showButtonBar,h.getText=function(a){return h[a+"Text"]||g[a+"Text"]},j.$observe("datepickerPopup",function(a){n=a||g.datepickerPopup,k.$render()});var q=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");q.attr({"ng-model":"date","ng-change":"dateSelection()"});var r=angular.element(q.children()[0]);j.datepickerOptions&&angular.forEach(h.$parent.$eval(j.datepickerOptions),function(a,b){r.attr(l(b),a)}),angular.forEach(["minDate","maxDate"],function(a){j[a]&&(h.$parent.$watch(b(j[a]),function(b){h[a]=b}),r.attr(l(a),a))}),j.dateDisabled&&r.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),k.$parsers.unshift(m),h.dateSelection=function(a){angular.isDefined(a)&&(h.date=a),k.$setViewValue(h.date),k.$render(),o&&(h.isOpen=!1,i[0].focus())},i.bind("input change keyup",function(){h.$apply(function(){h.date=k.$modelValue})}),k.$render=function(){var a=k.$viewValue?e(k.$viewValue,n):"";i.val(a),h.date=m(k.$modelValue)};var s=function(a){h.isOpen&&a.target!==i[0]&&h.$apply(function(){h.isOpen=!1})},t=function(a){h.keydown(a)};i.bind("keydown",t),h.keydown=function(a){27===a.which?(a.preventDefault(),a.stopPropagation(),h.close()):40!==a.which||h.isOpen||(h.isOpen=!0)},h.$watch("isOpen",function(a){a?(h.$broadcast("datepicker.focus"),h.position=p?d.offset(i):d.position(i),h.position.top=h.position.top+i.prop("offsetHeight"),c.bind("click",s)):c.unbind("click",s)}),h.select=function(a){if("today"===a){var b=new Date;angular.isDate(k.$modelValue)?(a=new Date(k.$modelValue),a.setFullYear(b.getFullYear(),b.getMonth(),b.getDate())):a=new Date(b.setHours(0,0,0,0))}h.dateSelection(a)},h.close=function(){h.isOpen=!1,i[0].focus()};var u=a(q)(h);p?c.find("body").append(u):i.after(u),h.$on("$destroy",function(){u.remove(),i.unbind("keydown",t),c.unbind("click",s)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:"template/datepicker/popup.html",link:function(a,b){b.bind("click",function(a){a.preventDefault(),a.stopPropagation()})}}}),angular.module("ui.bootstrap.dropdown",[]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document",function(a){var b=null;this.open=function(e){b||(a.bind("click",c),a.bind("keydown",d)),b&&b!==e&&(b.isOpen=!1),b=e},this.close=function(e){b===e&&(b=null,a.unbind("click",c),a.unbind("keydown",d))};var c=function(a){a&&a.isDefaultPrevented()||b.$apply(function(){b.isOpen=!1})},d=function(a){27===a.which&&(b.focusToggleElement(),c())}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate",function(a,b,c,d,e,f){var g,h=this,i=a.$new(),j=d.openClass,k=angular.noop,l=b.onToggle?c(b.onToggle):angular.noop;this.init=function(d){h.$element=d,b.isOpen&&(g=c(b.isOpen),k=g.assign,a.$watch(g,function(a){i.isOpen=!!a}))},this.toggle=function(a){return i.isOpen=arguments.length?!!a:!i.isOpen},this.isOpen=function(){return i.isOpen},i.focusToggleElement=function(){h.toggleElement&&h.toggleElement[0].focus()},i.$watch("isOpen",function(b,c){f[b?"addClass":"removeClass"](h.$element,j),b?(i.focusToggleElement(),e.open(i)):e.close(i),k(a,b),angular.isDefined(b)&&b!==c&&l(a,{open:!!b})}),a.$on("$locationChangeSuccess",function(){i.isOpen=!1}),a.$on("$destroy",function(){i.$destroy()})}]).directive("dropdown",function(){return{restrict:"CA",controller:"DropdownController",link:function(a,b,c,d){d.init(b)}}}).directive("dropdownToggle",function(){return{restrict:"CA",require:"?^dropdown",link:function(a,b,c,d){if(d){d.toggleElement=b;var e=function(e){e.preventDefault(),b.hasClass("disabled")||c.disabled||a.$apply(function(){d.toggle()})};b.bind("click",e),b.attr({"aria-haspopup":!0,"aria-expanded":!1}),a.$watch(d.isOpen,function(a){b.attr("aria-expanded",!!a)}),a.$on("$destroy",function(){b.unbind("click",e)})}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.transition"]).factory("$$stackedMap",function(){return{createNew:function(){var a=[];return{add:function(b,c){a.push({key:b,value:c})},get:function(b){for(var c=0;c<a.length;c++)if(b==a[c].key)return a[c]},keys:function(){for(var b=[],c=0;c<a.length;c++)b.push(a[c].key);return b},top:function(){return a[a.length-1]},remove:function(b){for(var c=-1,d=0;d<a.length;d++)if(b==a[d].key){c=d;break}return a.splice(c,1)[0]},removeTop:function(){return a.splice(a.length-1,1)[0]},length:function(){return a.length}}}}}).directive("modalBackdrop",["$timeout",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",link:function(b){b.animate=!1,a(function(){b.animate=!0})}}}]).directive("modalWindow",["$modalStack","$timeout",function(a,b){return{restrict:"EA",scope:{index:"@",animate:"="},replace:!0,transclude:!0,templateUrl:function(a,b){return b.templateUrl||"template/modal/window.html"},link:function(c,d,e){d.addClass(e.windowClass||""),c.size=e.size,b(function(){c.animate=!0,d[0].focus()}),c.close=function(b){var c=a.getTop();c&&c.value.backdrop&&"static"!=c.value.backdrop&&b.target===b.currentTarget&&(b.preventDefault(),b.stopPropagation(),a.dismiss(c.key,"backdrop click"))}}}}]).factory("$modalStack",["$transition","$timeout","$document","$compile","$rootScope","$$stackedMap",function(a,b,c,d,e,f){function g(){for(var a=-1,b=n.keys(),c=0;c<b.length;c++)n.get(b[c]).value.backdrop&&(a=c);return a}function h(a){var b=c.find("body").eq(0),d=n.get(a).value;n.remove(a),j(d.modalDomEl,d.modalScope,300,function(){d.modalScope.$destroy(),b.toggleClass(m,n.length()>0),i()})}function i(){if(k&&-1==g()){var a=l;j(k,l,150,function(){a.$destroy(),a=null}),k=void 0,l=void 0}}function j(c,d,e,f){function g(){g.done||(g.done=!0,c.remove(),f&&f())}d.animate=!1;var h=a.transitionEndEventName;if(h){var i=b(g,e);c.bind(h,function(){b.cancel(i),g(),d.$apply()})}else b(g,0)}var k,l,m="modal-open",n=f.createNew(),o={};return e.$watch(g,function(a){l&&(l.index=a)}),c.bind("keydown",function(a){var b;27===a.which&&(b=n.top(),b&&b.value.keyboard&&(a.preventDefault(),e.$apply(function(){o.dismiss(b.key,"escape key press")})))}),o.open=function(a,b){n.add(a,{deferred:b.deferred,modalScope:b.scope,backdrop:b.backdrop,keyboard:b.keyboard});var f=c.find("body").eq(0),h=g();h>=0&&!k&&(l=e.$new(!0),l.index=h,k=d("<div modal-backdrop></div>")(l),f.append(k));var i=angular.element("<div modal-window></div>");i.attr({"template-url":b.windowTemplateUrl,"window-class":b.windowClass,size:b.size,index:n.length()-1,animate:"animate"}).html(b.content);var j=d(i)(b.scope);n.top().value.modalDomEl=j,f.append(j),f.addClass(m)},o.close=function(a,b){var c=n.get(a).value;c&&(c.deferred.resolve(b),h(a))},o.dismiss=function(a,b){var c=n.get(a).value;c&&(c.deferred.reject(b),h(a))},o.dismissAll=function(a){for(var b=this.getTop();b;)this.dismiss(b.key,a),b=this.getTop()},o.getTop=function(){return n.top()},o}]).provider("$modal",function(){var a={options:{backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$http","$templateCache","$controller","$modalStack",function(b,c,d,e,f,g,h){function i(a){return a.template?d.when(a.template):e.get(a.templateUrl,{cache:f}).then(function(a){return a.data})}function j(a){var c=[];return angular.forEach(a,function(a){(angular.isFunction(a)||angular.isArray(a))&&c.push(d.when(b.invoke(a)))}),c}var k={};return k.open=function(b){var e=d.defer(),f=d.defer(),k={result:e.promise,opened:f.promise,close:function(a){h.close(k,a)},dismiss:function(a){h.dismiss(k,a)}};if(b=angular.extend({},a.options,b),b.resolve=b.resolve||{},!b.template&&!b.templateUrl)throw new Error("One of template or templateUrl options is required.");var l=d.all([i(b)].concat(j(b.resolve)));return l.then(function(a){var d=(b.scope||c).$new();d.$close=k.close,d.$dismiss=k.dismiss;var f,i={},j=1;b.controller&&(i.$scope=d,i.$modalInstance=k,angular.forEach(b.resolve,function(b,c){i[c]=a[j++]}),f=g(b.controller,i)),h.open(k,{scope:d,deferred:e,content:a[0],backdrop:b.backdrop,keyboard:b.keyboard,windowClass:b.windowClass,windowTemplateUrl:b.windowTemplateUrl,size:b.size})},function(a){e.reject(a)}),l.then(function(){f.resolve(!0)},function(){f.reject(!1)}),k},k}]};return a}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(a,b,c){var d=this,e={$setViewValue:angular.noop},f=b.numPages?c(b.numPages).assign:angular.noop;this.init=function(f,g){e=f,this.config=g,e.$render=function(){d.render()},b.itemsPerPage?a.$parent.$watch(c(b.itemsPerPage),function(b){d.itemsPerPage=parseInt(b,10),a.totalPages=d.calculateTotalPages()}):this.itemsPerPage=g.itemsPerPage},this.calculateTotalPages=function(){var b=this.itemsPerPage<1?1:Math.ceil(a.totalItems/this.itemsPerPage);return Math.max(b||0,1)},this.render=function(){a.page=parseInt(e.$viewValue,10)||1},a.selectPage=function(b){a.page!==b&&b>0&&b<=a.totalPages&&(e.$setViewValue(b),e.$render())},a.getText=function(b){return a[b+"Text"]||d.config[b+"Text"]},a.noPrevious=function(){return 1===a.page},a.noNext=function(){return a.page===a.totalPages},a.$watch("totalItems",function(){a.totalPages=d.calculateTotalPages()}),a.$watch("totalPages",function(b){f(a.$parent,b),a.page>b?a.selectPage(b):e.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(a,b){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(c,d,e,f){function g(a,b,c){return{number:a,text:b,active:c}}function h(a,b){var c=[],d=1,e=b,f=angular.isDefined(k)&&b>k;f&&(l?(d=Math.max(a-Math.floor(k/2),1),e=d+k-1,e>b&&(e=b,d=e-k+1)):(d=(Math.ceil(a/k)-1)*k+1,e=Math.min(d+k-1,b)));for(var h=d;e>=h;h++){var i=g(h,h,h===a);c.push(i)}if(f&&!l){if(d>1){var j=g(d-1,"...",!1);c.unshift(j)}if(b>e){var m=g(e+1,"...",!1);c.push(m)}}return c}var i=f[0],j=f[1];if(j){var k=angular.isDefined(e.maxSize)?c.$parent.$eval(e.maxSize):b.maxSize,l=angular.isDefined(e.rotate)?c.$parent.$eval(e.rotate):b.rotate;c.boundaryLinks=angular.isDefined(e.boundaryLinks)?c.$parent.$eval(e.boundaryLinks):b.boundaryLinks,c.directionLinks=angular.isDefined(e.directionLinks)?c.$parent.$eval(e.directionLinks):b.directionLinks,i.init(j,b),e.maxSize&&c.$parent.$watch(a(e.maxSize),function(a){k=parseInt(a,10),i.render()});var m=i.render;i.render=function(){m(),c.page>0&&c.page<=c.totalPages&&(c.pages=h(c.page,c.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(a){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(b,c,d,e){var f=e[0],g=e[1];g&&(b.align=angular.isDefined(d.align)?b.$parent.$eval(d.align):a.align,f.init(g,a))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function a(a){var b=/[A-Z]/g,c="-";
return a.replace(b,function(a,b){return(b?c:"")+a.toLowerCase()})}var b={placement:"top",animation:!0,popupDelay:0},c={mouseenter:"mouseleave",click:"click",focus:"blur"},d={};this.options=function(a){angular.extend(d,a)},this.setTriggers=function(a){angular.extend(c,a)},this.$get=["$window","$compile","$timeout","$parse","$document","$position","$interpolate",function(e,f,g,h,i,j,k){return function(e,l,m){function n(a){var b=a||o.trigger||m,d=c[b]||b;return{show:b,hide:d}}var o=angular.extend({},b,d),p=a(e),q=k.startSymbol(),r=k.endSymbol(),s="<div "+p+'-popup title="'+q+"tt_title"+r+'" content="'+q+"tt_content"+r+'" placement="'+q+"tt_placement"+r+'" animation="tt_animation" is-open="tt_isOpen"></div>';return{restrict:"EA",scope:!0,compile:function(){var a=f(s);return function(b,c,d){function f(){b.tt_isOpen?m():k()}function k(){(!y||b.$eval(d[l+"Enable"]))&&(b.tt_popupDelay?v||(v=g(p,b.tt_popupDelay,!1),v.then(function(a){a()})):p()())}function m(){b.$apply(function(){q()})}function p(){return v=null,u&&(g.cancel(u),u=null),b.tt_content?(r(),t.css({top:0,left:0,display:"block"}),w?i.find("body").append(t):c.after(t),z(),b.tt_isOpen=!0,b.$digest(),z):angular.noop}function q(){b.tt_isOpen=!1,g.cancel(v),v=null,b.tt_animation?u||(u=g(s,500)):s()}function r(){t&&s(),t=a(b,function(){}),b.$digest()}function s(){u=null,t&&(t.remove(),t=null)}var t,u,v,w=angular.isDefined(o.appendToBody)?o.appendToBody:!1,x=n(void 0),y=angular.isDefined(d[l+"Enable"]),z=function(){var a=j.positionElements(c,t,b.tt_placement,w);a.top+="px",a.left+="px",t.css(a)};b.tt_isOpen=!1,d.$observe(e,function(a){b.tt_content=a,!a&&b.tt_isOpen&&q()}),d.$observe(l+"Title",function(a){b.tt_title=a}),d.$observe(l+"Placement",function(a){b.tt_placement=angular.isDefined(a)?a:o.placement}),d.$observe(l+"PopupDelay",function(a){var c=parseInt(a,10);b.tt_popupDelay=isNaN(c)?o.popupDelay:c});var A=function(){c.unbind(x.show,k),c.unbind(x.hide,m)};d.$observe(l+"Trigger",function(a){A(),x=n(a),x.show===x.hide?c.bind(x.show,f):(c.bind(x.show,k),c.bind(x.hide,m))});var B=b.$eval(d[l+"Animation"]);b.tt_animation=angular.isDefined(B)?!!B:o.animation,d.$observe(l+"AppendToBody",function(a){w=angular.isDefined(a)?h(a)(b):w}),w&&b.$on("$locationChangeSuccess",function(){b.tt_isOpen&&q()}),b.$on("$destroy",function(){g.cancel(u),g.cancel(v),A(),s()})}}}}}]}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(a){return a("tooltip","tooltip","mouseenter")}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).directive("tooltipHtmlUnsafe",["$tooltip",function(a){return a("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(a){return a("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(a,b,c){var d=this,e=angular.isDefined(b.animate)?a.$parent.$eval(b.animate):c.animate;this.bars=[],a.max=angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max,this.addBar=function(b,c){e||c.css({transition:"none"}),this.bars.push(b),b.$watch("value",function(c){b.percent=+(100*c/a.max).toFixed(2)}),b.$on("$destroy",function(){c=null,d.removeBar(b)})},this.removeBar=function(a){this.bars.splice(this.bars.indexOf(a),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(a,b,c,d){d.addBar(a,b)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(a,b,c,d){d.addBar(a,angular.element(b.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null}).controller("RatingController",["$scope","$attrs","ratingConfig",function(a,b,c){var d={$setViewValue:angular.noop};this.init=function(e){d=e,d.$render=this.render,this.stateOn=angular.isDefined(b.stateOn)?a.$parent.$eval(b.stateOn):c.stateOn,this.stateOff=angular.isDefined(b.stateOff)?a.$parent.$eval(b.stateOff):c.stateOff;var f=angular.isDefined(b.ratingStates)?a.$parent.$eval(b.ratingStates):new Array(angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max);a.range=this.buildTemplateObjects(f)},this.buildTemplateObjects=function(a){for(var b=0,c=a.length;c>b;b++)a[b]=angular.extend({index:b},{stateOn:this.stateOn,stateOff:this.stateOff},a[b]);return a},a.rate=function(b){!a.readonly&&b>=0&&b<=a.range.length&&(d.$setViewValue(b),d.$render())},a.enter=function(b){a.readonly||(a.value=b),a.onHover({value:b})},a.reset=function(){a.value=d.$viewValue,a.onLeave()},a.onKeydown=function(b){/(37|38|39|40)/.test(b.which)&&(b.preventDefault(),b.stopPropagation(),a.rate(a.value+(38===b.which||39===b.which?1:-1)))},this.render=function(){a.value=d.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(a){var b=this,c=b.tabs=a.tabs=[];b.select=function(a){angular.forEach(c,function(b){b.active&&b!==a&&(b.active=!1,b.onDeselect())}),a.active=!0,a.onSelect()},b.addTab=function(a){c.push(a),1===c.length?a.active=!0:a.active&&b.select(a)},b.removeTab=function(a){var d=c.indexOf(a);if(a.active&&c.length>1){var e=d==c.length-1?d-1:d+1;b.select(c[e])}c.splice(d,1)}}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(a,b,c){a.vertical=angular.isDefined(c.vertical)?a.$parent.$eval(c.vertical):!1,a.justified=angular.isDefined(c.justified)?a.$parent.$eval(c.justified):!1}}}).directive("tab",["$parse",function(a){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},compile:function(b,c,d){return function(b,c,e,f){b.$watch("active",function(a){a&&f.select(b)}),b.disabled=!1,e.disabled&&b.$parent.$watch(a(e.disabled),function(a){b.disabled=!!a}),b.select=function(){b.disabled||(b.active=!0)},f.addTab(b),b.$on("$destroy",function(){f.removeTab(b)}),b.$transcludeFn=d}}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(a,b){a.$watch("headingElement",function(a){a&&(b.html(""),b.append(a))})}}}]).directive("tabContentTransclude",function(){function a(a){return a.tagName&&(a.hasAttribute("tab-heading")||a.hasAttribute("data-tab-heading")||"tab-heading"===a.tagName.toLowerCase()||"data-tab-heading"===a.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(b,c,d){var e=b.$eval(d.tabContentTransclude);e.$transcludeFn(e.$parent,function(b){angular.forEach(b,function(b){a(b)?e.headingElement=b:c.append(b)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(a,b,c,d,e,f){function g(){var b=parseInt(a.hours,10),c=a.showMeridian?b>0&&13>b:b>=0&&24>b;return c?(a.showMeridian&&(12===b&&(b=0),a.meridian===p[1]&&(b+=12)),b):void 0}function h(){var b=parseInt(a.minutes,10);return b>=0&&60>b?b:void 0}function i(a){return angular.isDefined(a)&&a.toString().length<2?"0"+a:a}function j(a){k(),o.$setViewValue(new Date(n)),l(a)}function k(){o.$setValidity("time",!0),a.invalidHours=!1,a.invalidMinutes=!1}function l(b){var c=n.getHours(),d=n.getMinutes();a.showMeridian&&(c=0===c||12===c?12:c%12),a.hours="h"===b?c:i(c),a.minutes="m"===b?d:i(d),a.meridian=n.getHours()<12?p[0]:p[1]}function m(a){var b=new Date(n.getTime()+6e4*a);n.setHours(b.getHours(),b.getMinutes()),j()}var n=new Date,o={$setViewValue:angular.noop},p=angular.isDefined(b.meridians)?a.$parent.$eval(b.meridians):f.meridians||e.DATETIME_FORMATS.AMPMS;this.init=function(c,d){o=c,o.$render=this.render;var e=d.eq(0),g=d.eq(1),h=angular.isDefined(b.mousewheel)?a.$parent.$eval(b.mousewheel):f.mousewheel;h&&this.setupMousewheelEvents(e,g),a.readonlyInput=angular.isDefined(b.readonlyInput)?a.$parent.$eval(b.readonlyInput):f.readonlyInput,this.setupInputEvents(e,g)};var q=f.hourStep;b.hourStep&&a.$parent.$watch(c(b.hourStep),function(a){q=parseInt(a,10)});var r=f.minuteStep;b.minuteStep&&a.$parent.$watch(c(b.minuteStep),function(a){r=parseInt(a,10)}),a.showMeridian=f.showMeridian,b.showMeridian&&a.$parent.$watch(c(b.showMeridian),function(b){if(a.showMeridian=!!b,o.$error.time){var c=g(),d=h();angular.isDefined(c)&&angular.isDefined(d)&&(n.setHours(c),j())}else l()}),this.setupMousewheelEvents=function(b,c){var d=function(a){a.originalEvent&&(a=a.originalEvent);var b=a.wheelDelta?a.wheelDelta:-a.deltaY;return a.detail||b>0};b.bind("mousewheel wheel",function(b){a.$apply(d(b)?a.incrementHours():a.decrementHours()),b.preventDefault()}),c.bind("mousewheel wheel",function(b){a.$apply(d(b)?a.incrementMinutes():a.decrementMinutes()),b.preventDefault()})},this.setupInputEvents=function(b,c){if(a.readonlyInput)return a.updateHours=angular.noop,void(a.updateMinutes=angular.noop);var d=function(b,c){o.$setViewValue(null),o.$setValidity("time",!1),angular.isDefined(b)&&(a.invalidHours=b),angular.isDefined(c)&&(a.invalidMinutes=c)};a.updateHours=function(){var a=g();angular.isDefined(a)?(n.setHours(a),j("h")):d(!0)},b.bind("blur",function(){!a.invalidHours&&a.hours<10&&a.$apply(function(){a.hours=i(a.hours)})}),a.updateMinutes=function(){var a=h();angular.isDefined(a)?(n.setMinutes(a),j("m")):d(void 0,!0)},c.bind("blur",function(){!a.invalidMinutes&&a.minutes<10&&a.$apply(function(){a.minutes=i(a.minutes)})})},this.render=function(){var a=o.$modelValue?new Date(o.$modelValue):null;isNaN(a)?(o.$setValidity("time",!1),d.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(a&&(n=a),k(),l())},a.incrementHours=function(){m(60*q)},a.decrementHours=function(){m(60*-q)},a.incrementMinutes=function(){m(r)},a.decrementMinutes=function(){m(-r)},a.toggleMeridian=function(){m(720*(n.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f,b.find("input"))}}}),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(a){var b=/^\s*(.*?)(?:\s+as\s+(.*?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+(.*)$/;return{parse:function(c){var d=c.match(b);if(!d)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+c+'".');return{itemName:d[3],source:a(d[4]),viewMapper:a(d[2]||d[1]),modelMapper:a(d[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$position","typeaheadParser",function(a,b,c,d,e,f,g){var h=[9,13,27,38,40];return{require:"ngModel",link:function(i,j,k,l){var m,n=i.$eval(k.typeaheadMinLength)||1,o=i.$eval(k.typeaheadWaitMs)||0,p=i.$eval(k.typeaheadEditable)!==!1,q=b(k.typeaheadLoading).assign||angular.noop,r=b(k.typeaheadOnSelect),s=k.typeaheadInputFormatter?b(k.typeaheadInputFormatter):void 0,t=k.typeaheadAppendToBody?i.$eval(k.typeaheadAppendToBody):!1,u=b(k.ngModel).assign,v=g.parse(k.typeahead),w=i.$new();i.$on("$destroy",function(){w.$destroy()});var x="typeahead-"+w.$id+"-"+Math.floor(1e4*Math.random());j.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":x});var y=angular.element("<div typeahead-popup></div>");y.attr({id:x,matches:"matches",active:"activeIdx",select:"select(activeIdx)",query:"query",position:"position"}),angular.isDefined(k.typeaheadTemplateUrl)&&y.attr("template-url",k.typeaheadTemplateUrl);var z=function(){w.matches=[],w.activeIdx=-1,j.attr("aria-expanded",!1)},A=function(a){return x+"-option-"+a};w.$watch("activeIdx",function(a){0>a?j.removeAttr("aria-activedescendant"):j.attr("aria-activedescendant",A(a))});var B=function(a){var b={$viewValue:a};q(i,!0),c.when(v.source(i,b)).then(function(c){var d=a===l.$viewValue;if(d&&m)if(c.length>0){w.activeIdx=0,w.matches.length=0;for(var e=0;e<c.length;e++)b[v.itemName]=c[e],w.matches.push({id:A(e),label:v.viewMapper(w,b),model:c[e]});w.query=a,w.position=t?f.offset(j):f.position(j),w.position.top=w.position.top+j.prop("offsetHeight"),j.attr("aria-expanded",!0)}else z();d&&q(i,!1)},function(){z(),q(i,!1)})};z(),w.query=void 0;var C;l.$parsers.unshift(function(a){return m=!0,a&&a.length>=n?o>0?(C&&d.cancel(C),C=d(function(){B(a)},o)):B(a):(q(i,!1),z()),p?a:a?void l.$setValidity("editable",!1):(l.$setValidity("editable",!0),a)}),l.$formatters.push(function(a){var b,c,d={};return s?(d.$model=a,s(i,d)):(d[v.itemName]=a,b=v.viewMapper(i,d),d[v.itemName]=void 0,c=v.viewMapper(i,d),b!==c?b:a)}),w.select=function(a){var b,c,e={};e[v.itemName]=c=w.matches[a].model,b=v.modelMapper(i,e),u(i,b),l.$setValidity("editable",!0),r(i,{$item:c,$model:b,$label:v.viewMapper(i,e)}),z(),d(function(){j[0].focus()},0,!1)},j.bind("keydown",function(a){0!==w.matches.length&&-1!==h.indexOf(a.which)&&(a.preventDefault(),40===a.which?(w.activeIdx=(w.activeIdx+1)%w.matches.length,w.$digest()):38===a.which?(w.activeIdx=(w.activeIdx?w.activeIdx:w.matches.length)-1,w.$digest()):13===a.which||9===a.which?w.$apply(function(){w.select(w.activeIdx)}):27===a.which&&(a.stopPropagation(),z(),w.$digest()))}),j.bind("blur",function(){m=!1});var D=function(a){j[0]!==a.target&&(z(),w.$digest())};e.bind("click",D),i.$on("$destroy",function(){e.unbind("click",D)});var E=a(y)(w);t?e.find("body").append(E):j.after(E)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(a,b,c){a.templateUrl=c.templateUrl,a.isOpen=function(){return a.matches.length>0},a.isActive=function(b){return a.active==b},a.selectActive=function(b){a.active=b},a.selectMatch=function(b){a.select({activeIdx:b})}}}}).directive("typeaheadMatch",["$http","$templateCache","$compile","$parse",function(a,b,c,d){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(e,f,g){var h=d(g.templateUrl)(e.$parent)||"template/typeahead/typeahead-match.html";a.get(h,{cache:b}).success(function(a){f.replaceWith(c(a.trim())(e))})}}}]).filter("typeaheadHighlight",function(){function a(a){return a.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(b,c){return c?(""+b).replace(new RegExp(a(c),"gi"),"<strong>$&</strong>"):b}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(a){a.put("template/accordion/accordion-group.html",'<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(a){a.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(a){a.put("template/alert/alert.html",'<div class="alert" ng-class="{\'alert-{{type || \'warning\'}}\': true, \'alert-dismissable\': closeable}" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(a){a.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(a){a.put("template/carousel/slide.html","<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n")}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(a){a.put("template/modal/backdrop.html",'<div class="modal-backdrop fade"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(a){a.put("template/modal/window.html",'<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="{\'modal-sm\': size == \'sm\', \'modal-lg\': size == \'lg\'}"><div class="modal-content" ng-transclude></div></div>\n</div>')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(a){a.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(a){a.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(a){a.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(a){a.put("template/tooltip/tooltip-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(a){a.put("template/popover/popover.html",'<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(a){a.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset-titles.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tabset-titles.html","<ul class=\"nav {{type && 'nav-' + type}}\" ng-class=\"{'nav-stacked': vertical}\">\n</ul>\n")}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tabset.html",'\n<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(a){a.put("template/timepicker/timepicker.html",'<table>\n	<tbody>\n		<tr class="text-center">\n			<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n		<tr>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n				<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td>:</td>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n				<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n		</tr>\n		<tr class="text-center">\n			<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n	</tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(a){a.put("template/typeahead/typeahead-match.html",'<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(a){a.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-if="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>')
}]);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-bootstrap\\ui-bootstrap.shim.js":[function(require,module,exports){
module.exports = require('./ui-bootstrap-custom-tpls-0.10.0.min.js');
},{"./ui-bootstrap-custom-tpls-0.10.0.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-bootstrap\\ui-bootstrap-custom-tpls-0.10.0.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular-ui-router\\release\\angular-ui-router.js":[function(require,module,exports){
/**
 * State-based routing for AngularJS
 * @version v0.2.10
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
  module.exports = 'ui.router';
}

(function (window, angular, undefined) {
/*jshint globalstrict:true*/
/*global angular:false*/
'use strict';

var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy;

function inherit(parent, extra) {
  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
}

function merge(dst) {
  forEach(arguments, function(obj) {
    if (obj !== dst) {
      forEach(obj, function(value, key) {
        if (!dst.hasOwnProperty(key)) dst[key] = value;
      });
    }
  });
  return dst;
}

/**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
function ancestors(first, second) {
  var path = [];

  for (var n in first.path) {
    if (first.path[n] !== second.path[n]) break;
    path.push(first.path[n]);
  }
  return path;
}

/**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
function keys(object) {
  if (Object.keys) {
    return Object.keys(object);
  }
  var result = [];

  angular.forEach(object, function(val, key) {
    result.push(key);
  });
  return result;
}

/**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
function arraySearch(array, value) {
  if (Array.prototype.indexOf) {
    return array.indexOf(value, Number(arguments[2]) || 0);
  }
  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

  if (from < 0) from += len;

  for (; from < len; from++) {
    if (from in array && array[from] === value) return from;
  }
  return -1;
}

/**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
function inheritParams(currentParams, newParams, $current, $to) {
  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

  for (var i in parents) {
    if (!parents[i].params || !parents[i].params.length) continue;
    parentParams = parents[i].params;

    for (var j in parentParams) {
      if (arraySearch(inheritList, parentParams[j]) >= 0) continue;
      inheritList.push(parentParams[j]);
      inherited[parentParams[j]] = currentParams[parentParams[j]];
    }
  }
  return extend({}, inherited, newParams);
}

/**
 * Normalizes a set of values to string or `null`, filtering them by a list of keys.
 *
 * @param {Array} keys The list of keys to normalize/return.
 * @param {Object} values An object hash of values to normalize.
 * @return {Object} Returns an object hash of normalized string values.
 */
function normalize(keys, values) {
  var normalized = {};

  forEach(keys, function (name) {
    var value = values[name];
    normalized[name] = (value != null) ? String(value) : null;
  });
  return normalized;
}

/**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
function equalForKeys(a, b, keys) {
  if (!keys) {
    keys = [];
    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
  }

  for (var i=0; i<keys.length; i++) {
    var k = keys[i];
    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
  }
  return true;
}

/**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
function filterByKeys(keys, values) {
  var filtered = {};

  forEach(keys, function (name) {
    filtered[name] = values[name];
  });
  return filtered;
}
/**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
angular.module('ui.router.util', ['ng']);

/**
 * @ngdoc overview
 * @name ui.router.router
 * 
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
angular.module('ui.router.router', ['ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router.state
 * 
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 * 
 */
angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 * 
 * ## The main module for ui.router 
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes. 
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router - 
 * 
 * *You'll need to include **only** this module as the dependency within your angular app.*
 * 
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
angular.module('ui.router', ['ui.router.state']);

angular.module('ui.router.compat', ['ui.router']);

/**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
$Resolve.$inject = ['$q', '$injector'];
function $Resolve(  $q,    $injector) {
  
  var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
  

  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study` 
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
  this.study = function (invocables) {
    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
    
    // Perform a topological sort of invocables to build an ordered plan
    var plan = [], cycle = [], visited = {};
    function visit(value, key) {
      if (visited[key] === VISIT_DONE) return;
      
      cycle.push(key);
      if (visited[key] === VISIT_IN_PROGRESS) {
        cycle.splice(0, cycle.indexOf(key));
        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
      }
      visited[key] = VISIT_IN_PROGRESS;
      
      if (isString(value)) {
        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
      } else {
        var params = $injector.annotate(value);
        forEach(params, function (param) {
          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
        });
        plan.push(key, value, params);
      }
      
      cycle.pop();
      visited[key] = VISIT_DONE;
    }
    forEach(invocables, visit);
    invocables = cycle = visited = null; // plan is all that's required
    
    function isResolve(value) {
      return isObject(value) && value.then && value.$$promises;
    }
    
    return function (locals, parent, self) {
      if (isResolve(locals) && self === undefined) {
        self = parent; parent = locals; locals = null;
      }
      if (!locals) locals = NO_LOCALS;
      else if (!isObject(locals)) {
        throw new Error("'locals' must be an object");
      }       
      if (!parent) parent = NO_PARENT;
      else if (!isResolve(parent)) {
        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
      }
      
      // To complete the overall resolution, we have to wait for the parent
      // promise and for the promise for each invokable in our plan.
      var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;
          
      function done() {
        // Merge parent values we haven't got yet and publish our own $$values
        if (!--wait) {
          if (!merged) merge(values, parent.$$values); 
          result.$$values = values;
          result.$$promises = true; // keep for isResolve()
          resolution.resolve(values);
        }
      }
      
      function fail(reason) {
        result.$$failure = reason;
        resolution.reject(reason);
      }
      
      // Short-circuit if parent has already failed
      if (isDefined(parent.$$failure)) {
        fail(parent.$$failure);
        return result;
      }
      
      // Merge parent values if the parent has already resolved, or merge
      // parent promises and wait if the parent resolve is still in progress.
      if (parent.$$values) {
        merged = merge(values, parent.$$values);
        done();
      } else {
        extend(promises, parent.$$promises);
        parent.then(done, fail);
      }
      
      // Process each invocable in the plan, but ignore any where a local of the same name exists.
      for (var i=0, ii=plan.length; i<ii; i+=3) {
        if (locals.hasOwnProperty(plan[i])) done();
        else invoke(plan[i], plan[i+1], plan[i+2]);
      }
      
      function invoke(key, invocable, params) {
        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
        var invocation = $q.defer(), waitParams = 0;
        function onfailure(reason) {
          invocation.reject(reason);
          fail(reason);
        }
        // Wait for any parameter that we have a promise for (either from parent or from this
        // resolve; in that case study() will have made sure it's ordered before us in the plan).
        forEach(params, function (dep) {
          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
            waitParams++;
            promises[dep].then(function (result) {
              values[dep] = result;
              if (!(--waitParams)) proceed();
            }, onfailure);
          }
        });
        if (!waitParams) proceed();
        function proceed() {
          if (isDefined(result.$$failure)) return;
          try {
            invocation.resolve($injector.invoke(invocable, self, values));
            invocation.promise.then(function (result) {
              values[key] = result;
              done();
            }, onfailure);
          } catch (e) {
            onfailure(e);
          }
        }
        // Publish promise synchronously; invocations further down in the plan may depend on it.
        promises[key] = invocation.promise;
      }
      
      return result;
    };
  };
  
  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via 
   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the 
   * resulting value will be used instead. Dependencies of invocables are resolved 
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` 
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains 
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises 
   * returned by injectables have been resolved. If any invocable 
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
   * same error. A rejection of a `parent` promise (if specified) will likewise be 
   * propagated immediately. Once the `$resolve` promise has been rejected, no 
   * further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter 
   * with the same name as the injectable, which will be fulfilled from the `parent` 
   * injectable of the same name. This allows inherited values to be decorated. 
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. 
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to 
   * be a service name to be passed to `$injector.get()`. This is supported primarily 
   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
   * routes.
   *
   * @param {object} invocables functions to invoke or 
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
  this.resolve = function (invocables, locals, parent, self) {
    return this.study(invocables)(locals, parent, self);
  };
}

angular.module('ui.router.util').service('$resolve', $Resolve);


/**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
function $TemplateFactory(  $http,   $templateCache,   $injector) {

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object. 
   *
   * @param {object} config Configuration object for which to load a template. 
   * The following properties are search in the specified order, and the first one 
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to 
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning 
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via 
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for 
   * that string,or `null` if no template is configured.
   */
  this.fromConfig = function (config, params, locals) {
    return (
      isDefined(config.template) ? this.fromString(config.template, params) :
      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
      null
    );
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that 
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that 
   * string.
   */
  this.fromString = function (template, params) {
    return isFunction(template) ? template(params) : template;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   * 
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function 
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromUrl = function (url, params) {
    if (isFunction(url)) url = url(params);
    if (url == null) return null;
    else return $http
        .get(url, { cache: $templateCache })
        .then(function(response) { return response.data; });
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromProvider = function (provider, params, locals) {
    return $injector.invoke(provider, null, locals || { params: params });
  };
}

angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

/**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 * 
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp '}'` - curly placeholder with regexp. Should the regexp itself contain
 *   curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon 
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 * 
 * Examples:
 * 
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 *
 * @param {string} pattern  the pattern to compile into a matcher.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the contructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when 
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New UrlMatcher object
 */
function UrlMatcher(pattern) {

  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
  //   '*' name
  //   ':' name
  //   '{' name '}'
  //   '{' name ':' regexp '}'
  // The regular expression is somewhat complicated due to the need to allow curly braces
  // inside the regular expression. The placeholder regexp breaks down as follows:
  //    ([:*])(\w+)               classic placeholder ($1 / $2)
  //    \{(\w+)(?:\:( ... ))?\}   curly brace placeholder ($3) with optional regexp ... ($4)
  //    (?: ... | ... | ... )+    the regexp consists of any number of atoms, an atom being either
  //    [^{}\\]+                  - anything other than curly braces or backslash
  //    \\.                       - a backslash escape
  //    \{(?:[^{}\\]+|\\.)*\}     - a matched set of curly braces containing other atoms
  var placeholder = /([:*])(\w+)|\{(\w+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      names = {}, compiled = '^', last = 0, m,
      segments = this.segments = [],
      params = this.params = [];

  function addParameter(id) {
    if (!/^\w+(-+\w+)*$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
    if (names[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
    names[id] = true;
    params.push(id);
  }

  function quoteRegExp(string) {
    return string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
  }

  this.source = pattern;

  // Split into static segments separated by path parameter placeholders.
  // The number of segments is always 1 more than the number of parameters.
  var id, regexp, segment;
  while ((m = placeholder.exec(pattern))) {
    id = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
    regexp = m[4] || (m[1] == '*' ? '.*' : '[^/]*');
    segment = pattern.substring(last, m.index);
    if (segment.indexOf('?') >= 0) break; // we're into the search part
    compiled += quoteRegExp(segment) + '(' + regexp + ')';
    addParameter(id);
    segments.push(segment);
    last = placeholder.lastIndex;
  }
  segment = pattern.substring(last);

  // Find any search parameter names and remove them from the last segment
  var i = segment.indexOf('?');
  if (i >= 0) {
    var search = this.sourceSearch = segment.substring(i);
    segment = segment.substring(0, i);
    this.sourcePath = pattern.substring(0, last+i);

    // Allow parameters to be separated by '?' as well as '&' to make concat() easier
    forEach(search.substring(1).split(/[&?]/), addParameter);
  } else {
    this.sourcePath = pattern;
    this.sourceSearch = '';
  }

  compiled += quoteRegExp(segment) + '$';
  segments.push(segment);
  this.regexp = new RegExp(compiled);
  this.prefix = segments[0];
}

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * ```
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * ```
 *
 * @param {string} pattern  The pattern to append.
 * @returns {ui.router.util.type:UrlMatcher}  A matcher for the concatenated pattern.
 */
UrlMatcher.prototype.concat = function (pattern) {
  // Because order of search parameters is irrelevant, we can add our own search
  // parameters to the end of the new pattern. Parse the new pattern by itself
  // and then join the bits together, but it's much easier to do this on a string level.
  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch);
};

UrlMatcher.prototype.toString = function () {
  return this.source;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * ```
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', { x:'1', q:'hello' });
 * // returns { id:'bob', q:'hello', r:null }
 * ```
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
UrlMatcher.prototype.exec = function (path, searchParams) {
  var m = this.regexp.exec(path);
  if (!m) return null;

  var params = this.params, nTotal = params.length,
    nPath = this.segments.length-1,
    values = {}, i;

  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

  for (i=0; i<nPath; i++) values[params[i]] = m[i+1];
  for (/**/; i<nTotal; i++) values[params[i]] = searchParams[params[i]];

  return values;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 * 
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
UrlMatcher.prototype.parameters = function () {
  return this.params;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * ```
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * ```
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
UrlMatcher.prototype.format = function (values) {
  var segments = this.segments, params = this.params;
  if (!values) return segments.join('');

  var nPath = segments.length-1, nTotal = params.length,
    result = segments[0], i, search, value;

  for (i=0; i<nPath; i++) {
    value = values[params[i]];
    // TODO: Maybe we should throw on null here? It's not really good style to use '' and null interchangeabley
    if (value != null) result += encodeURIComponent(value);
    result += segments[i+1];
  }
  for (/**/; i<nTotal; i++) {
    value = values[params[i]];
    if (value != null) {
      result += (search ? '&' : '?') + params[i] + '=' + encodeURIComponent(value);
      search = true;
    }
  }

  return result;
};



/**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher} instances. The factory is also available to providers
 * under the name `$urlMatcherFactoryProvider`.
 */
function $UrlMatcherFactory() {

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher} for the specified pattern.
   *   
   * @param {string} pattern  The URL pattern.
   * @returns {ui.router.util.type:UrlMatcher}  The UrlMatcher.
   */
  this.compile = function (pattern) {
    return new UrlMatcher(pattern);
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a UrlMatcher, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object has the following functions: `exec`, `format`, and `concat`.
   */
  this.isMatcher = function (o) {
    return isObject(o) && isFunction(o.exec) && isFunction(o.format) && isFunction(o.concat);
  };
  
  /* No need to document $get, since it returns this */
  this.$get = function () {
    return this;
  };
}

// Register as a provider so it's available to other providers
angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);

/**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`. 
 * When `$location` changes it runs through a list of rules one by one until a 
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
$UrlRouterProvider.$inject = ['$urlMatcherFactoryProvider'];
function $UrlRouterProvider(  $urlMatcherFactory) {
  var rules = [], 
      otherwise = null;

  // Returns a string that is a prefix of all strings matching the RegExp
  function regExpPrefix(re) {
    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
  }

  // Interpolates matched values into a String.replace()-style pattern
  function interpolate(pattern, match) {
    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
      return match[what === '$' ? 0 : Number(what)];
    });
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {object} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} $urlRouterProvider - $urlRouterProvider instance
   */
  this.rule =
    function (rule) {
      if (!isFunction(rule)) throw new Error("'rule' must be a function");
      rules.push(rule);
      return this;
    };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalied route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     ...
   *   });
   * });
   * </pre>
   *
   * @param {string|object} rule The url path you want to redirect to or a function 
   * rule that returns the url path. The function version is passed two params: 
   * `$injector` and `$location` services.
   *
   * @return {object} $urlRouterProvider - $urlRouterProvider instance
   */
  this.otherwise =
    function (rule) {
      if (isString(rule)) {
        var redirect = rule;
        rule = function () { return redirect; };
      }
      else if (!isFunction(rule)) throw new Error("'rule' must be a function");
      otherwise = rule;
      return this;
    };


  function handleIfMatch($injector, handler, match) {
    if (!match) return false;
    var result = $injector.invoke(handler, handler, { $match: match });
    return isDefined(result) ? result : true;
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching. if handle is a string, it is
   * treated as a redirect, and is interpolated according to the syyntax of match
   * (i.e. like String.replace() for RegExp, or like a UrlMatcher pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|object} handler The path you want to redirect your user to.
   */
  this.when =
    function (what, handler) {
      var redirect, handlerIsString = isString(handler);
      if (isString(what)) what = $urlMatcherFactory.compile(what);

      if (!handlerIsString && !isFunction(handler) && !isArray(handler))
        throw new Error("invalid 'handler' in when()");

      var strategies = {
        matcher: function (what, handler) {
          if (handlerIsString) {
            redirect = $urlMatcherFactory.compile(handler);
            handler = ['$match', function ($match) { return redirect.format($match); }];
          }
          return extend(function ($injector, $location) {
            return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
          }, {
            prefix: isString(what.prefix) ? what.prefix : ''
          });
        },
        regex: function (what, handler) {
          if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

          if (handlerIsString) {
            redirect = handler;
            handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
          }
          return extend(function ($injector, $location) {
            return handleIfMatch($injector, handler, what.exec($location.path()));
          }, {
            prefix: regExpPrefix(what)
          });
        }
      };

      var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

      for (var n in check) {
        if (check[n]) {
          return this.rule(strategies[n](what, handler));
        }
      }

      throw new Error("invalid 'what' in when()");
    };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   *
   * @description
   *
   */
  this.$get =
    [        '$location', '$rootScope', '$injector',
    function ($location,   $rootScope,   $injector) {
      // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
      function update(evt) {
        if (evt && evt.defaultPrevented) return;
        function check(rule) {
          var handled = rule($injector, $location);
          if (handled) {
            if (isString(handled)) $location.replace().url(handled);
            return true;
          }
          return false;
        }
        var n=rules.length, i;
        for (i=0; i<n; i++) {
          if (check(rules[i])) return;
        }
        // always check otherwise last to allow dynamic updates to the set of rules
        if (otherwise) check(otherwise);
      }

      $rootScope.$on('$locationChangeSuccess', update);

      return {
        /**
         * @ngdoc function
         * @name ui.router.router.$urlRouter#sync
         * @methodOf ui.router.router.$urlRouter
         *
         * @description
         * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
         * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event, 
         * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed 
         * with the transition by calling `$urlRouter.sync()`.
         *
         * @example
         * <pre>
         * angular.module('app', ['ui.router']);
         *   .run(function($rootScope, $urlRouter) {
         *     $rootScope.$on('$locationChangeSuccess', function(evt) {
         *       // Halt state change from even starting
         *       evt.preventDefault();
         *       // Perform custom logic
         *       var meetsRequirement = ...
         *       // Continue with the update and state transition if logic allows
         *       if (meetsRequirement) $urlRouter.sync();
         *     });
         * });
         * </pre>
         */
        sync: function () {
          update();
        }
      };
    }];
}

angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider', '$locationProvider'];
function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory,           $locationProvider) {

  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

  // Builds state properties from definition passed to registerState()
  var stateBuilder = {

    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
    // state.children = [];
    // if (parent) parent.children.push(state);
    parent: function(state) {
      if (isDefined(state.parent) && state.parent) return findState(state.parent);
      // regex matches any valid composite state name
      // would match "contact.list" but not "contacts"
      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
      return compositeName ? findState(compositeName[1]) : root;
    },

    // inherit 'data' from parent and override by own values (if any)
    data: function(state) {
      if (state.parent && state.parent.data) {
        state.data = state.self.data = extend({}, state.parent.data, state.data);
      }
      return state.data;
    },

    // Build a URLMatcher if necessary, either via a relative or absolute URL
    url: function(state) {
      var url = state.url;

      if (isString(url)) {
        if (url.charAt(0) == '^') {
          return $urlMatcherFactory.compile(url.substring(1));
        }
        return (state.parent.navigable || root).url.concat(url);
      }

      if ($urlMatcherFactory.isMatcher(url) || url == null) {
        return url;
      }
      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
    },

    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
    navigable: function(state) {
      return state.url ? state : (state.parent ? state.parent.navigable : null);
    },

    // Derive parameters for this state and ensure they're a super-set of parent's parameters
    params: function(state) {
      if (!state.params) {
        return state.url ? state.url.parameters() : state.parent.params;
      }
      if (!isArray(state.params)) throw new Error("Invalid params in state '" + state + "'");
      if (state.url) throw new Error("Both params and url specicified in state '" + state + "'");
      return state.params;
    },

    // If there is no explicit multi-view configuration, make one up so we don't have
    // to handle both cases in the view directive later. Note that having an explicit
    // 'views' property will mean the default unnamed view properties are ignored. This
    // is also a good time to resolve view names to absolute names, so everything is a
    // straight lookup at link time.
    views: function(state) {
      var views = {};

      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
        views[name] = view;
      });
      return views;
    },

    ownParams: function(state) {
      if (!state.parent) {
        return state.params;
      }
      var paramNames = {}; forEach(state.params, function (p) { paramNames[p] = true; });

      forEach(state.parent.params, function (p) {
        if (!paramNames[p]) {
          throw new Error("Missing required parameter '" + p + "' in state '" + state.name + "'");
        }
        paramNames[p] = false;
      });
      var ownParams = [];

      forEach(paramNames, function (own, p) {
        if (own) ownParams.push(p);
      });
      return ownParams;
    },

    // Keep a full path from the root down to this state as this is needed for state activation.
    path: function(state) {
      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
    },

    // Speed up $state.contains() as it's used a lot
    includes: function(state) {
      var includes = state.parent ? extend({}, state.parent.includes) : {};
      includes[state.name] = true;
      return includes;
    },

    $delegates: {}
  };

  function isRelative(stateName) {
    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
  }

  function findState(stateOrName, base) {
    var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = isRelative(name);

    if (path) {
      if (!base) throw new Error("No reference point given for path '"  + name + "'");
      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

      for (; i < pathLength; i++) {
        if (rel[i] === "" && i === 0) {
          current = base;
          continue;
        }
        if (rel[i] === "^") {
          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
          current = current.parent;
          continue;
        }
        break;
      }
      rel = rel.slice(i).join(".");
      name = current.name + (current.name && rel ? "." : "") + rel;
    }
    var state = states[name];

    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
      return state;
    }
    return undefined;
  }

  function queueState(parentName, state) {
    if (!queue[parentName]) {
      queue[parentName] = [];
    }
    queue[parentName].push(state);
  }

  function registerState(state) {
    // Wrap a new object around the state so we can store our private details easily.
    state = inherit(state, {
      self: state,
      resolve: state.resolve || {},
      toString: function() { return this.name; }
    });

    var name = state.name;
    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

    // Get parent name
    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
        : (isString(state.parent)) ? state.parent
        : '';

    // If parent is not registered yet, add state to queue and register later
    if (parentName && !states[parentName]) {
      return queueState(parentName, state.self);
    }

    for (var key in stateBuilder) {
      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
    }
    states[name] = state;

    // Register the state in the global state list and with $urlRouter if necessary.
    if (!state[abstractKey] && state.url) {
      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
          $state.transitionTo(state, $match, { location: false });
        }
      }]);
    }

    // Register any queued children
    if (queue[name]) {
      for (var i = 0; i < queue[name].length; i++) {
        registerState(queue[name][i]);
      }
    }

    return state;
  }

  // Checks text to see if it looks like a glob.
  function isGlob (text) {
    return text.indexOf('*') > -1;
  }

  // Returns true if glob matches current $state name.
  function doesStateMatchGlob (glob) {
    var globSegments = glob.split('.'),
        segments = $state.$current.name.split('.');

    //match greedy starts
    if (globSegments[0] === '**') {
       segments = segments.slice(segments.indexOf(globSegments[1]));
       segments.unshift('**');
    }
    //match greedy ends
    if (globSegments[globSegments.length - 1] === '**') {
       segments.splice(segments.indexOf(globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
       segments.push('**');
    }

    if (globSegments.length != segments.length) {
      return false;
    }

    //match single stars
    for (var i = 0, l = globSegments.length; i < l; i++) {
      if (globSegments[i] === '*') {
        segments[i] = '*';
      }
    }

    return segments.join('') === globSegments.join('');
  }


  // Implicit root state that is always active
  root = registerState({
    name: '',
    url: '^',
    views: null,
    'abstract': true
  });
  root.navigable = null;


  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the 
   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
   * to add custom functionality to ui-router, for example inferring templateUrl 
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new 
   * properties within the state's internal definition. There is currently no clear 
   * use-case for this beyond accessing internal states (i.e. $state.$current), 
   * however, expect this to become increasingly relevant as we introduce additional 
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of 
   * execution of the builder functions in non-deterministic. Builder functions 
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {link ui.router.util.type:UrlMatcher} or null.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to 
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view 
   *   name (i.e. "viewName@stateName") and each value is the config object 
   *   (template, controller) for the view. Even when you don't use the views object 
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template 
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state. 
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that 
   *   would pass a '$state.includes()' test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function ($state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(view, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate. 
   * @param {object} func A function that is responsible for decorating the original 
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
  this.decorator = decorator;
  function decorator(name, func) {
    /*jshint validthis: true */
    if (isString(name) && !isDefined(func)) {
      return stateBuilder[name];
    }
    if (!isFunction(func) || !isString(name)) {
      return this;
    }
    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
      stateBuilder.$delegates[name] = stateBuilder[name];
    }
    stateBuilder[name] = func;
    return this;
  }

  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * <a id='template'></a>
   *
   * - **`template`** - {string|function=} - html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property 
   *   takes precedence over templateUrl.
   *   
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <a id='templateUrl'></a>
   *
   * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html 
   *   template that should be used by uiView.
   *   
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
   *     applying the current state
   *
   * <a id='templateProvider'></a>
   *
   * - **`templateProvider`** - {function=} - Provider function that returns HTML content
   *   string.
   *
   * <a id='controller'></a>
   *
   * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly 
   *   related scope or the name of a registered controller if passed as a string.
   *
   * <a id='controllerProvider'></a>
   *
   * - **`controllerProvider`** - {function=} - Injectable provider function that returns
   *   the actual controller or string.
   *
   * <a id='controllerAs'></a>
   * 
   * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be 
   *   published to scope under the controllerAs name.
   *
   * <a id='resolve'></a>
   *
   * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which 
   *   should be injected into the controller. If any of these dependencies are promises, 
   *   the router will wait for them all to be resolved or one to be rejected before the 
   *   controller is instantiated. If all the promises are resolved successfully, the values 
   *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any 
   *   of the promises are rejected the $stateChangeError event is fired. The map object is:
   *   
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
   *     it is injected and return value it treated as dependency. If result is a promise, it is 
   *     resolved before its value is injected into controller.
   *
   * <a id='url'></a>
   *
   * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any 
   *   parameters that were passed.
   *
   * <a id='params'></a>
   *
   * - **`params`** - {object=} - An array of parameter names or regular expressions. Only 
   *   use this within a state if you are not using url. Otherwise you can specify your
   *   parameters within the url. When a state is navigated or transitioned to, the 
   *   $stateParams service will be populated with any parameters that were passed.
   *
   * <a id='views'></a>
   *
   * - **`views`** - {object=} - Use the views property to set up multiple views or to target views
   *   manually/explicitly.
   *
   * <a id='abstract'></a>
   *
   * - **`abstract`** - {boolean=} - An abstract state will never be directly activated, 
   *   but can provide inherited properties to its common children states.
   *
   * <a id='onEnter'></a>
   *
   * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   *
   * <a id='onExit'></a>
   *
   * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   *
   * <a id='reloadOnSearch'></a>
   *
   * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state 
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   *
   * <a id='data'></a>
   *
   * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the 
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts". 
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} definition State configuration object.
   */
  this.state = state;
  function state(name, definition) {
    /*jshint validthis: true */
    if (isObject(name)) definition = name;
    else definition.name = name;
    registerState(definition);
    return this;
  }

  /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However 
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll 
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
  // $urlRouter is injected just to ensure it gets instantiated
  this.$get = $get;
  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$location', '$urlRouter', '$browser'];
  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $location,   $urlRouter,   $browser) {

    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
    var TransitionPrevented = $q.reject(new Error('transition prevented'));
    var TransitionAborted = $q.reject(new Error('transition aborted'));
    var TransitionFailed = $q.reject(new Error('transition failed'));
    var currentLocation = $location.url();
    var baseHref = $browser.baseHref();

    function syncUrl() {
      if ($location.url() !== currentLocation) {
        $location.url(currentLocation);
        $location.replace();
      }
    }

    root.locals = { resolve: null, globals: { $stateParams: {} } };
    $state = {
      params: {},
      current: root.self,
      $current: root,
      transition: null
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved, events are not re-fired, 
     * and controllers reinstantiated (bug with controllers reinstantiating right now, fixing soon).
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: false 
     * });
     * </pre>
     */
    $state.reload = function reload() {
      $state.transitionTo($state.current, $stateParams, { reload: true, inherit: false, notify: false });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls 
     * `$state.transitionTo` internally but automatically sets options to 
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
     * This allows you to easily use an absolute or relative to path and specify 
     * only the parameters you'd like to update (while letting unspecified parameters 
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state, 
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
     * defined parameters. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
    $state.go = function go(to, params, options) {
      return this.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.transitionTo = function transitionTo(to, toParams, options) {
      toParams = toParams || {};
      options = extend({
        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
      }, options || {});

      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
      var evt, toState = findState(to, options.relative);

      if (!isDefined(toState)) {
        // Broadcast not found event and abort the transition if prevented
        var redirect = { to: to, toParams: toParams, options: options };

        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateNotFound
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when a requested state **cannot be found** using the provided state name during transition.
         * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
         * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
         * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
         * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
         *
         * @param {Object} event Event object.
         * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
         * @param {State} fromState Current state object.
         * @param {Object} fromParams Current state params.
         *
         * @example
         *
         * <pre>
         * // somewhere, assume lazy.state has not been defined
         * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
         *
         * // somewhere else
         * $scope.$on('$stateNotFound',
         * function(event, unfoundState, fromState, fromParams){
         *     console.log(unfoundState.to); // "lazy.state"
         *     console.log(unfoundState.toParams); // {a:1, b:2}
         *     console.log(unfoundState.options); // {inherit:false} + default options
         * })
         * </pre>
         */
        evt = $rootScope.$broadcast('$stateNotFound', redirect, from.self, fromParams);
        if (evt.defaultPrevented) {
          syncUrl();
          return TransitionAborted;
        }

        // Allow the handler to return a promise to defer state lookup retry
        if (evt.retry) {
          if (options.$retry) {
            syncUrl();
            return TransitionFailed;
          }
          var retryTransition = $state.transition = $q.when(evt.retry);
          retryTransition.then(function() {
            if (retryTransition !== $state.transition) return TransitionSuperseded;
            redirect.options.$retry = true;
            return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
          }, function() {
            return TransitionAborted;
          });
          syncUrl();
          return retryTransition;
        }

        // Always retry once if the $stateNotFound was not prevented
        // (handles either redirect changed or state lazy-definition)
        to = redirect.to;
        toParams = redirect.toParams;
        options = redirect.options;
        toState = findState(to, options.relative);
        if (!isDefined(toState)) {
          if (options.relative) throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
          throw new Error("No such state '" + to + "'");
        }
      }
      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
      to = toState;

      var toPath = to.path;

      // Starting from the root of the path, keep all levels that haven't changed
      var keep, state, locals = root.locals, toLocals = [];
      for (keep = 0, state = toPath[keep];
           state && state === fromPath[keep] && equalForKeys(toParams, fromParams, state.ownParams) && !options.reload;
           keep++, state = toPath[keep]) {
        locals = toLocals[keep] = state.locals;
      }

      // If we're going to the same state and all locals are kept, we've got nothing to do.
      // But clear 'transition', as we still want to cancel any other pending transitions.
      // TODO: We may not want to bump 'transition' if we're called from a location change that we've initiated ourselves,
      // because we might accidentally abort a legitimate transition initiated from code?
      if (shouldTriggerReload(to, from, locals, options) ) {
        if ( to.self.reloadOnSearch !== false )
          syncUrl();
        $state.transition = null;
        return $q.when($state.current);
      }

      // Normalize/filter parameters before we pass them to event handlers etc.
      toParams = normalize(to.params, toParams || {});

      // Broadcast start event and cancel the transition if requested
      if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeStart
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when the state transition **begins**. You can use `event.preventDefault()`
         * to prevent the transition from happening and then the transition promise will be
         * rejected with a `'transition prevented'` value.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         *
         * @example
         *
         * <pre>
         * $rootScope.$on('$stateChangeStart',
         * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
         * </pre>
         */
        evt = $rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams);
        if (evt.defaultPrevented) {
          syncUrl();
          return TransitionPrevented;
        }
      }

      // Resolve locals for the remaining states, but don't update any global state just
      // yet -- if anything fails to resolve the current state needs to remain untouched.
      // We also set up an inheritance chain for the locals here. This allows the view directive
      // to quickly look up the correct definition for each view in the current state. Even
      // though we create the locals object itself outside resolveState(), it is initially
      // empty and gets filled asynchronously. We need to keep track of the promise for the
      // (fully resolved) current locals, and pass this down the chain.
      var resolved = $q.when(locals);
      for (var l=keep; l<toPath.length; l++, state=toPath[l]) {
        locals = toLocals[l] = inherit(locals);
        resolved = resolveState(state, toParams, state===to, resolved, locals);
      }

      // Once everything is resolved, we are ready to perform the actual transition
      // and return a promise for the new state. We also keep track of what the
      // current promise is, so that we can detect overlapping transitions and
      // keep only the outcome of the last transition.
      var transition = $state.transition = resolved.then(function () {
        var l, entering, exiting;

        if ($state.transition !== transition) return TransitionSuperseded;

        // Exit 'from' states not kept
        for (l=fromPath.length-1; l>=keep; l--) {
          exiting = fromPath[l];
          if (exiting.self.onExit) {
            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
          }
          exiting.locals = null;
        }

        // Enter 'to' states not kept
        for (l=keep; l<toPath.length; l++) {
          entering = toPath[l];
          entering.locals = toLocals[l];
          if (entering.self.onEnter) {
            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
          }
        }

        // Run it again, to catch any transitions in callbacks
        if ($state.transition !== transition) return TransitionSuperseded;

        // Update globals in $state
        $state.$current = to;
        $state.current = to.self;
        $state.params = toParams;
        copy($state.params, $stateParams);
        $state.transition = null;

        // Update $location
        var toNav = to.navigable;
        if (options.location && toNav) {
          $location.url(toNav.url.format(toNav.locals.globals.$stateParams));

          if (options.location === 'replace') {
            $location.replace();
          }
        }

        if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
        }
        currentLocation = $location.url();

        return $state.current;
      }, function (error) {
        if ($state.transition !== transition) return TransitionSuperseded;

        $state.transition = null;
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
        $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);
        syncUrl();

        return $q.reject(error);
      });

      return transition;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be 
     * tested for strict equality against the current active params object, so all params 
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // everything else would return false
     * </pre>
     *
     * @param {string|object} stateName The state name or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like 
     * to test against the current active state.
     * @returns {boolean} Returns true if it is the state.
     */
    $state.is = function is(stateOrName, params) {
      var state = findState(stateOrName);

      if (!isDefined(state)) {
        return undefined;
      }

      if ($state.$current !== state) {
        return false;
      }

      return isDefined(params) && params !== null ? angular.equals($stateParams, params) : true;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the 
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     * </pre>
     *
     * @description
     * Basic globing patterns will also work.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name to be searched for within the current state name.
     * @param {object} params A param object, e.g. `{sectionId: section.id}`, 
     * that you'd like to test against the current active state.
     * @returns {boolean} Returns true if it does include the state
     */

    $state.includes = function includes(stateOrName, params) {
      if (isString(stateOrName) && isGlob(stateOrName)) {
        if (doesStateMatchGlob(stateOrName)) {
          stateOrName = $state.$current.name;
        } else {
          return false;
        }
      }

      var state = findState(stateOrName);
      if (!isDefined(state)) {
        return undefined;
      }

      if (!isDefined($state.$current.includes[state.name])) {
        return false;
      }

      var validParams = true;
      angular.forEach(params, function(value, key) {
        if (!isDefined($stateParams[key]) || $stateParams[key] !== value) {
          validParams = false;
        }
      });
      return validParams;
    };


    /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     * 
     * @returns {string} compiled state url
     */
    $state.href = function href(stateOrName, params, options) {
      options = extend({ lossy: true, inherit: false, absolute: false, relative: $state.$current }, options || {});
      var state = findState(stateOrName, options.relative);
      if (!isDefined(state)) return null;

      params = inheritParams($stateParams, params || {}, $state.$current, state);
      var nav = (state && options.lossy) ? state.navigable : state;
      var url = (nav && nav.url) ? nav.url.format(normalize(state.params, params || {})) : null;
      if (!$locationProvider.html5Mode() && url) {
        url = "#" + $locationProvider.hashPrefix() + url;
      }

      if (baseHref !== '/') {
        if ($locationProvider.html5Mode()) {
          url = baseHref.slice(0, -1) + url;
        } else if (options.absolute){
          url = baseHref.slice(1) + url;
        }
      }

      if (options.absolute && url) {
        url = $location.protocol() + '://' + 
              $location.host() + 
              ($location.port() == 80 || $location.port() == 443 ? '' : ':' + $location.port()) + 
              (!$locationProvider.html5Mode() && url ? '/' : '') + 
              url;
      }
      return url;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @returns {object|array} State configuration object or array of all objects.
     */
    $state.get = function (stateOrName, context) {
      if (!isDefined(stateOrName)) {
        var list = [];
        forEach(states, function(state) { list.push(state.self); });
        return list;
      }
      var state = findState(stateOrName, context);
      return (state && state.self) ? state.self : null;
    };

    function resolveState(state, params, paramsAreFiltered, inherited, dst) {
      // Make a restricted $stateParams with only the parameters that apply to this state if
      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
      // we also need $stateParams to be available for any $injector calls we make during the
      // dependency resolution process.
      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params, params);
      var locals = { $stateParams: $stateParams };

      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
      // We're also including $stateParams in this; that way the parameters are restricted
      // to the set that should be visible to the state, and are independent of when we update
      // the global $state and $stateParams values.
      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
      var promises = [ dst.resolve.then(function (globals) {
        dst.globals = globals;
      }) ];
      if (inherited) promises.push(inherited);

      // Resolve template and dependencies for all views.
      forEach(state.views, function (view, name) {
        var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
        injectables.$template = [ function () {
          return $view.load(name, { view: view, locals: locals, params: $stateParams, notify: false }) || '';
        }];

        promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
          // References to the controller (only instantiated at link time)
          if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
            var injectLocals = angular.extend({}, injectables, locals);
            result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
          } else {
            result.$$controller = view.controller;
          }
          // Provide access to the state itself for internal use
          result.$$state = state;
          result.$$controllerAs = view.controllerAs;
          dst[name] = result;
        }));
      });

      // Wait for all the promises and then return the activation object
      return $q.all(promises).then(function (values) {
        return dst;
      });
    }

    return $state;
  }

  function shouldTriggerReload(to, from, locals, options) {
    if ( to === from && ((locals === from.locals && !options.reload) || (to.self.reloadOnSearch === false)) ) {
      return true;
    }
  }
}

angular.module('ui.router.state')
  .value('$stateParams', {})
  .provider('$state', $StateProvider);


$ViewProvider.$inject = [];
function $ViewProvider() {

  this.$get = $get;
  /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
  $get.$inject = ['$rootScope', '$templateFactory'];
  function $get(   $rootScope,   $templateFactory) {
    return {
      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
      /**
       * @ngdoc function
       * @name ui.router.state.$view#load
       * @methodOf ui.router.state.$view
       *
       * @description
       *
       * @param {string} name name
       * @param {object} options option object.
       */
      load: function load(name, options) {
        var result, defaults = {
          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
        };
        options = extend(defaults, options);

        if (options.view) {
          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
        }
        if (result && options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$viewContentLoading
         * @eventOf ui.router.state.$view
         * @eventType broadcast on root scope
         * @description
         *
         * Fired once the view **begins loading**, *before* the DOM is rendered.
         *
         * @param {Object} event Event object.
         * @param {Object} viewConfig The view config properties (template, controller, etc).
         *
         * @example
         *
         * <pre>
         * $scope.$on('$viewContentLoading',
         * function(event, viewConfig){
         *     // Access to all the view config properties.
         *     // and one special property 'targetView'
         *     // viewConfig.targetView
         * });
         * </pre>
         */
          $rootScope.$broadcast('$viewContentLoading', options);
        }
        return result;
      }
    };
  }
}

angular.module('ui.router.state').provider('$view', $ViewProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
function $ViewScrollProvider() {

  var useAnchorScroll = false;

  /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
  this.useAnchorScroll = function () {
    useAnchorScroll = true;
  };

  /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
    if (useAnchorScroll) {
      return $anchorScroll;
    }

    return function ($element) {
      $timeout(function () {
        $element[0].scrollIntoView();
      }, 0, false);
    };
  }];
}

angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} ui-view A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 * 
 * @example
 * A view can be unnamed or named. 
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div> 
 * 
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a 
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div> 
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 * 
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * But typically you'll only use the views property if you name your view or have more than one view 
 * in the same template. There's not really a compelling reason to name a view if its the only one, 
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre> 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div> 
 * <div ui-view="data"></div> 
 * </pre>
 * 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 */
$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll'];
function $ViewDirective(   $state,   $injector,   $uiViewScroll) {

  function getService() {
    return ($injector.has) ? function(service) {
      return $injector.has(service) ? $injector.get(service) : null;
    } : function(service) {
      try {
        return $injector.get(service);
      } catch (e) {
        return null;
      }
    };
  }

  var service = getService(),
      $animator = service('$animator'),
      $animate = service('$animate');

  // Returns a set of DOM manipulation functions based on which Angular version
  // it should use
  function getRenderer(attrs, scope) {
    var statics = function() {
      return {
        enter: function (element, target, cb) { target.after(element); cb(); },
        leave: function (element, cb) { element.remove(); cb(); }
      };
    };

    if ($animate) {
      return {
        enter: function(element, target, cb) { $animate.enter(element, null, target, cb); },
        leave: function(element, cb) { $animate.leave(element, cb); }
      };
    }

    if ($animator) {
      var animate = $animator && $animator(scope, attrs);

      return {
        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
        leave: function(element, cb) { animate.leave(element); cb(); }
      };
    }

    return statics();
  }

  var directive = {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    compile: function (tElement, tAttrs, $transclude) {
      return function (scope, $element, attrs) {
        var previousEl, currentEl, currentScope, latestLocals,
            onloadExp     = attrs.onload || '',
            autoScrollExp = attrs.autoscroll,
            renderer      = getRenderer(attrs, scope);

        scope.$on('$stateChangeSuccess', function() {
          updateView(false);
        });
        scope.$on('$viewContentLoading', function() {
          updateView(false);
        });

        updateView(true);

        function cleanupLastView() {
          if (previousEl) {
            previousEl.remove();
            previousEl = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }

          if (currentEl) {
            renderer.leave(currentEl, function() {
              previousEl = null;
            });

            previousEl = currentEl;
            currentEl = null;
          }
        }

        function updateView(firstTime) {
          var newScope        = scope.$new(),
              name            = currentEl && currentEl.data('$uiViewName'),
              previousLocals  = name && $state.$current && $state.$current.locals[name];

          if (!firstTime && previousLocals === latestLocals) return; // nothing to do

          var clone = $transclude(newScope, function(clone) {
            renderer.enter(clone, $element, function onUiViewEnter() {
              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                $uiViewScroll(clone);
              }
            });
            cleanupLastView();
          });

          latestLocals = $state.$current.locals[clone.data('$uiViewName')];

          currentEl = clone;
          currentScope = newScope;
          /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description           *
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           */
          currentScope.$emit('$viewContentLoaded');
          currentScope.$eval(onloadExp);
        }
      };
    }
  };

  return directive;
}

$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state'];
function $ViewDirectiveFill ($compile, $controller, $state) {
  return {
    restrict: 'ECA',
    priority: -400,
    compile: function (tElement) {
      var initial = tElement.html();
      return function (scope, $element, attrs) {
        var name      = attrs.uiView || attrs.name || '',
            inherited = $element.inheritedData('$uiView');

        if (name.indexOf('@') < 0) {
          name = name + '@' + (inherited ? inherited.state.name : '');
        }

        $element.data('$uiViewName', name);

        var current = $state.$current,
            locals  = current && current.locals[name];

        if (! locals) {
          return;
        }

        $element.data('$uiView', { name: name, state: locals.$$state });
        $element.html(locals.$template ? locals.$template : initial);

        var link = $compile($element.contents());

        if (locals.$$controller) {
          locals.$scope = scope;
          var controller = $controller(locals.$$controller, locals);
          if (locals.$$controllerAs) {
            scope[locals.$$controllerAs] = controller;
          }
          $element.data('$ngControllerController', controller);
          $element.children().data('$ngControllerController', controller);
        }

        link(scope);
      };
    }
  };
}

angular.module('ui.router.state').directive('uiView', $ViewDirective);
angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

function parseStateRef(ref) {
  var parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
  return { state: parsed[1], paramExpr: parsed[3] || null };
}

function stateContext(el) {
  var stateData = el.parent().inheritedData('$uiView');

  if (stateData && stateData.state && stateData.state.name) {
    return stateData.state;
  }
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated 
 * URL, the directive will automatically generate & update the `href` attribute via 
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking 
 * the link will trigger a state transition with optional parameters. 
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be 
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative 
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the 
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the 
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 * 
 * Then the compiled html would be (assuming Html5Mode is off):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
 */
$StateRefDirective.$inject = ['$state', '$timeout'];
function $StateRefDirective($state, $timeout) {
  var allowedOptions = ['location', 'inherit', 'reload'];

  return {
    restrict: 'A',
    require: '?^uiSrefActive',
    link: function(scope, element, attrs, uiSrefActive) {
      var ref = parseStateRef(attrs.uiSref);
      var params = null, url = null, base = stateContext(element) || $state.$current;
      var isForm = element[0].nodeName === "FORM";
      var attr = isForm ? "action" : "href", nav = true;

      var options = {
        relative: base
      };
      var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};
      angular.forEach(allowedOptions, function(option) {
        if (option in optionsOverride) {
          options[option] = optionsOverride[option];
        }
      });

      var update = function(newVal) {
        if (newVal) params = newVal;
        if (!nav) return;

        var newHref = $state.href(ref.state, params, options);

        if (uiSrefActive) {
          uiSrefActive.$$setStateInfo(ref.state, params);
        }
        if (!newHref) {
          nav = false;
          return false;
        }
        element[0][attr] = newHref;
      };

      if (ref.paramExpr) {
        scope.$watch(ref.paramExpr, function(newVal, oldVal) {
          if (newVal !== params) update(newVal);
        }, true);
        params = scope.$eval(ref.paramExpr);
      }
      update();

      if (isForm) return;

      element.bind("click", function(e) {
        var button = e.which || e.button;
        if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {
          // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
          $timeout(function() {
            $state.go(ref.state, params, options);
          });
          e.preventDefault();
        }
      });
    }
  };
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the 
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus 
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 * 
 * When the app state is "app.user", and contains the state parameter "user" with value "bilbobaggins", 
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 * 
 * The class name is interpolated **once** during the directives link time (any further changes to the 
 * interpolated value are ignored). 
 * 
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 */
$StateActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
function $StateActiveDirective($state, $stateParams, $interpolate) {
  return {
    restrict: "A",
    controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
      var state, params, activeClass;

      // There probably isn't much point in $observing this
      activeClass = $interpolate($attrs.uiSrefActive || '', false)($scope);

      // Allow uiSref to communicate with uiSrefActive
      this.$$setStateInfo = function(newState, newParams) {
        state = $state.get(newState, stateContext($element));
        params = newParams;
        update();
      };

      $scope.$on('$stateChangeSuccess', update);

      // Update route state
      function update() {
        if ($state.$current.self === state && matchesParams()) {
          $element.addClass(activeClass);
        } else {
          $element.removeClass(activeClass);
        }
      }

      function matchesParams() {
        return !params || equalForKeys(params, $stateParams);
      }
    }]
  };
}

angular.module('ui.router.state')
  .directive('uiSref', $StateRefDirective)
  .directive('uiSrefActive', $StateActiveDirective);

/**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
$IsStateFilter.$inject = ['$state'];
function $IsStateFilter($state) {
  return function(state) {
    return $state.is(state);
  };
}

/**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
$IncludedByStateFilter.$inject = ['$state'];
function $IncludedByStateFilter($state) {
  return function(state) {
    return $state.includes(state);
  };
}

angular.module('ui.router.state')
  .filter('isState', $IsStateFilter)
  .filter('includedByState', $IncludedByStateFilter);

/*
 * @ngdoc object
 * @name ui.router.compat.$routeProvider
 *
 * @requires ui.router.state.$stateProvider
 * @requires ui.router.router.$urlRouterProvider
 *
 * @description
 * `$routeProvider` of the `ui.router.compat` module overwrites the existing
 * `routeProvider` from the core. This is done to provide compatibility between
 * the UI Router and the core router.
 *
 * It also provides a `when()` method to register routes that map to certain urls.
 * Behind the scenes it actually delegates either to 
 * {@link ui.router.router.$urlRouterProvider $urlRouterProvider} or to the 
 * {@link ui.router.state.$stateProvider $stateProvider} to postprocess the given 
 * router definition object.
 */
$RouteProvider.$inject = ['$stateProvider', '$urlRouterProvider'];
function $RouteProvider(  $stateProvider,    $urlRouterProvider) {

  var routes = [];

  onEnterRoute.$inject = ['$$state'];
  function onEnterRoute(   $$state) {
    /*jshint validthis: true */
    this.locals = $$state.locals.globals;
    this.params = this.locals.$stateParams;
  }

  function onExitRoute() {
    /*jshint validthis: true */
    this.locals = null;
    this.params = null;
  }

  this.when = when;
  /*
   * @ngdoc function
   * @name ui.router.compat.$routeProvider#when
   * @methodOf ui.router.compat.$routeProvider
   *
   * @description
   * Registers a route with a given route definition object. The route definition
   * object has the same interface the angular core route definition object has.
   * 
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.compat']);
   *
   * app.config(function ($routeProvider) {
   *   $routeProvider.when('home', {
   *     controller: function () { ... },
   *     templateUrl: 'path/to/template'
   *   });
   * });
   * </pre>
   *
   * @param {string} url URL as string
   * @param {object} route Route definition object
   *
   * @return {object} $routeProvider - $routeProvider instance
   */
  function when(url, route) {
    /*jshint validthis: true */
    if (route.redirectTo != null) {
      // Redirect, configure directly on $urlRouterProvider
      var redirect = route.redirectTo, handler;
      if (isString(redirect)) {
        handler = redirect; // leave $urlRouterProvider to handle
      } else if (isFunction(redirect)) {
        // Adapt to $urlRouterProvider API
        handler = function (params, $location) {
          return redirect(params, $location.path(), $location.search());
        };
      } else {
        throw new Error("Invalid 'redirectTo' in when()");
      }
      $urlRouterProvider.when(url, handler);
    } else {
      // Regular route, configure as state
      $stateProvider.state(inherit(route, {
        parent: null,
        name: 'route:' + encodeURIComponent(url),
        url: url,
        onEnter: onEnterRoute,
        onExit: onExitRoute
      }));
    }
    routes.push(route);
    return this;
  }

  /*
   * @ngdoc object
   * @name ui.router.compat.$route
   *
   * @requires ui.router.state.$state
   * @requires $rootScope
   * @requires $routeParams
   *
   * @property {object} routes - Array of registered routes.
   * @property {object} params - Current route params as object.
   * @property {string} current - Name of the current route.
   *
   * @description
   * The `$route` service provides interfaces to access defined routes. It also let's
   * you access route params through `$routeParams` service, so you have fully
   * control over all the stuff you would actually get from angular's core `$route`
   * service.
   */
  this.$get = $get;
  $get.$inject = ['$state', '$rootScope', '$routeParams'];
  function $get(   $state,   $rootScope,   $routeParams) {

    var $route = {
      routes: routes,
      params: $routeParams,
      current: undefined
    };

    function stateAsRoute(state) {
      return (state.name !== '') ? state : undefined;
    }

    $rootScope.$on('$stateChangeStart', function (ev, to, toParams, from, fromParams) {
      $rootScope.$broadcast('$routeChangeStart', stateAsRoute(to), stateAsRoute(from));
    });

    $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
      $route.current = stateAsRoute(to);
      $rootScope.$broadcast('$routeChangeSuccess', stateAsRoute(to), stateAsRoute(from));
      copy(toParams, $route.params);
    });

    $rootScope.$on('$stateChangeError', function (ev, to, toParams, from, fromParams, error) {
      $rootScope.$broadcast('$routeChangeError', stateAsRoute(to), stateAsRoute(from), error);
    });

    return $route;
  }
}

angular.module('ui.router.compat')
  .provider('$route', $RouteProvider)
  .directive('ngView', $ViewDirective);
})(window, window.angular);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js":[function(require,module,exports){
require('./lib/angular.js');

module.exports = angular;

},{"./lib/angular.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\lib\\angular.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\lib\\angular.js":[function(require,module,exports){
/**
 * @license AngularJS v1.2.23
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, document, undefined) {'use strict';

/**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */

function minErr(module) {
  return function () {
    var code = arguments[0],
      prefix = '[' + (module ? module + ':' : '') + code + '] ',
      template = arguments[1],
      templateArgs = arguments,
      stringify = function (obj) {
        if (typeof obj === 'function') {
          return obj.toString().replace(/ \{[\s\S]*$/, '');
        } else if (typeof obj === 'undefined') {
          return 'undefined';
        } else if (typeof obj !== 'string') {
          return JSON.stringify(obj);
        }
        return obj;
      },
      message, i;

    message = prefix + template.replace(/\{\d+\}/g, function (match) {
      var index = +match.slice(1, -1), arg;

      if (index + 2 < templateArgs.length) {
        arg = templateArgs[index + 2];
        if (typeof arg === 'function') {
          return arg.toString().replace(/ ?\{[\s\S]*$/, '');
        } else if (typeof arg === 'undefined') {
          return 'undefined';
        } else if (typeof arg !== 'string') {
          return toJson(arg);
        }
        return arg;
      }
      return match;
    });

    message = message + '\nhttp://errors.angularjs.org/1.2.23/' +
      (module ? module + '/' : '') + code;
    for (i = 2; i < arguments.length; i++) {
      message = message + (i == 2 ? '?' : '&') + 'p' + (i-2) + '=' +
        encodeURIComponent(stringify(arguments[i]));
    }

    return new Error(message);
  };
}

/* We need to tell jshint what variables are being exported */
/* global angular: true,
    msie: true,
    jqLite: true,
    jQuery: true,
    slice: true,
    push: true,
    toString: true,
    ngMinErr: true,
    angularModule: true,
    nodeName_: true,
    uid: true,
    VALIDITY_STATE_PROPERTY: true,

    lowercase: true,
    uppercase: true,
    manualLowercase: true,
    manualUppercase: true,
    nodeName_: true,
    isArrayLike: true,
    forEach: true,
    sortedKeys: true,
    forEachSorted: true,
    reverseParams: true,
    nextUid: true,
    setHashKey: true,
    extend: true,
    int: true,
    inherit: true,
    noop: true,
    identity: true,
    valueFn: true,
    isUndefined: true,
    isDefined: true,
    isObject: true,
    isString: true,
    isNumber: true,
    isDate: true,
    isArray: true,
    isFunction: true,
    isRegExp: true,
    isWindow: true,
    isScope: true,
    isFile: true,
    isBlob: true,
    isBoolean: true,
    isPromiseLike: true,
    trim: true,
    isElement: true,
    makeMap: true,
    map: true,
    size: true,
    includes: true,
    indexOf: true,
    arrayRemove: true,
    isLeafNode: true,
    copy: true,
    shallowCopy: true,
    equals: true,
    csp: true,
    concat: true,
    sliceArgs: true,
    bind: true,
    toJsonReplacer: true,
    toJson: true,
    fromJson: true,
    toBoolean: true,
    startingTag: true,
    tryDecodeURIComponent: true,
    parseKeyValue: true,
    toKeyValue: true,
    encodeUriSegment: true,
    encodeUriQuery: true,
    angularInit: true,
    bootstrap: true,
    snake_case: true,
    bindJQuery: true,
    assertArg: true,
    assertArgFn: true,
    assertNotHasOwnProperty: true,
    getter: true,
    getBlockElements: true,
    hasOwnProperty: true,
*/

////////////////////////////////////

/**
 * @ngdoc module
 * @name ng
 * @module ng
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */

// The name of a form control's ValidityState property.
// This is used so that it's possible for internal tests to create mock ValidityStates.
var VALIDITY_STATE_PROPERTY = 'validity';

/**
 * @ngdoc function
 * @name angular.lowercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
var lowercase = function(string){return isString(string) ? string.toLowerCase() : string;};
var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * @ngdoc function
 * @name angular.uppercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
var uppercase = function(string){return isString(string) ? string.toUpperCase() : string;};


var manualLowercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
};
var manualUppercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
};


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives.
if ('i' !== 'I'.toLowerCase()) {
  lowercase = manualLowercase;
  uppercase = manualUppercase;
}


var /** holds major version number for IE or NaN for real browsers */
    msie,
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    push              = [].push,
    toString          = Object.prototype.toString,
    ngMinErr          = minErr('ng'),

    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    nodeName_,
    uid               = ['0', '0', '0'];

/**
 * IE 11 changed the format of the UserAgent string.
 * See http://msdn.microsoft.com/en-us/library/ms537503.aspx
 */
msie = int((/msie (\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
if (isNaN(msie)) {
  msie = int((/trident\/.*; rv:(\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
}


/**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
function isArrayLike(obj) {
  if (obj == null || isWindow(obj)) {
    return false;
  }

  var length = obj.length;

  if (obj.nodeType === 1 && length) {
    return true;
  }

  return isString(obj) || isArray(obj) || length === 0 ||
         typeof length === 'number' && length > 0 && (length - 1) in obj;
}

/**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`
 * is the value of an object property or an array element and `key` is the object property key or
 * array element index. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */
function forEach(obj, iterator, context) {
  var key;
  if (obj) {
    if (isFunction(obj)) {
      for (key in obj) {
        // Need to check if hasOwnProperty exists,
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key);
        }
      }
    } else if (isArray(obj) || isArrayLike(obj)) {
      for (key = 0; key < obj.length; key++) {
        iterator.call(context, obj[key], key);
      }
    } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context);
    } else {
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key);
        }
      }
    }
  }
  return obj;
}

function sortedKeys(obj) {
  var keys = [];
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      keys.push(key);
    }
  }
  return keys.sort();
}

function forEachSorted(obj, iterator, context) {
  var keys = sortedKeys(obj);
  for ( var i = 0; i < keys.length; i++) {
    iterator.call(context, obj[keys[i]], keys[i]);
  }
  return keys;
}


/**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
function reverseParams(iteratorFn) {
  return function(value, key) { iteratorFn(key, value); };
}

/**
 * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric
 * characters such as '012ABC'. The reason why we are not using simply a number counter is that
 * the number string gets longer over time, and it can also overflow, where as the nextId
 * will grow much slower, it is a string, and it will never overflow.
 *
 * @returns {string} an unique alpha-numeric string
 */
function nextUid() {
  var index = uid.length;
  var digit;

  while(index) {
    index--;
    digit = uid[index].charCodeAt(0);
    if (digit == 57 /*'9'*/) {
      uid[index] = 'A';
      return uid.join('');
    }
    if (digit == 90  /*'Z'*/) {
      uid[index] = '0';
    } else {
      uid[index] = String.fromCharCode(digit + 1);
      return uid.join('');
    }
  }
  uid.unshift('0');
  return uid.join('');
}


/**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
function setHashKey(obj, h) {
  if (h) {
    obj.$$hashKey = h;
  }
  else {
    delete obj.$$hashKey;
  }
}

/**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying all of the properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects.
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
function extend(dst) {
  var h = dst.$$hashKey;
  forEach(arguments, function(obj) {
    if (obj !== dst) {
      forEach(obj, function(value, key) {
        dst[key] = value;
      });
    }
  });

  setHashKey(dst,h);
  return dst;
}

function int(str) {
  return parseInt(str, 10);
}


function inherit(parent, extra) {
  return extend(new (extend(function() {}, {prototype:parent}))(), extra);
}

/**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
function noop() {}
noop.$inject = [];


/**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
 */
function identity($) {return $;}
identity.$inject = [];


function valueFn(value) {return function() {return value;};}

/**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
function isUndefined(value){return typeof value === 'undefined';}


/**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
function isDefined(value){return typeof value !== 'undefined';}


/**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
function isObject(value){return value != null && typeof value === 'object';}


/**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
function isString(value){return typeof value === 'string';}


/**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
function isNumber(value){return typeof value === 'number';}


/**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
function isDate(value) {
  return toString.call(value) === '[object Date]';
}


/**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
var isArray = (function() {
  if (!isFunction(Array.isArray)) {
    return function(value) {
      return toString.call(value) === '[object Array]';
    };
  }
  return Array.isArray;
})();

/**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
function isFunction(value){return typeof value === 'function';}


/**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
function isRegExp(value) {
  return toString.call(value) === '[object RegExp]';
}


/**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
function isWindow(obj) {
  return obj && obj.document && obj.location && obj.alert && obj.setInterval;
}


function isScope(obj) {
  return obj && obj.$evalAsync && obj.$watch;
}


function isFile(obj) {
  return toString.call(obj) === '[object File]';
}


function isBlob(obj) {
  return toString.call(obj) === '[object Blob]';
}


function isBoolean(value) {
  return typeof value === 'boolean';
}


function isPromiseLike(obj) {
  return obj && isFunction(obj.then);
}


var trim = (function() {
  // native trim is way faster: http://jsperf.com/angular-trim-test
  // but IE doesn't have it... :-(
  // TODO: we should move this into IE/ES5 polyfill
  if (!String.prototype.trim) {
    return function(value) {
      return isString(value) ? value.replace(/^\s\s*/, '').replace(/\s\s*$/, '') : value;
    };
  }
  return function(value) {
    return isString(value) ? value.trim() : value;
  };
})();


/**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
function isElement(node) {
  return !!(node &&
    (node.nodeName  // we are a direct element
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
}

/**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
function makeMap(str) {
  var obj = {}, items = str.split(","), i;
  for ( i = 0; i < items.length; i++ )
    obj[ items[i] ] = true;
  return obj;
}


if (msie < 9) {
  nodeName_ = function(element) {
    element = element.nodeName ? element : element[0];
    return (element.scopeName && element.scopeName != 'HTML')
      ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;
  };
} else {
  nodeName_ = function(element) {
    return element.nodeName ? element.nodeName : element[0].nodeName;
  };
}


function map(obj, iterator, context) {
  var results = [];
  forEach(obj, function(value, index, list) {
    results.push(iterator.call(context, value, index, list));
  });
  return results;
}


/**
 * @description
 * Determines the number of elements in an array, the number of properties an object has, or
 * the length of a string.
 *
 * Note: This function is used to augment the Object type in Angular expressions. See
 * {@link angular.Object} for more information about Angular arrays.
 *
 * @param {Object|Array|string} obj Object, array, or string to inspect.
 * @param {boolean} [ownPropsOnly=false] Count only "own" properties in an object
 * @returns {number} The size of `obj` or `0` if `obj` is neither an object nor an array.
 */
function size(obj, ownPropsOnly) {
  var count = 0, key;

  if (isArray(obj) || isString(obj)) {
    return obj.length;
  } else if (isObject(obj)) {
    for (key in obj)
      if (!ownPropsOnly || obj.hasOwnProperty(key))
        count++;
  }

  return count;
}


function includes(array, obj) {
  return indexOf(array, obj) != -1;
}

function indexOf(array, obj) {
  if (array.indexOf) return array.indexOf(obj);

  for (var i = 0; i < array.length; i++) {
    if (obj === array[i]) return i;
  }
  return -1;
}

function arrayRemove(array, value) {
  var index = indexOf(array, value);
  if (index >=0)
    array.splice(index, 1);
  return value;
}

function isLeafNode (node) {
  if (node) {
    switch (node.nodeName) {
    case "OPTION":
    case "PRE":
    case "TITLE":
      return true;
    }
  }
  return false;
}

/**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for array) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to 'destination' an exception will be thrown.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
 <example module="copyExample">
 <file name="index.html">
 <div ng-controller="ExampleController">
 <form novalidate class="simple-form">
 Name: <input type="text" ng-model="user.name" /><br />
 E-mail: <input type="email" ng-model="user.email" /><br />
 Gender: <input type="radio" ng-model="user.gender" value="male" />male
 <input type="radio" ng-model="user.gender" value="female" />female<br />
 <button ng-click="reset()">RESET</button>
 <button ng-click="update(user)">SAVE</button>
 </form>
 <pre>form = {{user | json}}</pre>
 <pre>master = {{master | json}}</pre>
 </div>

 <script>
  angular.module('copyExample', [])
    .controller('ExampleController', ['$scope', function($scope) {
      $scope.master= {};

      $scope.update = function(user) {
        // Example with 1 argument
        $scope.master= angular.copy(user);
      };

      $scope.reset = function() {
        // Example with 2 arguments
        angular.copy($scope.master, $scope.user);
      };

      $scope.reset();
    }]);
 </script>
 </file>
 </example>
 */
function copy(source, destination, stackSource, stackDest) {
  if (isWindow(source) || isScope(source)) {
    throw ngMinErr('cpws',
      "Can't copy! Making copies of Window or Scope instances is not supported.");
  }

  if (!destination) {
    destination = source;
    if (source) {
      if (isArray(source)) {
        destination = copy(source, [], stackSource, stackDest);
      } else if (isDate(source)) {
        destination = new Date(source.getTime());
      } else if (isRegExp(source)) {
        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
        destination.lastIndex = source.lastIndex;
      } else if (isObject(source)) {
        destination = copy(source, {}, stackSource, stackDest);
      }
    }
  } else {
    if (source === destination) throw ngMinErr('cpi',
      "Can't copy! Source and destination are identical.");

    stackSource = stackSource || [];
    stackDest = stackDest || [];

    if (isObject(source)) {
      var index = indexOf(stackSource, source);
      if (index !== -1) return stackDest[index];

      stackSource.push(source);
      stackDest.push(destination);
    }

    var result;
    if (isArray(source)) {
      destination.length = 0;
      for ( var i = 0; i < source.length; i++) {
        result = copy(source[i], null, stackSource, stackDest);
        if (isObject(source[i])) {
          stackSource.push(source[i]);
          stackDest.push(result);
        }
        destination.push(result);
      }
    } else {
      var h = destination.$$hashKey;
      if (isArray(destination)) {
        destination.length = 0;
      } else {
        forEach(destination, function(value, key) {
          delete destination[key];
        });
      }
      for ( var key in source) {
        result = copy(source[key], null, stackSource, stackDest);
        if (isObject(source[key])) {
          stackSource.push(source[key]);
          stackDest.push(result);
        }
        destination[key] = result;
      }
      setHashKey(destination,h);
    }

  }
  return destination;
}

/**
 * Creates a shallow copy of an object, an array or a primitive
 */
function shallowCopy(src, dst) {
  if (isArray(src)) {
    dst = dst || [];

    for ( var i = 0; i < src.length; i++) {
      dst[i] = src[i];
    }
  } else if (isObject(src)) {
    dst = dst || {};

    for (var key in src) {
      if (hasOwnProperty.call(src, key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
  }

  return dst || src;
}


/**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
function equals(o1, o2) {
  if (o1 === o2) return true;
  if (o1 === null || o2 === null) return false;
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
  if (t1 == t2) {
    if (t1 == 'object') {
      if (isArray(o1)) {
        if (!isArray(o2)) return false;
        if ((length = o1.length) == o2.length) {
          for(key=0; key<length; key++) {
            if (!equals(o1[key], o2[key])) return false;
          }
          return true;
        }
      } else if (isDate(o1)) {
        if (!isDate(o2)) return false;
        return (isNaN(o1.getTime()) && isNaN(o2.getTime())) || (o1.getTime() === o2.getTime());
      } else if (isRegExp(o1) && isRegExp(o2)) {
        return o1.toString() == o2.toString();
      } else {
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2)) return false;
        keySet = {};
        for(key in o1) {
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
          if (!equals(o1[key], o2[key])) return false;
          keySet[key] = true;
        }
        for(key in o2) {
          if (!keySet.hasOwnProperty(key) &&
              key.charAt(0) !== '$' &&
              o2[key] !== undefined &&
              !isFunction(o2[key])) return false;
        }
        return true;
      }
    }
  }
  return false;
}

var csp = function() {
  if (isDefined(csp.isActive_)) return csp.isActive_;

  var active = !!(document.querySelector('[ng-csp]') ||
                  document.querySelector('[data-ng-csp]'));

  if (!active) {
    try {
      /* jshint -W031, -W054 */
      new Function('');
      /* jshint +W031, +W054 */
    } catch (e) {
      active = true;
    }
  }

  return (csp.isActive_ = active);
};



function concat(array1, array2, index) {
  return array1.concat(slice.call(array2, index));
}

function sliceArgs(args, startIndex) {
  return slice.call(args, startIndex || 0);
}


/* jshint -W101 */
/**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
/* jshint +W101 */
function bind(self, fn) {
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
  if (isFunction(fn) && !(fn instanceof RegExp)) {
    return curryArgs.length
      ? function() {
          return arguments.length
            ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0)))
            : fn.apply(self, curryArgs);
        }
      : function() {
          return arguments.length
            ? fn.apply(self, arguments)
            : fn.call(self);
        };
  } else {
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
    return fn;
  }
}


function toJsonReplacer(key, value) {
  var val = value;

  if (typeof key === 'string' && key.charAt(0) === '$') {
    val = undefined;
  } else if (isWindow(value)) {
    val = '$WINDOW';
  } else if (value &&  document === value) {
    val = '$DOCUMENT';
  } else if (isScope(value)) {
    val = '$SCOPE';
  }

  return val;
}


/**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
function toJson(obj, pretty) {
  if (typeof obj === 'undefined') return undefined;
  return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);
}


/**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized thingy.
 */
function fromJson(json) {
  return isString(json)
      ? JSON.parse(json)
      : json;
}


function toBoolean(value) {
  if (typeof value === 'function') {
    value = true;
  } else if (value && value.length !== 0) {
    var v = lowercase("" + value);
    value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
  } else {
    value = false;
  }
  return value;
}

/**
 * @returns {string} Returns the string representation of the element.
 */
function startingTag(element) {
  element = jqLite(element).clone();
  try {
    // turns out IE does not let you set .html() on elements which
    // are not allowed to have children. So we just ignore it.
    element.empty();
  } catch(e) {}
  // As Per DOM Standards
  var TEXT_NODE = 3;
  var elemHtml = jqLite('<div>').append(element).html();
  try {
    return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
  } catch(e) {
    return lowercase(elemHtml);
  }

}


/////////////////////////////////////////////////

/**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
function tryDecodeURIComponent(value) {
  try {
    return decodeURIComponent(value);
  } catch(e) {
    // Ignore any invalid uri component
  }
}


/**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */
function parseKeyValue(/**string*/keyValue) {
  var obj = {}, key_value, key;
  forEach((keyValue || "").split('&'), function(keyValue) {
    if ( keyValue ) {
      key_value = keyValue.replace(/\+/g,'%20').split('=');
      key = tryDecodeURIComponent(key_value[0]);
      if ( isDefined(key) ) {
        var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
        if (!hasOwnProperty.call(obj, key)) {
          obj[key] = val;
        } else if(isArray(obj[key])) {
          obj[key].push(val);
        } else {
          obj[key] = [obj[key],val];
        }
      }
    }
  });
  return obj;
}

function toKeyValue(obj) {
  var parts = [];
  forEach(obj, function(value, key) {
    if (isArray(value)) {
      forEach(value, function(arrayValue) {
        parts.push(encodeUriQuery(key, true) +
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
      });
    } else {
    parts.push(encodeUriQuery(key, true) +
               (value === true ? '' : '=' + encodeUriQuery(value, true)));
    }
  });
  return parts.length ? parts.join('&') : '';
}


/**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriSegment(val) {
  return encodeUriQuery(val, true).
             replace(/%26/gi, '&').
             replace(/%3D/gi, '=').
             replace(/%2B/gi, '+');
}


/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriQuery(val, pctEncodeSpaces) {
  return encodeURIComponent(val).
             replace(/%40/gi, '@').
             replace(/%3A/gi, ':').
             replace(/%24/g, '$').
             replace(/%2C/gi, ',').
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
}


/**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 * found in the document will be used to define the root element to auto-bootstrap as an
 * application. To run multiple applications in an HTML document you must manually bootstrap them using
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped and
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common, way to bootstrap an application.
 *
 <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 */
function angularInit(element, bootstrap) {
  var elements = [element],
      appElement,
      module,
      names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],
      NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;

  function append(element) {
    element && elements.push(element);
  }

  forEach(names, function(name) {
    names[name] = true;
    append(document.getElementById(name));
    name = name.replace(':', '\\:');
    if (element.querySelectorAll) {
      forEach(element.querySelectorAll('.' + name), append);
      forEach(element.querySelectorAll('.' + name + '\\:'), append);
      forEach(element.querySelectorAll('[' + name + ']'), append);
    }
  });

  forEach(elements, function(element) {
    if (!appElement) {
      var className = ' ' + element.className + ' ';
      var match = NG_APP_CLASS_REGEXP.exec(className);
      if (match) {
        appElement = element;
        module = (match[2] || '').replace(/\s+/g, ',');
      } else {
        forEach(element.attributes, function(attr) {
          if (!appElement && names[attr.name]) {
            appElement = element;
            module = attr.value;
          }
        });
      }
    }
  });
  if (appElement) {
    bootstrap(appElement, module ? [module] : []);
  }
}

/**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that ngScenario-based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * <example name="multi-bootstrap" module="multi-bootstrap">
 * <file name="index.html">
 * <script src="../../../angular.js"></script>
 * <div ng-controller="BrokenTable">
 *   <table>
 *   <tr>
 *     <th ng-repeat="heading in headings">{{heading}}</th>
 *   </tr>
 *   <tr ng-repeat="filling in fillings">
 *     <td ng-repeat="fill in filling">{{fill}}</td>
 *   </tr>
 * </table>
 * </div>
 * </file>
 * <file name="controller.js">
 * var app = angular.module('multi-bootstrap', [])
 *
 * .controller('BrokenTable', function($scope) {
 *     $scope.headings = ['One', 'Two', 'Three'];
 *     $scope.fillings = [[1, 2, 3], ['A', 'B', 'C'], [7, 8, 9]];
 * });
 * </file>
 * <file name="protractor.js" type="protractor">
 * it('should only insert one table cell for each item in $scope.fillings', function() {
 *  expect(element.all(by.css('td')).count())
 *      .toBe(9);
 * });
 * </file>
 * </example>
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a run block.
 *     See: {@link angular.module modules}
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */
function bootstrap(element, modules) {
  var doBootstrap = function() {
    element = jqLite(element);

    if (element.injector()) {
      var tag = (element[0] === document) ? 'document' : startingTag(element);
      //Encode angle brackets to prevent input from being sanitized to empty string #8683
      throw ngMinErr(
          'btstrpd',
          "App Already Bootstrapped with this Element '{0}'",
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
    }

    modules = modules || [];
    modules.unshift(['$provide', function($provide) {
      $provide.value('$rootElement', element);
    }]);
    modules.unshift('ng');
    var injector = createInjector(modules);
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector', '$animate',
       function(scope, element, compile, injector, animate) {
        scope.$apply(function() {
          element.data('$injector', injector);
          compile(element)(scope);
        });
      }]
    );
    return injector;
  };

  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
    return doBootstrap();
  }

  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
  angular.resumeBootstrap = function(extraModules) {
    forEach(extraModules, function(module) {
      modules.push(module);
    });
    doBootstrap();
  };
}

var SNAKE_CASE_REGEXP = /[A-Z]/g;
function snake_case(name, separator) {
  separator = separator || '_';
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
    return (pos ? separator : '') + letter.toLowerCase();
  });
}

function bindJQuery() {
  // bind to jQuery if present;
  jQuery = window.jQuery;
  // Use jQuery if it exists with proper functionality, otherwise default to us.
  // Angular 1.2+ requires jQuery 1.7.1+ for on()/off() support.
  if (jQuery && jQuery.fn.on) {
    jqLite = jQuery;
    extend(jQuery.fn, {
      scope: JQLitePrototype.scope,
      isolateScope: JQLitePrototype.isolateScope,
      controller: JQLitePrototype.controller,
      injector: JQLitePrototype.injector,
      inheritedData: JQLitePrototype.inheritedData
    });
    // Method signature:
    //     jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments)
    jqLitePatchJQueryRemove('remove', true, true, false);
    jqLitePatchJQueryRemove('empty', false, false, false);
    jqLitePatchJQueryRemove('html', false, false, true);
  } else {
    jqLite = JQLite;
  }
  angular.element = jqLite;
}

/**
 * throw error if the argument is falsy.
 */
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function assertArgFn(arg, name, acceptArrayAnnotation) {
  if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
  }

  assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
  return arg;
}

/**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
function assertNotHasOwnProperty(name, context) {
  if (name === 'hasOwnProperty') {
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
  }
}

/**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 */
//TODO(misko): this function needs to be removed
function getter(obj, path, bindFnToScope) {
  if (!path) return obj;
  var keys = path.split('.');
  var key;
  var lastInstance = obj;
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    key = keys[i];
    if (obj) {
      obj = (lastInstance = obj)[key];
    }
  }
  if (!bindFnToScope && isFunction(obj)) {
    return bind(lastInstance, obj);
  }
  return obj;
}

/**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {DOMElement} object containing the elements
 */
function getBlockElements(nodes) {
  var startNode = nodes[0],
      endNode = nodes[nodes.length - 1];
  if (startNode === endNode) {
    return jqLite(startNode);
  }

  var element = startNode;
  var elements = [element];

  do {
    element = element.nextSibling;
    if (!element) break;
    elements.push(element);
  } while (element !== endNode);

  return jqLite(elements);
}

/**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */

function setupModuleLoader(window) {

  var $injectorMinErr = minErr('$injector');
  var ngMinErr = minErr('ng');

  function ensure(obj, name, factory) {
    return obj[name] || (obj[name] = factory());
  }

  var angular = ensure(window, 'angular', Object);

  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
  angular.$$minErr = angular.$$minErr || minErr;

  return ensure(angular, 'module', function() {
    /** @type {Object.<string, angular.Module>} */
    var modules = {};

    /**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * When passed two or more arguments, a new module is created.  If passed only one argument, an
     * existing module (the name passed as the first argument to `module`) is retrieved.
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {module} new module with the {@link angular.Module} api.
     */
    return function module(name, requires, configFn) {
      var assertNotHasOwnProperty = function(name, context) {
        if (name === 'hasOwnProperty') {
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
        }
      };

      assertNotHasOwnProperty(name, 'module');
      if (requires && modules.hasOwnProperty(name)) {
        modules[name] = null;
      }
      return ensure(modules, name, function() {
        if (!requires) {
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
             "the module name or forgot to load it. If registering a module ensure that you " +
             "specify the dependencies as the second argument.", name);
        }

        /** @type {!Array.<Array.<*>>} */
        var invokeQueue = [];

        /** @type {!Array.<Function>} */
        var runBlocks = [];

        var config = invokeLater('$injector', 'invoke');

        /** @type {angular.Module} */
        var moduleInstance = {
          // Private state
          _invokeQueue: invokeQueue,
          _runBlocks: runBlocks,

          /**
           * @ngdoc property
           * @name angular.Module#requires
           * @module ng
           *
           * @description
           * Holds the list of modules which the injector will load before the current module is
           * loaded.
           */
          requires: requires,

          /**
           * @ngdoc property
           * @name angular.Module#name
           * @module ng
           *
           * @description
           * Name of the module.
           */
          name: name,


          /**
           * @ngdoc method
           * @name angular.Module#provider
           * @module ng
           * @param {string} name service name
           * @param {Function} providerType Construction function for creating new instance of the
           *                                service.
           * @description
           * See {@link auto.$provide#provider $provide.provider()}.
           */
          provider: invokeLater('$provide', 'provider'),

          /**
           * @ngdoc method
           * @name angular.Module#factory
           * @module ng
           * @param {string} name service name
           * @param {Function} providerFunction Function for creating new instance of the service.
           * @description
           * See {@link auto.$provide#factory $provide.factory()}.
           */
          factory: invokeLater('$provide', 'factory'),

          /**
           * @ngdoc method
           * @name angular.Module#service
           * @module ng
           * @param {string} name service name
           * @param {Function} constructor A constructor function that will be instantiated.
           * @description
           * See {@link auto.$provide#service $provide.service()}.
           */
          service: invokeLater('$provide', 'service'),

          /**
           * @ngdoc method
           * @name angular.Module#value
           * @module ng
           * @param {string} name service name
           * @param {*} object Service instance object.
           * @description
           * See {@link auto.$provide#value $provide.value()}.
           */
          value: invokeLater('$provide', 'value'),

          /**
           * @ngdoc method
           * @name angular.Module#constant
           * @module ng
           * @param {string} name constant name
           * @param {*} object Constant value.
           * @description
           * Because the constant are fixed, they get applied before other provide methods.
           * See {@link auto.$provide#constant $provide.constant()}.
           */
          constant: invokeLater('$provide', 'constant', 'unshift'),

          /**
           * @ngdoc method
           * @name angular.Module#animation
           * @module ng
           * @param {string} name animation name
           * @param {Function} animationFactory Factory function for creating new instance of an
           *                                    animation.
           * @description
           *
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
           *
           *
           * Defines an animation hook that can be later used with
           * {@link ngAnimate.$animate $animate} service and directives that use this service.
           *
           * ```js
           * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
           * ```
           *
           * See {@link ngAnimate.$animateProvider#register $animateProvider.register()} and
           * {@link ngAnimate ngAnimate module} for more information.
           */
          animation: invokeLater('$animateProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#filter
           * @module ng
           * @param {string} name Filter name.
           * @param {Function} filterFactory Factory function for creating new instance of filter.
           * @description
           * See {@link ng.$filterProvider#register $filterProvider.register()}.
           */
          filter: invokeLater('$filterProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#controller
           * @module ng
           * @param {string|Object} name Controller name, or an object map of controllers where the
           *    keys are the names and the values are the constructors.
           * @param {Function} constructor Controller constructor function.
           * @description
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
           */
          controller: invokeLater('$controllerProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#directive
           * @module ng
           * @param {string|Object} name Directive name, or an object map of directives where the
           *    keys are the names and the values are the factories.
           * @param {Function} directiveFactory Factory function for creating new instance of
           * directives.
           * @description
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
           */
          directive: invokeLater('$compileProvider', 'directive'),

          /**
           * @ngdoc method
           * @name angular.Module#config
           * @module ng
           * @param {Function} configFn Execute this function on module load. Useful for service
           *    configuration.
           * @description
           * Use this method to register work which needs to be performed on module loading.
           * For more about how to configure services, see
           * {@link providers#providers_provider-recipe Provider Recipe}.
           */
          config: config,

          /**
           * @ngdoc method
           * @name angular.Module#run
           * @module ng
           * @param {Function} initializationFn Execute this function after injector creation.
           *    Useful for application initialization.
           * @description
           * Use this method to register work which should be performed when the injector is done
           * loading all modules.
           */
          run: function(block) {
            runBlocks.push(block);
            return this;
          }
        };

        if (configFn) {
          config(configFn);
        }

        return  moduleInstance;

        /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
        function invokeLater(provider, method, insertMethod) {
          return function() {
            invokeQueue[insertMethod || 'push']([provider, method, arguments]);
            return moduleInstance;
          };
        }
      });
    };
  });

}

/* global angularModule: true,
  version: true,

  $LocaleProvider,
  $CompileProvider,

    htmlAnchorDirective,
    inputDirective,
    inputDirective,
    formDirective,
    scriptDirective,
    selectDirective,
    styleDirective,
    optionDirective,
    ngBindDirective,
    ngBindHtmlDirective,
    ngBindTemplateDirective,
    ngClassDirective,
    ngClassEvenDirective,
    ngClassOddDirective,
    ngCspDirective,
    ngCloakDirective,
    ngControllerDirective,
    ngFormDirective,
    ngHideDirective,
    ngIfDirective,
    ngIncludeDirective,
    ngIncludeFillContentDirective,
    ngInitDirective,
    ngNonBindableDirective,
    ngPluralizeDirective,
    ngRepeatDirective,
    ngShowDirective,
    ngStyleDirective,
    ngSwitchDirective,
    ngSwitchWhenDirective,
    ngSwitchDefaultDirective,
    ngOptionsDirective,
    ngTranscludeDirective,
    ngModelDirective,
    ngListDirective,
    ngChangeDirective,
    requiredDirective,
    requiredDirective,
    ngValueDirective,
    ngAttributeAliasDirectives,
    ngEventDirectives,

    $AnchorScrollProvider,
    $AnimateProvider,
    $BrowserProvider,
    $CacheFactoryProvider,
    $ControllerProvider,
    $DocumentProvider,
    $ExceptionHandlerProvider,
    $FilterProvider,
    $InterpolateProvider,
    $IntervalProvider,
    $HttpProvider,
    $HttpBackendProvider,
    $LocationProvider,
    $LogProvider,
    $ParseProvider,
    $RootScopeProvider,
    $QProvider,
    $$SanitizeUriProvider,
    $SceProvider,
    $SceDelegateProvider,
    $SnifferProvider,
    $TemplateCacheProvider,
    $TimeoutProvider,
    $$RAFProvider,
    $$AsyncCallbackProvider,
    $WindowProvider
*/


/**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version. This object has the
 * following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
var version = {
  full: '1.2.23',    // all of these placeholder strings will be replaced by grunt's
  major: 1,    // package task
  minor: 2,
  dot: 23,
  codeName: 'superficial-malady'
};


function publishExternalAPI(angular){
  extend(angular, {
    'bootstrap': bootstrap,
    'copy': copy,
    'extend': extend,
    'equals': equals,
    'element': jqLite,
    'forEach': forEach,
    'injector': createInjector,
    'noop': noop,
    'bind': bind,
    'toJson': toJson,
    'fromJson': fromJson,
    'identity': identity,
    'isUndefined': isUndefined,
    'isDefined': isDefined,
    'isString': isString,
    'isFunction': isFunction,
    'isObject': isObject,
    'isNumber': isNumber,
    'isElement': isElement,
    'isArray': isArray,
    'version': version,
    'isDate': isDate,
    'lowercase': lowercase,
    'uppercase': uppercase,
    'callbacks': {counter: 0},
    '$$minErr': minErr,
    '$$csp': csp
  });

  angularModule = setupModuleLoader(window);
  try {
    angularModule('ngLocale');
  } catch (e) {
    angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
  }

  angularModule('ng', ['ngLocale'], ['$provide',
    function ngModule($provide) {
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
      $provide.provider({
        $$sanitizeUri: $$SanitizeUriProvider
      });
      $provide.provider('$compile', $CompileProvider).
        directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            ngValue: ngValueDirective
        }).
        directive({
          ngInclude: ngIncludeFillContentDirective
        }).
        directive(ngAttributeAliasDirectives).
        directive(ngEventDirectives);
      $provide.provider({
        $anchorScroll: $AnchorScrollProvider,
        $animate: $AnimateProvider,
        $browser: $BrowserProvider,
        $cacheFactory: $CacheFactoryProvider,
        $controller: $ControllerProvider,
        $document: $DocumentProvider,
        $exceptionHandler: $ExceptionHandlerProvider,
        $filter: $FilterProvider,
        $interpolate: $InterpolateProvider,
        $interval: $IntervalProvider,
        $http: $HttpProvider,
        $httpBackend: $HttpBackendProvider,
        $location: $LocationProvider,
        $log: $LogProvider,
        $parse: $ParseProvider,
        $rootScope: $RootScopeProvider,
        $q: $QProvider,
        $sce: $SceProvider,
        $sceDelegate: $SceDelegateProvider,
        $sniffer: $SnifferProvider,
        $templateCache: $TemplateCacheProvider,
        $timeout: $TimeoutProvider,
        $window: $WindowProvider,
        $$rAF: $$RAFProvider,
        $$asyncCallback : $$AsyncCallbackProvider
      });
    }
  ]);
}

/* global JQLitePrototype: true,
  addEventListenerFn: true,
  removeEventListenerFn: true,
  BOOLEAN_ATTR: true
*/

//////////////////////////////////
//JQLite
//////////////////////////////////

/**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
 *
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
 * commonly needed functionality with the goal of having a very small footprint.</div>
 *
 * To use jQuery, simply load it before `DOMContentLoaded` event fired.
 *
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
 * jqLite; they are never raw DOM references.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/)
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/)
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/)
 * - [`data()`](http://api.jquery.com/data/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
 * - [`removeClass()`](http://api.jquery.com/removeClass/)
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */

JQLite.expando = 'ng339';

var jqCache = JQLite.cache = {},
    jqId = 1,
    addEventListenerFn = (window.document.addEventListener
      ? function(element, type, fn) {element.addEventListener(type, fn, false);}
      : function(element, type, fn) {element.attachEvent('on' + type, fn);}),
    removeEventListenerFn = (window.document.removeEventListener
      ? function(element, type, fn) {element.removeEventListener(type, fn, false); }
      : function(element, type, fn) {element.detachEvent('on' + type, fn); });

/*
 * !!! This is an undocumented "private" function !!!
 */
var jqData = JQLite._data = function(node) {
  //jQuery always returns an object on cache miss
  return this.cache[node[this.expando]] || {};
};

function jqNextId() { return ++jqId; }


var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var jqLiteMinErr = minErr('jqLite');

/**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function camelCase(name) {
  return name.
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).
    replace(MOZ_HACK_REGEXP, 'Moz$1');
}

/////////////////////////////////////////////
// jQuery mutation patch
//
// In conjunction with bindJQuery intercepts all jQuery's DOM destruction apis and fires a
// $destroy event on all DOM nodes being removed.
//
/////////////////////////////////////////////

function jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments) {
  var originalJqFn = jQuery.fn[name];
  originalJqFn = originalJqFn.$original || originalJqFn;
  removePatch.$original = originalJqFn;
  jQuery.fn[name] = removePatch;

  function removePatch(param) {
    // jshint -W040
    var list = filterElems && param ? [this.filter(param)] : [this],
        fireEvent = dispatchThis,
        set, setIndex, setLength,
        element, childIndex, childLength, children;

    if (!getterIfNoArguments || param != null) {
      while(list.length) {
        set = list.shift();
        for(setIndex = 0, setLength = set.length; setIndex < setLength; setIndex++) {
          element = jqLite(set[setIndex]);
          if (fireEvent) {
            element.triggerHandler('$destroy');
          } else {
            fireEvent = !fireEvent;
          }
          for(childIndex = 0, childLength = (children = element.children()).length;
              childIndex < childLength;
              childIndex++) {
            list.push(jQuery(children[childIndex]));
          }
        }
      }
    }
    return originalJqFn.apply(this, arguments);
  }
}

var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
var HTML_REGEXP = /<|&#?\w+;/;
var TAG_NAME_REGEXP = /<([\w:]+)/;
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;

var wrapMap = {
  'option': [1, '<select multiple="multiple">', '</select>'],

  'thead': [1, '<table>', '</table>'],
  'col': [2, '<table><colgroup>', '</colgroup></table>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  '_default': [0, "", ""]
};

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function jqLiteIsTextNode(html) {
  return !HTML_REGEXP.test(html);
}

function jqLiteBuildFragment(html, context) {
  var elem, tmp, tag, wrap,
      fragment = context.createDocumentFragment(),
      nodes = [], i, j, jj;

  if (jqLiteIsTextNode(html)) {
    // Convert non-html into a text node
    nodes.push(context.createTextNode(html));
  } else {
    tmp = fragment.appendChild(context.createElement('div'));
    // Convert html into DOM nodes
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
    wrap = wrapMap[tag] || wrapMap._default;
    tmp.innerHTML = '<div>&#160;</div>' +
      wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];
    tmp.removeChild(tmp.firstChild);

    // Descend through wrappers to the right content
    i = wrap[0];
    while (i--) {
      tmp = tmp.lastChild;
    }

    for (j=0, jj=tmp.childNodes.length; j<jj; ++j) nodes.push(tmp.childNodes[j]);

    tmp = fragment.firstChild;
    tmp.textContent = "";
  }

  // Remove wrapper from fragment
  fragment.textContent = "";
  fragment.innerHTML = ""; // Clear inner HTML
  return nodes;
}

function jqLiteParseHTML(html, context) {
  context = context || document;
  var parsed;

  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
    return [context.createElement(parsed[1])];
  }

  return jqLiteBuildFragment(html, context);
}

/////////////////////////////////////////////
function JQLite(element) {
  if (element instanceof JQLite) {
    return element;
  }
  if (isString(element)) {
    element = trim(element);
  }
  if (!(this instanceof JQLite)) {
    if (isString(element) && element.charAt(0) != '<') {
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }
    return new JQLite(element);
  }

  if (isString(element)) {
    jqLiteAddNodes(this, jqLiteParseHTML(element));
    var fragment = jqLite(document.createDocumentFragment());
    fragment.append(this);
  } else {
    jqLiteAddNodes(this, element);
  }
}

function jqLiteClone(element) {
  return element.cloneNode(true);
}

function jqLiteDealoc(element){
  jqLiteRemoveData(element);
  for ( var i = 0, children = element.childNodes || []; i < children.length; i++) {
    jqLiteDealoc(children[i]);
  }
}

function jqLiteOff(element, type, fn, unsupported) {
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

  var events = jqLiteExpandoStore(element, 'events'),
      handle = jqLiteExpandoStore(element, 'handle');

  if (!handle) return; //no listeners registered

  if (isUndefined(type)) {
    forEach(events, function(eventHandler, type) {
      removeEventListenerFn(element, type, eventHandler);
      delete events[type];
    });
  } else {
    forEach(type.split(' '), function(type) {
      if (isUndefined(fn)) {
        removeEventListenerFn(element, type, events[type]);
        delete events[type];
      } else {
        arrayRemove(events[type] || [], fn);
      }
    });
  }
}

function jqLiteRemoveData(element, name) {
  var expandoId = element.ng339,
      expandoStore = jqCache[expandoId];

  if (expandoStore) {
    if (name) {
      delete jqCache[expandoId].data[name];
      return;
    }

    if (expandoStore.handle) {
      expandoStore.events.$destroy && expandoStore.handle({}, '$destroy');
      jqLiteOff(element);
    }
    delete jqCache[expandoId];
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
  }
}

function jqLiteExpandoStore(element, key, value) {
  var expandoId = element.ng339,
      expandoStore = jqCache[expandoId || -1];

  if (isDefined(value)) {
    if (!expandoStore) {
      element.ng339 = expandoId = jqNextId();
      expandoStore = jqCache[expandoId] = {};
    }
    expandoStore[key] = value;
  } else {
    return expandoStore && expandoStore[key];
  }
}

function jqLiteData(element, key, value) {
  var data = jqLiteExpandoStore(element, 'data'),
      isSetter = isDefined(value),
      keyDefined = !isSetter && isDefined(key),
      isSimpleGetter = keyDefined && !isObject(key);

  if (!data && !isSimpleGetter) {
    jqLiteExpandoStore(element, 'data', data = {});
  }

  if (isSetter) {
    data[key] = value;
  } else {
    if (keyDefined) {
      if (isSimpleGetter) {
        // don't create data in this case.
        return data && data[key];
      } else {
        extend(data, key);
      }
    } else {
      return data;
    }
  }
}

function jqLiteHasClass(element, selector) {
  if (!element.getAttribute) return false;
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
      indexOf( " " + selector + " " ) > -1);
}

function jqLiteRemoveClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    forEach(cssClasses.split(' '), function(cssClass) {
      element.setAttribute('class', trim(
          (" " + (element.getAttribute('class') || '') + " ")
          .replace(/[\n\t]/g, " ")
          .replace(" " + trim(cssClass) + " ", " "))
      );
    });
  }
}

function jqLiteAddClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
                            .replace(/[\n\t]/g, " ");

    forEach(cssClasses.split(' '), function(cssClass) {
      cssClass = trim(cssClass);
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
        existingClasses += cssClass + ' ';
      }
    });

    element.setAttribute('class', trim(existingClasses));
  }
}

function jqLiteAddNodes(root, elements) {
  if (elements) {
    elements = (!elements.nodeName && isDefined(elements.length) && !isWindow(elements))
      ? elements
      : [ elements ];
    for(var i=0; i < elements.length; i++) {
      root.push(elements[i]);
    }
  }
}

function jqLiteController(element, name) {
  return jqLiteInheritedData(element, '$' + (name || 'ngController' ) + 'Controller');
}

function jqLiteInheritedData(element, name, value) {
  // if element is the document object work with the html element instead
  // this makes $(document).scope() possible
  if(element.nodeType == 9) {
    element = element.documentElement;
  }
  var names = isArray(name) ? name : [name];

  while (element) {
    for (var i = 0, ii = names.length; i < ii; i++) {
      if ((value = jqLite.data(element, names[i])) !== undefined) return value;
    }

    // If dealing with a document fragment node with a host element, and no parent, use the host
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
    // to lookup parent controllers.
    element = element.parentNode || (element.nodeType === 11 && element.host);
  }
}

function jqLiteEmpty(element) {
  for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
    jqLiteDealoc(childNodes[i]);
  }
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
var JQLitePrototype = JQLite.prototype = {
  ready: function(fn) {
    var fired = false;

    function trigger() {
      if (fired) return;
      fired = true;
      fn();
    }

    // check if document already is loaded
    if (document.readyState === 'complete'){
      setTimeout(trigger);
    } else {
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
      // jshint -W064
      JQLite(window).on('load', trigger); // fallback to window.onload for others
      // jshint +W064
    }
  },
  toString: function() {
    var value = [];
    forEach(this, function(e){ value.push('' + e);});
    return '[' + value.join(', ') + ']';
  },

  eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
  },

  length: 0,
  push: push,
  sort: [].sort,
  splice: [].splice
};

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
var BOOLEAN_ATTR = {};
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
  BOOLEAN_ATTR[lowercase(value)] = value;
});
var BOOLEAN_ELEMENTS = {};
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
  BOOLEAN_ELEMENTS[uppercase(value)] = true;
});

function getBooleanAttrName(element, name) {
  // check dom last since we will most likely fail on name
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

  // booleanAttr is here twice to minimize DOM access
  return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;
}

forEach({
  data: jqLiteData,
  removeData: jqLiteRemoveData
}, function(fn, name) {
  JQLite[name] = fn;
});

forEach({
  data: jqLiteData,
  inheritedData: jqLiteInheritedData,

  scope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },

  isolateScope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
  },

  controller: jqLiteController,

  injector: function(element) {
    return jqLiteInheritedData(element, '$injector');
  },

  removeAttr: function(element,name) {
    element.removeAttribute(name);
  },

  hasClass: jqLiteHasClass,

  css: function(element, name, value) {
    name = camelCase(name);

    if (isDefined(value)) {
      element.style[name] = value;
    } else {
      var val;

      if (msie <= 8) {
        // this is some IE specific weirdness that jQuery 1.6.4 does not sure why
        val = element.currentStyle && element.currentStyle[name];
        if (val === '') val = 'auto';
      }

      val = val || element.style[name];

      if (msie <= 8) {
        // jquery weirdness :-/
        val = (val === '') ? undefined : val;
      }

      return  val;
    }
  },

  attr: function(element, name, value){
    var lowercasedName = lowercase(name);
    if (BOOLEAN_ATTR[lowercasedName]) {
      if (isDefined(value)) {
        if (!!value) {
          element[name] = true;
          element.setAttribute(name, lowercasedName);
        } else {
          element[name] = false;
          element.removeAttribute(lowercasedName);
        }
      } else {
        return (element[name] ||
                 (element.attributes.getNamedItem(name)|| noop).specified)
               ? lowercasedName
               : undefined;
      }
    } else if (isDefined(value)) {
      element.setAttribute(name, value);
    } else if (element.getAttribute) {
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
      // some elements (e.g. Document) don't have get attribute, so return undefined
      var ret = element.getAttribute(name, 2);
      // normalize non-existing attributes to undefined (as jQuery)
      return ret === null ? undefined : ret;
    }
  },

  prop: function(element, name, value) {
    if (isDefined(value)) {
      element[name] = value;
    } else {
      return element[name];
    }
  },

  text: (function() {
    var NODE_TYPE_TEXT_PROPERTY = [];
    if (msie < 9) {
      NODE_TYPE_TEXT_PROPERTY[1] = 'innerText';    /** Element **/
      NODE_TYPE_TEXT_PROPERTY[3] = 'nodeValue';    /** Text **/
    } else {
      NODE_TYPE_TEXT_PROPERTY[1] =                 /** Element **/
      NODE_TYPE_TEXT_PROPERTY[3] = 'textContent';  /** Text **/
    }
    getText.$dv = '';
    return getText;

    function getText(element, value) {
      var textProp = NODE_TYPE_TEXT_PROPERTY[element.nodeType];
      if (isUndefined(value)) {
        return textProp ? element[textProp] : '';
      }
      element[textProp] = value;
    }
  })(),

  val: function(element, value) {
    if (isUndefined(value)) {
      if (nodeName_(element) === 'SELECT' && element.multiple) {
        var result = [];
        forEach(element.options, function (option) {
          if (option.selected) {
            result.push(option.value || option.text);
          }
        });
        return result.length === 0 ? null : result;
      }
      return element.value;
    }
    element.value = value;
  },

  html: function(element, value) {
    if (isUndefined(value)) {
      return element.innerHTML;
    }
    for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
      jqLiteDealoc(childNodes[i]);
    }
    element.innerHTML = value;
  },

  empty: jqLiteEmpty
}, function(fn, name){
  /**
   * Properties: writes return selection, reads return first value
   */
  JQLite.prototype[name] = function(arg1, arg2) {
    var i, key;
    var nodeCount = this.length;

    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
    // in a way that survives minification.
    // jqLiteEmpty takes no arguments but is a setter.
    if (fn !== jqLiteEmpty &&
        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {
      if (isObject(arg1)) {

        // we are a write, but the object properties are the key/values
        for (i = 0; i < nodeCount; i++) {
          if (fn === jqLiteData) {
            // data() takes the whole object in jQuery
            fn(this[i], arg1);
          } else {
            for (key in arg1) {
              fn(this[i], key, arg1[key]);
            }
          }
        }
        // return self for chaining
        return this;
      } else {
        // we are a read, so read the first child.
        // TODO: do we still need this?
        var value = fn.$dv;
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
        var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;
        for (var j = 0; j < jj; j++) {
          var nodeValue = fn(this[j], arg1, arg2);
          value = value ? value + nodeValue : nodeValue;
        }
        return value;
      }
    } else {
      // we are a write, so apply to all children
      for (i = 0; i < nodeCount; i++) {
        fn(this[i], arg1, arg2);
      }
      // return self for chaining
      return this;
    }
  };
});

function createEventHandler(element, events) {
  var eventHandler = function (event, type) {
    if (!event.preventDefault) {
      event.preventDefault = function() {
        event.returnValue = false; //ie
      };
    }

    if (!event.stopPropagation) {
      event.stopPropagation = function() {
        event.cancelBubble = true; //ie
      };
    }

    if (!event.target) {
      event.target = event.srcElement || document;
    }

    if (isUndefined(event.defaultPrevented)) {
      var prevent = event.preventDefault;
      event.preventDefault = function() {
        event.defaultPrevented = true;
        prevent.call(event);
      };
      event.defaultPrevented = false;
    }

    event.isDefaultPrevented = function() {
      return event.defaultPrevented || event.returnValue === false;
    };

    // Copy event handlers in case event handlers array is modified during execution.
    var eventHandlersCopy = shallowCopy(events[type || event.type] || []);

    forEach(eventHandlersCopy, function(fn) {
      fn.call(element, event);
    });

    // Remove monkey-patched methods (IE),
    // as they would cause memory leaks in IE8.
    if (msie <= 8) {
      // IE7/8 does not allow to delete property on native object
      event.preventDefault = null;
      event.stopPropagation = null;
      event.isDefaultPrevented = null;
    } else {
      // It shouldn't affect normal browsers (native methods are defined on prototype).
      delete event.preventDefault;
      delete event.stopPropagation;
      delete event.isDefaultPrevented;
    }
  };
  eventHandler.elem = element;
  return eventHandler;
}

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
forEach({
  removeData: jqLiteRemoveData,

  dealoc: jqLiteDealoc,

  on: function onFn(element, type, fn, unsupported){
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

    var events = jqLiteExpandoStore(element, 'events'),
        handle = jqLiteExpandoStore(element, 'handle');

    if (!events) jqLiteExpandoStore(element, 'events', events = {});
    if (!handle) jqLiteExpandoStore(element, 'handle', handle = createEventHandler(element, events));

    forEach(type.split(' '), function(type){
      var eventFns = events[type];

      if (!eventFns) {
        if (type == 'mouseenter' || type == 'mouseleave') {
          var contains = document.body.contains || document.body.compareDocumentPosition ?
          function( a, b ) {
            // jshint bitwise: false
            var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
            return a === bup || !!( bup && bup.nodeType === 1 && (
              adown.contains ?
              adown.contains( bup ) :
              a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
              ));
            } :
            function( a, b ) {
              if ( b ) {
                while ( (b = b.parentNode) ) {
                  if ( b === a ) {
                    return true;
                  }
                }
              }
              return false;
            };

          events[type] = [];

          // Refer to jQuery's implementation of mouseenter & mouseleave
          // Read about mouseenter and mouseleave:
          // http://www.quirksmode.org/js/events_mouse.html#link8
          var eventmap = { mouseleave : "mouseout", mouseenter : "mouseover"};

          onFn(element, eventmap[type], function(event) {
            var target = this, related = event.relatedTarget;
            // For mousenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if ( !related || (related !== target && !contains(target, related)) ){
              handle(event, type);
            }
          });

        } else {
          addEventListenerFn(element, type, handle);
          events[type] = [];
        }
        eventFns = events[type];
      }
      eventFns.push(fn);
    });
  },

  off: jqLiteOff,

  one: function(element, type, fn) {
    element = jqLite(element);

    //add the listener twice so that when it is called
    //you can remove the original function and still be
    //able to call element.off(ev, fn) normally
    element.on(type, function onFn() {
      element.off(type, fn);
      element.off(type, onFn);
    });
    element.on(type, fn);
  },

  replaceWith: function(element, replaceNode) {
    var index, parent = element.parentNode;
    jqLiteDealoc(element);
    forEach(new JQLite(replaceNode), function(node){
      if (index) {
        parent.insertBefore(node, index.nextSibling);
      } else {
        parent.replaceChild(node, element);
      }
      index = node;
    });
  },

  children: function(element) {
    var children = [];
    forEach(element.childNodes, function(element){
      if (element.nodeType === 1)
        children.push(element);
    });
    return children;
  },

  contents: function(element) {
    return element.contentDocument || element.childNodes || [];
  },

  append: function(element, node) {
    forEach(new JQLite(node), function(child){
      if (element.nodeType === 1 || element.nodeType === 11) {
        element.appendChild(child);
      }
    });
  },

  prepend: function(element, node) {
    if (element.nodeType === 1) {
      var index = element.firstChild;
      forEach(new JQLite(node), function(child){
        element.insertBefore(child, index);
      });
    }
  },

  wrap: function(element, wrapNode) {
    wrapNode = jqLite(wrapNode)[0];
    var parent = element.parentNode;
    if (parent) {
      parent.replaceChild(wrapNode, element);
    }
    wrapNode.appendChild(element);
  },

  remove: function(element) {
    jqLiteDealoc(element);
    var parent = element.parentNode;
    if (parent) parent.removeChild(element);
  },

  after: function(element, newElement) {
    var index = element, parent = element.parentNode;
    forEach(new JQLite(newElement), function(node){
      parent.insertBefore(node, index.nextSibling);
      index = node;
    });
  },

  addClass: jqLiteAddClass,
  removeClass: jqLiteRemoveClass,

  toggleClass: function(element, selector, condition) {
    if (selector) {
      forEach(selector.split(' '), function(className){
        var classCondition = condition;
        if (isUndefined(classCondition)) {
          classCondition = !jqLiteHasClass(element, className);
        }
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
      });
    }
  },

  parent: function(element) {
    var parent = element.parentNode;
    return parent && parent.nodeType !== 11 ? parent : null;
  },

  next: function(element) {
    if (element.nextElementSibling) {
      return element.nextElementSibling;
    }

    // IE8 doesn't have nextElementSibling
    var elm = element.nextSibling;
    while (elm != null && elm.nodeType !== 1) {
      elm = elm.nextSibling;
    }
    return elm;
  },

  find: function(element, selector) {
    if (element.getElementsByTagName) {
      return element.getElementsByTagName(selector);
    } else {
      return [];
    }
  },

  clone: jqLiteClone,

  triggerHandler: function(element, event, extraParameters) {

    var dummyEvent, eventFnsCopy, handlerArgs;
    var eventName = event.type || event;
    var eventFns = (jqLiteExpandoStore(element, 'events') || {})[eventName];

    if (eventFns) {

      // Create a dummy event to pass to the handlers
      dummyEvent = {
        preventDefault: function() { this.defaultPrevented = true; },
        isDefaultPrevented: function() { return this.defaultPrevented === true; },
        stopPropagation: noop,
        type: eventName,
        target: element
      };

      // If a custom event was provided then extend our dummy event with it
      if (event.type) {
        dummyEvent = extend(dummyEvent, event);
      }

      // Copy event handlers in case event handlers array is modified during execution.
      eventFnsCopy = shallowCopy(eventFns);
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

      forEach(eventFnsCopy, function(fn) {
        fn.apply(element, handlerArgs);
      });

    }
  }
}, function(fn, name){
  /**
   * chaining functions
   */
  JQLite.prototype[name] = function(arg1, arg2, arg3) {
    var value;
    for(var i=0; i < this.length; i++) {
      if (isUndefined(value)) {
        value = fn(this[i], arg1, arg2, arg3);
        if (isDefined(value)) {
          // any function which returns a value needs to be wrapped
          value = jqLite(value);
        }
      } else {
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
      }
    }
    return isDefined(value) ? value : this;
  };

  // bind legacy bind/unbind to on/off
  JQLite.prototype.bind = JQLite.prototype.on;
  JQLite.prototype.unbind = JQLite.prototype.off;
});

/**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
function hashKey(obj, nextUidFn) {
  var objType = typeof obj,
      key;

  if (objType == 'function' || (objType == 'object' && obj !== null)) {
    if (typeof (key = obj.$$hashKey) == 'function') {
      // must invoke on object to keep the right this
      key = obj.$$hashKey();
    } else if (key === undefined) {
      key = obj.$$hashKey = (nextUidFn || nextUid)();
    }
  } else {
    key = obj;
  }

  return objType + ':' + key;
}

/**
 * HashMap which can use objects as keys
 */
function HashMap(array, isolatedUid) {
  if (isolatedUid) {
    var uid = 0;
    this.nextUid = function() {
      return ++uid;
    };
  }
  forEach(array, this.put, this);
}
HashMap.prototype = {
  /**
   * Store key value pair
   * @param key key to store can be any type
   * @param value value to store can be any type
   */
  put: function(key, value) {
    this[hashKey(key, this.nextUid)] = value;
  },

  /**
   * @param key
   * @returns {Object} the value for the key
   */
  get: function(key) {
    return this[hashKey(key, this.nextUid)];
  },

  /**
   * Remove the key/value pair
   * @param key
   */
  remove: function(key) {
    var value = this[key = hashKey(key, this.nextUid)];
    delete this[key];
    return value;
  }
};

/**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector function that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *

 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *        {@link angular.module}. The `ng` module must be explicitly added.
 * @returns {function()} Injector function. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document){
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 */


/**
 * @ngdoc module
 * @name auto
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */

var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var $injectorMinErr = minErr('$injector');
function annotate(fn) {
  var $inject,
      fnText,
      argDecl,
      last;

  if (typeof fn === 'function') {
    if (!($inject = fn.$inject)) {
      $inject = [];
      if (fn.length) {
        fnText = fn.toString().replace(STRIP_COMMENTS, '');
        argDecl = fnText.match(FN_ARGS);
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg){
          arg.replace(FN_ARG, function(all, underscore, name){
            $inject.push(name);
          });
        });
      }
      fn.$inject = $inject;
    }
  } else if (isArray(fn)) {
    last = fn.length - 1;
    assertArgFn(fn[last], 'fn');
    $inject = fn.slice(0, last);
  } else {
    assertArgFn(fn, 'fn', true);
  }
  return $inject;
}

///////////////////////////////////////

/**
 * @ngdoc service
 * @name $injector
 * @kind function
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector){
 *     return $injector;
 *   }).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. *NOTE:* This does not work with
 * minification, and obfuscation tools since these tools change the argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */

/**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @return {*} The instance.
 */

/**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {!Function} fn The function to invoke. Function parameters are injected according to the
 *   {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */

/**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} Name of the service to query.
 * @returns {boolean} returns true if injector has given service.
 */

/**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */

/**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */




/**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 *
 * See the individual methods for more information and examples.
 */

/**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */

/**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand
 *                            for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is the service
 * constructor function that will be used to instantiate the service instance.
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function} constructor A class (constructor function) that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function.  This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular
 * {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service**, such as a string, a number, an array, an object or a function,
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
 * service. The object returned by the decorator may be the original service, or a new service
 * object which replaces or wraps and delegates to the original service.
 *
 * @param {string} name The name of the service to decorate.
 * @param {function()} decorator This function will be invoked when the service needs to be
 *    instantiated and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */


function createInjector(modulesToLoad) {
  var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap([], true),
      providerCache = {
        $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
      },
      providerInjector = (providerCache.$injector =
          createInternalInjector(providerCache, function() {
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
          })),
      instanceCache = {},
      instanceInjector = (instanceCache.$injector =
          createInternalInjector(instanceCache, function(servicename) {
            var provider = providerInjector.get(servicename + providerSuffix);
            return instanceInjector.invoke(provider.$get, provider);
          }));


  forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });

  return instanceInjector;

  ////////////////////////////////////
  // $provider
  ////////////////////////////////////

  function supportObject(delegate) {
    return function(key, value) {
      if (isObject(key)) {
        forEach(key, reverseParams(delegate));
      } else {
        return delegate(key, value);
      }
    };
  }

  function provider(name, provider_) {
    assertNotHasOwnProperty(name, 'service');
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
    }
    return providerCache[name + providerSuffix] = provider_;
  }

  function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }

  function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
      return $injector.instantiate(constructor);
    }]);
  }

  function value(name, val) { return factory(name, valueFn(val)); }

  function constant(name, value) {
    assertNotHasOwnProperty(name, 'constant');
    providerCache[name] = value;
    instanceCache[name] = value;
  }

  function decorator(serviceName, decorFn) {
    var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

    origProvider.$get = function() {
      var origInstance = instanceInjector.invoke(orig$get, origProvider);
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
    };
  }

  ////////////////////////////////////
  // Module Loading
  ////////////////////////////////////
  function loadModules(modulesToLoad){
    var runBlocks = [], moduleFn, invokeQueue, i, ii;
    forEach(modulesToLoad, function(module) {
      if (loadedModules.get(module)) return;
      loadedModules.put(module, true);

      try {
        if (isString(module)) {
          moduleFn = angularModule(module);
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);

          for(invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; i < ii; i++) {
            var invokeArgs = invokeQueue[i],
                provider = providerInjector.get(invokeArgs[0]);

            provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
          }
        } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else {
          assertArgFn(module, 'module');
        }
      } catch (e) {
        if (isArray(module)) {
          module = module[module.length - 1];
        }
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
          // Safari & FF's stack traces don't contain error.message content
          // unlike those of Chrome and IE
          // So if stack doesn't contain message, we create a new string that contains both.
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
          /* jshint -W022 */
          e = e.message + '\n' + e.stack;
        }
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
                  module, e.stack || e.message || e);
      }
    });
    return runBlocks;
  }

  ////////////////////////////////////
  // internal Injector
  ////////////////////////////////////

  function createInternalInjector(cache, factory) {

    function getService(serviceName) {
      if (cache.hasOwnProperty(serviceName)) {
        if (cache[serviceName] === INSTANTIATING) {
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
                    serviceName + ' <- ' + path.join(' <- '));
        }
        return cache[serviceName];
      } else {
        try {
          path.unshift(serviceName);
          cache[serviceName] = INSTANTIATING;
          return cache[serviceName] = factory(serviceName);
        } catch (err) {
          if (cache[serviceName] === INSTANTIATING) {
            delete cache[serviceName];
          }
          throw err;
        } finally {
          path.shift();
        }
      }
    }

    function invoke(fn, self, locals){
      var args = [],
          $inject = annotate(fn),
          length, i,
          key;

      for(i = 0, length = $inject.length; i < length; i++) {
        key = $inject[i];
        if (typeof key !== 'string') {
          throw $injectorMinErr('itkn',
                  'Incorrect injection token! Expected service name as string, got {0}', key);
        }
        args.push(
          locals && locals.hasOwnProperty(key)
          ? locals[key]
          : getService(key)
        );
      }
      if (isArray(fn)) {
        fn = fn[length];
      }

      // http://jsperf.com/angularjs-invoke-apply-vs-switch
      // #5388
      return fn.apply(self, args);
    }

    function instantiate(Type, locals) {
      var Constructor = function() {},
          instance, returnedValue;

      // Check if Type is annotated and use just the given function at n-1 as parameter
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
      Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype;
      instance = new Constructor();
      returnedValue = invoke(Type, instance, locals);

      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
    }

    return {
      invoke: invoke,
      instantiate: instantiate,
      get: getService,
      annotate: annotate,
      has: function(name) {
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
      }
    };
  }
}

/**
 * @ngdoc service
 * @name $anchorScroll
 * @kind function
 * @requires $window
 * @requires $location
 * @requires $rootScope
 *
 * @description
 * When called, it checks current value of `$location.hash()` and scrolls to the related element,
 * according to rules specified in
 * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
 *
 * It also watches the `$location.hash()` and scrolls whenever it changes to match any anchor.
 * This can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.
 *
 * @example
   <example>
     <file name="index.html">
       <div id="scrollArea" ng-controller="ScrollCtrl">
         <a ng-click="gotoBottom()">Go to bottom</a>
         <a id="bottom"></a> You're at the bottom!
       </div>
     </file>
     <file name="script.js">
       function ScrollCtrl($scope, $location, $anchorScroll) {
         $scope.gotoBottom = function (){
           // set the location.hash to the id of
           // the element you wish to scroll to.
           $location.hash('bottom');

           // call $anchorScroll()
           $anchorScroll();
         };
       }
     </file>
     <file name="style.css">
       #scrollArea {
         height: 350px;
         overflow: auto;
       }

       #bottom {
         display: block;
         margin-top: 2000px;
       }
     </file>
   </example>
 */
function $AnchorScrollProvider() {

  var autoScrollingEnabled = true;

  this.disableAutoScrolling = function() {
    autoScrollingEnabled = false;
  };

  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
    var document = $window.document;

    // helper function to get first anchor from a NodeList
    // can't use filter.filter, as it accepts only instances of Array
    // and IE can't convert NodeList to an array using [].slice
    // TODO(vojta): use filter if we change it to accept lists as well
    function getFirstAnchor(list) {
      var result = null;
      forEach(list, function(element) {
        if (!result && lowercase(element.nodeName) === 'a') result = element;
      });
      return result;
    }

    function scroll() {
      var hash = $location.hash(), elm;

      // empty hash, scroll to the top of the page
      if (!hash) $window.scrollTo(0, 0);

      // element with given id
      else if ((elm = document.getElementById(hash))) elm.scrollIntoView();

      // first anchor with given name :-D
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) elm.scrollIntoView();

      // no element and hash == 'top', scroll to the top of the page
      else if (hash === 'top') $window.scrollTo(0, 0);
    }

    // does not scroll when user clicks on anchor link that is currently on
    // (no url change, no $location.hash() change), browser native does scroll
    if (autoScrollingEnabled) {
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
        function autoScrollWatchAction() {
          $rootScope.$evalAsync(scroll);
        });
    }

    return scroll;
  }];
}

var $animateMinErr = minErr('$animate');

/**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM
 * updates and calls done() callbacks.
 *
 * In order to enable animations the ngAnimate module has to be loaded.
 *
 * To see the functional implementation check out src/ngAnimate/animate.js
 */
var $AnimateProvider = ['$provide', function($provide) {


  this.$$selectors = {};


  /**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
   *   must be called once the element animation is complete. If a function is returned then the
   *   animation service will use this function to cancel the animation whenever a cancel event is
   *   triggered.
   *
   *
   * ```js
   *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
   * ```
   *
   * @param {string} name The name of the animation.
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */
  this.register = function(name, factory) {
    var key = name + '-animation';
    if (name && name.charAt(0) != '.') throw $animateMinErr('notcsel',
        "Expecting class selector starting with '.' got '{0}'.", name);
    this.$$selectors[name.substr(1)] = key;
    $provide.factory(key, factory);
  };

  /**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element.
   * When setting the classNameFilter value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
  this.classNameFilter = function(expression) {
    if(arguments.length === 1) {
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
    }
    return this.$$classNameFilter;
  };

  this.$get = ['$timeout', '$$asyncCallback', function($timeout, $$asyncCallback) {

    function async(fn) {
      fn && $$asyncCallback(fn);
    }

    /**
     *
     * @ngdoc service
     * @name $animate
     * @description The $animate service provides rudimentary DOM manipulation functions to
     * insert, remove and move elements within the DOM, as well as adding and removing classes.
     * This service is the core service used by the ngAnimate $animator service which provides
     * high-level animation hooks for CSS and JavaScript.
     *
     * $animate is available in the AngularJS core, however, the ngAnimate module must be included
     * to enable full out animation support. Otherwise, $animate will only perform simple DOM
     * manipulation operations.
     *
     * To learn more about enabling animation support, click here to visit the {@link ngAnimate
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
     * page}.
     */
    return {

      /**
       *
       * @ngdoc method
       * @name $animate#enter
       * @kind function
       * @description Inserts the element into the DOM either after the `after` element or within
       *   the `parent` element. Once complete, the done() callback will be fired (if provided).
       * @param {DOMElement} element the element which will be inserted into the DOM
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (if the after element is not present)
       * @param {DOMElement} after the sibling element which will append the element
       *   after itself
       * @param {Function=} done callback function that will be called after the element has been
       *   inserted into the DOM
       */
      enter : function(element, parent, after, done) {
        if (after) {
          after.after(element);
        } else {
          if (!parent || !parent[0]) {
            parent = after.parent();
          }
          parent.append(element);
        }
        async(done);
      },

      /**
       *
       * @ngdoc method
       * @name $animate#leave
       * @kind function
       * @description Removes the element from the DOM. Once complete, the done() callback will be
       *   fired (if provided).
       * @param {DOMElement} element the element which will be removed from the DOM
       * @param {Function=} done callback function that will be called after the element has been
       *   removed from the DOM
       */
      leave : function(element, done) {
        element.remove();
        async(done);
      },

      /**
       *
       * @ngdoc method
       * @name $animate#move
       * @kind function
       * @description Moves the position of the provided element within the DOM to be placed
       * either after the `after` element or inside of the `parent` element. Once complete, the
       * done() callback will be fired (if provided).
       *
       * @param {DOMElement} element the element which will be moved around within the
       *   DOM
       * @param {DOMElement} parent the parent element where the element will be
       *   inserted into (if the after element is not present)
       * @param {DOMElement} after the sibling element where the element will be
       *   positioned next to
       * @param {Function=} done the callback function (if provided) that will be fired after the
       *   element has been moved to its new position
       */
      move : function(element, parent, after, done) {
        // Do not remove element before insert. Removing will cause data associated with the
        // element to be dropped. Insert will implicitly do the remove.
        this.enter(element, parent, after, done);
      },

      /**
       *
       * @ngdoc method
       * @name $animate#addClass
       * @kind function
       * @description Adds the provided className CSS class value to the provided element. Once
       * complete, the done() callback will be fired (if provided).
       * @param {DOMElement} element the element which will have the className value
       *   added to it
       * @param {string} className the CSS class which will be added to the element
       * @param {Function=} done the callback function (if provided) that will be fired after the
       *   className value has been added to the element
       */
      addClass : function(element, className, done) {
        className = isString(className) ?
                      className :
                      isArray(className) ? className.join(' ') : '';
        forEach(element, function (element) {
          jqLiteAddClass(element, className);
        });
        async(done);
      },

      /**
       *
       * @ngdoc method
       * @name $animate#removeClass
       * @kind function
       * @description Removes the provided className CSS class value from the provided element.
       * Once complete, the done() callback will be fired (if provided).
       * @param {DOMElement} element the element which will have the className value
       *   removed from it
       * @param {string} className the CSS class which will be removed from the element
       * @param {Function=} done the callback function (if provided) that will be fired after the
       *   className value has been removed from the element
       */
      removeClass : function(element, className, done) {
        className = isString(className) ?
                      className :
                      isArray(className) ? className.join(' ') : '';
        forEach(element, function (element) {
          jqLiteRemoveClass(element, className);
        });
        async(done);
      },

      /**
       *
       * @ngdoc method
       * @name $animate#setClass
       * @kind function
       * @description Adds and/or removes the given CSS classes to and from the element.
       * Once complete, the done() callback will be fired (if provided).
       * @param {DOMElement} element the element which will have its CSS classes changed
       *   removed from it
       * @param {string} add the CSS classes which will be added to the element
       * @param {string} remove the CSS class which will be removed from the element
       * @param {Function=} done the callback function (if provided) that will be fired after the
       *   CSS classes have been set on the element
       */
      setClass : function(element, add, remove, done) {
        forEach(element, function (element) {
          jqLiteAddClass(element, add);
          jqLiteRemoveClass(element, remove);
        });
        async(done);
      },

      enabled : noop
    };
  }];
}];

function $$AsyncCallbackProvider(){
  this.$get = ['$$rAF', '$timeout', function($$rAF, $timeout) {
    return $$rAF.supported
      ? function(fn) { return $$rAF(fn); }
      : function(fn) {
        return $timeout(fn, 0, false);
      };
  }];
}

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
/**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {function()} XHR XMLHttpRequest constructor.
 * @param {object} $log console.log or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
function Browser(window, document, $log, $sniffer) {
  var self = this,
      rawDocument = document[0],
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

  self.isMock = false;

  var outstandingRequestCount = 0;
  var outstandingRequestCallbacks = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = completeOutstandingRequest;
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

  /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
  function completeOutstandingRequest(fn) {
    try {
      fn.apply(null, sliceArgs(arguments, 1));
    } finally {
      outstandingRequestCount--;
      if (outstandingRequestCount === 0) {
        while(outstandingRequestCallbacks.length) {
          try {
            outstandingRequestCallbacks.pop()();
          } catch (e) {
            $log.error(e);
          }
        }
      }
    }
  }

  /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
  self.notifyWhenNoOutstandingRequests = function(callback) {
    // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
    // at some deterministic time in respect to the test runner's actions. Leaving things up to the
    // regular poller would result in flaky tests.
    forEach(pollFns, function(pollFn){ pollFn(); });

    if (outstandingRequestCount === 0) {
      callback();
    } else {
      outstandingRequestCallbacks.push(callback);
    }
  };

  //////////////////////////////////////////////////////////////
  // Poll Watcher API
  //////////////////////////////////////////////////////////////
  var pollFns = [],
      pollTimeout;

  /**
   * @name $browser#addPollFn
   *
   * @param {function()} fn Poll function to add
   *
   * @description
   * Adds a function to the list of functions that poller periodically executes,
   * and starts polling if not started yet.
   *
   * @returns {function()} the added function
   */
  self.addPollFn = function(fn) {
    if (isUndefined(pollTimeout)) startPoller(100, setTimeout);
    pollFns.push(fn);
    return fn;
  };

  /**
   * @param {number} interval How often should browser call poll functions (ms)
   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
   *
   * @description
   * Configures the poller to run in the specified intervals, using the specified
   * setTimeout fn and kicks it off.
   */
  function startPoller(interval, setTimeout) {
    (function check() {
      forEach(pollFns, function(pollFn){ pollFn(); });
      pollTimeout = setTimeout(check, interval);
    })();
  }

  //////////////////////////////////////////////////////////////
  // URL API
  //////////////////////////////////////////////////////////////

  var lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      newLocation = null;

  /**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record ?
   */
  self.url = function(url, replace) {
    // Android Browser BFCache causes location, history reference to become stale.
    if (location !== window.location) location = window.location;
    if (history !== window.history) history = window.history;

    // setter
    if (url) {
      if (lastBrowserUrl == url) return;
      lastBrowserUrl = url;
      if ($sniffer.history) {
        if (replace) history.replaceState(null, '', url);
        else {
          history.pushState(null, '', url);
          // Crazy Opera Bug: http://my.opera.com/community/forums/topic.dml?id=1185462
          baseElement.attr('href', baseElement.attr('href'));
        }
      } else {
        newLocation = url;
        if (replace) {
          location.replace(url);
        } else {
          location.href = url;
        }
      }
      return self;
    // getter
    } else {
      // - newLocation is a workaround for an IE7-9 issue with location.replace and location.href
      //   methods not updating location.href synchronously.
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
      return newLocation || location.href.replace(/%27/g,"'");
    }
  };

  var urlChangeListeners = [],
      urlChangeInit = false;

  function fireUrlChange() {
    newLocation = null;
    if (lastBrowserUrl == self.url()) return;

    lastBrowserUrl = self.url();
    forEach(urlChangeListeners, function(listener) {
      listener(self.url());
    });
  }

  /**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
  self.onUrlChange = function(callback) {
    // TODO(vojta): refactor to use node's syntax for events
    if (!urlChangeInit) {
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
      // don't fire popstate when user change the address bar and don't fire hashchange when url
      // changed by push/replaceState

      // html5 history api - popstate event
      if ($sniffer.history) jqLite(window).on('popstate', fireUrlChange);
      // hashchange event
      if ($sniffer.hashchange) jqLite(window).on('hashchange', fireUrlChange);
      // polling
      else self.addPollFn(fireUrlChange);

      urlChangeInit = true;
    }

    urlChangeListeners.push(callback);
    return callback;
  };

  //////////////////////////////////////////////////////////////
  // Misc API
  //////////////////////////////////////////////////////////////

  /**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */
  self.baseHref = function() {
    var href = baseElement.attr('href');
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
  };

  //////////////////////////////////////////////////////////////
  // Cookies API
  //////////////////////////////////////////////////////////////
  var lastCookies = {};
  var lastCookieString = '';
  var cookiePath = self.baseHref();

  /**
   * @name $browser#cookies
   *
   * @param {string=} name Cookie name
   * @param {string=} value Cookie value
   *
   * @description
   * The cookies method provides a 'private' low level access to browser cookies.
   * It is not meant to be used directly, use the $cookie service instead.
   *
   * The return values vary depending on the arguments that the method was called with as follows:
   *
   * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
   *   it
   * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
   * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
   *   way)
   *
   * @returns {Object} Hash of all cookies (if called without any parameter)
   */
  self.cookies = function(name, value) {
    /* global escape: false, unescape: false */
    var cookieLength, cookieArray, cookie, i, index;

    if (name) {
      if (value === undefined) {
        rawDocument.cookie = escape(name) + "=;path=" + cookiePath +
                                ";expires=Thu, 01 Jan 1970 00:00:00 GMT";
      } else {
        if (isString(value)) {
          cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) +
                                ';path=' + cookiePath).length + 1;

          // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
          // - 300 cookies
          // - 20 cookies per unique domain
          // - 4096 bytes per cookie
          if (cookieLength > 4096) {
            $log.warn("Cookie '"+ name +
              "' possibly not set or overflowed because it was too large ("+
              cookieLength + " > 4096 bytes)!");
          }
        }
      }
    } else {
      if (rawDocument.cookie !== lastCookieString) {
        lastCookieString = rawDocument.cookie;
        cookieArray = lastCookieString.split("; ");
        lastCookies = {};

        for (i = 0; i < cookieArray.length; i++) {
          cookie = cookieArray[i];
          index = cookie.indexOf('=');
          if (index > 0) { //ignore nameless cookies
            name = unescape(cookie.substring(0, index));
            // the first value that is seen for a cookie is the most
            // specific one.  values for the same cookie name that
            // follow are for less specific paths.
            if (lastCookies[name] === undefined) {
              lastCookies[name] = unescape(cookie.substring(index + 1));
            }
          }
        }
      }
      return lastCookies;
    }
  };


  /**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
  self.defer = function(fn, delay) {
    var timeoutId;
    outstandingRequestCount++;
    timeoutId = setTimeout(function() {
      delete pendingDeferIds[timeoutId];
      completeOutstandingRequest(fn);
    }, delay || 0);
    pendingDeferIds[timeoutId] = true;
    return timeoutId;
  };


  /**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
  self.defer.cancel = function(deferId) {
    if (pendingDeferIds[deferId]) {
      delete pendingDeferIds[deferId];
      clearTimeout(deferId);
      completeOutstandingRequest(noop);
      return true;
    }
    return false;
  };

}

function $BrowserProvider(){
  this.$get = ['$window', '$log', '$sniffer', '$document',
      function( $window,   $log,   $sniffer,   $document){
        return new Browser($window, $document, $log, $sniffer);
      }];
}

/**
 * @ngdoc service
 * @name $cacheFactory
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if ($scope.cache.get(key) === undefined) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, value === undefined ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
function $CacheFactoryProvider() {

  this.$get = function() {
    var caches = {};

    function cacheFactory(cacheId, options) {
      if (cacheId in caches) {
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
      }

      var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = {},
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = {},
          freshEnd = null,
          staleEnd = null;

      /**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */
      return caches[cacheId] = {

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#put
         * @kind function
         *
         * @description
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
         * retrieved later, and incrementing the size of the cache if the key was not already
         * present in the cache. If behaving like an LRU cache, it will also remove stale
         * entries from the set.
         *
         * It will not insert undefined values into the cache.
         *
         * @param {string} key the key under which the cached data is stored.
         * @param {*} value the value to store alongside the key. If it is undefined, the key
         *    will not be stored.
         * @returns {*} the value stored.
         */
        put: function(key, value) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

            refresh(lruEntry);
          }

          if (isUndefined(value)) return;
          if (!(key in data)) size++;
          data[key] = value;

          if (size > capacity) {
            this.remove(staleEnd.key);
          }

          return value;
        },

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#get
         * @kind function
         *
         * @description
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the data to be retrieved
         * @returns {*} the value stored.
         */
        get: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            refresh(lruEntry);
          }

          return data[key];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#remove
         * @kind function
         *
         * @description
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the entry to be removed
         */
        remove: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
            link(lruEntry.n,lruEntry.p);

            delete lruHash[key];
          }

          delete data[key];
          size--;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#removeAll
         * @kind function
         *
         * @description
         * Clears the cache object of any entries.
         */
        removeAll: function() {
          data = {};
          size = 0;
          lruHash = {};
          freshEnd = staleEnd = null;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#destroy
         * @kind function
         *
         * @description
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
         * removing it from the {@link $cacheFactory $cacheFactory} set.
         */
        destroy: function() {
          data = null;
          stats = null;
          lruHash = null;
          delete caches[cacheId];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#info
         * @kind function
         *
         * @description
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
         *
         * @returns {object} an object with the following properties:
         *   <ul>
         *     <li>**id**: the id of the cache instance</li>
         *     <li>**size**: the number of entries kept in the cache instance</li>
         *     <li>**...**: any additional properties from the options object when creating the
         *       cache.</li>
         *   </ul>
         */
        info: function() {
          return extend({}, stats, {size: size});
        }
      };


      /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
      function refresh(entry) {
        if (entry != freshEnd) {
          if (!staleEnd) {
            staleEnd = entry;
          } else if (staleEnd == entry) {
            staleEnd = entry.n;
          }

          link(entry.n, entry.p);
          link(entry, freshEnd);
          freshEnd = entry;
          freshEnd.n = null;
        }
      }


      /**
       * bidirectionally links two entries of the LRU linked list
       */
      function link(nextEntry, prevEntry) {
        if (nextEntry != prevEntry) {
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
        }
      }
    }


  /**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
    cacheFactory.info = function() {
      var info = {};
      forEach(caches, function(cache, cacheId) {
        info[cacheId] = cache.info();
      });
      return info;
    };


  /**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
    cacheFactory.get = function(cacheId) {
      return caches[cacheId];
    };


    return cacheFactory;
  };
}

/**
 * @ngdoc service
 * @name $templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be below the `ng-app` definition.
 *
 * Adding via the $templateCache service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your HTML:
 * ```html
 * <div ng-include=" 'templateId.html' "></div>
 * ```
 *
 * or get it via Javascript:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
function $TemplateCacheProvider() {
  this.$get = ['$cacheFactory', function($cacheFactory) {
    return $cacheFactory('templates');
  }];
}

/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */


/**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
 * or just the `postLink` function (all other properties will have the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringAlias',
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined).
 *
 * #### `scope`
 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
 * same element request a new scope, only one new scope is created. The new scope rule does not
 * apply for the root of the template since the root of the template always gets a new scope.
 *
 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
 * normal scope in that it does not prototypically inherit from the parent scope. This is useful
 * when creating reusable components, which should not accidentally read or modify data in the
 * parent scope.
 *
 * The 'isolate' scope takes an object hash which defines a set of local scope properties
 * derived from the parent scope. These local properties are useful for aliasing values for
 * templates. Locals definition is a hash of local scope property to its source:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
 *   attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="hello {{name}}">` and widget definition
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
 *   component scope).
 *
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
 *   name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="parentModel">` and widget definition of
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional.
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
 *   pass data from the isolated scope via an expression to the parent scope, this can be
 *   done by passing a map of local variable names and values into the expression wrapper fn.
 *   For example, if the expression is `increment(amount)` then we can specify the amount value
 *   by calling the `localFn` as `localFn({amount: 22})`.
 *
 *
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and it is shared with other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope.
 *    The scope can be overridden by an optional first argument.
 *   `function([scope], cloneLinkingFn)`.
 *
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
 * injected argument will be an array in corresponding order. If no such directive can be
 * found, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Controller alias at the directive scope. An alias for the controller so it
 * can be referenced at the directive template. The directive needs to define a scope for this
 * configuration to be used. Useful in the case when directive is used as component.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the default (attributes only) is used.
 *
 * * `E` - Element name: `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * Same as `template` but the template is loaded from the specified URL. Because
 * the template loading is asynchronous the compilation/linking is suspended until the template
 * is loaded.
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * api/ng.$sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#creating-custom-directives_creating-directives_template-expanding-directive
 * Directives Guide} for an example.
 *
 * #### `transclude`
 * compile the content of the element and make it available to the directive.
 * Typically used with {@link ng.directive:ngTransclude
 * ngTransclude}. The advantage of transclusion is that the linking function receives a
 * transclusion function which is pre-bound to the correct scope. In a typical setup the widget
 * creates an `isolate` scope, but the transclusion is not a child, but a sibling of the `isolate`
 * scope. This makes it possible for the widget to have private state, and the transclusion to
 * be bound to the parent (pre-`isolate`) scope.
 *
 * * `true` - transclude the content of the directive.
 * * `'element'` - transclude the whole element including any directives defined at lower priority.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and a
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-error">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - a controller instance - A controller instance if at least one directive on the
 *     element defines a controller. The controller is shared among all the directives, which allows
 *     the directives to use the controllers as a communication channel.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     The scope can be overridden by an optional first argument. This is the same as the `$transclude`
 *     parameter of directive controllers.
 *     `function([scope], cloneLinkingFn)`.
 *
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked. It is safe to do DOM transformation in the post-linking function.
 *
 * <a name="Attributes"></a>
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * accessing *Normalized attribute names:*
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
 * the attributes object allows for normalized access to
 *   the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * Below is an example using `$compileProvider`.
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br>
      <textarea ng-model="html"></textarea> <br>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives.
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc provider
 * @name $compileProvider
 * @kind function
 *
 * @description
 */
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
function $CompileProvider($provide, $$sanitizeUriProvider) {
  var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\d\w_\-]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\d\w_\-]+)(?:\:([^;]+))?;?)/;

  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
  // The assumption is that future DOM event attribute names will begin with
  // 'on' and be composed of only English letters.
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

  /**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See
   *    {@link guide/directive} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
   this.directive = function registerDirective(name, directiveFactory) {
    assertNotHasOwnProperty(name, 'directive');
    if (isString(name)) {
      assertArg(directiveFactory, 'directiveFactory');
      if (!hasDirectives.hasOwnProperty(name)) {
        hasDirectives[name] = [];
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
          function($injector, $exceptionHandler) {
            var directives = [];
            forEach(hasDirectives[name], function(directiveFactory, index) {
              try {
                var directive = $injector.invoke(directiveFactory);
                if (isFunction(directive)) {
                  directive = { compile: valueFn(directive) };
                } else if (!directive.compile && directive.link) {
                  directive.compile = valueFn(directive.link);
                }
                directive.priority = directive.priority || 0;
                directive.index = index;
                directive.name = directive.name || name;
                directive.require = directive.require || (directive.controller && directive.name);
                directive.restrict = directive.restrict || 'A';
                directives.push(directive);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
            return directives;
          }]);
      }
      hasDirectives[name].push(directiveFactory);
    } else {
      forEach(name, reverseParams(registerDirective));
    }
    return this;
  };


  /**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
    }
  };


  /**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
    }
  };

  this.$get = [
            '$injector', '$interpolate', '$exceptionHandler', '$http', '$templateCache', '$parse',
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
    function($injector,   $interpolate,   $exceptionHandler,   $http,   $templateCache,   $parse,
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {

    var Attributes = function(element, attr) {
      this.$$element = element;
      this.$attr = attr || {};
    };

    Attributes.prototype = {
      $normalize: directiveNormalize,


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$addClass
       * @kind function
       *
       * @description
       * Adds the CSS class value specified by the classVal parameter to the element. If animations
       * are enabled then an animation will be triggered for the class addition.
       *
       * @param {string} classVal The className value that will be added to the element
       */
      $addClass : function(classVal) {
        if(classVal && classVal.length > 0) {
          $animate.addClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$removeClass
       * @kind function
       *
       * @description
       * Removes the CSS class value specified by the classVal parameter from the element. If
       * animations are enabled then an animation will be triggered for the class removal.
       *
       * @param {string} classVal The className value that will be removed from the element
       */
      $removeClass : function(classVal) {
        if(classVal && classVal.length > 0) {
          $animate.removeClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$updateClass
       * @kind function
       *
       * @description
       * Adds and removes the appropriate CSS class values to the element based on the difference
       * between the new and old CSS class values (specified as newClasses and oldClasses).
       *
       * @param {string} newClasses The current CSS className value
       * @param {string} oldClasses The former CSS className value
       */
      $updateClass : function(newClasses, oldClasses) {
        var toAdd = tokenDifference(newClasses, oldClasses);
        var toRemove = tokenDifference(oldClasses, newClasses);

        if(toAdd.length === 0) {
          $animate.removeClass(this.$$element, toRemove);
        } else if(toRemove.length === 0) {
          $animate.addClass(this.$$element, toAdd);
        } else {
          $animate.setClass(this.$$element, toAdd, toRemove);
        }
      },

      /**
       * Set a normalized attribute on the element in a way such that all directives
       * can share the attribute. This function properly handles boolean attributes.
       * @param {string} key Normalized key. (ie ngAttribute)
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
       *     Defaults to true.
       * @param {string=} attrName Optional none normalized name. Defaults to key.
       */
      $set: function(key, value, writeAttr, attrName) {
        // TODO: decide whether or not to throw an error if "class"
        //is set through this function since it may cause $updateClass to
        //become unstable.

        var booleanKey = getBooleanAttrName(this.$$element[0], key),
            normalizedVal,
            nodeName;

        if (booleanKey) {
          this.$$element.prop(key, value);
          attrName = booleanKey;
        }

        this[key] = value;

        // translate normalized key to actual key
        if (attrName) {
          this.$attr[key] = attrName;
        } else {
          attrName = this.$attr[key];
          if (!attrName) {
            this.$attr[key] = attrName = snake_case(key, '-');
          }
        }

        nodeName = nodeName_(this.$$element);

        // sanitize a[href] and img[src] values
        if ((nodeName === 'A' && key === 'href') ||
            (nodeName === 'IMG' && key === 'src')) {
          this[key] = value = $$sanitizeUri(value, key === 'src');
        }

        if (writeAttr !== false) {
          if (value === null || value === undefined) {
            this.$$element.removeAttr(attrName);
          } else {
            this.$$element.attr(attrName, value);
          }
        }

        // fire observers
        var $$observers = this.$$observers;
        $$observers && forEach($$observers[key], function(fn) {
          try {
            fn(value);
          } catch (e) {
            $exceptionHandler(e);
          }
        });
      },


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$observe
       * @kind function
       *
       * @description
       * Observes an interpolated attribute.
       *
       * The observer function will be invoked once during the next `$digest` following
       * compilation. The observer is then invoked whenever the interpolated value
       * changes.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(interpolatedValue)} fn Function that will be called whenever
                the interpolated value of the attribute changes.
       *        See the {@link guide/directive#Attributes Directives} guide for more info.
       * @returns {function()} the `fn` parameter.
       */
      $observe: function(key, fn) {
        var attrs = this,
            $$observers = (attrs.$$observers || (attrs.$$observers = {})),
            listeners = ($$observers[key] || ($$observers[key] = []));

        listeners.push(fn);
        $rootScope.$evalAsync(function() {
          if (!listeners.$$inter) {
            // no one registered attribute interpolation function, so lets call it manually
            fn(attrs[key]);
          }
        });
        return fn;
      }
    };

    var startSymbol = $interpolate.startSymbol(),
        endSymbol = $interpolate.endSymbol(),
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
            ? identity
            : function denormalizeTemplate(template) {
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
        },
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;


    return compile;

    //================================

    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
                        previousCompileContext) {
      if (!($compileNodes instanceof jqLite)) {
        // jquery always rewraps, whereas we need to preserve the original selector so that we can
        // modify it.
        $compileNodes = jqLite($compileNodes);
      }
      // We can not compile top level text elements since text nodes can be merged and we will
      // not be able to attach scope data to them, so we will wrap them in <span>
      forEach($compileNodes, function(node, index){
        if (node.nodeType == 3 /* text node */ && node.nodeValue.match(/\S+/) /* non-empty */ ) {
          $compileNodes[index] = node = jqLite(node).wrap('<span></span>').parent()[0];
        }
      });
      var compositeLinkFn =
              compileNodes($compileNodes, transcludeFn, $compileNodes,
                           maxPriority, ignoreDirective, previousCompileContext);
      safeAddClass($compileNodes, 'ng-scope');
      return function publicLinkFn(scope, cloneConnectFn, transcludeControllers, parentBoundTranscludeFn){
        assertArg(scope, 'scope');
        // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
        // and sometimes changes the structure of the DOM.
        var $linkNode = cloneConnectFn
          ? JQLitePrototype.clone.call($compileNodes) // IMPORTANT!!!
          : $compileNodes;

        forEach(transcludeControllers, function(instance, name) {
          $linkNode.data('$' + name + 'Controller', instance);
        });

        // Attach scope only to non-text nodes.
        for(var i = 0, ii = $linkNode.length; i<ii; i++) {
          var node = $linkNode[i],
              nodeType = node.nodeType;
          if (nodeType === 1 /* element */ || nodeType === 9 /* document */) {
            $linkNode.eq(i).data('$scope', scope);
          }
        }

        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
        return $linkNode;
      };
    }

    function safeAddClass($element, className) {
      try {
        $element.addClass(className);
      } catch(e) {
        // ignore, since it means that we are trying to set class on
        // SVG element, where class name is read-only.
      }
    }

    /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
                            previousCompileContext) {
      var linkFns = [],
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound;

      for (var i = 0; i < nodeList.length; i++) {
        attrs = new Attributes();

        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
                                        ignoreDirective);

        nodeLinkFn = (directives.length)
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
                                      null, [], [], previousCompileContext)
            : null;

        if (nodeLinkFn && nodeLinkFn.scope) {
          safeAddClass(attrs.$$element, 'ng-scope');
        }

        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
                      !(childNodes = nodeList[i].childNodes) ||
                      !childNodes.length)
            ? null
            : compileNodes(childNodes,
                 nodeLinkFn ? (
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
                     && nodeLinkFn.transclude) : transcludeFn);

        linkFns.push(nodeLinkFn, childLinkFn);
        linkFnFound = linkFnFound || nodeLinkFn || childLinkFn;
        //use the previous context only for the first element in the virtual group
        previousCompileContext = null;
      }

      // return a linking function if we have found anything, null otherwise
      return linkFnFound ? compositeLinkFn : null;

      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, n, childBoundTranscludeFn;

        // copy nodeList so that linking doesn't break due to live list updates.
        var nodeListLength = nodeList.length,
            stableNodeList = new Array(nodeListLength);
        for (i = 0; i < nodeListLength; i++) {
          stableNodeList[i] = nodeList[i];
        }

        for(i = 0, n = 0, ii = linkFns.length; i < ii; n++) {
          node = stableNodeList[n];
          nodeLinkFn = linkFns[i++];
          childLinkFn = linkFns[i++];

          if (nodeLinkFn) {
            if (nodeLinkFn.scope) {
              childScope = scope.$new();
              jqLite.data(node, '$scope', childScope);
            } else {
              childScope = scope;
            }

            if ( nodeLinkFn.transcludeOnThisElement ) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn);

            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
              childBoundTranscludeFn = parentBoundTranscludeFn;

            } else if (!parentBoundTranscludeFn && transcludeFn) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

            } else {
              childBoundTranscludeFn = null;
            }

            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);

          } else if (childLinkFn) {
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
          }
        }
      }
    }

    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {

      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers) {
        var scopeCreated = false;

        if (!transcludedScope) {
          transcludedScope = scope.$new();
          transcludedScope.$$transcluded = true;
          scopeCreated = true;
        }

        var clone = transcludeFn(transcludedScope, cloneFn, controllers, previousBoundTranscludeFn);
        if (scopeCreated) {
          clone.on('$destroy', function() { transcludedScope.$destroy(); });
        }
        return clone;
      };

      return boundTranscludeFn;
    }

    /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
      var nodeType = node.nodeType,
          attrsMap = attrs.$attr,
          match,
          className;

      switch(nodeType) {
        case 1: /* Element */
          // use the node name: <directive>
          addDirective(directives,
              directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority, ignoreDirective);

          // iterate over the attributes
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
            var attrStartName = false;
            var attrEndName = false;

            attr = nAttrs[j];
            if (!msie || msie >= 8 || attr.specified) {
              name = attr.name;
              value = trim(attr.value);

              // support ngAttr attribute binding
              ngAttrName = directiveNormalize(name);
              if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
                name = snake_case(ngAttrName.substr(6), '-');
              }

              var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
              if (ngAttrName === directiveNName + 'Start') {
                attrStartName = name;
                attrEndName = name.substr(0, name.length - 5) + 'end';
                name = name.substr(0, name.length - 6);
              }

              nName = directiveNormalize(name.toLowerCase());
              attrsMap[nName] = name;
              if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                  attrs[nName] = value;
                  if (getBooleanAttrName(node, nName)) {
                    attrs[nName] = true; // presence means true
                  }
              }
              addAttrInterpolateDirective(node, directives, value, nName);
              addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
                            attrEndName);
            }
          }

          // use class as directive
          className = node.className;
          if (isString(className) && className !== '') {
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
              nName = directiveNormalize(match[2]);
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[3]);
              }
              className = className.substr(match.index + match[0].length);
            }
          }
          break;
        case 3: /* Text Node */
          addTextInterpolateDirective(directives, node.nodeValue);
          break;
        case 8: /* Comment */
          try {
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
            if (match) {
              nName = directiveNormalize(match[1]);
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[2]);
              }
            }
          } catch (e) {
            // turns out that under some circumstances IE9 throws errors when one attempts to read
            // comment's node value.
            // Just ignore it and continue. (Can't seem to reproduce in test case.)
          }
          break;
      }

      directives.sort(byPriority);
      return directives;
    }

    /**
     * Given a node with an directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
    function groupScan(node, attrStart, attrEnd) {
      var nodes = [];
      var depth = 0;
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
        var startNode = node;
        do {
          if (!node) {
            throw $compileMinErr('uterdir',
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
                      attrStart, attrEnd);
          }
          if (node.nodeType == 1 /** Element **/) {
            if (node.hasAttribute(attrStart)) depth++;
            if (node.hasAttribute(attrEnd)) depth--;
          }
          nodes.push(node);
          node = node.nextSibling;
        } while (depth > 0);
      } else {
        nodes.push(node);
      }

      return jqLite(nodes);
    }

    /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
      return function(scope, element, attrs, controllers, transcludeFn) {
        element = groupScan(element[0], attrStart, attrEnd);
        return linkFn(scope, element, attrs, controllers, transcludeFn);
      };
    }

    /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
                                   previousCompileContext) {
      previousCompileContext = previousCompileContext || {};

      var terminalPriority = -Number.MAX_VALUE,
          newScopeDirective,
          controllerDirectives = previousCompileContext.controllerDirectives,
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
          templateDirective = previousCompileContext.templateDirective,
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
          hasTranscludeDirective = false,
          hasTemplate = false,
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
          $compileNode = templateAttrs.$$element = jqLite(compileNode),
          directive,
          directiveName,
          $template,
          replaceDirective = originalReplaceDirective,
          childTranscludeFn = transcludeFn,
          linkFn,
          directiveValue;

      // executes all directives on the current element
      for(var i = 0, ii = directives.length; i < ii; i++) {
        directive = directives[i];
        var attrStart = directive.$$start;
        var attrEnd = directive.$$end;

        // collect multiblock sections
        if (attrStart) {
          $compileNode = groupScan(compileNode, attrStart, attrEnd);
        }
        $template = undefined;

        if (terminalPriority > directive.priority) {
          break; // prevent further processing of directives
        }

        if (directiveValue = directive.scope) {
          newScopeDirective = newScopeDirective || directive;

          // skip the check for directives with async templates, we'll check the derived sync
          // directive when the template arrives
          if (!directive.templateUrl) {
            assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
                              $compileNode);
            if (isObject(directiveValue)) {
              newIsolateScopeDirective = directive;
            }
          }
        }

        directiveName = directive.name;

        if (!directive.templateUrl && directive.controller) {
          directiveValue = directive.controller;
          controllerDirectives = controllerDirectives || {};
          assertNoDuplicate("'" + directiveName + "' controller",
              controllerDirectives[directiveName], directive, $compileNode);
          controllerDirectives[directiveName] = directive;
        }

        if (directiveValue = directive.transclude) {
          hasTranscludeDirective = true;

          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
          // This option should only be used by directives that know how to safely handle element transclusion,
          // where the transcluded nodes are added or replaced after linking.
          if (!directive.$$tlb) {
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
            nonTlbTranscludeDirective = directive;
          }

          if (directiveValue == 'element') {
            hasElementTranscludeDirective = true;
            terminalPriority = directive.priority;
            $template = $compileNode;
            $compileNode = templateAttrs.$$element =
                jqLite(document.createComment(' ' + directiveName + ': ' +
                                              templateAttrs[directiveName] + ' '));
            compileNode = $compileNode[0];
            replaceWith(jqCollection, sliceArgs($template), compileNode);

            childTranscludeFn = compile($template, transcludeFn, terminalPriority,
                                        replaceDirective && replaceDirective.name, {
                                          // Don't pass in:
                                          // - controllerDirectives - otherwise we'll create duplicates controllers
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.
                                          //
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
                                        });
          } else {
            $template = jqLite(jqLiteClone(compileNode)).contents();
            $compileNode.empty(); // clear contents
            childTranscludeFn = compile($template, transcludeFn);
          }
        }

        if (directive.template) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          directiveValue = (isFunction(directive.template))
              ? directive.template($compileNode, templateAttrs)
              : directive.template;

          directiveValue = denormalizeTemplate(directiveValue);

          if (directive.replace) {
            replaceDirective = directive;
            if (jqLiteIsTextNode(directiveValue)) {
              $template = [];
            } else {
              $template = jqLite(trim(directiveValue));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== 1) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  directiveName, '');
            }

            replaceWith(jqCollection, $compileNode, compileNode);

            var newTemplateAttrs = {$attr: {}};

            // combine directives from the original node and from the template:
            // - take the array of directives for this element
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
            // - collect directives from the template and sort them by priority
            // - combine directives as: processed + template + unprocessed
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

            if (newIsolateScopeDirective) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

            ii = directives.length;
          } else {
            $compileNode.html(directiveValue);
          }
        }

        if (directive.templateUrl) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          if (directive.replace) {
            replaceDirective = directive;
          }

          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
          ii = directives.length;
        } else if (directive.compile) {
          try {
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
            if (isFunction(linkFn)) {
              addLinkFns(null, linkFn, attrStart, attrEnd);
            } else if (linkFn) {
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
            }
          } catch (e) {
            $exceptionHandler(e, startingTag($compileNode));
          }
        }

        if (directive.terminal) {
          nodeLinkFn.terminal = true;
          terminalPriority = Math.max(terminalPriority, directive.priority);
        }

      }

      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
      nodeLinkFn.templateOnThisElement = hasTemplate;
      nodeLinkFn.transclude = childTranscludeFn;

      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
      return nodeLinkFn;

      ////////////////////

      function addLinkFns(pre, post, attrStart, attrEnd) {
        if (pre) {
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
          pre.require = directive.require;
          pre.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
          }
          preLinkFns.push(pre);
        }
        if (post) {
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
          post.require = directive.require;
          post.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            post = cloneAndAnnotateFn(post, {isolateScope: true});
          }
          postLinkFns.push(post);
        }
      }


      function getControllers(directiveName, require, $element, elementControllers) {
        var value, retrievalMethod = 'data', optional = false;
        if (isString(require)) {
          while((value = require.charAt(0)) == '^' || value == '?') {
            require = require.substr(1);
            if (value == '^') {
              retrievalMethod = 'inheritedData';
            }
            optional = optional || value == '?';
          }
          value = null;

          if (elementControllers && retrievalMethod === 'data') {
            value = elementControllers[require];
          }
          value = value || $element[retrievalMethod]('$' + require + 'Controller');

          if (!value && !optional) {
            throw $compileMinErr('ctreq',
                "Controller '{0}', required by directive '{1}', can't be found!",
                require, directiveName);
          }
          return value;
        } else if (isArray(require)) {
          value = [];
          forEach(require, function(require) {
            value.push(getControllers(directiveName, require, $element, elementControllers));
          });
        }
        return value;
      }


      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
        var attrs, $element, i, ii, linkFn, controller, isolateScope, elementControllers = {}, transcludeFn;

        attrs = (compileNode === linkNode)
          ? templateAttrs
          : shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr));
        $element = attrs.$$element;

        if (newIsolateScopeDirective) {
          var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/;

          isolateScope = scope.$new(true);

          if (templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)) {
            $element.data('$isolateScope', isolateScope);
          } else {
            $element.data('$isolateScopeNoTemplate', isolateScope);
          }



          safeAddClass($element, 'ng-isolate-scope');

          forEach(newIsolateScopeDirective.scope, function(definition, scopeName) {
            var match = definition.match(LOCAL_REGEXP) || [],
                attrName = match[3] || scopeName,
                optional = (match[2] == '?'),
                mode = match[1], // @, =, or &
                lastValue,
                parentGet, parentSet, compare;

            isolateScope.$$isolateBindings[scopeName] = mode + attrName;

            switch (mode) {

              case '@':
                attrs.$observe(attrName, function(value) {
                  isolateScope[scopeName] = value;
                });
                attrs.$$observers[attrName].$$scope = scope;
                if( attrs[attrName] ) {
                  // If the attribute has been provided then we trigger an interpolation to ensure
                  // the value is there for use in the link fn
                  isolateScope[scopeName] = $interpolate(attrs[attrName])(scope);
                }
                break;

              case '=':
                if (optional && !attrs[attrName]) {
                  return;
                }
                parentGet = $parse(attrs[attrName]);
                if (parentGet.literal) {
                  compare = equals;
                } else {
                  compare = function(a,b) { return a === b || (a !== a && b !== b); };
                }
                parentSet = parentGet.assign || function() {
                  // reset the change, or we will throw this exception on every $digest
                  lastValue = isolateScope[scopeName] = parentGet(scope);
                  throw $compileMinErr('nonassign',
                      "Expression '{0}' used with directive '{1}' is non-assignable!",
                      attrs[attrName], newIsolateScopeDirective.name);
                };
                lastValue = isolateScope[scopeName] = parentGet(scope);
                isolateScope.$watch(function parentValueWatch() {
                  var parentValue = parentGet(scope);
                  if (!compare(parentValue, isolateScope[scopeName])) {
                    // we are out of sync and need to copy
                    if (!compare(parentValue, lastValue)) {
                      // parent changed and it has precedence
                      isolateScope[scopeName] = parentValue;
                    } else {
                      // if the parent can be assigned then do so
                      parentSet(scope, parentValue = isolateScope[scopeName]);
                    }
                  }
                  return lastValue = parentValue;
                }, null, parentGet.literal);
                break;

              case '&':
                parentGet = $parse(attrs[attrName]);
                isolateScope[scopeName] = function(locals) {
                  return parentGet(scope, locals);
                };
                break;

              default:
                throw $compileMinErr('iscp',
                    "Invalid isolate scope definition for directive '{0}'." +
                    " Definition: {... {1}: '{2}' ...}",
                    newIsolateScopeDirective.name, scopeName, definition);
            }
          });
        }
        transcludeFn = boundTranscludeFn && controllersBoundTransclude;
        if (controllerDirectives) {
          forEach(controllerDirectives, function(directive) {
            var locals = {
              $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
              $element: $element,
              $attrs: attrs,
              $transclude: transcludeFn
            }, controllerInstance;

            controller = directive.controller;
            if (controller == '@') {
              controller = attrs[directive.name];
            }

            controllerInstance = $controller(controller, locals);
            // For directives with element transclusion the element is a comment,
            // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
            // clean up (http://bugs.jquery.com/ticket/8335).
            // Instead, we save the controllers for the element in a local hash and attach to .data
            // later, once we have the actual element.
            elementControllers[directive.name] = controllerInstance;
            if (!hasElementTranscludeDirective) {
              $element.data('$' + directive.name + 'Controller', controllerInstance);
            }

            if (directive.controllerAs) {
              locals.$scope[directive.controllerAs] = controllerInstance;
            }
          });
        }

        // PRELINKING
        for(i = 0, ii = preLinkFns.length; i < ii; i++) {
          try {
            linkFn = preLinkFns[i];
            linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs,
                linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
          } catch (e) {
            $exceptionHandler(e, startingTag($element));
          }
        }

        // RECURSION
        // We only pass the isolate scope, if the isolate directive has a template,
        // otherwise the child elements do not belong to the isolate directive.
        var scopeToChild = scope;
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;
        }
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

        // POSTLINKING
        for(i = postLinkFns.length - 1; i >= 0; i--) {
          try {
            linkFn = postLinkFns[i];
            linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs,
                linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
          } catch (e) {
            $exceptionHandler(e, startingTag($element));
          }
        }

        // This is the function that is injected as `$transclude`.
        function controllersBoundTransclude(scope, cloneAttachFn) {
          var transcludeControllers;

          // no scope passed
          if (arguments.length < 2) {
            cloneAttachFn = scope;
            scope = undefined;
          }

          if (hasElementTranscludeDirective) {
            transcludeControllers = elementControllers;
          }

          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers);
        }
      }
    }

    function markDirectivesAsIsolate(directives) {
      // mark all directives as needing isolate scope.
      for (var j = 0, jj = directives.length; j < jj; j++) {
        directives[j] = inherit(directives[j], {$$isolateScope: true});
      }
    }

    /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
                          endAttrName) {
      if (name === ignoreDirective) return null;
      var match = null;
      if (hasDirectives.hasOwnProperty(name)) {
        for(var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i<ii; i++) {
          try {
            directive = directives[i];
            if ( (maxPriority === undefined || maxPriority > directive.priority) &&
                 directive.restrict.indexOf(location) != -1) {
              if (startAttrName) {
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
              }
              tDirectives.push(directive);
              match = directive;
            }
          } catch(e) { $exceptionHandler(e); }
        }
      }
      return match;
    }


    /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
    function mergeTemplateAttributes(dst, src) {
      var srcAttr = src.$attr,
          dstAttr = dst.$attr,
          $element = dst.$$element;

      // reapply the old attributes to the new element
      forEach(dst, function(value, key) {
        if (key.charAt(0) != '$') {
          if (src[key] && src[key] !== value) {
            value += (key === 'style' ? ';' : ' ') + src[key];
          }
          dst.$set(key, value, true, srcAttr[key]);
        }
      });

      // copy the new attributes on the old attrs object
      forEach(src, function(value, key) {
        if (key == 'class') {
          safeAddClass($element, value);
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
        } else if (key == 'style') {
          $element.attr('style', $element.attr('style') + ';' + value);
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
          // have an attribute like "has-own-property" or "data-has-own-property", etc.
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
          dst[key] = value;
          dstAttr[key] = srcAttr[key];
        }
      });
    }


    function compileTemplateUrl(directives, $compileNode, tAttrs,
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
      var linkQueue = [],
          afterTemplateNodeLinkFn,
          afterTemplateChildLinkFn,
          beforeTemplateCompileNode = $compileNode[0],
          origAsyncDirective = directives.shift(),
          // The fact that we have to copy and patch the directive seems wrong!
          derivedSyncDirective = extend({}, origAsyncDirective, {
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
          }),
          templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl;

      $compileNode.empty();

      $http.get($sce.getTrustedResourceUrl(templateUrl), {cache: $templateCache}).
        success(function(content) {
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

          content = denormalizeTemplate(content);

          if (origAsyncDirective.replace) {
            if (jqLiteIsTextNode(content)) {
              $template = [];
            } else {
              $template = jqLite(trim(content));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== 1) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  origAsyncDirective.name, templateUrl);
            }

            tempTemplateAttrs = {$attr: {}};
            replaceWith($rootElement, $compileNode, compileNode);
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

            if (isObject(origAsyncDirective.scope)) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = templateDirectives.concat(directives);
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
          } else {
            compileNode = beforeTemplateCompileNode;
            $compileNode.html(content);
          }

          directives.unshift(derivedSyncDirective);

          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
              previousCompileContext);
          forEach($rootElement, function(node, i) {
            if (node == compileNode) {
              $rootElement[i] = $compileNode[0];
            }
          });
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

          while(linkQueue.length) {
            var scope = linkQueue.shift(),
                beforeTemplateLinkNode = linkQueue.shift(),
                linkRootElement = linkQueue.shift(),
                boundTranscludeFn = linkQueue.shift(),
                linkNode = $compileNode[0];

            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
              var oldClasses = beforeTemplateLinkNode.className;

              if (!(previousCompileContext.hasElementTranscludeDirective &&
                  origAsyncDirective.replace)) {
                // it was cloned therefore we have to clone as well.
                linkNode = jqLiteClone(compileNode);
              }

              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

              // Copy in CSS classes from original node
              safeAddClass(jqLite(linkNode), oldClasses);
            }
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {
              childBoundTranscludeFn = boundTranscludeFn;
            }
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
              childBoundTranscludeFn);
          }
          linkQueue = null;
        }).
        error(function(response, code, headers, config) {
          throw $compileMinErr('tpload', 'Failed to load template: {0}', config.url);
        });

      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
        var childBoundTranscludeFn = boundTranscludeFn;
        if (linkQueue) {
          linkQueue.push(scope);
          linkQueue.push(node);
          linkQueue.push(rootElement);
          linkQueue.push(childBoundTranscludeFn);
        } else {
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
        }
      };
    }


    /**
     * Sorting function for bound directives.
     */
    function byPriority(a, b) {
      var diff = b.priority - a.priority;
      if (diff !== 0) return diff;
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
      return a.index - b.index;
    }


    function assertNoDuplicate(what, previousDirective, directive, element) {
      if (previousDirective) {
        throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',
            previousDirective.name, directive.name, what, startingTag(element));
      }
    }


      function addTextInterpolateDirective(directives, text) {
        var interpolateFn = $interpolate(text, true);
        if (interpolateFn) {
          directives.push({
            priority: 0,
            compile: function textInterpolateCompileFn(templateNode) {
              // when transcluding a template that has bindings in the root
              // then we don't have a parent and should do this in the linkFn
              var parent = templateNode.parent(), hasCompileParent = parent.length;
              if (hasCompileParent) safeAddClass(templateNode.parent(), 'ng-binding');

              return function textInterpolateLinkFn(scope, node) {
                var parent = node.parent(),
                  bindings = parent.data('$binding') || [];
                bindings.push(interpolateFn);
                parent.data('$binding', bindings);
                if (!hasCompileParent) safeAddClass(parent, 'ng-binding');
                scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                  node[0].nodeValue = value;
                });
              };
            }
          });
        }
      }


    function getTrustedContext(node, attrNormalizedName) {
      if (attrNormalizedName == "srcdoc") {
        return $sce.HTML;
      }
      var tag = nodeName_(node);
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
      if (attrNormalizedName == "xlinkHref" ||
          (tag == "FORM" && attrNormalizedName == "action") ||
          (tag != "IMG" && (attrNormalizedName == "src" ||
                            attrNormalizedName == "ngSrc"))) {
        return $sce.RESOURCE_URL;
      }
    }


    function addAttrInterpolateDirective(node, directives, value, name) {
      var interpolateFn = $interpolate(value, true);

      // no interpolation found -> ignore
      if (!interpolateFn) return;


      if (name === "multiple" && nodeName_(node) === "SELECT") {
        throw $compileMinErr("selmulti",
            "Binding to the 'multiple' attribute is not supported. Element: {0}",
            startingTag(node));
      }

      directives.push({
        priority: 100,
        compile: function() {
            return {
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                var $$observers = (attr.$$observers || (attr.$$observers = {}));

                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                  throw $compileMinErr('nodomevents',
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
                          "ng- versions (such as ng-click instead of onclick) instead.");
                }

                // we need to interpolate again, in case the attribute value has been updated
                // (e.g. by another directive's compile function)
                interpolateFn = $interpolate(attr[name], true, getTrustedContext(node, name));

                // if attribute was updated so that there is no interpolation going on we don't want to
                // register any observers
                if (!interpolateFn) return;

                // TODO(i): this should likely be attr.$set(name, iterpolateFn(scope) so that we reset the
                // actual attr value
                attr[name] = interpolateFn(scope);
                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                (attr.$$observers && attr.$$observers[name].$$scope || scope).
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if(name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
              }
            };
          }
      });
    }


    /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
    function replaceWith($rootElement, elementsToRemove, newNode) {
      var firstElementToRemove = elementsToRemove[0],
          removeCount = elementsToRemove.length,
          parent = firstElementToRemove.parentNode,
          i, ii;

      if ($rootElement) {
        for(i = 0, ii = $rootElement.length; i < ii; i++) {
          if ($rootElement[i] == firstElementToRemove) {
            $rootElement[i++] = newNode;
            for (var j = i, j2 = j + removeCount - 1,
                     jj = $rootElement.length;
                 j < jj; j++, j2++) {
              if (j2 < jj) {
                $rootElement[j] = $rootElement[j2];
              } else {
                delete $rootElement[j];
              }
            }
            $rootElement.length -= removeCount - 1;
            break;
          }
        }
      }

      if (parent) {
        parent.replaceChild(newNode, firstElementToRemove);
      }
      var fragment = document.createDocumentFragment();
      fragment.appendChild(firstElementToRemove);
      newNode[jqLite.expando] = firstElementToRemove[jqLite.expando];
      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
        var element = elementsToRemove[k];
        jqLite(element).remove(); // must do this way to clean up expando
        fragment.appendChild(element);
        delete elementsToRemove[k];
      }

      elementsToRemove[0] = newNode;
      elementsToRemove.length = 1;
    }


    function cloneAndAnnotateFn(fn, annotation) {
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
    }
  }];
}

var PREFIX_REGEXP = /^(x[\:\-_]|data[\:\-_])/i;
/**
 * Converts all accepted directives format into proper directive name.
 * All of these will become 'myDirective':
 *   my:Directive
 *   my-directive
 *   x-my-directive
 *   data-my:directive
 *
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function directiveNormalize(name) {
  return camelCase(name.replace(PREFIX_REGEXP, ''));
}

/**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 */

/**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 */


/**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */



/**
 * Closure compiler type information
 */

function nodesetLinkingFn(
  /* angular.Scope */ scope,
  /* NodeList */ nodeList,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
){}

function directiveLinkingFn(
  /* nodesetLinkingFn */ nodesetLinkingFn,
  /* angular.Scope */ scope,
  /* Node */ node,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
){}

function tokenDifference(str1, str2) {
  var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/);

  outer:
  for(var i = 0; i < tokens1.length; i++) {
    var token = tokens1[i];
    for(var j = 0; j < tokens2.length; j++) {
      if(token == tokens2[j]) continue outer;
    }
    values += (values.length > 0 ? ' ' : '') + token;
  }
  return values;
}

/**
 * @ngdoc provider
 * @name $controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
function $ControllerProvider() {
  var controllers = {},
      CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;


  /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
  this.register = function(name, constructor) {
    assertNotHasOwnProperty(name, 'controller');
    if (isObject(name)) {
      extend(controllers, name);
    } else {
      controllers[name] = constructor;
    }
  };


  this.$get = ['$injector', '$window', function($injector, $window) {

    /**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * check `window[constructor]` on the global `window` object
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */
    return function(expression, locals) {
      var instance, match, constructor, identifier;

      if(isString(expression)) {
        match = expression.match(CNTRL_REG),
        constructor = match[1],
        identifier = match[3];
        expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) || getter($window, constructor, true);

        assertArgFn(expression, constructor, true);
      }

      instance = $injector.instantiate(expression, locals);

      if (identifier) {
        if (!(locals && typeof locals.$scope === 'object')) {
          throw minErr('$controller')('noscp',
              "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
              constructor || expression.name, identifier);
        }

        locals.$scope[identifier] = instance;
      }

      return instance;
    };
  }];
}

/**
 * @ngdoc service
 * @name $document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
function $DocumentProvider(){
  this.$get = ['$window', function(window){
    return jqLite(window.document);
  }];
}

/**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * ```js
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function () {
 *     return function (exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
 * ```
 *
 * This example will override the normal action of `$exceptionHandler`, to make angular
 * exceptions fail hard when they happen, instead of just logging to the console.
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
function $ExceptionHandlerProvider() {
  this.$get = ['$log', function($log) {
    return function(exception, cause) {
      $log.error.apply($log, arguments);
    };
  }];
}

/**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
function parseHeaders(headers) {
  var parsed = {}, key, val, i;

  if (!headers) return parsed;

  forEach(headers.split('\n'), function(line) {
    i = line.indexOf(':');
    key = lowercase(trim(line.substr(0, i)));
    val = trim(line.substr(i + 1));

    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
}


/**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
function headersGetter(headers) {
  var headersObj = isObject(headers) ? headers : undefined;

  return function(name) {
    if (!headersObj) headersObj =  parseHeaders(headers);

    if (name) {
      return headersObj[lowercase(name)] || null;
    }

    return headersObj;
  };
}


/**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers Http headers getter fn.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
function transformData(data, headers, fns) {
  if (isFunction(fns))
    return fns(data, headers);

  forEach(fns, function(fn) {
    data = fn(data, headers);
  });

  return data;
}


function isSuccess(status) {
  return 200 <= status && status < 300;
}


/**
 * @ngdoc provider
 * @name $httpProvider
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */
function $HttpProvider() {
  var JSON_START = /^\s*(\[|\{[^\{])/,
      JSON_END = /[\}\]]\s*$/,
      PROTECTION_PREFIX = /^\)\]\}',?\n/,
      CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': 'application/json;charset=utf-8'};

  /**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   **/
  var defaults = this.defaults = {
    // transform incoming response data
    transformResponse: [function(data) {
      if (isString(data)) {
        // strip json vulnerability protection prefix
        data = data.replace(PROTECTION_PREFIX, '');
        if (JSON_START.test(data) && JSON_END.test(data))
          data = fromJson(data);
      }
      return data;
    }],

    // transform outgoing request data
    transformRequest: [function(d) {
      return isObject(d) && !isFile(d) && !isBlob(d) ? toJson(d) : d;
    }],

    // default headers
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      },
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
    },

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN'
  };

  /**
   * Are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   */
  var interceptorFactories = this.interceptors = [];

  /**
   * For historical reasons, response interceptors are ordered by the order in which
   * they are applied to the response. (This is the opposite of interceptorFactories)
   */
  var responseInterceptorFactories = this.responseInterceptors = [];

  this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',
      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {

    var defaultCache = $cacheFactory('$http');

    /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
    var reversedInterceptors = [];

    forEach(interceptorFactories, function(interceptorFactory) {
      reversedInterceptors.unshift(isString(interceptorFactory)
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
    });

    forEach(responseInterceptorFactories, function(interceptorFactory, index) {
      var responseFn = isString(interceptorFactory)
          ? $injector.get(interceptorFactory)
          : $injector.invoke(interceptorFactory);

      /**
       * Response interceptors go before "around" interceptors (no real reason, just
       * had to pick one.) But they are already reversed, so we can't use unshift, hence
       * the splice.
       */
      reversedInterceptors.splice(index, 0, {
        response: function(response) {
          return responseFn($q.when(response));
        },
        responseError: function(response) {
          return responseFn($q.reject(response));
        }
      });
    });


    /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * # General usage
     * The `$http` service is a function which takes a single argument — a configuration object —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
     * with two $http specific methods: `success` and `error`.
     *
     * ```js
     *   $http({method: 'GET', url: '/someUrl'}).
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * Since the returned value of calling the $http function is a `promise`, you can also use
     * the `then` method to register callbacks, and these callbacks will receive a single argument –
     * an object representing the response. See the API signature and type info below for more
     * details.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     * # Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * # Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests.
     *
     * ```js
     *   $http.get('/someUrl').success(successCallback);
     *   $http.post('/someUrl', data).success(successCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * # Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     *
     * # Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transform functions. By default, Angular
     * applies these transformations:
     *
     * Request transformations:
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations:
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     * To globally augment or override the default transforms, modify the
     * `$httpProvider.defaults.transformRequest` and `$httpProvider.defaults.transformResponse`
     * properties. These properties are by default an array of transform functions, which allows you
     * to `push` or `unshift` a new transformation function into the transformation chain. You can
     * also decide to completely override any default transformations by assigning your
     * transformation functions to these properties directly without the array wrapper.  These defaults
     * are again available on the $http factory at run-time, which may be useful if you have run-time
     * services you wish to be involved in your transformations.
     *
     * Similarly, to locally override the request/response transforms, augment the
     * `transformRequest` and/or `transformResponse` properties of the configuration object passed
     * into `$http`.
     *
     *
     * # Caching
     *
     * To enable caching, set the request configuration `cache` property to `true` (to use default
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
     * When the cache is enabled, `$http` stores the response from the server in the specified
     * cache. The next time the same request is made, the response is served from the cache without
     * sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * You can change the default cache to a new object (built with
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
     * {@link ng.$http#properties_defaults `$http.defaults.cache`} property. All requests who set
     * their `cache` property to `true` will now use this cache object.
     *
     * If you set the default cache to `false` then only requests that specify their own custom
     * cache object will be cached.
     *
     * # Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http `config` object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * # Response interceptors (DEPRECATED)
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication or any kind of synchronous or
     * asynchronous preprocessing of received responses, it is desirable to be able to intercept
     * responses for http requests before they are handed over to the application code that
     * initiated these requests. The response interceptors leverage the {@link ng.$q
     * promise apis} to fulfil this need for both synchronous and asynchronous preprocessing.
     *
     * The interceptors are service factories that are registered with the $httpProvider by
     * adding them to the `$httpProvider.responseInterceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor  — a function that
     * takes a {@link ng.$q promise} and returns the original or a new promise.
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       return promise.then(function(response) {
     *         // do something on success
     *         return response;
     *       }, function(response) {
     *         // do something on error
     *         if (canRecover(response)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(response);
     *       });
     *     }
     *   });
     *
     *   $httpProvider.responseInterceptors.push('myHttpInterceptor');
     *
     *
     *   // register the interceptor via an anonymous factory
     *   $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       // same as above
     *     }
     *   });
     * ```
     *
     *
     * # Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ## JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ## Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
     * an unauthorized site can gain your user's private data. Angular provides a mechanism
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
     * JavaScript that runs on your domain could read the cookie, your server can be assured that
     * the XHR came from JavaScript running on your domain. The header will not be set for
     * cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
     *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
     *      JSONified.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *    - **transformResponse** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body and headers and returns its transformed (typically deserialized) version.
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
     *   standard `then` method and two http specific methods: `success` and `error`. The `then`
     *   method takes two arguments a success and an error callback which will be called with a
     *   response object. The `success` and `error` methods take a single argument - a function that
     *   will be called when the request succeeds or fails respectively. The arguments passed into
     *   these functions are destructured representation of the response object passed into the
     *   `then` method. The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80"/>
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            success(function(data, status) {
              $scope.status = status;
              $scope.data = data;
            }).
            error(function(data, status) {
              $scope.data = data || "Request failed";
              $scope.status = status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

  it('should make a JSONP request to angularjs.org', function() {
    sampleJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Super Hero!/);
  });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
    function $http(requestConfig) {
      var config = {
        method: 'get',
        transformRequest: defaults.transformRequest,
        transformResponse: defaults.transformResponse
      };
      var headers = mergeHeaders(requestConfig);

      extend(config, requestConfig);
      config.headers = headers;
      config.method = uppercase(config.method);

      var serverRequest = function(config) {
        headers = config.headers;
        var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);

        // strip content-type if data is undefined
        if (isUndefined(reqData)) {
          forEach(headers, function(value, header) {
            if (lowercase(header) === 'content-type') {
                delete headers[header];
            }
          });
        }

        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
          config.withCredentials = defaults.withCredentials;
        }

        // send request
        return sendReq(config, reqData, headers).then(transformResponse, transformResponse);
      };

      var chain = [serverRequest, undefined];
      var promise = $q.when(config);

      // apply interceptors
      forEach(reversedInterceptors, function(interceptor) {
        if (interceptor.request || interceptor.requestError) {
          chain.unshift(interceptor.request, interceptor.requestError);
        }
        if (interceptor.response || interceptor.responseError) {
          chain.push(interceptor.response, interceptor.responseError);
        }
      });

      while(chain.length) {
        var thenFn = chain.shift();
        var rejectFn = chain.shift();

        promise = promise.then(thenFn, rejectFn);
      }

      promise.success = function(fn) {
        promise.then(function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      promise.error = function(fn) {
        promise.then(null, function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      return promise;

      function transformResponse(response) {
        // make a copy since the response must be cacheable
        var resp = extend({}, response, {
          data: transformData(response.data, response.headers, config.transformResponse)
        });
        return (isSuccess(response.status))
          ? resp
          : $q.reject(resp);
      }

      function mergeHeaders(config) {
        var defHeaders = defaults.headers,
            reqHeaders = extend({}, config.headers),
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

        // using for-in instead of forEach to avoid unecessary iteration after header has been found
        defaultHeadersIteration:
        for (defHeaderName in defHeaders) {
          lowercaseDefHeaderName = lowercase(defHeaderName);

          for (reqHeaderName in reqHeaders) {
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
              continue defaultHeadersIteration;
            }
          }

          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
        }

        // execute if header value is a function for merged headers
        execHeaders(reqHeaders);
        return reqHeaders;

        function execHeaders(headers) {
          var headerContent;

          forEach(headers, function(headerFn, header) {
            if (isFunction(headerFn)) {
              headerContent = headerFn();
              if (headerContent != null) {
                headers[header] = headerContent;
              } else {
                delete headers[header];
              }
            }
          });
        }
      }
    }

    $http.pendingRequests = [];

    /**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     The name of the callback should be the string `JSON_CALLBACK`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethods('get', 'delete', 'head', 'jsonp');

    /**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethodsWithData('post', 'put');

        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
    $http.defaults = defaults;


    return $http;


    function createShortMethods(names) {
      forEach(arguments, function(name) {
        $http[name] = function(url, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url
          }));
        };
      });
    }


    function createShortMethodsWithData(name) {
      forEach(arguments, function(name) {
        $http[name] = function(url, data, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url,
            data: data
          }));
        };
      });
    }


    /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
    function sendReq(config, reqData, reqHeaders) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          cache,
          cachedResp,
          url = buildUrl(config.url, config.params);

      $http.pendingRequests.push(config);
      promise.then(removePendingReq, removePendingReq);


      if ((config.cache || defaults.cache) && config.cache !== false &&
          (config.method === 'GET' || config.method === 'JSONP')) {
        cache = isObject(config.cache) ? config.cache
              : isObject(defaults.cache) ? defaults.cache
              : defaultCache;
      }

      if (cache) {
        cachedResp = cache.get(url);
        if (isDefined(cachedResp)) {
          if (isPromiseLike(cachedResp)) {
            // cached request has already been sent, but there is no response yet
            cachedResp.then(removePendingReq, removePendingReq);
            return cachedResp;
          } else {
            // serving from cache
            if (isArray(cachedResp)) {
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
            } else {
              resolvePromise(cachedResp, 200, {}, 'OK');
            }
          }
        } else {
          // put the promise for the non-transformed response into cache as a placeholder
          cache.put(url, promise);
        }
      }


      // if we won't have the response in cache, set the xsrf headers and
      // send the request to the backend
      if (isUndefined(cachedResp)) {
        var xsrfValue = urlIsSameOrigin(config.url)
            ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]
            : undefined;
        if (xsrfValue) {
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
        }

        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
            config.withCredentials, config.responseType);
      }

      return promise;


      /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
      function done(status, response, headersString, statusText) {
        if (cache) {
          if (isSuccess(status)) {
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
          } else {
            // remove promise from the cache
            cache.remove(url);
          }
        }

        resolvePromise(response, status, headersString, statusText);
        if (!$rootScope.$$phase) $rootScope.$apply();
      }


      /**
       * Resolves the raw $http promise.
       */
      function resolvePromise(response, status, headers, statusText) {
        // normalize internal statuses to 0
        status = Math.max(status, 0);

        (isSuccess(status) ? deferred.resolve : deferred.reject)({
          data: response,
          status: status,
          headers: headersGetter(headers),
          config: config,
          statusText : statusText
        });
      }


      function removePendingReq() {
        var idx = indexOf($http.pendingRequests, config);
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
      }
    }


    function buildUrl(url, params) {
      if (!params) return url;
      var parts = [];
      forEachSorted(params, function(value, key) {
        if (value === null || isUndefined(value)) return;
        if (!isArray(value)) value = [value];

        forEach(value, function(v) {
          if (isObject(v)) {
            if (isDate(v)){
              v = v.toISOString();
            } else if (isObject(v)) {
              v = toJson(v);
            }
          }
          parts.push(encodeUriQuery(key) + '=' +
                     encodeUriQuery(v));
        });
      });
      if(parts.length > 0) {
        url += ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');
      }
      return url;
    }
  }];
}

function createXhr(method) {
    //if IE and the method is not RFC2616 compliant, or if XMLHttpRequest
    //is not available, try getting an ActiveXObject. Otherwise, use XMLHttpRequest
    //if it is available
    if (msie <= 8 && (!method.match(/^(get|post|head|put|delete|options)$/i) ||
      !window.XMLHttpRequest)) {
      return new window.ActiveXObject("Microsoft.XMLHTTP");
    } else if (window.XMLHttpRequest) {
      return new window.XMLHttpRequest();
    }

    throw minErr('$httpBackend')('noxhr', "This browser does not support XMLHttpRequest.");
}

/**
 * @ngdoc service
 * @name $httpBackend
 * @requires $window
 * @requires $document
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
function $HttpBackendProvider() {
  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {
    return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
  }];
}

function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
  var ABORTED = -1;

  // TODO(vojta): fix the signature
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
    var status;
    $browser.$$incOutstandingRequestCount();
    url = url || $browser.url();

    if (lowercase(method) == 'jsonp') {
      var callbackId = '_' + (callbacks.counter++).toString(36);
      callbacks[callbackId] = function(data) {
        callbacks[callbackId].data = data;
        callbacks[callbackId].called = true;
      };

      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
          callbackId, function(status, text) {
        completeRequest(callback, status, callbacks[callbackId].data, "", text);
        callbacks[callbackId] = noop;
      });
    } else {

      var xhr = createXhr(method);

      xhr.open(method, url, true);
      forEach(headers, function(value, key) {
        if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
        }
      });

      // In IE6 and 7, this might be called synchronously when xhr.send below is called and the
      // response is in the cache. the promise api will ensure that to the app code the api is
      // always async
      xhr.onreadystatechange = function() {
        // onreadystatechange might get called multiple times with readyState === 4 on mobile webkit caused by
        // xhrs that are resolved while the app is in the background (see #5426).
        // since calling completeRequest sets the `xhr` variable to null, we just check if it's not null before
        // continuing
        //
        // we can't set xhr.onreadystatechange to undefined or delete it because that breaks IE8 (method=PATCH) and
        // Safari respectively.
        if (xhr && xhr.readyState == 4) {
          var responseHeaders = null,
              response = null,
              statusText = '';

          if(status !== ABORTED) {
            responseHeaders = xhr.getAllResponseHeaders();

            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
            // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
            response = ('response' in xhr) ? xhr.response : xhr.responseText;
          }

          // Accessing statusText on an aborted xhr object will
          // throw an 'c00c023f error' in IE9 and lower, don't touch it.
          if (!(status === ABORTED && msie < 10)) {
            statusText = xhr.statusText;
          }

          completeRequest(callback,
              status || xhr.status,
              response,
              responseHeaders,
              statusText);
        }
      };

      if (withCredentials) {
        xhr.withCredentials = true;
      }

      if (responseType) {
        try {
          xhr.responseType = responseType;
        } catch (e) {
          // WebKit added support for the json responseType value on 09/03/2013
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
          // known to throw when setting the value "json" as the response type. Other older
          // browsers implementing the responseType
          //
          // The json response type can be ignored if not supported, because JSON payloads are
          // parsed on the client-side regardless.
          if (responseType !== 'json') {
            throw e;
          }
        }
      }

      xhr.send(post || null);
    }

    if (timeout > 0) {
      var timeoutId = $browserDefer(timeoutRequest, timeout);
    } else if (isPromiseLike(timeout)) {
      timeout.then(timeoutRequest);
    }


    function timeoutRequest() {
      status = ABORTED;
      jsonpDone && jsonpDone();
      xhr && xhr.abort();
    }

    function completeRequest(callback, status, response, headersString, statusText) {
      // cancel timeout and subsequent timeout promise resolution
      timeoutId && $browserDefer.cancel(timeoutId);
      jsonpDone = xhr = null;

      // fix status code when it is 0 (0 status is undocumented).
      // Occurs when accessing file resources or on Android 4.1 stock browser
      // while retrieving files from application cache.
      if (status === 0) {
        status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
      }

      // normalize IE bug (http://bugs.jquery.com/ticket/1450)
      status = status === 1223 ? 204 : status;
      statusText = statusText || '';

      callback(status, response, headersString, statusText);
      $browser.$$completeOutstandingRequest(noop);
    }
  };

  function jsonpReq(url, callbackId, done) {
    // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
    // - fetches local scripts via XHR and evals them
    // - adds and immediately removes script elements from the document
    var script = rawDocument.createElement('script'), callback = null;
    script.type = "text/javascript";
    script.src = url;
    script.async = true;

    callback = function(event) {
      removeEventListenerFn(script, "load", callback);
      removeEventListenerFn(script, "error", callback);
      rawDocument.body.removeChild(script);
      script = null;
      var status = -1;
      var text = "unknown";

      if (event) {
        if (event.type === "load" && !callbacks[callbackId].called) {
          event = { type: "error" };
        }
        text = event.type;
        status = event.type === "error" ? 404 : 200;
      }

      if (done) {
        done(status, text);
      }
    };

    addEventListenerFn(script, "load", callback);
    addEventListenerFn(script, "error", callback);

    if (msie <= 8) {
      script.onreadystatechange = function() {
        if (isString(script.readyState) && /loaded|complete/.test(script.readyState)) {
          script.onreadystatechange = null;
          callback({
            type: 'load'
          });
        }
      };
    }

    rawDocument.body.appendChild(script);
    return callback;
  }
}

var $interpolateMinErr = minErr('$interpolate');

/**
 * @ngdoc provider
 * @name $interpolateProvider
 * @kind function
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * @example
<example module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-app="App" ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
function $InterpolateProvider() {
  var startSymbol = '{{';
  var endSymbol = '}}';

  /**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.startSymbol = function(value){
    if (value) {
      startSymbol = value;
      return this;
    } else {
      return startSymbol;
    }
  };

  /**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.endSymbol = function(value){
    if (value) {
      endSymbol = value;
      return this;
    } else {
      return endSymbol;
    }
  };


  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
    var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length;

    /**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
     * ```
     *
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     *    * `context`: an object against which any expressions embedded in the strings are evaluated
     *      against.
     *
     */
    function $interpolate(text, mustHaveExpression, trustedContext) {
      var startIndex,
          endIndex,
          index = 0,
          parts = [],
          length = text.length,
          hasInterpolation = false,
          fn,
          exp,
          concat = [];

      while(index < length) {
        if ( ((startIndex = text.indexOf(startSymbol, index)) != -1) &&
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) ) {
          (index != startIndex) && parts.push(text.substring(index, startIndex));
          parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));
          fn.exp = exp;
          index = endIndex + endSymbolLength;
          hasInterpolation = true;
        } else {
          // we did not find anything, so we have to add the remainder to the parts array
          (index != length) && parts.push(text.substring(index));
          index = length;
        }
      }

      if (!(length = parts.length)) {
        // we added, nothing, must have been an empty string.
        parts.push('');
        length = 1;
      }

      // Concatenating expressions makes it hard to reason about whether some combination of
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
      // single expression be used for iframe[src], object[src], etc., we ensure that the value
      // that's used is assigned or constructed by some JS code somewhere that is more testable or
      // make it obvious that you bound the value to some user controlled value.  This helps reduce
      // the load when auditing for XSS issues.
      if (trustedContext && parts.length > 1) {
          throw $interpolateMinErr('noconcat',
              "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
              "interpolations that concatenate multiple expressions when a trusted value is " +
              "required.  See http://docs.angularjs.org/api/ng.$sce", text);
      }

      if (!mustHaveExpression  || hasInterpolation) {
        concat.length = length;
        fn = function(context) {
          try {
            for(var i = 0, ii = length, part; i<ii; i++) {
              if (typeof (part = parts[i]) == 'function') {
                part = part(context);
                if (trustedContext) {
                  part = $sce.getTrusted(trustedContext, part);
                } else {
                  part = $sce.valueOf(part);
                }
                if (part == null) { // null || undefined
                  part = '';
                } else {
                  switch (typeof part) {
                    case 'string':
                    {
                      break;
                    }
                    case 'number':
                    {
                      part = '' + part;
                      break;
                    }
                    default:
                    {
                      part = toJson(part);
                    }
                  }
                }
              }
              concat[i] = part;
            }
            return concat.join('');
          }
          catch(err) {
            var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
                err.toString());
            $exceptionHandler(newErr);
          }
        };
        fn.exp = text;
        fn.parts = parts;
        return fn;
      }
    }


    /**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol $interpolateProvider#startSymbol} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.startSymbol = function() {
      return startSymbol;
    };


    /**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol $interpolateProvider#endSymbol} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */
    $interpolate.endSymbol = function() {
      return endSymbol;
    };

    return $interpolate;
  }];
}

function $IntervalProvider() {
  this.$get = ['$rootScope', '$window', '$q',
       function($rootScope,   $window,   $q) {
    var intervals = {};


     /**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      * <example module="intervalExample">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *           stop = $interval(function() {
      *             if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *               $scope.blood_1 = $scope.blood_1 - 3;
      *               $scope.blood_2 = $scope.blood_2 - 4;
      *             } else {
      *               $scope.stopFight();
      *             }
      *           }, 100);
      *         };
      *
      *         $scope.stopFight = function() {
      *           if (angular.isDefined(stop)) {
      *             $interval.cancel(stop);
      *             stop = undefined;
      *           }
      *         };
      *
      *         $scope.resetFight = function() {
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *         };
      *
      *         $scope.$on('$destroy', function() {
      *           // Make sure that the interval is destroyed too
      *           $scope.stopFight();
      *         });
      *       }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.bind('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       Date format: <input ng-model="format"> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */
    function interval(fn, delay, count, invokeApply) {
      var setInterval = $window.setInterval,
          clearInterval = $window.clearInterval,
          deferred = $q.defer(),
          promise = deferred.promise,
          iteration = 0,
          skipApply = (isDefined(invokeApply) && !invokeApply);

      count = isDefined(count) ? count : 0;

      promise.then(null, null, fn);

      promise.$$intervalId = setInterval(function tick() {
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          deferred.resolve(iteration);
          clearInterval(promise.$$intervalId);
          delete intervals[promise.$$intervalId];
        }

        if (!skipApply) $rootScope.$apply();

      }, delay);

      intervals[promise.$$intervalId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {promise} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
    interval.cancel = function(promise) {
      if (promise && promise.$$intervalId in intervals) {
        intervals[promise.$$intervalId].reject('canceled');
        $window.clearInterval(promise.$$intervalId);
        delete intervals[promise.$$intervalId];
        return true;
      }
      return false;
    };

    return interval;
  }];
}

/**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */
function $LocaleProvider(){
  this.$get = function() {
    return {
      id: 'en-us',

      NUMBER_FORMATS: {
        DECIMAL_SEP: '.',
        GROUP_SEP: ',',
        PATTERNS: [
          { // Decimal Pattern
            minInt: 1,
            minFrac: 0,
            maxFrac: 3,
            posPre: '',
            posSuf: '',
            negPre: '-',
            negSuf: '',
            gSize: 3,
            lgSize: 3
          },{ //Currency Pattern
            minInt: 1,
            minFrac: 2,
            maxFrac: 2,
            posPre: '\u00A4',
            posSuf: '',
            negPre: '(\u00A4',
            negSuf: ')',
            gSize: 3,
            lgSize: 3
          }
        ],
        CURRENCY_SYM: '$'
      },

      DATETIME_FORMATS: {
        MONTH:
            'January,February,March,April,May,June,July,August,September,October,November,December'
            .split(','),
        SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
        DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
        SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
        AMPMS: ['AM','PM'],
        medium: 'MMM d, y h:mm:ss a',
        short: 'M/d/yy h:mm a',
        fullDate: 'EEEE, MMMM d, y',
        longDate: 'MMMM d, y',
        mediumDate: 'MMM d, y',
        shortDate: 'M/d/yy',
        mediumTime: 'h:mm:ss a',
        shortTime: 'h:mm a'
      },

      pluralCat: function(num) {
        if (num === 1) {
          return 'one';
        }
        return 'other';
      }
    };
  };
}

var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
var $locationMinErr = minErr('$location');


/**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
function encodePath(path) {
  var segments = path.split('/'),
      i = segments.length;

  while (i--) {
    segments[i] = encodeUriSegment(segments[i]);
  }

  return segments.join('/');
}

function parseAbsoluteUrl(absoluteUrl, locationObj, appBase) {
  var parsedUrl = urlResolve(absoluteUrl, appBase);

  locationObj.$$protocol = parsedUrl.protocol;
  locationObj.$$host = parsedUrl.hostname;
  locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
}


function parseAppUrl(relativeUrl, locationObj, appBase) {
  var prefixed = (relativeUrl.charAt(0) !== '/');
  if (prefixed) {
    relativeUrl = '/' + relativeUrl;
  }
  var match = urlResolve(relativeUrl, appBase);
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
      match.pathname.substring(1) : match.pathname);
  locationObj.$$search = parseKeyValue(match.search);
  locationObj.$$hash = decodeURIComponent(match.hash);

  // make sure path starts with '/';
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
    locationObj.$$path = '/' + locationObj.$$path;
  }
}


/**
 *
 * @param {string} begin
 * @param {string} whole
 * @returns {string} returns text from whole after begin or undefined if it does not begin with
 *                   expected string.
 */
function beginsWith(begin, whole) {
  if (whole.indexOf(begin) === 0) {
    return whole.substr(begin.length);
  }
}


function stripHash(url) {
  var index = url.indexOf('#');
  return index == -1 ? url : url.substr(0, index);
}


function stripFile(url) {
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
}

/* return the server only (scheme://host:port) */
function serverBase(url) {
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
}


/**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} basePrefix url path prefix
 */
function LocationHtml5Url(appBase, basePrefix) {
  this.$$html5 = true;
  basePrefix = basePrefix || '';
  var appBaseNoFile = stripFile(appBase);
  parseAbsoluteUrl(appBase, this, appBase);


  /**
   * Parse given html5 (regular) url string into properties
   * @param {string} newAbsoluteUrl HTML5 url
   * @private
   */
  this.$$parse = function(url) {
    var pathUrl = beginsWith(appBaseNoFile, url);
    if (!isString(pathUrl)) {
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
          appBaseNoFile);
    }

    parseAppUrl(pathUrl, this, appBase);

    if (!this.$$path) {
      this.$$path = '/';
    }

    this.$$compose();
  };

  /**
   * Compose url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
  };

  this.$$rewrite = function(url) {
    var appUrl, prevAppUrl;

    if ( (appUrl = beginsWith(appBase, url)) !== undefined ) {
      prevAppUrl = appUrl;
      if ( (appUrl = beginsWith(basePrefix, appUrl)) !== undefined ) {
        return appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
      } else {
        return appBase + prevAppUrl;
      }
    } else if ( (appUrl = beginsWith(appBaseNoFile, url)) !== undefined ) {
      return appBaseNoFile + appUrl;
    } else if (appBaseNoFile == url + '/') {
      return appBaseNoFile;
    }
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangUrl(appBase, hashPrefix) {
  var appBaseNoFile = stripFile(appBase);

  parseAbsoluteUrl(appBase, this, appBase);


  /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
  this.$$parse = function(url) {
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
    var withoutHashUrl = withoutBaseUrl.charAt(0) == '#'
        ? beginsWith(hashPrefix, withoutBaseUrl)
        : (this.$$html5)
          ? withoutBaseUrl
          : '';

    if (!isString(withoutHashUrl)) {
      throw $locationMinErr('ihshprfx', 'Invalid url "{0}", missing hash prefix "{1}".', url,
          hashPrefix);
    }
    parseAppUrl(withoutHashUrl, this, appBase);

    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

    this.$$compose();

    /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
    function removeWindowsDriveName (path, url, base) {
      /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

      var firstPathSegmentMatch;

      //Get the relative path from the input URL.
      if (url.indexOf(base) === 0) {
        url = url.replace(base, '');
      }

      // The input URL intentionally contains a first path segment that ends with a colon.
      if (windowsFilePathExp.exec(url)) {
        return path;
      }

      firstPathSegmentMatch = windowsFilePathExp.exec(path);
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
    }
  };

  /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
  };

  this.$$rewrite = function(url) {
    if(stripHash(appBase) == stripHash(url)) {
      return url;
    }
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangInHtml5Url(appBase, hashPrefix) {
  this.$$html5 = true;
  LocationHashbangUrl.apply(this, arguments);

  var appBaseNoFile = stripFile(appBase);

  this.$$rewrite = function(url) {
    var appUrl;

    if ( appBase == stripHash(url) ) {
      return url;
    } else if ( (appUrl = beginsWith(appBaseNoFile, url)) ) {
      return appBase + hashPrefix + appUrl;
    } else if ( appBaseNoFile === url + '/') {
      return appBaseNoFile;
    }
  };

  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
    this.$$absUrl = appBase + hashPrefix + this.$$url;
  };

}


LocationHashbangInHtml5Url.prototype =
  LocationHashbangUrl.prototype =
  LocationHtml5Url.prototype = {

  /**
   * Are we in html5 mode?
   * @private
   */
  $$html5: false,

  /**
   * Has any change been replacing ?
   * @private
   */
  $$replace: false,

  /**
   * @ngdoc method
   * @name $location#absUrl
   *
   * @description
   * This method is getter only.
   *
   * Return full url representation with all segments encoded according to rules specified in
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
   *
   * @return {string} full url
   */
  absUrl: locationGetter('$$absUrl'),

  /**
   * @ngdoc method
   * @name $location#url
   *
   * @description
   * This method is getter / setter.
   *
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
   *
   * Change path, search and hash, when called with parameter and return `$location`.
   *
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
   * @param {string=} replace The path that will be changed
   * @return {string} url
   */
  url: function(url, replace) {
    if (isUndefined(url))
      return this.$$url;

    var match = PATH_MATCH.exec(url);
    if (match[1]) this.path(decodeURIComponent(match[1]));
    if (match[2] || match[1]) this.search(match[3] || '');
    this.hash(match[5] || '', replace);

    return this;
  },

  /**
   * @ngdoc method
   * @name $location#protocol
   *
   * @description
   * This method is getter only.
   *
   * Return protocol of current url.
   *
   * @return {string} protocol of current url
   */
  protocol: locationGetter('$$protocol'),

  /**
   * @ngdoc method
   * @name $location#host
   *
   * @description
   * This method is getter only.
   *
   * Return host of current url.
   *
   * @return {string} host of current url.
   */
  host: locationGetter('$$host'),

  /**
   * @ngdoc method
   * @name $location#port
   *
   * @description
   * This method is getter only.
   *
   * Return port of current url.
   *
   * @return {Number} port
   */
  port: locationGetter('$$port'),

  /**
   * @ngdoc method
   * @name $location#path
   *
   * @description
   * This method is getter / setter.
   *
   * Return path of current url when called without any parameter.
   *
   * Change path when called with parameter and return `$location`.
   *
   * Note: Path should always begin with forward slash (/), this method will add the forward slash
   * if it is missing.
   *
   * @param {string=} path New path
   * @return {string} path
   */
  path: locationGetterSetter('$$path', function(path) {
    return path.charAt(0) == '/' ? path : '/' + path;
  }),

  /**
   * @ngdoc method
   * @name $location#search
   *
   * @description
   * This method is getter / setter.
   *
   * Return search part (as object) of current url when called without any parameter.
   *
   * Change search part when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var searchObject = $location.search();
   * // => {foo: 'bar', baz: 'xoxo'}
   *
   *
   * // set foo to 'yipee'
   * $location.search('foo', 'yipee');
   * // => $location
   * ```
   *
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
   * hash object.
   *
   * When called with a single argument the method acts as a setter, setting the `search` component
   * of `$location` to the specified value.
   *
   * If the argument is a hash object containing an array of values, these values will be encoded
   * as duplicate search parameters in the url.
   *
   * @param {(string|Array<string>|boolean)=} paramValue If `search` is a string, then `paramValue`
   * will override only a single search property.
   *
   * If `paramValue` is an array, it will override the property of the `search` component of
   * `$location` specified via the first argument.
   *
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
   *
   * If `paramValue` is `true`, the property specified via the first argument will be added with no
   * value nor trailing equal sign.
   *
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
   * one or more arguments returns `$location` object itself.
   */
  search: function(search, paramValue) {
    switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search)) {
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          // remove object undefined or null properties
          forEach(search, function(value, key) {
            if (value == null) delete search[key];
          });

          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg',
              'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
    }

    this.$$compose();
    return this;
  },

  /**
   * @ngdoc method
   * @name $location#hash
   *
   * @description
   * This method is getter / setter.
   *
   * Return hash fragment when called without any parameter.
   *
   * Change hash fragment when called with parameter and return `$location`.
   *
   * @param {string=} hash New hash fragment
   * @return {string} hash
   */
  hash: locationGetterSetter('$$hash', identity),

  /**
   * @ngdoc method
   * @name $location#replace
   *
   * @description
   * If called, all changes to $location during current `$digest` will be replacing current history
   * record, instead of adding new one.
   */
  replace: function() {
    this.$$replace = true;
    return this;
  }
};

function locationGetter(property) {
  return function() {
    return this[property];
  };
}


function locationGetterSetter(property, preprocess) {
  return function(value) {
    if (isUndefined(value))
      return this[property];

    this[property] = preprocess(value);
    this.$$compose();

    return this;
  };
}


/**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 */

/**
 * @ngdoc provider
 * @name $locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
function $LocationProvider(){
  var hashPrefix = '',
      html5Mode = false;

  /**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.hashPrefix = function(prefix) {
    if (isDefined(prefix)) {
      hashPrefix = prefix;
      return this;
    } else {
      return hashPrefix;
    }
  };

  /**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {boolean=} mode Use HTML5 strategy if available.
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.html5Mode = function(mode) {
    if (isDefined(mode)) {
      html5Mode = mode;
      return this;
    } else {
      return html5Mode;
    }
  };

  /**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change. This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#events_$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   */

  /**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   */

  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement',
      function( $rootScope,   $browser,   $sniffer,   $rootElement) {
    var $location,
        LocationMode,
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
        initialUrl = $browser.url(),
        appBase;

    if (html5Mode) {
      appBase = serverBase(initialUrl) + (baseHref || '/');
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
    } else {
      appBase = stripHash(initialUrl);
      LocationMode = LocationHashbangUrl;
    }
    $location = new LocationMode(appBase, '#' + hashPrefix);
    $location.$$parse($location.$$rewrite(initialUrl));

    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

    $rootElement.on('click', function(event) {
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
      // currently we open nice url link and redirect then

      if (event.ctrlKey || event.metaKey || event.which == 2) return;

      var elm = jqLite(event.target);

      // traverse the DOM up to find first A tag
      while (lowercase(elm[0].nodeName) !== 'a') {
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
      }

      var absHref = elm.prop('href');

      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
        // an animation.
        absHref = urlResolve(absHref.animVal).href;
      }

      // Ignore when url is started with javascript: or mailto:
      if (IGNORE_URI_REGEXP.test(absHref)) return;

      // Make relative links work in HTML5 mode for legacy browsers (or at least IE8 & 9)
      // The href should be a regular url e.g. /link/somewhere or link/somewhere or ../somewhere or
      // somewhere#anchor or http://example.com/somewhere
      if (LocationMode === LocationHashbangInHtml5Url) {
        // get the actual href attribute - see
        // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
        var href = elm.attr('href') || elm.attr('xlink:href');

        if (href && href.indexOf('://') < 0) {         // Ignore absolute URLs
          var prefix = '#' + hashPrefix;
          if (href[0] == '/') {
            // absolute path - replace old path
            absHref = appBase + prefix + href;
          } else if (href[0] == '#') {
            // local anchor
            absHref = appBase + prefix + ($location.path() || '/') + href;
          } else {
            // relative path - join with current path
            var stack = $location.path().split("/"),
              parts = href.split("/");
            if (stack.length === 2 && !stack[1]) stack.length = 1;
            for (var i=0; i<parts.length; i++) {
              if (parts[i] == ".")
                continue;
              else if (parts[i] == "..")
                stack.pop();
              else if (parts[i].length)
                stack.push(parts[i]);
            }
            absHref = appBase + prefix + stack.join('/');
          }
        }
      }

      var rewrittenUrl = $location.$$rewrite(absHref);

      if (absHref && !elm.attr('target') && rewrittenUrl && !event.isDefaultPrevented()) {
        event.preventDefault();
        if (rewrittenUrl != $browser.url()) {
          // update location manually
          $location.$$parse(rewrittenUrl);
          $rootScope.$apply();
          // hack to work around FF6 bug 684208 when scenario runner clicks on links
          window.angular['ff-684208-preventDefault'] = true;
        }
      }
    });


    // rewrite hashbang url <> html5 url
    if ($location.absUrl() != initialUrl) {
      $browser.url($location.absUrl(), true);
    }

    // update $location when $browser url changes
    $browser.onUrlChange(function(newUrl) {
      if ($location.absUrl() != newUrl) {
        $rootScope.$evalAsync(function() {
          var oldUrl = $location.absUrl();

          $location.$$parse(newUrl);
          if ($rootScope.$broadcast('$locationChangeStart', newUrl,
                                    oldUrl).defaultPrevented) {
            $location.$$parse(oldUrl);
            $browser.url(oldUrl);
          } else {
            afterLocationChange(oldUrl);
          }
        });
        if (!$rootScope.$$phase) $rootScope.$digest();
      }
    });

    // update browser
    var changeCounter = 0;
    $rootScope.$watch(function $locationWatch() {
      var oldUrl = $browser.url();
      var currentReplace = $location.$$replace;

      if (!changeCounter || oldUrl != $location.absUrl()) {
        changeCounter++;
        $rootScope.$evalAsync(function() {
          if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).
              defaultPrevented) {
            $location.$$parse(oldUrl);
          } else {
            $browser.url($location.absUrl(), currentReplace);
            afterLocationChange(oldUrl);
          }
        });
      }
      $location.$$replace = false;

      return changeCounter;
    });

    return $location;

    function afterLocationChange(oldUrl) {
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl);
    }
}];
}

/**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         Message:
         <input type="text" ng-model="message"/>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
       </div>
     </file>
   </example>
 */

/**
 * @ngdoc provider
 * @name $logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
function $LogProvider(){
  var debug = true,
      self = this;

  /**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.debugEnabled = function(flag) {
    if (isDefined(flag)) {
      debug = flag;
    return this;
    } else {
      return debug;
    }
  };

  this.$get = ['$window', function($window){
    return {
      /**
       * @ngdoc method
       * @name $log#log
       *
       * @description
       * Write a log message
       */
      log: consoleLog('log'),

      /**
       * @ngdoc method
       * @name $log#info
       *
       * @description
       * Write an information message
       */
      info: consoleLog('info'),

      /**
       * @ngdoc method
       * @name $log#warn
       *
       * @description
       * Write a warning message
       */
      warn: consoleLog('warn'),

      /**
       * @ngdoc method
       * @name $log#error
       *
       * @description
       * Write an error message
       */
      error: consoleLog('error'),

      /**
       * @ngdoc method
       * @name $log#debug
       *
       * @description
       * Write a debug message
       */
      debug: (function () {
        var fn = consoleLog('debug');

        return function() {
          if (debug) {
            fn.apply(self, arguments);
          }
        };
      }())
    };

    function formatError(arg) {
      if (arg instanceof Error) {
        if (arg.stack) {
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
        } else if (arg.sourceURL) {
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
        }
      }
      return arg;
    }

    function consoleLog(type) {
      var console = $window.console || {},
          logFn = console[type] || console.log || noop,
          hasApply = false;

      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
      // The reason behind this is that console.log has type "object" in IE8...
      try {
        hasApply = !!logFn.apply;
      } catch (e) {}

      if (hasApply) {
        return function() {
          var args = [];
          forEach(arguments, function(arg) {
            args.push(formatError(arg));
          });
          return logFn.apply(console, args);
        };
      }

      // we are IE which either doesn't have window.console => this is noop and we do nothing,
      // or we are IE where console.log doesn't have apply so we log at least first 2 args
      return function(arg1, arg2) {
        logFn(arg1, arg2 == null ? '' : arg2);
      };
    }
  }];
}

var $parseMinErr = minErr('$parse');
var promiseWarningCache = {};
var promiseWarning;

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct
// access to $scope and locals. However, one can obtain the ability to execute arbitrary JS code by
// obtaining a reference to native JS functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor('alert("evil JS code")')
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
// against the expression language, but not to prevent exploits that were enabled by exposing
// sensitive JavaScript or browser apis on Scope. Exposing such objects on a Scope is never a good
// practice and therefore we are not even trying to protect against interaction with an object
// explicitly exposed in this way.
//
// In general, it is not possible to access a Window object from an angular expression unless a
// window or some DOM object that has a reference to window is published onto a Scope.
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
// native objects.


function ensureSafeMemberName(name, fullExpression) {
  if (name === "__defineGetter__" || name === "__defineSetter__"
      || name === "__lookupGetter__" || name === "__lookupSetter__"
      || name === "__proto__") {
    throw $parseMinErr('isecfld',
        'Attempting to access a disallowed field in Angular expressions! '
        +'Expression: {0}', fullExpression);
  }
  return name;
}

function ensureSafeObject(obj, fullExpression) {
  // nifty check if obj is Function that is fast and works across iframes and other contexts
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isWindow(obj)
        obj.document && obj.location && obj.alert && obj.setInterval) {
      throw $parseMinErr('isecwindow',
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isElement(obj)
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
      throw $parseMinErr('isecdom',
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// block Object so that we can't get hold of dangerous Object.* methods
        obj === Object) {
      throw $parseMinErr('isecobj',
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    }
  }
  return obj;
}

var CALL = Function.prototype.call;
var APPLY = Function.prototype.apply;
var BIND = Function.prototype.bind;

function ensureSafeFunction(obj, fullExpression) {
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    } else if (obj === CALL || obj === APPLY || (BIND && obj === BIND)) {
      throw $parseMinErr('isecff',
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    }
  }
}

var OPERATORS = {
    /* jshint bitwise : false */
    'null':function(){return null;},
    'true':function(){return true;},
    'false':function(){return false;},
    undefined:noop,
    '+':function(self, locals, a,b){
      a=a(self, locals); b=b(self, locals);
      if (isDefined(a)) {
        if (isDefined(b)) {
          return a + b;
        }
        return a;
      }
      return isDefined(b)?b:undefined;},
    '-':function(self, locals, a,b){
          a=a(self, locals); b=b(self, locals);
          return (isDefined(a)?a:0)-(isDefined(b)?b:0);
        },
    '*':function(self, locals, a,b){return a(self, locals)*b(self, locals);},
    '/':function(self, locals, a,b){return a(self, locals)/b(self, locals);},
    '%':function(self, locals, a,b){return a(self, locals)%b(self, locals);},
    '^':function(self, locals, a,b){return a(self, locals)^b(self, locals);},
    '=':noop,
    '===':function(self, locals, a, b){return a(self, locals)===b(self, locals);},
    '!==':function(self, locals, a, b){return a(self, locals)!==b(self, locals);},
    '==':function(self, locals, a,b){return a(self, locals)==b(self, locals);},
    '!=':function(self, locals, a,b){return a(self, locals)!=b(self, locals);},
    '<':function(self, locals, a,b){return a(self, locals)<b(self, locals);},
    '>':function(self, locals, a,b){return a(self, locals)>b(self, locals);},
    '<=':function(self, locals, a,b){return a(self, locals)<=b(self, locals);},
    '>=':function(self, locals, a,b){return a(self, locals)>=b(self, locals);},
    '&&':function(self, locals, a,b){return a(self, locals)&&b(self, locals);},
    '||':function(self, locals, a,b){return a(self, locals)||b(self, locals);},
    '&':function(self, locals, a,b){return a(self, locals)&b(self, locals);},
//    '|':function(self, locals, a,b){return a|b;},
    '|':function(self, locals, a,b){return b(self, locals)(self, locals, a(self, locals));},
    '!':function(self, locals, a){return !a(self, locals);}
};
/* jshint bitwise: true */
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


/////////////////////////////////////////


/**
 * @constructor
 */
var Lexer = function (options) {
  this.options = options;
};

Lexer.prototype = {
  constructor: Lexer,

  lex: function (text) {
    this.text = text;

    this.index = 0;
    this.ch = undefined;
    this.lastCh = ':'; // can start regexp

    this.tokens = [];

    while (this.index < this.text.length) {
      this.ch = this.text.charAt(this.index);
      if (this.is('"\'')) {
        this.readString(this.ch);
      } else if (this.isNumber(this.ch) || this.is('.') && this.isNumber(this.peek())) {
        this.readNumber();
      } else if (this.isIdent(this.ch)) {
        this.readIdent();
      } else if (this.is('(){}[].,;:?')) {
        this.tokens.push({
          index: this.index,
          text: this.ch
        });
        this.index++;
      } else if (this.isWhitespace(this.ch)) {
        this.index++;
        continue;
      } else {
        var ch2 = this.ch + this.peek();
        var ch3 = ch2 + this.peek(2);
        var fn = OPERATORS[this.ch];
        var fn2 = OPERATORS[ch2];
        var fn3 = OPERATORS[ch3];
        if (fn3) {
          this.tokens.push({index: this.index, text: ch3, fn: fn3});
          this.index += 3;
        } else if (fn2) {
          this.tokens.push({index: this.index, text: ch2, fn: fn2});
          this.index += 2;
        } else if (fn) {
          this.tokens.push({
            index: this.index,
            text: this.ch,
            fn: fn
          });
          this.index += 1;
        } else {
          this.throwError('Unexpected next character ', this.index, this.index + 1);
        }
      }
      this.lastCh = this.ch;
    }
    return this.tokens;
  },

  is: function(chars) {
    return chars.indexOf(this.ch) !== -1;
  },

  was: function(chars) {
    return chars.indexOf(this.lastCh) !== -1;
  },

  peek: function(i) {
    var num = i || 1;
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
  },

  isNumber: function(ch) {
    return ('0' <= ch && ch <= '9');
  },

  isWhitespace: function(ch) {
    // IE treats non-breaking space as \u00A0
    return (ch === ' ' || ch === '\r' || ch === '\t' ||
            ch === '\n' || ch === '\v' || ch === '\u00A0');
  },

  isIdent: function(ch) {
    return ('a' <= ch && ch <= 'z' ||
            'A' <= ch && ch <= 'Z' ||
            '_' === ch || ch === '$');
  },

  isExpOperator: function(ch) {
    return (ch === '-' || ch === '+' || this.isNumber(ch));
  },

  throwError: function(error, start, end) {
    end = end || this.index;
    var colStr = (isDefined(start)
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
            : ' ' + end);
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
        error, colStr, this.text);
  },

  readNumber: function() {
    var number = '';
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = lowercase(this.text.charAt(this.index));
      if (ch == '.' || this.isNumber(ch)) {
        number += ch;
      } else {
        var peekCh = this.peek();
        if (ch == 'e' && this.isExpOperator(peekCh)) {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            peekCh && this.isNumber(peekCh) &&
            number.charAt(number.length - 1) == 'e') {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) == 'e') {
          this.throwError('Invalid exponent');
        } else {
          break;
        }
      }
      this.index++;
    }
    number = 1 * number;
    this.tokens.push({
      index: start,
      text: number,
      literal: true,
      constant: true,
      fn: function() { return number; }
    });
  },

  readIdent: function() {
    var parser = this;

    var ident = '';
    var start = this.index;

    var lastDot, peekIndex, methodName, ch;

    while (this.index < this.text.length) {
      ch = this.text.charAt(this.index);
      if (ch === '.' || this.isIdent(ch) || this.isNumber(ch)) {
        if (ch === '.') lastDot = this.index;
        ident += ch;
      } else {
        break;
      }
      this.index++;
    }

    //check if this is not a method invocation and if it is back out to last dot
    if (lastDot) {
      peekIndex = this.index;
      while (peekIndex < this.text.length) {
        ch = this.text.charAt(peekIndex);
        if (ch === '(') {
          methodName = ident.substr(lastDot - start + 1);
          ident = ident.substr(0, lastDot - start);
          this.index = peekIndex;
          break;
        }
        if (this.isWhitespace(ch)) {
          peekIndex++;
        } else {
          break;
        }
      }
    }


    var token = {
      index: start,
      text: ident
    };

    // OPERATORS is our own object so we don't need to use special hasOwnPropertyFn
    if (OPERATORS.hasOwnProperty(ident)) {
      token.fn = OPERATORS[ident];
      token.literal = true;
      token.constant = true;
    } else {
      var getter = getterFn(ident, this.options, this.text);
      token.fn = extend(function(self, locals) {
        return (getter(self, locals));
      }, {
        assign: function(self, value) {
          return setter(self, ident, value, parser.text, parser.options);
        }
      });
    }

    this.tokens.push(token);

    if (methodName) {
      this.tokens.push({
        index:lastDot,
        text: '.'
      });
      this.tokens.push({
        index: lastDot + 1,
        text: methodName
      });
    }
  },

  readString: function(quote) {
    var start = this.index;
    this.index++;
    var string = '';
    var rawString = quote;
    var escape = false;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      rawString += ch;
      if (escape) {
        if (ch === 'u') {
          var hex = this.text.substring(this.index + 1, this.index + 5);
          if (!hex.match(/[\da-f]{4}/i))
            this.throwError('Invalid unicode escape [\\u' + hex + ']');
          this.index += 4;
          string += String.fromCharCode(parseInt(hex, 16));
        } else {
          var rep = ESCAPE[ch];
          string = string + (rep || ch);
        }
        escape = false;
      } else if (ch === '\\') {
        escape = true;
      } else if (ch === quote) {
        this.index++;
        this.tokens.push({
          index: start,
          text: rawString,
          string: string,
          literal: true,
          constant: true,
          fn: function() { return string; }
        });
        return;
      } else {
        string += ch;
      }
      this.index++;
    }
    this.throwError('Unterminated quote', start);
  }
};


/**
 * @constructor
 */
var Parser = function (lexer, $filter, options) {
  this.lexer = lexer;
  this.$filter = $filter;
  this.options = options;
};

Parser.ZERO = extend(function () {
  return 0;
}, {
  constant: true
});

Parser.prototype = {
  constructor: Parser,

  parse: function (text) {
    this.text = text;

    this.tokens = this.lexer.lex(text);

    var value = this.statements();

    if (this.tokens.length !== 0) {
      this.throwError('is an unexpected token', this.tokens[0]);
    }

    value.literal = !!value.literal;
    value.constant = !!value.constant;

    return value;
  },

  primary: function () {
    var primary;
    if (this.expect('(')) {
      primary = this.filterChain();
      this.consume(')');
    } else if (this.expect('[')) {
      primary = this.arrayDeclaration();
    } else if (this.expect('{')) {
      primary = this.object();
    } else {
      var token = this.expect();
      primary = token.fn;
      if (!primary) {
        this.throwError('not a primary expression', token);
      }
      primary.literal = !!token.literal;
      primary.constant = !!token.constant;
    }

    var next, context;
    while ((next = this.expect('(', '[', '.'))) {
      if (next.text === '(') {
        primary = this.functionCall(primary, context);
        context = null;
      } else if (next.text === '[') {
        context = primary;
        primary = this.objectIndex(primary);
      } else if (next.text === '.') {
        context = primary;
        primary = this.fieldAccess(primary);
      } else {
        this.throwError('IMPOSSIBLE');
      }
    }
    return primary;
  },

  throwError: function(msg, token) {
    throw $parseMinErr('syntax',
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
  },

  peekToken: function() {
    if (this.tokens.length === 0)
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    return this.tokens[0];
  },

  peek: function(e1, e2, e3, e4) {
    if (this.tokens.length > 0) {
      var token = this.tokens[0];
      var t = token.text;
      if (t === e1 || t === e2 || t === e3 || t === e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
        return token;
      }
    }
    return false;
  },

  expect: function(e1, e2, e3, e4){
    var token = this.peek(e1, e2, e3, e4);
    if (token) {
      this.tokens.shift();
      return token;
    }
    return false;
  },

  consume: function(e1){
    if (!this.expect(e1)) {
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
    }
  },

  unaryFn: function(fn, right) {
    return extend(function(self, locals) {
      return fn(self, locals, right);
    }, {
      constant:right.constant
    });
  },

  ternaryFn: function(left, middle, right){
    return extend(function(self, locals){
      return left(self, locals) ? middle(self, locals) : right(self, locals);
    }, {
      constant: left.constant && middle.constant && right.constant
    });
  },

  binaryFn: function(left, fn, right) {
    return extend(function(self, locals) {
      return fn(self, locals, left, right);
    }, {
      constant:left.constant && right.constant
    });
  },

  statements: function() {
    var statements = [];
    while (true) {
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
        statements.push(this.filterChain());
      if (!this.expect(';')) {
        // optimize for the common case where there is only one statement.
        // TODO(size): maybe we should not support multiple statements?
        return (statements.length === 1)
            ? statements[0]
            : function(self, locals) {
                var value;
                for (var i = 0; i < statements.length; i++) {
                  var statement = statements[i];
                  if (statement) {
                    value = statement(self, locals);
                  }
                }
                return value;
              };
      }
    }
  },

  filterChain: function() {
    var left = this.expression();
    var token;
    while (true) {
      if ((token = this.expect('|'))) {
        left = this.binaryFn(left, token.fn, this.filter());
      } else {
        return left;
      }
    }
  },

  filter: function() {
    var token = this.expect();
    var fn = this.$filter(token.text);
    var argsFn = [];
    while (true) {
      if ((token = this.expect(':'))) {
        argsFn.push(this.expression());
      } else {
        var fnInvoke = function(self, locals, input) {
          var args = [input];
          for (var i = 0; i < argsFn.length; i++) {
            args.push(argsFn[i](self, locals));
          }
          return fn.apply(self, args);
        };
        return function() {
          return fnInvoke;
        };
      }
    }
  },

  expression: function() {
    return this.assignment();
  },

  assignment: function() {
    var left = this.ternary();
    var right;
    var token;
    if ((token = this.expect('='))) {
      if (!left.assign) {
        this.throwError('implies assignment but [' +
            this.text.substring(0, token.index) + '] can not be assigned to', token);
      }
      right = this.ternary();
      return function(scope, locals) {
        return left.assign(scope, right(scope, locals), locals);
      };
    }
    return left;
  },

  ternary: function() {
    var left = this.logicalOR();
    var middle;
    var token;
    if ((token = this.expect('?'))) {
      middle = this.assignment();
      if ((token = this.expect(':'))) {
        return this.ternaryFn(left, middle, this.assignment());
      } else {
        this.throwError('expected :', token);
      }
    } else {
      return left;
    }
  },

  logicalOR: function() {
    var left = this.logicalAND();
    var token;
    while (true) {
      if ((token = this.expect('||'))) {
        left = this.binaryFn(left, token.fn, this.logicalAND());
      } else {
        return left;
      }
    }
  },

  logicalAND: function() {
    var left = this.equality();
    var token;
    if ((token = this.expect('&&'))) {
      left = this.binaryFn(left, token.fn, this.logicalAND());
    }
    return left;
  },

  equality: function() {
    var left = this.relational();
    var token;
    if ((token = this.expect('==','!=','===','!=='))) {
      left = this.binaryFn(left, token.fn, this.equality());
    }
    return left;
  },

  relational: function() {
    var left = this.additive();
    var token;
    if ((token = this.expect('<', '>', '<=', '>='))) {
      left = this.binaryFn(left, token.fn, this.relational());
    }
    return left;
  },

  additive: function() {
    var left = this.multiplicative();
    var token;
    while ((token = this.expect('+','-'))) {
      left = this.binaryFn(left, token.fn, this.multiplicative());
    }
    return left;
  },

  multiplicative: function() {
    var left = this.unary();
    var token;
    while ((token = this.expect('*','/','%'))) {
      left = this.binaryFn(left, token.fn, this.unary());
    }
    return left;
  },

  unary: function() {
    var token;
    if (this.expect('+')) {
      return this.primary();
    } else if ((token = this.expect('-'))) {
      return this.binaryFn(Parser.ZERO, token.fn, this.unary());
    } else if ((token = this.expect('!'))) {
      return this.unaryFn(token.fn, this.unary());
    } else {
      return this.primary();
    }
  },

  fieldAccess: function(object) {
    var parser = this;
    var field = this.expect().text;
    var getter = getterFn(field, this.options, this.text);

    return extend(function(scope, locals, self) {
      return getter(self || object(scope, locals));
    }, {
      assign: function(scope, value, locals) {
        var o = object(scope, locals);
        if (!o) object.assign(scope, o = {});
        return setter(o, field, value, parser.text, parser.options);
      }
    });
  },

  objectIndex: function(obj) {
    var parser = this;

    var indexFn = this.expression();
    this.consume(']');

    return extend(function(self, locals) {
      var o = obj(self, locals),
          i = indexFn(self, locals),
          v, p;

      ensureSafeMemberName(i, parser.text);
      if (!o) return undefined;
      v = ensureSafeObject(o[i], parser.text);
      if (v && v.then && parser.options.unwrapPromises) {
        p = v;
        if (!('$$v' in v)) {
          p.$$v = undefined;
          p.then(function(val) { p.$$v = val; });
        }
        v = v.$$v;
      }
      return v;
    }, {
      assign: function(self, value, locals) {
        var key = ensureSafeMemberName(indexFn(self, locals), parser.text);
        // prevent overwriting of Function.constructor which would break ensureSafeObject check
        var o = ensureSafeObject(obj(self, locals), parser.text);
        if (!o) obj.assign(self, o = {});
        return o[key] = value;
      }
    });
  },

  functionCall: function(fn, contextGetter) {
    var argsFn = [];
    if (this.peekToken().text !== ')') {
      do {
        argsFn.push(this.expression());
      } while (this.expect(','));
    }
    this.consume(')');

    var parser = this;

    return function(scope, locals) {
      var args = [];
      var context = contextGetter ? contextGetter(scope, locals) : scope;

      for (var i = 0; i < argsFn.length; i++) {
        args.push(argsFn[i](scope, locals));
      }
      var fnPtr = fn(scope, locals, context) || noop;

      ensureSafeObject(context, parser.text);
      ensureSafeFunction(fnPtr, parser.text);

      // IE stupidity! (IE doesn't have apply for some native functions)
      var v = fnPtr.apply
            ? fnPtr.apply(context, args)
            : fnPtr(args[0], args[1], args[2], args[3], args[4]);

      return ensureSafeObject(v, parser.text);
    };
  },

  // This is used with json array declaration
  arrayDeclaration: function () {
    var elementFns = [];
    var allConstant = true;
    if (this.peekToken().text !== ']') {
      do {
        if (this.peek(']')) {
          // Support trailing commas per ES5.1.
          break;
        }
        var elementFn = this.expression();
        elementFns.push(elementFn);
        if (!elementFn.constant) {
          allConstant = false;
        }
      } while (this.expect(','));
    }
    this.consume(']');

    return extend(function(self, locals) {
      var array = [];
      for (var i = 0; i < elementFns.length; i++) {
        array.push(elementFns[i](self, locals));
      }
      return array;
    }, {
      literal: true,
      constant: allConstant
    });
  },

  object: function () {
    var keyValues = [];
    var allConstant = true;
    if (this.peekToken().text !== '}') {
      do {
        if (this.peek('}')) {
          // Support trailing commas per ES5.1.
          break;
        }
        var token = this.expect(),
        key = token.string || token.text;
        this.consume(':');
        var value = this.expression();
        keyValues.push({key: key, value: value});
        if (!value.constant) {
          allConstant = false;
        }
      } while (this.expect(','));
    }
    this.consume('}');

    return extend(function(self, locals) {
      var object = {};
      for (var i = 0; i < keyValues.length; i++) {
        var keyValue = keyValues[i];
        object[keyValue.key] = keyValue.value(self, locals);
      }
      return object;
    }, {
      literal: true,
      constant: allConstant
    });
  }
};


//////////////////////////////////////////////////
// Parser helper functions
//////////////////////////////////////////////////

function setter(obj, path, setValue, fullExp, options) {
  //needed?
  options = options || {};

  var element = path.split('.'), key;
  for (var i = 0; element.length > 1; i++) {
    key = ensureSafeMemberName(element.shift(), fullExp);
    var propertyObj = obj[key];
    if (!propertyObj) {
      propertyObj = {};
      obj[key] = propertyObj;
    }
    obj = propertyObj;
    if (obj.then && options.unwrapPromises) {
      promiseWarning(fullExp);
      if (!("$$v" in obj)) {
        (function(promise) {
          promise.then(function(val) { promise.$$v = val; }); }
        )(obj);
      }
      if (obj.$$v === undefined) {
        obj.$$v = {};
      }
      obj = obj.$$v;
    }
  }
  key = ensureSafeMemberName(element.shift(), fullExp);
  ensureSafeObject(obj, fullExp);
  ensureSafeObject(obj[key], fullExp);
  obj[key] = setValue;
  return setValue;
}

var getterFnCache = {};

/**
 * Implementation of the "Black Hole" variant from:
 * - http://jsperf.com/angularjs-parse-getter/4
 * - http://jsperf.com/path-evaluation-simplified/7
 */
function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, options) {
  ensureSafeMemberName(key0, fullExp);
  ensureSafeMemberName(key1, fullExp);
  ensureSafeMemberName(key2, fullExp);
  ensureSafeMemberName(key3, fullExp);
  ensureSafeMemberName(key4, fullExp);

  return !options.unwrapPromises
      ? function cspSafeGetter(scope, locals) {
          var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope;

          if (pathVal == null) return pathVal;
          pathVal = pathVal[key0];

          if (!key1) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key1];

          if (!key2) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key2];

          if (!key3) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key3];

          if (!key4) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key4];

          return pathVal;
        }
      : function cspSafePromiseEnabledGetter(scope, locals) {
          var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope,
              promise;

          if (pathVal == null) return pathVal;

          pathVal = pathVal[key0];
          if (pathVal && pathVal.then) {
            promiseWarning(fullExp);
            if (!("$$v" in pathVal)) {
              promise = pathVal;
              promise.$$v = undefined;
              promise.then(function(val) { promise.$$v = val; });
            }
            pathVal = pathVal.$$v;
          }

          if (!key1) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key1];
          if (pathVal && pathVal.then) {
            promiseWarning(fullExp);
            if (!("$$v" in pathVal)) {
              promise = pathVal;
              promise.$$v = undefined;
              promise.then(function(val) { promise.$$v = val; });
            }
            pathVal = pathVal.$$v;
          }

          if (!key2) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key2];
          if (pathVal && pathVal.then) {
            promiseWarning(fullExp);
            if (!("$$v" in pathVal)) {
              promise = pathVal;
              promise.$$v = undefined;
              promise.then(function(val) { promise.$$v = val; });
            }
            pathVal = pathVal.$$v;
          }

          if (!key3) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key3];
          if (pathVal && pathVal.then) {
            promiseWarning(fullExp);
            if (!("$$v" in pathVal)) {
              promise = pathVal;
              promise.$$v = undefined;
              promise.then(function(val) { promise.$$v = val; });
            }
            pathVal = pathVal.$$v;
          }

          if (!key4) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key4];
          if (pathVal && pathVal.then) {
            promiseWarning(fullExp);
            if (!("$$v" in pathVal)) {
              promise = pathVal;
              promise.$$v = undefined;
              promise.then(function(val) { promise.$$v = val; });
            }
            pathVal = pathVal.$$v;
          }
          return pathVal;
        };
}

function getterFn(path, options, fullExp) {
  // Check whether the cache has this getter already.
  // We can use hasOwnProperty directly on the cache because we ensure,
  // see below, that the cache never stores a path called 'hasOwnProperty'
  if (getterFnCache.hasOwnProperty(path)) {
    return getterFnCache[path];
  }

  var pathKeys = path.split('.'),
      pathKeysLength = pathKeys.length,
      fn;

  // http://jsperf.com/angularjs-parse-getter/6
  if (options.csp) {
    if (pathKeysLength < 6) {
      fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp,
                          options);
    } else {
      fn = function(scope, locals) {
        var i = 0, val;
        do {
          val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++],
                                pathKeys[i++], fullExp, options)(scope, locals);

          locals = undefined; // clear after first iteration
          scope = val;
        } while (i < pathKeysLength);
        return val;
      };
    }
  } else {
    var code = 'var p;\n';
    forEach(pathKeys, function(key, index) {
      ensureSafeMemberName(key, fullExp);
      code += 'if(s == null) return undefined;\n' +
              's='+ (index
                      // we simply dereference 's' on any .dot notation
                      ? 's'
                      // but if we are first then we check locals first, and if so read it first
                      : '((k&&k.hasOwnProperty("' + key + '"))?k:s)') + '["' + key + '"]' + ';\n' +
              (options.unwrapPromises
                ? 'if (s && s.then) {\n' +
                  ' pw("' + fullExp.replace(/(["\r\n])/g, '\\$1') + '");\n' +
                  ' if (!("$$v" in s)) {\n' +
                    ' p=s;\n' +
                    ' p.$$v = undefined;\n' +
                    ' p.then(function(v) {p.$$v=v;});\n' +
                    '}\n' +
                  ' s=s.$$v\n' +
                '}\n'
                : '');
    });
    code += 'return s;';

    /* jshint -W054 */
    var evaledFnGetter = new Function('s', 'k', 'pw', code); // s=scope, k=locals, pw=promiseWarning
    /* jshint +W054 */
    evaledFnGetter.toString = valueFn(code);
    fn = options.unwrapPromises ? function(scope, locals) {
      return evaledFnGetter(scope, locals, promiseWarning);
    } : evaledFnGetter;
  }

  // Only cache the value if it's not going to mess up the cache object
  // This is more performant that using Object.prototype.hasOwnProperty.call
  if (path !== 'hasOwnProperty') {
    getterFnCache[path] = fn;
  }
  return fn;
}

///////////////////////////////////

/**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */


/**
 * @ngdoc provider
 * @name $parseProvider
 * @kind function
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
function $ParseProvider() {
  var cache = {};

  var $parseOptions = {
    csp: false,
    unwrapPromises: false,
    logPromiseWarnings: true
  };


  /**
   * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
   *
   * @ngdoc method
   * @name $parseProvider#unwrapPromises
   * @description
   *
   * **This feature is deprecated, see deprecation notes below for more info**
   *
   * If set to true (default is false), $parse will unwrap promises automatically when a promise is
   * found at any part of the expression. In other words, if set to true, the expression will always
   * result in a non-promise value.
   *
   * While the promise is unresolved, it's treated as undefined, but once resolved and fulfilled,
   * the fulfillment value is used in place of the promise while evaluating the expression.
   *
   * **Deprecation notice**
   *
   * This is a feature that didn't prove to be wildly useful or popular, primarily because of the
   * dichotomy between data access in templates (accessed as raw values) and controller code
   * (accessed as promises).
   *
   * In most code we ended up resolving promises manually in controllers anyway and thus unifying
   * the model access there.
   *
   * Other downsides of automatic promise unwrapping:
   *
   * - when building components it's often desirable to receive the raw promises
   * - adds complexity and slows down expression evaluation
   * - makes expression code pre-generation unattractive due to the amount of code that needs to be
   *   generated
   * - makes IDE auto-completion and tool support hard
   *
   * **Warning Logs**
   *
   * If the unwrapping is enabled, Angular will log a warning about each expression that unwraps a
   * promise (to reduce the noise, each expression is logged only once). To disable this logging use
   * `$parseProvider.logPromiseWarnings(false)` api.
   *
   *
   * @param {boolean=} value New value.
   * @returns {boolean|self} Returns the current setting when used as getter and self if used as
   *                         setter.
   */
  this.unwrapPromises = function(value) {
    if (isDefined(value)) {
      $parseOptions.unwrapPromises = !!value;
      return this;
    } else {
      return $parseOptions.unwrapPromises;
    }
  };


  /**
   * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
   *
   * @ngdoc method
   * @name $parseProvider#logPromiseWarnings
   * @description
   *
   * Controls whether Angular should log a warning on any encounter of a promise in an expression.
   *
   * The default is set to `true`.
   *
   * This setting applies only if `$parseProvider.unwrapPromises` setting is set to true as well.
   *
   * @param {boolean=} value New value.
   * @returns {boolean|self} Returns the current setting when used as getter and self if used as
   *                         setter.
   */
 this.logPromiseWarnings = function(value) {
    if (isDefined(value)) {
      $parseOptions.logPromiseWarnings = value;
      return this;
    } else {
      return $parseOptions.logPromiseWarnings;
    }
  };


  this.$get = ['$filter', '$sniffer', '$log', function($filter, $sniffer, $log) {
    $parseOptions.csp = $sniffer.csp;

    promiseWarning = function promiseWarningFn(fullExp) {
      if (!$parseOptions.logPromiseWarnings || promiseWarningCache.hasOwnProperty(fullExp)) return;
      promiseWarningCache[fullExp] = true;
      $log.warn('[$parse] Promise found in the expression `' + fullExp + '`. ' +
          'Automatic unwrapping of promises in Angular expressions is deprecated.');
    };

    return function(exp) {
      var parsedExpression;

      switch (typeof exp) {
        case 'string':

          if (cache.hasOwnProperty(exp)) {
            return cache[exp];
          }

          var lexer = new Lexer($parseOptions);
          var parser = new Parser(lexer, $filter, $parseOptions);
          parsedExpression = parser.parse(exp);

          if (exp !== 'hasOwnProperty') {
            // Only cache the value if it's not going to mess up the cache object
            // This is more performant that using Object.prototype.hasOwnProperty.call
            cache[exp] = parsedExpression;
          }

          return parsedExpression;

        case 'function':
          return exp;

        default:
          return noop;
      }
    };
  }];
}

/**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q`, `scope` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback`. It also notifies via the return value of the
 *   `notifyCallback` method. The promise can not be resolved or rejected from the notifyCallback
 *   method.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 *   Because `finally` is a reserved word in JavaScript and reserved keywords are not supported as
 *   property names by ES3, you'll need to invoke the method like `promise['finally'](callback)` to
 *   make your code IE8 and Android 2.x compatible.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 */
function $QProvider() {

  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
    return qFactory(function(callback) {
      $rootScope.$evalAsync(callback);
    }, $exceptionHandler);
  }];
}


/**
 * Constructs a promise manager.
 *
 * @param {function(Function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
function qFactory(nextTick, exceptionHandler) {

  /**
   * @ngdoc method
   * @name $q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
  var defer = function() {
    var pending = [],
        value, deferred;

    deferred = {

      resolve: function(val) {
        if (pending) {
          var callbacks = pending;
          pending = undefined;
          value = ref(val);

          if (callbacks.length) {
            nextTick(function() {
              var callback;
              for (var i = 0, ii = callbacks.length; i < ii; i++) {
                callback = callbacks[i];
                value.then(callback[0], callback[1], callback[2]);
              }
            });
          }
        }
      },


      reject: function(reason) {
        deferred.resolve(createInternalRejectedPromise(reason));
      },


      notify: function(progress) {
        if (pending) {
          var callbacks = pending;

          if (pending.length) {
            nextTick(function() {
              var callback;
              for (var i = 0, ii = callbacks.length; i < ii; i++) {
                callback = callbacks[i];
                callback[2](progress);
              }
            });
          }
        }
      },


      promise: {
        then: function(callback, errback, progressback) {
          var result = defer();

          var wrappedCallback = function(value) {
            try {
              result.resolve((isFunction(callback) ? callback : defaultCallback)(value));
            } catch(e) {
              result.reject(e);
              exceptionHandler(e);
            }
          };

          var wrappedErrback = function(reason) {
            try {
              result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
            } catch(e) {
              result.reject(e);
              exceptionHandler(e);
            }
          };

          var wrappedProgressback = function(progress) {
            try {
              result.notify((isFunction(progressback) ? progressback : defaultCallback)(progress));
            } catch(e) {
              exceptionHandler(e);
            }
          };

          if (pending) {
            pending.push([wrappedCallback, wrappedErrback, wrappedProgressback]);
          } else {
            value.then(wrappedCallback, wrappedErrback, wrappedProgressback);
          }

          return result.promise;
        },

        "catch": function(callback) {
          return this.then(null, callback);
        },

        "finally": function(callback) {

          function makePromise(value, resolved) {
            var result = defer();
            if (resolved) {
              result.resolve(value);
            } else {
              result.reject(value);
            }
            return result.promise;
          }

          function handleCallback(value, isResolved) {
            var callbackOutput = null;
            try {
              callbackOutput = (callback ||defaultCallback)();
            } catch(e) {
              return makePromise(e, false);
            }
            if (isPromiseLike(callbackOutput)) {
              return callbackOutput.then(function() {
                return makePromise(value, isResolved);
              }, function(error) {
                return makePromise(error, false);
              });
            } else {
              return makePromise(value, isResolved);
            }
          }

          return this.then(function(value) {
            return handleCallback(value, true);
          }, function(error) {
            return handleCallback(error, false);
          });
        }
      }
    };

    return deferred;
  };


  var ref = function(value) {
    if (isPromiseLike(value)) return value;
    return {
      then: function(callback) {
        var result = defer();
        nextTick(function() {
          result.resolve(callback(value));
        });
        return result.promise;
      }
    };
  };


  /**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
  var reject = function(reason) {
    var result = defer();
    result.reject(reason);
    return result.promise;
  };

  var createInternalRejectedPromise = function(reason) {
    return {
      then: function(callback, errback) {
        var result = defer();
        nextTick(function() {
          try {
            result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
          } catch(e) {
            result.reject(e);
            exceptionHandler(e);
          }
        });
        return result.promise;
      }
    };
  };


  /**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @returns {Promise} Returns a promise of the passed value or promise
   */
  var when = function(value, callback, errback, progressback) {
    var result = defer(),
        done;

    var wrappedCallback = function(value) {
      try {
        return (isFunction(callback) ? callback : defaultCallback)(value);
      } catch (e) {
        exceptionHandler(e);
        return reject(e);
      }
    };

    var wrappedErrback = function(reason) {
      try {
        return (isFunction(errback) ? errback : defaultErrback)(reason);
      } catch (e) {
        exceptionHandler(e);
        return reject(e);
      }
    };

    var wrappedProgressback = function(progress) {
      try {
        return (isFunction(progressback) ? progressback : defaultCallback)(progress);
      } catch (e) {
        exceptionHandler(e);
      }
    };

    nextTick(function() {
      ref(value).then(function(value) {
        if (done) return;
        done = true;
        result.resolve(ref(value).then(wrappedCallback, wrappedErrback, wrappedProgressback));
      }, function(reason) {
        if (done) return;
        done = true;
        result.resolve(wrappedErrback(reason));
      }, function(progress) {
        if (done) return;
        result.notify(wrappedProgressback(progress));
      });
    });

    return result.promise;
  };


  function defaultCallback(value) {
    return value;
  }


  function defaultErrback(reason) {
    return reject(reason);
  }


  /**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */
  function all(promises) {
    var deferred = defer(),
        counter = 0,
        results = isArray(promises) ? [] : {};

    forEach(promises, function(promise, key) {
      counter++;
      ref(promise).then(function(value) {
        if (results.hasOwnProperty(key)) return;
        results[key] = value;
        if (!(--counter)) deferred.resolve(results);
      }, function(reason) {
        if (results.hasOwnProperty(key)) return;
        deferred.reject(reason);
      });
    });

    if (counter === 0) {
      deferred.resolve(results);
    }

    return deferred.promise;
  }

  return {
    defer: defer,
    reject: reject,
    when: when,
    all: all
  };
}

function $$RAFProvider(){ //rAF
  this.$get = ['$window', '$timeout', function($window, $timeout) {
    var requestAnimationFrame = $window.requestAnimationFrame ||
                                $window.webkitRequestAnimationFrame ||
                                $window.mozRequestAnimationFrame;

    var cancelAnimationFrame = $window.cancelAnimationFrame ||
                               $window.webkitCancelAnimationFrame ||
                               $window.mozCancelAnimationFrame ||
                               $window.webkitCancelRequestAnimationFrame;

    var rafSupported = !!requestAnimationFrame;
    var raf = rafSupported
      ? function(fn) {
          var id = requestAnimationFrame(fn);
          return function() {
            cancelAnimationFrame(id);
          };
        }
      : function(fn) {
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
          return function() {
            $timeout.cancel(timer);
          };
        };

    raf.supported = rafSupported;

    return raf;
  }];
}

/**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - this means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
 *
 * There are few watches then a lot of observers. This is why you don't want the observer to be
 * implemented in the same way as watch. Watch requires return of initialization function which
 * are expensive to construct.
 */


/**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */

/**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */


/**
 * @ngdoc service
 * @name $rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide an event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
function $RootScopeProvider(){
  var TTL = 10;
  var $rootScopeMinErr = minErr('$rootScope');
  var lastDirtyWatch = null;

  this.digestTtl = function(value) {
    if (arguments.length) {
      TTL = value;
    }
    return TTL;
  };

  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
      function( $injector,   $exceptionHandler,   $parse,   $browser) {

    /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.)
     *
     * Here is a simple scope snippet to show how you can interact with the scope.
     * ```html
     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
     * ```
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         child.name = "World";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
    function Scope() {
      this.$id = nextUid();
      this.$$phase = this.$parent = this.$$watchers =
                     this.$$nextSibling = this.$$prevSibling =
                     this.$$childHead = this.$$childTail = null;
      this['this'] = this.$root =  this;
      this.$$destroyed = false;
      this.$$asyncQueue = [];
      this.$$postDigestQueue = [];
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$isolateBindings = {};
    }

    /**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     * @returns {number} Unique scope ID (monotonically increasing alphanumeric sequence) useful for
     *   debugging.
     */


    Scope.prototype = {
      constructor: Scope,
      /**
       * @ngdoc method
       * @name $rootScope.Scope#$new
       * @kind function
       *
       * @description
       * Creates a new child {@link ng.$rootScope.Scope scope}.
       *
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} and
       * {@link ng.$rootScope.Scope#$digest $digest()} events. The scope can be removed from the
       * scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
       *
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
       * desired for the scope and its child scopes to be permanently detached from the parent and
       * thus stop participating in model change detection and listener notification by invoking.
       *
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
       *         parent scope. The scope is isolated, as it can not see parent scope properties.
       *         When creating widgets, it is useful for the widget to not accidentally read parent
       *         state.
       *
       * @returns {Object} The newly created child scope.
       *
       */
      $new: function(isolate) {
        var ChildScope,
            child;

        if (isolate) {
          child = new Scope();
          child.$root = this.$root;
          // ensure that there is just one async queue per $rootScope and its children
          child.$$asyncQueue = this.$$asyncQueue;
          child.$$postDigestQueue = this.$$postDigestQueue;
        } else {
          // Only create a child scope class if somebody asks for one,
          // but cache it to allow the VM to optimize lookups.
          if (!this.$$childScopeClass) {
            this.$$childScopeClass = function() {
              this.$$watchers = this.$$nextSibling =
                  this.$$childHead = this.$$childTail = null;
              this.$$listeners = {};
              this.$$listenerCount = {};
              this.$id = nextUid();
              this.$$childScopeClass = null;
            };
            this.$$childScopeClass.prototype = this;
          }
          child = new this.$$childScopeClass();
        }
        child['this'] = child;
        child.$parent = this;
        child.$$prevSibling = this.$$childTail;
        if (this.$$childHead) {
          this.$$childTail.$$nextSibling = child;
          this.$$childTail = child;
        } else {
          this.$$childHead = this.$$childTail = child;
        }
        return child;
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watch
       * @kind function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (Since
       *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the
       *   `watchExpression` can execute multiple times per
       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). Inequality is determined according to reference inequality,
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`
       *   (see next point)
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
       *   according to the {@link angular.equals} function. To save the value of the object for
       *   later comparison, the {@link angular.copy} function is used. This therefore means that
       *   watching complex objects will have adverse memory and performance implications.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
       *   iteration limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
       * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a
       * change is detected, be prepared for multiple calls to your listener.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       * The example below contains an illustration of using a function as your $watch listener
       *
       *
       * # Example
       * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a listener function
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
             // This is the listener function
             function() { return food; },
             // This is the change handler
             function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

       * ```
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
       *    a call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {(function()|string)=} listener Callback called whenever the return value of
       *   the `watchExpression` changes.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(newValue, oldValue, scope)`: called with current and previous values as
       *      parameters.
       *
       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
       *     comparing for reference equality.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $watch: function(watchExp, listener, objectEquality) {
        var scope = this,
            get = compileToFn(watchExp, 'watch'),
            array = scope.$$watchers,
            watcher = {
              fn: listener,
              last: initWatchVal,
              get: get,
              exp: watchExp,
              eq: !!objectEquality
            };

        lastDirtyWatch = null;

        // in the case user pass string, we need to compile it, do we really need this ?
        if (!isFunction(listener)) {
          var listenFn = compileToFn(listener || noop, 'listener');
          watcher.fn = function(newVal, oldVal, scope) {listenFn(scope);};
        }

        if (typeof watchExp == 'string' && get.constant) {
          var originalFn = watcher.fn;
          watcher.fn = function(newVal, oldVal, scope) {
            originalFn.call(this, newVal, oldVal, scope);
            arrayRemove(array, watcher);
          };
        }

        if (!array) {
          array = scope.$$watchers = [];
        }
        // we use unshift since we use a while loop in $digest for speed.
        // the while loop reads in reverse order.
        array.unshift(watcher);

        return function deregisterWatch() {
          arrayRemove(array, watcher);
          lastDirtyWatch = null;
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchCollection
       * @kind function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays, this implies watching the array items; for object maps, this implies watching
       * the properties). If a change is detected, the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every
       *   call to $digest() to see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
       *   adding, removing, and moving items belonging to an object or array.
       *
       *
       * # Example
       * ```js
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * ```
       *
       *
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
       *    expression value should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
       *    collection will trigger a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
       *    when a change is detected.
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
       *    - The `oldCollection` object is a copy of the former collection data.
       *      Due to performance considerations, the`oldCollection` value is computed only if the
       *      `listener` function declares two or more arguments.
       *    - The `scope` argument refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the
       *    de-registration function is executed, the internal watch operation is terminated.
       */
      $watchCollection: function(obj, listener) {
        var self = this;
        // the current value, updated on each dirty-check run
        var newValue;
        // a shallow copy of the newValue from the last dirty-check run,
        // updated to match newValue during dirty-check run
        var oldValue;
        // a shallow copy of the newValue from when the last change happened
        var veryOldValue;
        // only track veryOldValue if the listener is asking for it
        var trackVeryOldValue = (listener.length > 1);
        var changeDetected = 0;
        var objGetter = $parse(obj);
        var internalArray = [];
        var internalObject = {};
        var initRun = true;
        var oldLength = 0;

        function $watchCollectionWatch() {
          newValue = objGetter(self);
          var newLength, key, bothNaN;

          if (!isObject(newValue)) { // if primitive
            if (oldValue !== newValue) {
              oldValue = newValue;
              changeDetected++;
            }
          } else if (isArrayLike(newValue)) {
            if (oldValue !== internalArray) {
              // we are transitioning from something which was not an array into array.
              oldValue = internalArray;
              oldLength = oldValue.length = 0;
              changeDetected++;
            }

            newLength = newValue.length;

            if (oldLength !== newLength) {
              // if lengths do not match we need to trigger change notification
              changeDetected++;
              oldValue.length = oldLength = newLength;
            }
            // copy the items to oldValue and look for changes.
            for (var i = 0; i < newLength; i++) {
              bothNaN = (oldValue[i] !== oldValue[i]) &&
                  (newValue[i] !== newValue[i]);
              if (!bothNaN && (oldValue[i] !== newValue[i])) {
                changeDetected++;
                oldValue[i] = newValue[i];
              }
            }
          } else {
            if (oldValue !== internalObject) {
              // we are transitioning from something which was not an object into object.
              oldValue = internalObject = {};
              oldLength = 0;
              changeDetected++;
            }
            // copy the items to oldValue and look for changes.
            newLength = 0;
            for (key in newValue) {
              if (newValue.hasOwnProperty(key)) {
                newLength++;
                if (oldValue.hasOwnProperty(key)) {
                  bothNaN = (oldValue[key] !== oldValue[key]) &&
                      (newValue[key] !== newValue[key]);
                  if (!bothNaN && (oldValue[key] !== newValue[key])) {
                    changeDetected++;
                    oldValue[key] = newValue[key];
                  }
                } else {
                  oldLength++;
                  oldValue[key] = newValue[key];
                  changeDetected++;
                }
              }
            }
            if (oldLength > newLength) {
              // we used to have more keys, need to find them and destroy them.
              changeDetected++;
              for(key in oldValue) {
                if (oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key)) {
                  oldLength--;
                  delete oldValue[key];
                }
              }
            }
          }
          return changeDetected;
        }

        function $watchCollectionAction() {
          if (initRun) {
            initRun = false;
            listener(newValue, newValue, self);
          } else {
            listener(newValue, veryOldValue, self);
          }

          // make a copy for the next time a collection is changed
          if (trackVeryOldValue) {
            if (!isObject(newValue)) {
              //primitive
              veryOldValue = newValue;
            } else if (isArrayLike(newValue)) {
              veryOldValue = new Array(newValue.length);
              for (var i = 0; i < newValue.length; i++) {
                veryOldValue[i] = newValue[i];
              }
            } else { // if object
              veryOldValue = {};
              for (var key in newValue) {
                if (hasOwnProperty.call(newValue, key)) {
                  veryOldValue[key] = newValue[key];
                }
              }
            }
          }
        }

        return this.$watch($watchCollectionWatch, $watchCollectionAction);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$digest
       * @kind function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
       * until no more listeners are firing. This means that it is possible to get into an infinite
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
       * iterations exceeds 10.
       *
       * Usually, you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#directive directives}.
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
       * a {@link ng.$compileProvider#directive directives}), which will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function with
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
       *
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
       *
       * # Example
       * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
       * ```
       *
       */
      $digest: function() {
        var watch, value, last,
            watchers,
            asyncQueue = this.$$asyncQueue,
            postDigestQueue = this.$$postDigestQueue,
            length,
            dirty, ttl = TTL,
            next, current, target = this,
            watchLog = [],
            logIdx, logMsg, asyncTask;

        beginPhase('$digest');

        lastDirtyWatch = null;

        do { // "while dirty" loop
          dirty = false;
          current = target;

          while(asyncQueue.length) {
            try {
              asyncTask = asyncQueue.shift();
              asyncTask.scope.$eval(asyncTask.expression);
            } catch (e) {
              clearPhase();
              $exceptionHandler(e);
            }
            lastDirtyWatch = null;
          }

          traverseScopesLoop:
          do { // "traverse the scopes" loop
            if ((watchers = current.$$watchers)) {
              // process our watches
              length = watchers.length;
              while (length--) {
                try {
                  watch = watchers[length];
                  // Most common watches are on primitives, in which case we can short
                  // circuit it with === operator, only when === fails do we use .equals
                  if (watch) {
                    if ((value = watch.get(current)) !== (last = watch.last) &&
                        !(watch.eq
                            ? equals(value, last)
                            : (typeof value === 'number' && typeof last === 'number'
                               && isNaN(value) && isNaN(last)))) {
                      dirty = true;
                      lastDirtyWatch = watch;
                      watch.last = watch.eq ? copy(value, null) : value;
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);
                      if (ttl < 5) {
                        logIdx = 4 - ttl;
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
                        logMsg = (isFunction(watch.exp))
                            ? 'fn: ' + (watch.exp.name || watch.exp.toString())
                            : watch.exp;
                        logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);
                        watchLog[logIdx].push(logMsg);
                      }
                    } else if (watch === lastDirtyWatch) {
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                      // have already been tested.
                      dirty = false;
                      break traverseScopesLoop;
                    }
                  }
                } catch (e) {
                  clearPhase();
                  $exceptionHandler(e);
                }
              }
            }

            // Insanity Warning: scope depth-first traversal
            // yes, this code is a bit crazy, but it works and we have tests to prove it!
            // this piece should be kept in sync with the traversal in $broadcast
            if (!(next = (current.$$childHead ||
                (current !== target && current.$$nextSibling)))) {
              while(current !== target && !(next = current.$$nextSibling)) {
                current = current.$parent;
              }
            }
          } while ((current = next));

          // `break traverseScopesLoop;` takes us to here

          if((dirty || asyncQueue.length) && !(ttl--)) {
            clearPhase();
            throw $rootScopeMinErr('infdig',
                '{0} $digest() iterations reached. Aborting!\n' +
                'Watchers fired in the last 5 iterations: {1}',
                TTL, toJson(watchLog));
          }

        } while (dirty || asyncQueue.length);

        clearPhase();

        while(postDigestQueue.length) {
          try {
            postDigestQueue.shift()();
          } catch (e) {
            $exceptionHandler(e);
          }
        }
      },


      /**
       * @ngdoc event
       * @name $rootScope.Scope#$destroy
       * @eventType broadcast on scope being destroyed
       *
       * @description
       * Broadcasted when a scope and its children are being destroyed.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$destroy
       * @kind function
       *
       * @description
       * Removes the current scope (and all of its children) from the parent scope. Removal implies
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
       * propagate to the current scope and its children. Removal also implies that the current
       * scope is eligible for garbage collection.
       *
       * The `$destroy()` is usually used by directives such as
       * {@link ng.directive:ngRepeat ngRepeat} for managing the
       * unrolling of the loop.
       *
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
       * Application code can register a `$destroy` event handler that will give it a chance to
       * perform any necessary cleanup.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */
      $destroy: function() {
        // we can't destroy the root scope or a scope that has been already destroyed
        if (this.$$destroyed) return;
        var parent = this.$parent;

        this.$broadcast('$destroy');
        this.$$destroyed = true;
        if (this === $rootScope) return;

        forEach(this.$$listenerCount, bind(null, decrementListenerCount, this));

        // sever all the references to parent scopes (after this cleanup, the current scope should
        // not be retained by any of our references and should be eligible for garbage collection)
        if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
        if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;


        // All of the code below is bogus code that works around V8's memory leak via optimized code
        // and inline caches.
        //
        // see:
        // - https://code.google.com/p/v8/issues/detail?id=2073#c26
        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
            this.$$childTail = this.$root = null;

        // don't reset these to null in case some async task tries to register a listener/watch/task
        this.$$listeners = {};
        this.$$watchers = this.$$asyncQueue = this.$$postDigestQueue = [];

        // prevent NPEs since these methods have references to properties we nulled out
        this.$destroy = this.$digest = this.$apply = noop;
        this.$on = this.$watch = function() { return noop; };
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$eval
       * @kind function
       *
       * @description
       * Executes the `expression` on the current scope and returns the result. Any exceptions in
       * the expression are propagated (uncaught). This is useful when evaluating Angular
       * expressions.
       *
       * # Example
       * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * ```
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       * @returns {*} The result of evaluating the expression.
       */
      $eval: function(expr, locals) {
        return $parse(expr)(this, locals);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$evalAsync
       * @kind function
       *
       * @description
       * Executes the expression on the current scope at a later point in time.
       *
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
       * that:
       *
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
       *     rendering).
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
       *     `expression` execution.
       *
       * Any exceptions from the execution of the expression are forwarded to the
       * {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
       * will be scheduled. However, it is encouraged to always call code that changes the model
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       */
      $evalAsync: function(expr) {
        // if we are outside of an $digest loop and this is the first time we are scheduling async
        // task also schedule async auto-flush
        if (!$rootScope.$$phase && !$rootScope.$$asyncQueue.length) {
          $browser.defer(function() {
            if ($rootScope.$$asyncQueue.length) {
              $rootScope.$digest();
            }
          });
        }

        this.$$asyncQueue.push({scope: this, expression: expr});
      },

      $$postDigest : function(fn) {
        this.$$postDigestQueue.push(fn);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$apply
       * @kind function
       *
       * @description
       * `$apply()` is used to execute an expression in angular from outside of the angular
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the angular framework we need to perform proper scope life
       * cycle of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#$digest executing watches}.
       *
       * ## Life cycle
       *
       * # Pseudo-Code of `$apply()`
       * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * ```
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
      $apply: function(expr) {
        try {
          beginPhase('$apply');
          return this.$eval(expr);
        } catch (e) {
          $exceptionHandler(e);
        } finally {
          clearPhase();
          try {
            $rootScope.$digest();
          } catch (e) {
            $exceptionHandler(e);
            throw e;
          }
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$on
       * @kind function
       *
       * @description
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
       * discussion of event life cycle.
       *
       * The event listener function format is: `function(event, args...)`. The `event` object
       * passed into the listener has the following attributes:
       *
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
       *     `$broadcast`-ed.
       *   - `currentScope` - `{Scope}`: the current scope which is handling the event.
       *   - `name` - `{string}`: name of the event.
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
       *     further event propagation (available only for events that were `$emit`-ed).
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
       *     to true.
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
       *
       * @param {string} name Event name to listen on.
       * @param {function(event, ...args)} listener Function to call when the event is emitted.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $on: function(name, listener) {
        var namedListeners = this.$$listeners[name];
        if (!namedListeners) {
          this.$$listeners[name] = namedListeners = [];
        }
        namedListeners.push(listener);

        var current = this;
        do {
          if (!current.$$listenerCount[name]) {
            current.$$listenerCount[name] = 0;
          }
          current.$$listenerCount[name]++;
        } while ((current = current.$parent));

        var self = this;
        return function() {
          namedListeners[indexOf(namedListeners, listener)] = null;
          decrementListenerCount(self, 1, name);
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$emit
       * @kind function
       *
       * @description
       * Dispatches an event `name` upwards through the scope hierarchy notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$emit` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
       * registered listeners along the way. The event will stop propagating if one of the listeners
       * cancels it.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to emit.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
       */
      $emit: function(name, args) {
        var empty = [],
            namedListeners,
            scope = this,
            stopPropagation = false,
            event = {
              name: name,
              targetScope: scope,
              stopPropagation: function() {stopPropagation = true;},
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            i, length;

        do {
          namedListeners = scope.$$listeners[name] || empty;
          event.currentScope = scope;
          for (i=0, length=namedListeners.length; i<length; i++) {

            // if listeners were deregistered, defragment the array
            if (!namedListeners[i]) {
              namedListeners.splice(i, 1);
              i--;
              length--;
              continue;
            }
            try {
              //allow all listeners attached to the current scope to run
              namedListeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          //if any listener on the current scope stops propagation, prevent bubbling
          if (stopPropagation) return event;
          //traverse upwards
          scope = scope.$parent;
        } while (scope);

        return event;
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$broadcast
       * @kind function
       *
       * @description
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$broadcast` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
       * scope and calls all registered listeners along the way. The event cannot be canceled.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to broadcast.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
       */
      $broadcast: function(name, args) {
        var target = this,
            current = target,
            next = target,
            event = {
              name: name,
              targetScope: target,
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            listeners, i, length;

        //down while you can, then up and next sibling or up and next sibling until back at root
        while ((current = next)) {
          event.currentScope = current;
          listeners = current.$$listeners[name] || [];
          for (i=0, length = listeners.length; i<length; i++) {
            // if listeners were deregistered, defragment the array
            if (!listeners[i]) {
              listeners.splice(i, 1);
              i--;
              length--;
              continue;
            }

            try {
              listeners[i].apply(null, listenerArgs);
            } catch(e) {
              $exceptionHandler(e);
            }
          }

          // Insanity Warning: scope depth-first traversal
          // yes, this code is a bit crazy, but it works and we have tests to prove it!
          // this piece should be kept in sync with the traversal in $digest
          // (though it differs due to having the extra check for $$listenerCount)
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
              (current !== target && current.$$nextSibling)))) {
            while(current !== target && !(next = current.$$nextSibling)) {
              current = current.$parent;
            }
          }
        }

        return event;
      }
    };

    var $rootScope = new Scope();

    return $rootScope;


    function beginPhase(phase) {
      if ($rootScope.$$phase) {
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
      }

      $rootScope.$$phase = phase;
    }

    function clearPhase() {
      $rootScope.$$phase = null;
    }

    function compileToFn(exp, name) {
      var fn = $parse(exp);
      assertArgFn(fn, name);
      return fn;
    }

    function decrementListenerCount(current, count, name) {
      do {
        current.$$listenerCount[name] -= count;

        if (current.$$listenerCount[name] === 0) {
          delete current.$$listenerCount[name];
        }
      } while ((current = current.$parent));
    }

    /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
    function initWatchVal() {}
  }];
}

/**
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
function $$SanitizeUriProvider() {
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file):|data:image\/)/;

  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      aHrefSanitizationWhitelist = regexp;
      return this;
    }
    return aHrefSanitizationWhitelist;
  };


  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      imgSrcSanitizationWhitelist = regexp;
      return this;
    }
    return imgSrcSanitizationWhitelist;
  };

  this.$get = function() {
    return function sanitizeUri(uri, isImage) {
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
      var normalizedVal;
      // NOTE: urlResolve() doesn't support IE < 8 so we don't sanitize for that case.
      if (!msie || msie >= 8 ) {
        normalizedVal = urlResolve(uri).href;
        if (normalizedVal !== '' && !normalizedVal.match(regex)) {
          return 'unsafe:'+normalizedVal;
        }
      }
      return uri;
    };
  };
}

var $sceMinErr = minErr('$sce');

var SCE_CONTEXTS = {
  HTML: 'html',
  CSS: 'css',
  URL: 'url',
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
  // url.  (e.g. ng-include, script src, templateUrl)
  RESOURCE_URL: 'resourceUrl',
  JS: 'js'
};

// Helper functions follow.

// Copied from:
// http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962
// Prereq: s is a string.
function escapeForRegexp(s) {
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
           replace(/\x08/g, '\\x08');
}


function adjustMatcher(matcher) {
  if (matcher === 'self') {
    return matcher;
  } else if (isString(matcher)) {
    // Strings match exactly except for 2 wildcards - '*' and '**'.
    // '*' matches any character except those from the set ':/.?&'.
    // '**' matches any character (like .* in a RegExp).
    // More than 2 *'s raises an error as it's ill defined.
    if (matcher.indexOf('***') > -1) {
      throw $sceMinErr('iwcard',
          'Illegal sequence *** in string matcher.  String: {0}', matcher);
    }
    matcher = escapeForRegexp(matcher).
                  replace('\\*\\*', '.*').
                  replace('\\*', '[^:/.?&;]*');
    return new RegExp('^' + matcher + '$');
  } else if (isRegExp(matcher)) {
    // The only other type of matcher allowed is a Regexp.
    // Match entire URL / disallow partial matches.
    // Flags are reset (i.e. no global, ignoreCase or multiline)
    return new RegExp('^' + matcher.source + '$');
  } else {
    throw $sceMinErr('imatcher',
        'Matchers may only be "self", string patterns or RegExp objects');
  }
}


function adjustMatchers(matchers) {
  var adjustedMatchers = [];
  if (isDefined(matchers)) {
    forEach(matchers, function(matcher) {
      adjustedMatchers.push(adjustMatcher(matcher));
    });
  }
  return adjustedMatchers;
}


/**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */

/**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 */

function $SceDelegateProvider() {
  this.SCE_CONTEXTS = SCE_CONTEXTS;

  // Resource URLs can also be trusted by policy.
  var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     Note: **an empty whitelist array will block all URLs**!
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
  this.resourceUrlWhitelist = function (value) {
    if (arguments.length) {
      resourceUrlWhitelist = adjustMatchers(value);
    }
    return resourceUrlWhitelist;
  };

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     The typical usage for the blacklist is to **block
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *     these would otherwise be trusted but actually return content from the redirected domain.
   *
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */

  this.resourceUrlBlacklist = function (value) {
    if (arguments.length) {
      resourceUrlBlacklist = adjustMatchers(value);
    }
    return resourceUrlBlacklist;
  };

  this.$get = ['$injector', function($injector) {

    var htmlSanitizer = function htmlSanitizer(html) {
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    };

    if ($injector.has('$sanitize')) {
      htmlSanitizer = $injector.get('$sanitize');
    }


    function matchUrl(matcher, parsedUrl) {
      if (matcher === 'self') {
        return urlIsSameOrigin(parsedUrl);
      } else {
        // definitely a regex.  See adjustMatchers()
        return !!matcher.exec(parsedUrl.href);
      }
    }

    function isResourceUrlAllowedByPolicy(url) {
      var parsedUrl = urlResolve(url.toString());
      var i, n, allowed = false;
      // Ensure that at least one item from the whitelist allows this url.
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
          allowed = true;
          break;
        }
      }
      if (allowed) {
        // Ensure that no item from the blacklist blocked this url.
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
            allowed = false;
            break;
          }
        }
      }
      return allowed;
    }

    function generateHolderType(Base) {
      var holderType = function TrustedValueHolderType(trustedValue) {
        this.$$unwrapTrustedValue = function() {
          return trustedValue;
        };
      };
      if (Base) {
        holderType.prototype = new Base();
      }
      holderType.prototype.valueOf = function sceValueOf() {
        return this.$$unwrapTrustedValue();
      };
      holderType.prototype.toString = function sceToString() {
        return this.$$unwrapTrustedValue().toString();
      };
      return holderType;
    }

    var trustedValueHolderBase = generateHolderType(),
        byType = {};

    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

    /**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
    function trustAs(type, trustedValue) {
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (!Constructor) {
        throw $sceMinErr('icontext',
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
      }
      if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
        return trustedValue;
      }
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
      // mutable objects, we ensure here that the value passed in is actually a string.
      if (typeof trustedValue !== 'string') {
        throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
      }
      return new Constructor(trustedValue);
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
    function valueOf(maybeTrusted) {
      if (maybeTrusted instanceof trustedValueHolderBase) {
        return maybeTrusted.$$unwrapTrustedValue();
      } else {
        return maybeTrusted;
      }
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
    function getTrusted(type, maybeTrusted) {
      if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
        return maybeTrusted;
      }
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (constructor && maybeTrusted instanceof constructor) {
        return maybeTrusted.$$unwrapTrustedValue();
      }
      // If we get here, then we may only take one of two actions.
      // 1. sanitize the value for the requested type, or
      // 2. throw an exception.
      if (type === SCE_CONTEXTS.RESOURCE_URL) {
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
          return maybeTrusted;
        } else {
          throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
              maybeTrusted.toString());
        }
      } else if (type === SCE_CONTEXTS.HTML) {
        return htmlSanitizer(maybeTrusted);
      }
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    }

    return { trustAs: trustAs,
             getTrusted: getTrusted,
             valueOf: valueOf };
  }];
}


/**
 * @ngdoc provider
 * @name $sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */

/* jshint maxlen: false*/

/**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE8 in quirks mode is not supported.  In this mode, IE8 allows
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parse $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead for the developer?
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      if they as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  e.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js">
 * <file name="index.html">
 *   <div ng-controller="myAppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   var mySceApp = angular.module('mySceApp', ['ngSanitize']);
 *
 *   mySceApp.controller("myAppController", function myAppController($http, $templateCache, $sce) {
 *     var self = this;
 *     $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
 *       self.userComments = userComments;
 *     });
 *     self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *         '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *         'sanitization.&quot;">Hover over this text.</span>');
 *   });
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */
/* jshint maxlen: 100 */

function $SceProvider() {
  var enabled = true;

  /**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
  this.enabled = function (value) {
    if (arguments.length) {
      enabled = !!value;
    }
    return enabled;
  };


  /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */

  this.$get = ['$parse', '$sniffer', '$sceDelegate', function(
                $parse,   $sniffer,   $sceDelegate) {
    // Prereq: Ensure that we're not running in IE8 quirks mode.  In that mode, IE allows
    // the "expression(javascript expression)" syntax which is insecure.
    if (enabled && $sniffer.msie && $sniffer.msieDocumentMode < 8) {
      throw $sceMinErr('iequirks',
        'Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks ' +
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
    }

    var sce = shallowCopy(SCE_CONTEXTS);

    /**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
    sce.isEnabled = function () {
      return enabled;
    };
    sce.trustAs = $sceDelegate.trustAs;
    sce.getTrusted = $sceDelegate.getTrusted;
    sce.valueOf = $sceDelegate.valueOf;

    if (!enabled) {
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
      sce.valueOf = identity;
    }

    /**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
    sce.parseAs = function sceParseAs(type, expr) {
      var parsed = $parse(expr);
      if (parsed.literal && parsed.constant) {
        return parsed;
      } else {
        return function sceParseAsTrusted(self, locals) {
          return sce.getTrusted(type, parsed(self, locals));
        };
      }
    };

    /**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an object that is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resource_url, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    // Shorthand delegations.
    var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

    forEach(SCE_CONTEXTS, function (enumValue, name) {
      var lName = lowercase(name);
      sce[camelCase("parse_as_" + lName)] = function (expr) {
        return parse(enumValue, expr);
      };
      sce[camelCase("get_trusted_" + lName)] = function (value) {
        return getTrusted(enumValue, value);
      };
      sce[camelCase("trust_as_" + lName)] = function (value) {
        return trustAs(enumValue, value);
      };
    });

    return sce;
  }];
}

/**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} hashchange Does the browser support hashchange event ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
function $SnifferProvider() {
  this.$get = ['$window', '$document', function($window, $document) {
    var eventSupport = {},
        android =
          int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        documentMode = document.documentMode,
        vendorPrefix,
        vendorRegex = /^(Moz|webkit|O|ms)(?=[A-Z])/,
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false,
        match;

    if (bodyStyle) {
      for(var prop in bodyStyle) {
        if(match = vendorRegex.exec(prop)) {
          vendorPrefix = match[0];
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
          break;
        }
      }

      if(!vendorPrefix) {
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
      }

      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

      if (android && (!transitions||!animations)) {
        transitions = isString(document.body.style.webkitTransition);
        animations = isString(document.body.style.webkitAnimation);
      }
    }


    return {
      // Android has history.pushState, but it does not update location correctly
      // so let's not use the history API at all.
      // http://code.google.com/p/android/issues/detail?id=17471
      // https://github.com/angular/angular.js/issues/904

      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
      // so let's not use the history API also
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
      // jshint -W018
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
      // jshint +W018
      hashchange: 'onhashchange' in $window &&
                  // IE8 compatible mode lies
                  (!documentMode || documentMode > 7),
      hasEvent: function(event) {
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
        // it. In particular the event is not fired when backspace or delete key are pressed or
        // when cut operation is performed.
        if (event == 'input' && msie == 9) return false;

        if (isUndefined(eventSupport[event])) {
          var divElm = document.createElement('div');
          eventSupport[event] = 'on' + event in divElm;
        }

        return eventSupport[event];
      },
      csp: csp(),
      vendorPrefix: vendorPrefix,
      transitions : transitions,
      animations : animations,
      android: android,
      msie : msie,
      msieDocumentMode: documentMode
    };
  }];
}

function $TimeoutProvider() {
  this.$get = ['$rootScope', '$browser', '$q', '$exceptionHandler',
       function($rootScope,   $browser,   $q,   $exceptionHandler) {
    var deferreds = {};


     /**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of registering a timeout function is a promise, which will be resolved when
      * the timeout is reached and the timeout function is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * @param {function()} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
      *   promise will be resolved with is the return value of the `fn` function.
      *
      */
    function timeout(fn, delay, invokeApply) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          skipApply = (isDefined(invokeApply) && !invokeApply),
          timeoutId;

      timeoutId = $browser.defer(function() {
        try {
          deferred.resolve(fn());
        } catch(e) {
          deferred.reject(e);
          $exceptionHandler(e);
        }
        finally {
          delete deferreds[promise.$$timeoutId];
        }

        if (!skipApply) $rootScope.$apply();
      }, delay);

      promise.$$timeoutId = timeoutId;
      deferreds[timeoutId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
    timeout.cancel = function(promise) {
      if (promise && promise.$$timeoutId in deferreds) {
        deferreds[promise.$$timeoutId].reject('canceled');
        delete deferreds[promise.$$timeoutId];
        return $browser.defer.cancel(promise.$$timeoutId);
      }
      return false;
    };

    return timeout;
  }];
}

// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
var urlParsingNode = document.createElement("a");
var originUrl = urlResolve(window.location.href, true);


/**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
 * method and IE < 8 is unsupported.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
function urlResolve(url, base) {
  var href = url;

  if (msie) {
    // Normalize before parse.  Refer Implementation Notes on why this is
    // done in two steps on IE.
    urlParsingNode.setAttribute("href", href);
    href = urlParsingNode.href;
  }

  urlParsingNode.setAttribute('href', href);

  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
  return {
    href: urlParsingNode.href,
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
    host: urlParsingNode.host,
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
    hostname: urlParsingNode.hostname,
    port: urlParsingNode.port,
    pathname: (urlParsingNode.pathname.charAt(0) === '/')
      ? urlParsingNode.pathname
      : '/' + urlParsingNode.pathname
  };
}

/**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
function urlIsSameOrigin(requestUrl) {
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
  return (parsed.protocol === originUrl.protocol &&
          parsed.host === originUrl.host);
}

/**
 * @ngdoc service
 * @name $window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function ($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
function $WindowProvider(){
  this.$get = valueFn(window);
}

/* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */

/**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */
/**
 * @ngdoc method
 * @name $filterProvider#register
 * @description
 * Register filter factory function.
 *
 * @param {String} name Name of the filter.
 * @param {Function} fn The filter factory function which is injectable.
 */


/**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
$FilterProvider.$inject = ['$provide'];
function $FilterProvider($provide) {
  var suffix = 'Filter';

  /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
  function register(name, factory) {
    if(isObject(name)) {
      var filters = {};
      forEach(name, function(filter, key) {
        filters[key] = register(key, filter);
      });
      return filters;
    } else {
      return $provide.factory(name + suffix, factory);
    }
  }
  this.register = register;

  this.$get = ['$injector', function($injector) {
    return function(name) {
      return $injector.get(name + suffix);
    };
  }];

  ////////////////////////////////////////

  /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false,
  */

  register('currency', currencyFilter);
  register('date', dateFilter);
  register('filter', filterFilter);
  register('json', jsonFilter);
  register('limitTo', limitToFilter);
  register('lowercase', lowercaseFilter);
  register('number', numberFilter);
  register('orderBy', orderByFilter);
  register('uppercase', uppercaseFilter);
}

/**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is evaluated as an expression and the resulting value is used for substring match against
 *     the contents of the `array`. All strings or objects with string properties in `array` that contain this string
 *     will be returned. The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object. That's equivalent to the simple substring match with a `string`
 *     as described above.
 *
 *   - `function(value)`: A predicate function can be used to write arbitrary filters. The function is
 *     called for each element of `array`. The final result is an array of those elements that
 *     the predicate returned true for.
 *
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if the item should be included in filtered result.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(expected, actual)}`.
 *     this is essentially strict comparison of expected and actual.
 *
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
 *     insensitive way.
 *
 * @example
   <example>
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       Search: <input ng-model="searchText">
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       Any: <input ng-model="search.$"> <br>
       Name only <input ng-model="search.name"><br>
       Phone only <input ng-model="search.phone"><br>
       Equality <input type="checkbox" ng-model="strict"><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */
function filterFilter() {
  return function(array, expression, comparator) {
    if (!isArray(array)) return array;

    var comparatorType = typeof(comparator),
        predicates = [];

    predicates.check = function(value) {
      for (var j = 0; j < predicates.length; j++) {
        if(!predicates[j](value)) {
          return false;
        }
      }
      return true;
    };

    if (comparatorType !== 'function') {
      if (comparatorType === 'boolean' && comparator) {
        comparator = function(obj, text) {
          return angular.equals(obj, text);
        };
      } else {
        comparator = function(obj, text) {
          if (obj && text && typeof obj === 'object' && typeof text === 'object') {
            for (var objKey in obj) {
              if (objKey.charAt(0) !== '$' && hasOwnProperty.call(obj, objKey) &&
                  comparator(obj[objKey], text[objKey])) {
                return true;
              }
            }
            return false;
          }
          text = (''+text).toLowerCase();
          return (''+obj).toLowerCase().indexOf(text) > -1;
        };
      }
    }

    var search = function(obj, text){
      if (typeof text == 'string' && text.charAt(0) === '!') {
        return !search(obj, text.substr(1));
      }
      switch (typeof obj) {
        case "boolean":
        case "number":
        case "string":
          return comparator(obj, text);
        case "object":
          switch (typeof text) {
            case "object":
              return comparator(obj, text);
            default:
              for ( var objKey in obj) {
                if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {
                  return true;
                }
              }
              break;
          }
          return false;
        case "array":
          for ( var i = 0; i < obj.length; i++) {
            if (search(obj[i], text)) {
              return true;
            }
          }
          return false;
        default:
          return false;
      }
    };
    switch (typeof expression) {
      case "boolean":
      case "number":
      case "string":
        // Set up expression object and fall through
        expression = {$:expression};
        // jshint -W086
      case "object":
        // jshint +W086
        for (var key in expression) {
          (function(path) {
            if (typeof expression[path] === 'undefined') return;
            predicates.push(function(value) {
              return search(path == '$' ? value : (value && value[path]), expression[path]);
            });
          })(key);
        }
        break;
      case 'function':
        predicates.push(expression);
        break;
      default:
        return array;
    }
    var filtered = [];
    for ( var j = 0; j < array.length; j++) {
      var value = array[j];
      if (predicates.check(value)) {
        filtered.push(value);
      }
    }
    return filtered;
  };
}

/**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span>{{amount | currency:"USD$"}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.binding('amount | currency:"USD$"')).getText()).toBe('USD$1,234.56');
       });
       it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
         expect(element(by.binding('amount | currency:"USD$"')).getText()).toBe('(USD$1,234.00)');
       });
     </file>
   </example>
 */
currencyFilter.$inject = ['$locale'];
function currencyFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(amount, currencySymbol){
    if (isUndefined(currencySymbol)) currencySymbol = formats.CURRENCY_SYM;
    return formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).
                replace(/\u00A4/g, currencySymbol);
  };
}

/**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is not a number an empty string is returned.
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
 *
 * @example
   <example module="numberFilterExample">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter number: <input ng-model='val'><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */


numberFilter.$inject = ['$locale'];
function numberFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(number, fractionSize) {
    return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
      fractionSize);
  };
}

var DECIMAL_SEP = '.';
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
  if (number == null || !isFinite(number) || isObject(number)) return '';

  var isNegative = number < 0;
  number = Math.abs(number);
  var numStr = number + '',
      formatedText = '',
      parts = [];

  var hasExponent = false;
  if (numStr.indexOf('e') !== -1) {
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {
      numStr = '0';
      number = 0;
    } else {
      formatedText = numStr;
      hasExponent = true;
    }
  }

  if (!hasExponent) {
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

    // determine fractionSize if it is not specified
    if (isUndefined(fractionSize)) {
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
    }

    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
    // inspired by:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);

    var fraction = ('' + number).split(DECIMAL_SEP);
    var whole = fraction[0];
    fraction = fraction[1] || '';

    var i, pos = 0,
        lgroup = pattern.lgSize,
        group = pattern.gSize;

    if (whole.length >= (lgroup + group)) {
      pos = whole.length - lgroup;
      for (i = 0; i < pos; i++) {
        if ((pos - i)%group === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
    }

    for (i = pos; i < whole.length; i++) {
      if ((whole.length - i)%lgroup === 0 && i !== 0) {
        formatedText += groupSep;
      }
      formatedText += whole.charAt(i);
    }

    // format fraction part.
    while(fraction.length < fractionSize) {
      fraction += '0';
    }

    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
  } else {

    if (fractionSize > 0 && number > -1 && number < 1) {
      formatedText = number.toFixed(fractionSize);
    }
  }

  parts.push(isNegative ? pattern.negPre : pattern.posPre);
  parts.push(formatedText);
  parts.push(isNegative ? pattern.negSuf : pattern.posSuf);
  return parts.join('');
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while(num.length < digits) num = '0' + num;
  if (trim)
    num = num.substr(num.length - digits);
  return neg + num;
}


function dateGetter(name, size, offset, trim) {
  offset = offset || 0;
  return function(date) {
    var value = date['get' + name]();
    if (offset > 0 || value > -offset)
      value += offset;
    if (value === 0 && offset == -12 ) value = 12;
    return padNumber(value, size, trim);
  };
}

function dateStrGetter(name, shortForm) {
  return function(date, formats) {
    var value = date['get' + name]();
    var get = uppercase(shortForm ? ('SHORT' + name) : name);

    return formats[get][value];
  };
}

function timeZoneGetter(date) {
  var zone = -1 * date.getTimezoneOffset();
  var paddedZone = (zone >= 0) ? "+" : "";

  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
                padNumber(Math.abs(zone % 60), 2);

  return paddedZone;
}

function ampmGetter(date, formats) {
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
}

var DATE_FORMATS = {
  yyyy: dateGetter('FullYear', 4),
    yy: dateGetter('FullYear', 2, 0, true),
     y: dateGetter('FullYear', 1),
  MMMM: dateStrGetter('Month'),
   MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
     M: dateGetter('Month', 1, 1),
    dd: dateGetter('Date', 2),
     d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
     H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
     h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
     m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
     s: dateGetter('Seconds', 1),
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
   sss: dateGetter('Milliseconds', 3),
  EEEE: dateStrGetter('Day'),
   EEE: dateStrGetter('Day', true),
     a: ampmGetter,
     Z: timeZoneGetter
};

var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,
    NUMBER_STRING = /^\-?\d+$/;

/**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in am/pm, padded (01-12)
 *   * `'h'`: Hour in am/pm, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: am/pm marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 pm)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)
 *
 *   `format` string can contain literal values. These need to be quoted with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output single quote, use two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example>
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
dateFilter.$inject = ['$locale'];
function dateFilter($locale) {


  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11
  function jsonStringToDate(string) {
    var match;
    if (match = string.match(R_ISO8601_STR)) {
      var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

      if (match[9]) {
        tzHour = int(match[9] + match[10]);
        tzMin = int(match[9] + match[11]);
      }
      dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
      var h = int(match[4]||0) - tzHour;
      var m = int(match[5]||0) - tzMin;
      var s = int(match[6]||0);
      var ms = Math.round(parseFloat('0.' + (match[7]||0)) * 1000);
      timeSetter.call(date, h, m, s, ms);
      return date;
    }
    return string;
  }


  return function(date, format) {
    var text = '',
        parts = [],
        fn, match;

    format = format || 'mediumDate';
    format = $locale.DATETIME_FORMATS[format] || format;
    if (isString(date)) {
      date = NUMBER_STRING.test(date) ? int(date) : jsonStringToDate(date);
    }

    if (isNumber(date)) {
      date = new Date(date);
    }

    if (!isDate(date)) {
      return date;
    }

    while(format) {
      match = DATE_FORMATS_SPLIT.exec(format);
      if (match) {
        parts = concat(parts, match, 1);
        format = parts.pop();
      } else {
        parts.push(format);
        format = null;
      }
    }

    forEach(parts, function(value){
      fn = DATE_FORMATS[value];
      text += fn ? fn(date, $locale.DATETIME_FORMATS)
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
    });

    return text;
  };
}


/**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example>
     <file name="index.html">
       <pre>{{ {'name':'value'} | json }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.binding("{'name':'value'}")).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
function jsonFilter() {
  return function(object) {
    return toJson(object, true);
  };
}


/**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
var lowercaseFilter = valueFn(lowercase);


/**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
var uppercaseFilter = valueFn(uppercase);

/**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array or string, as specified by
 * the value and sign (positive or negative) of `limit`.
 *
 * @param {Array|string} input Source array or string to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <example module="limitToExample">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Limit {{numbers}} to: <input type="integer" ng-model="numLimit">
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         Limit {{letters}} to: <input type="integer" ng-model="letterLimit">
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
       });

       it('should update the output when -3 is entered', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('-3');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('-3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
       });
     </file>
   </example>
 */
function limitToFilter(){
  return function(input, limit) {
    if (!isArray(input) && !isString(input)) return input;

    if (Math.abs(Number(limit)) === Infinity) {
      limit = Number(limit);
    } else {
      limit = int(limit);
    }

    if (isString(input)) {
      //NaN check on limit
      if (limit) {
        return limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length);
      } else {
        return "";
      }
    }

    var out = [],
      i, n;

    // if abs(limit) exceeds maximum length, trim it
    if (limit > input.length)
      limit = input.length;
    else if (limit < -input.length)
      limit = -input.length;

    if (limit > 0) {
      i = 0;
      n = limit;
    } else {
      i = input.length + limit;
      n = input.length;
    }

    for (; i<n; i++) {
      out.push(input[i]);
    }

    return out;
  };
}

/**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
 * correctly, make sure they are actually being saved as numbers and not strings.
 *
 * @param {Array} array The array to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `=`, `>` operator.
 *    - `string`: An Angular expression. The result of this expression is used to compare elements
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
 *      3 first characters of a property called `name`). The result of a constant expression
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
 *      to sort object by the value of their `special name` property). An expression can be
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
 *      (for example, `+name` or `-name`).
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 * @param {boolean=} reverse Reverse the order of the array.
 * @returns {Array} Sorted copy of the source array.
 *
 * @example
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
             $scope.predicate = '-age';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         [ <a href="" ng-click="predicate=''">unsorted</a> ]
         <table class="friend">
           <tr>
             <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
                 (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
             <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
             <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
 * desired parameters.
 *
 * Example:
 *
 * @example
  <example module="orderByExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <table class="friend">
          <tr>
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
              (<a href="" ng-click="order('-name',false)">^</a>)</th>
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
          </tr>
          <tr ng-repeat="friend in friends">
            <td>{{friend.name}}</td>
            <td>{{friend.phone}}</td>
            <td>{{friend.age}}</td>
          </tr>
        </table>
      </div>
    </file>

    <file name="script.js">
      angular.module('orderByExample', [])
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
          var orderBy = $filter('orderBy');
          $scope.friends = [
            { name: 'John',    phone: '555-1212',    age: 10 },
            { name: 'Mary',    phone: '555-9876',    age: 19 },
            { name: 'Mike',    phone: '555-4321',    age: 21 },
            { name: 'Adam',    phone: '555-5678',    age: 35 },
            { name: 'Julie',   phone: '555-8765',    age: 29 }
          ];
          $scope.order = function(predicate, reverse) {
            $scope.friends = orderBy($scope.friends, predicate, reverse);
          };
          $scope.order('-age',false);
        }]);
    </file>
</example>
 */
orderByFilter.$inject = ['$parse'];
function orderByFilter($parse){
  return function(array, sortPredicate, reverseOrder) {
    if (!isArray(array)) return array;
    if (!sortPredicate) return array;
    sortPredicate = isArray(sortPredicate) ? sortPredicate: [sortPredicate];
    sortPredicate = map(sortPredicate, function(predicate){
      var descending = false, get = predicate || identity;
      if (isString(predicate)) {
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
          descending = predicate.charAt(0) == '-';
          predicate = predicate.substring(1);
        }
        get = $parse(predicate);
        if (get.constant) {
          var key = get();
          return reverseComparator(function(a,b) {
            return compare(a[key], b[key]);
          }, descending);
        }
      }
      return reverseComparator(function(a,b){
        return compare(get(a),get(b));
      }, descending);
    });
    var arrayCopy = [];
    for ( var i = 0; i < array.length; i++) { arrayCopy.push(array[i]); }
    return arrayCopy.sort(reverseComparator(comparator, reverseOrder));

    function comparator(o1, o2){
      for ( var i = 0; i < sortPredicate.length; i++) {
        var comp = sortPredicate[i](o1, o2);
        if (comp !== 0) return comp;
      }
      return 0;
    }
    function reverseComparator(comp, descending) {
      return toBoolean(descending)
          ? function(a,b){return comp(b,a);}
          : comp;
    }
    function compare(v1, v2){
      var t1 = typeof v1;
      var t2 = typeof v2;
      if (t1 == t2) {
        if (isDate(v1) && isDate(v2)) {
          v1 = v1.valueOf();
          v2 = v2.valueOf();
        }
        if (t1 == "string") {
           v1 = v1.toLowerCase();
           v2 = v2.toLowerCase();
        }
        if (v1 === v2) return 0;
        return v1 < v2 ? -1 : 1;
      } else {
        return t1 < t2 ? -1 : 1;
      }
    }
  };
}

function ngDirective(directive) {
  if (isFunction(directive)) {
    directive = {
      link: directive
    };
  }
  directive.restrict = directive.restrict || 'AC';
  return valueFn(directive);
}

/**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html A tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * This change permits the easy creation of action links with the `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="list.addItem()">Add Item</a>`
 */
var htmlAnchorDirective = valueFn({
  restrict: 'E',
  compile: function(element, attr) {

    if (msie <= 8) {

      // turn <a href ng-click="..">link</a> into a stylable link in IE
      // but only if it doesn't have name attribute, in which case it's an anchor
      if (!attr.href && !attr.name) {
        attr.$set('href', '');
      }

      // add a comment node to anchors to workaround IE bug that causes element content to be reset
      // to new attribute content if attribute is updated with value containing @ and element also
      // contains value with @
      // see issue #1949
      element.append(document.createComment('IE fix'));
    }

    if (!attr.href && !attr.xlinkHref && !attr.name) {
      return function(scope, element) {
        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                   'xlink:href' : 'href';
        element.on('click', function(event){
          // if we have no href url, then don't navigate anywhere.
          if (!element.attr(href)) {
            event.preventDefault();
          }
        });
      };
    }
  }
});

/**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error.
 *
 * The `ngHref` directive solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example>
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        xit('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */

/**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * We shouldn't do this, because it will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:
 * ```html
 * <div ng-init="scope = { isDisabled: false }">
 *  <button disabled="{{scope.isDisabled}}">Disabled</button>
 * </div>
 * ```
 *
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as disabled. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngDisabled` directive solves this problem for the `disabled` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then special attribute "disabled" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as checked. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngChecked` directive solves this problem for the `checked` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to check both: <input type="checkbox" ng-model="master"><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then special attribute "checked" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as readonly. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular"/>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as selected. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngSelected` directive solves this problem for the `selected` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Check me to select: <input type="checkbox" ng-model="selected"><br/>
        <select>
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */

/**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as open. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngOpen` directive solves this problem for the `open` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
     <example>
       <file name="index.html">
         Check me check multiple: <input type="checkbox" ng-model="open"><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */

var ngAttributeAliasDirectives = {};


// boolean attrs are evaluated
forEach(BOOLEAN_ATTR, function(propName, attrName) {
  // binding to multiple is not supported
  if (propName == "multiple") return;

  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 100,
      link: function(scope, element, attr) {
        scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
          attr.$set(attrName, !!value);
        });
      }
    };
  };
});


// ng-src, ng-srcset, ng-href are interpolated
forEach(['src', 'srcset', 'href'], function(attrName) {
  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 99, // it needs to run after the attributes are interpolated
      link: function(scope, element, attr) {
        var propName = attrName,
            name = attrName;

        if (attrName === 'href' &&
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
          name = 'xlinkHref';
          attr.$attr[name] = 'xlink:href';
          propName = null;
        }

        attr.$observe(normalized, function(value) {
          if (!value) {
            if (attrName === 'href') {
              attr.$set(name, null);
            }
            return;
          }

          attr.$set(name, value);

          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
          // to set the property as well to achieve the desired effect.
          // we use attr[attrName] value since $set can sanitize the url.
          if (msie && propName) element.prop(propName, attr[name]);
        });
      }
    };
  };
});

/* global -nullFormCtrl */
var nullFormCtrl = {
  $addControl: noop,
  $removeControl: noop,
  $setValidity: noop,
  $setDirty: noop,
  $setPristine: noop
};

/**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 *
 * @property {Object} $error Is an object hash, containing references to all invalid controls or
 *  forms, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that are invalid for given error name.
 *
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
//asks for $scope to fool the BC controller module
FormController.$inject = ['$element', '$attrs', '$scope', '$animate'];
function FormController(element, attrs, $scope, $animate) {
  var form = this,
      parentForm = element.parent().controller('form') || nullFormCtrl,
      invalidCount = 0, // used to easily determine if we are valid
      errors = form.$error = {},
      controls = [];

  // init state
  form.$name = attrs.name || attrs.ngForm;
  form.$dirty = false;
  form.$pristine = true;
  form.$valid = true;
  form.$invalid = false;

  parentForm.$addControl(form);

  // Setup initial state of the control
  element.addClass(PRISTINE_CLASS);
  toggleValidCss(true);

  // convenience method for easy toggling of classes
  function toggleValidCss(isValid, validationErrorKey) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
    $animate.removeClass(element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
    $animate.addClass(element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
  }

  /**
   * @ngdoc method
   * @name form.FormController#$addControl
   *
   * @description
   * Register a control with the form.
   *
   * Input elements using ngModelController do this automatically when they are linked.
   */
  form.$addControl = function(control) {
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
    // and not added to the scope.  Now we throw an error.
    assertNotHasOwnProperty(control.$name, 'input');
    controls.push(control);

    if (control.$name) {
      form[control.$name] = control;
    }
  };

  /**
   * @ngdoc method
   * @name form.FormController#$removeControl
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   */
  form.$removeControl = function(control) {
    if (control.$name && form[control.$name] === control) {
      delete form[control.$name];
    }
    forEach(errors, function(queue, validationToken) {
      form.$setValidity(validationToken, true, control);
    });

    arrayRemove(controls, control);
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setValidity
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
  form.$setValidity = function(validationToken, isValid, control) {
    var queue = errors[validationToken];

    if (isValid) {
      if (queue) {
        arrayRemove(queue, control);
        if (!queue.length) {
          invalidCount--;
          if (!invalidCount) {
            toggleValidCss(isValid);
            form.$valid = true;
            form.$invalid = false;
          }
          errors[validationToken] = false;
          toggleValidCss(true, validationToken);
          parentForm.$setValidity(validationToken, true, form);
        }
      }

    } else {
      if (!invalidCount) {
        toggleValidCss(isValid);
      }
      if (queue) {
        if (includes(queue, control)) return;
      } else {
        errors[validationToken] = queue = [];
        invalidCount++;
        toggleValidCss(false, validationToken);
        parentForm.$setValidity(validationToken, false, form);
      }
      queue.push(control);

      form.$valid = false;
      form.$invalid = true;
    }
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
  form.$setDirty = function() {
    $animate.removeClass(element, PRISTINE_CLASS);
    $animate.addClass(element, DIRTY_CLASS);
    form.$dirty = true;
    form.$pristine = false;
    parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
  form.$setPristine = function () {
    $animate.removeClass(element, DIRTY_CLASS);
    $animate.addClass(element, PRISTINE_CLASS);
    form.$dirty = false;
    form.$pristine = true;
    forEach(controls, function(control) {
      control.$setPristine();
    });
  };
}


/**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */

 /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
 * using Angular validation directives in forms that are dynamically generated using the
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
 * `ngForm` directive and nest these in an outer `form` element.
 *
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          -webkit-transition:all linear 0.5s;
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <tt>userType = {{userType}}</tt><br>
         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 */
var formDirectiveFactory = function(isNgForm) {
  return ['$timeout', function($timeout) {
    var formDirective = {
      name: 'form',
      restrict: isNgForm ? 'EAC' : 'E',
      controller: FormController,
      compile: function() {
        return {
          pre: function(scope, formElement, attr, controller) {
            if (!attr.action) {
              // we can't use jq events because if a form is destroyed during submission the default
              // action is not prevented. see #1238
              //
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
              // page reload if the form was destroyed by submission of the form via a click handler
              // on a button in the form. Looks like an IE9 specific bug.
              var preventDefaultListener = function(event) {
                event.preventDefault
                  ? event.preventDefault()
                  : event.returnValue = false; // IE
              };

              addEventListenerFn(formElement[0], 'submit', preventDefaultListener);

              // unregister the preventDefault listener so that we don't not leak memory but in a
              // way that will achieve the prevention of the default action.
              formElement.on('$destroy', function() {
                $timeout(function() {
                  removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                }, 0, false);
              });
            }

            var parentFormCtrl = formElement.parent().controller('form'),
                alias = attr.name || attr.ngForm;

            if (alias) {
              setter(scope, alias, controller, alias);
            }
            if (parentFormCtrl) {
              formElement.on('$destroy', function() {
                parentFormCtrl.$removeControl(controller);
                if (alias) {
                  setter(scope, alias, undefined, alias);
                }
                extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
              });
            }
          }
        };
      }
    };

    return formDirective;
  }];
};

var formDirective = formDirectiveFactory();
var ngFormDirective = formDirectiveFactory(true);

/* global VALID_CLASS: true,
    INVALID_CLASS: true,
    PRISTINE_CLASS: true,
    DIRTY_CLASS: true
*/

var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;

var inputType = {

  /**
   * @ngdoc input
   * @name input[text]
   *
   * @description
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
   *
   * *NOTE* Not every feature offered is available for all input types.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
   *    This parameter is ignored for input[type=password] controls, which will never trim the
   *    input.
   *
   * @example
      <example name="text-input-directive" module="textInputExample">
        <file name="index.html">
         <script>
           angular.module('textInputExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.text = 'guest';
               $scope.word = /^\s*\w*\s*$/;
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Single word: <input type="text" name="input" ng-model="text"
                               ng-pattern="word" required ng-trim="false">
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.pattern">
             Single word only!</span>

           <tt>text = {{text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'text': textInputType,


  /**
   * @ngdoc input
   * @name input[number]
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="number-input-directive" module="numberExample">
        <file name="index.html">
         <script>
           angular.module('numberExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.value = 12;
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Number: <input type="number" name="input" ng-model="value"
                          min="0" max="99" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.number">
             Not valid number!</span>
           <tt>value = {{value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var value = element(by.binding('value'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('value'));

          it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'number': numberInputType,


  /**
   * @ngdoc input
   * @name input[url]
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="url-input-directive" module="urlExample">
        <file name="index.html">
         <script>
           angular.module('urlExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.text = 'http://google.com';
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           URL: <input type="url" name="input" ng-model="text" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.url">
             Not valid url!</span>
           <tt>text = {{text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'url': urlInputType,


  /**
   * @ngdoc input
   * @name input[email]
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="email-input-directive" module="emailExample">
        <file name="index.html">
         <script>
           angular.module('emailExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.text = 'me@example.com';
             }]);
         </script>
           <form name="myForm" ng-controller="ExampleController">
             Email: <input type="email" name="input" ng-model="text" required>
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.email">
               Not valid email!</span>
             <tt>text = {{text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
         </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'email': emailInputType,


  /**
   * @ngdoc input
   * @name input[radio]
   *
   * @description
   * HTML radio button.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string} value The value to which the expression should be set when selected.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {string} ngValue Angular expression which sets the value to which the expression should
   *    be set when selected.
   *
   * @example
      <example name="radio-input-directive" module="radioExample">
        <file name="index.html">
         <script>
           angular.module('radioExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.color = 'blue';
               $scope.specialValue = {
                 "id": "12345",
                 "value": "green"
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <input type="radio" ng-model="color" value="red">  Red <br/>
           <input type="radio" ng-model="color" ng-value="specialValue"> Green <br/>
           <input type="radio" ng-model="color" value="blue"> Blue <br/>
           <tt>color = {{color | json}}</tt><br/>
          </form>
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var color = element(by.binding('color'));

            expect(color.getText()).toContain('blue');

            element.all(by.model('color')).get(0).click();

            expect(color.getText()).toContain('red');
          });
        </file>
      </example>
   */
  'radio': radioInputType,


  /**
   * @ngdoc input
   * @name input[checkbox]
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngTrueValue The value to which the expression should be set when selected.
   * @param {string=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="checkbox-input-directive" module="checkboxExample">
        <file name="index.html">
         <script>
           angular.module('checkboxExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.value1 = true;
               $scope.value2 = 'YES'
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Value1: <input type="checkbox" ng-model="value1"> <br/>
           Value2: <input type="checkbox" ng-model="value2"
                          ng-true-value="YES" ng-false-value="NO"> <br/>
           <tt>value1 = {{value1}}</tt><br/>
           <tt>value2 = {{value2}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var value1 = element(by.binding('value1'));
            var value2 = element(by.binding('value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('value1')).click();
            element(by.model('value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
        </file>
      </example>
   */
  'checkbox': checkboxInputType,

  'hidden': noop,
  'button': noop,
  'submit': noop,
  'reset': noop,
  'file': noop
};

// A helper function to call $setValidity and return the value / undefined,
// a pattern that is repeated a lot in the input validation logic.
function validate(ctrl, validatorName, validity, value){
  ctrl.$setValidity(validatorName, validity);
  return validity ? value : undefined;
}

function testFlags(validity, flags) {
  var i, flag;
  if (flags) {
    for (i=0; i<flags.length; ++i) {
      flag = flags[i];
      if (validity[flag]) {
        return true;
      }
    }
  }
  return false;
}

// Pass validity so that behaviour can be mocked easier.
function addNativeHtml5Validators(ctrl, validatorName, badFlags, ignoreFlags, validity) {
  if (isObject(validity)) {
    ctrl.$$hasNativeValidators = true;
    var validator = function(value) {
      // Don't overwrite previous validation, don't consider valueMissing to apply (ng-required can
      // perform the required validation)
      if (!ctrl.$error[validatorName] &&
          !testFlags(validity, ignoreFlags) &&
          testFlags(validity, badFlags)) {
        ctrl.$setValidity(validatorName, false);
        return;
      }
      return value;
    };
    ctrl.$parsers.push(validator);
  }
}

function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  var validity = element.prop(VALIDITY_STATE_PROPERTY);
  var placeholder = element[0].placeholder, noevent = {};
  var type = lowercase(element[0].type);
  ctrl.$$validityState = validity;

  // In composition mode, users are still inputing intermediate text buffer,
  // hold the listener until composition is done.
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
  if (!$sniffer.android) {
    var composing = false;

    element.on('compositionstart', function(data) {
      composing = true;
    });

    element.on('compositionend', function() {
      composing = false;
      listener();
    });
  }

  var listener = function(ev) {
    if (composing) return;
    var value = element.val();

    // IE (11 and under) seem to emit an 'input' event if the placeholder value changes.
    // We don't want to dirty the value when this happens, so we abort here. Unfortunately,
    // IE also sends input events for other non-input-related things, (such as focusing on a
    // form control), so this change is not entirely enough to solve this.
    if (msie && (ev || noevent).type === 'input' && element[0].placeholder !== placeholder) {
      placeholder = element[0].placeholder;
      return;
    }

    // By default we will trim the value
    // If the attribute ng-trim exists we will avoid trimming
    // If input type is 'password', the value is never trimmed
    if (type !== 'password' && (toBoolean(attr.ngTrim || 'T'))) {
      value = trim(value);
    }

    // If a control is suffering from bad input, browsers discard its value, so it may be
    // necessary to revalidate even if the control's value is the same empty value twice in
    // a row.
    var revalidate = validity && ctrl.$$hasNativeValidators;
    if (ctrl.$viewValue !== value || (value === '' && revalidate)) {
      if (scope.$$phase) {
        ctrl.$setViewValue(value);
      } else {
        scope.$apply(function() {
          ctrl.$setViewValue(value);
        });
      }
    }
  };

  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
  // input event on backspace, delete or cut
  if ($sniffer.hasEvent('input')) {
    element.on('input', listener);
  } else {
    var timeout;

    var deferListener = function() {
      if (!timeout) {
        timeout = $browser.defer(function() {
          listener();
          timeout = null;
        });
      }
    };

    element.on('keydown', function(event) {
      var key = event.keyCode;

      // ignore
      //    command            modifiers                   arrows
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

      deferListener();
    });

    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
    if ($sniffer.hasEvent('paste')) {
      element.on('paste cut', deferListener);
    }
  }

  // if user paste into input using mouse on older browser
  // or form autocomplete on newer browser, we need "change" event to catch it
  element.on('change', listener);

  ctrl.$render = function() {
    element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
  };

  // pattern validator
  var pattern = attr.ngPattern,
      patternValidator,
      match;

  if (pattern) {
    var validateRegex = function(regexp, value) {
      return validate(ctrl, 'pattern', ctrl.$isEmpty(value) || regexp.test(value), value);
    };
    match = pattern.match(/^\/(.*)\/([gim]*)$/);
    if (match) {
      pattern = new RegExp(match[1], match[2]);
      patternValidator = function(value) {
        return validateRegex(pattern, value);
      };
    } else {
      patternValidator = function(value) {
        var patternObj = scope.$eval(pattern);

        if (!patternObj || !patternObj.test) {
          throw minErr('ngPattern')('noregexp',
            'Expected {0} to be a RegExp but was {1}. Element: {2}', pattern,
            patternObj, startingTag(element));
        }
        return validateRegex(patternObj, value);
      };
    }

    ctrl.$formatters.push(patternValidator);
    ctrl.$parsers.push(patternValidator);
  }

  // min length validator
  if (attr.ngMinlength) {
    var minlength = int(attr.ngMinlength);
    var minLengthValidator = function(value) {
      return validate(ctrl, 'minlength', ctrl.$isEmpty(value) || value.length >= minlength, value);
    };

    ctrl.$parsers.push(minLengthValidator);
    ctrl.$formatters.push(minLengthValidator);
  }

  // max length validator
  if (attr.ngMaxlength) {
    var maxlength = int(attr.ngMaxlength);
    var maxLengthValidator = function(value) {
      return validate(ctrl, 'maxlength', ctrl.$isEmpty(value) || value.length <= maxlength, value);
    };

    ctrl.$parsers.push(maxLengthValidator);
    ctrl.$formatters.push(maxLengthValidator);
  }
}

var numberBadFlags = ['badInput'];

function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);

  ctrl.$parsers.push(function(value) {
    var empty = ctrl.$isEmpty(value);
    if (empty || NUMBER_REGEXP.test(value)) {
      ctrl.$setValidity('number', true);
      return value === '' ? null : (empty ? value : parseFloat(value));
    } else {
      ctrl.$setValidity('number', false);
      return undefined;
    }
  });

  addNativeHtml5Validators(ctrl, 'number', numberBadFlags, null, ctrl.$$validityState);

  ctrl.$formatters.push(function(value) {
    return ctrl.$isEmpty(value) ? '' : '' + value;
  });

  if (attr.min) {
    var minValidator = function(value) {
      var min = parseFloat(attr.min);
      return validate(ctrl, 'min', ctrl.$isEmpty(value) || value >= min, value);
    };

    ctrl.$parsers.push(minValidator);
    ctrl.$formatters.push(minValidator);
  }

  if (attr.max) {
    var maxValidator = function(value) {
      var max = parseFloat(attr.max);
      return validate(ctrl, 'max', ctrl.$isEmpty(value) || value <= max, value);
    };

    ctrl.$parsers.push(maxValidator);
    ctrl.$formatters.push(maxValidator);
  }

  ctrl.$formatters.push(function(value) {
    return validate(ctrl, 'number', ctrl.$isEmpty(value) || isNumber(value), value);
  });
}

function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);

  var urlValidator = function(value) {
    return validate(ctrl, 'url', ctrl.$isEmpty(value) || URL_REGEXP.test(value), value);
  };

  ctrl.$formatters.push(urlValidator);
  ctrl.$parsers.push(urlValidator);
}

function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);

  var emailValidator = function(value) {
    return validate(ctrl, 'email', ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value), value);
  };

  ctrl.$formatters.push(emailValidator);
  ctrl.$parsers.push(emailValidator);
}

function radioInputType(scope, element, attr, ctrl) {
  // make the name unique, if not defined
  if (isUndefined(attr.name)) {
    element.attr('name', nextUid());
  }

  element.on('click', function() {
    if (element[0].checked) {
      scope.$apply(function() {
        ctrl.$setViewValue(attr.value);
      });
    }
  });

  ctrl.$render = function() {
    var value = attr.value;
    element[0].checked = (value == ctrl.$viewValue);
  };

  attr.$observe('value', ctrl.$render);
}

function checkboxInputType(scope, element, attr, ctrl) {
  var trueValue = attr.ngTrueValue,
      falseValue = attr.ngFalseValue;

  if (!isString(trueValue)) trueValue = true;
  if (!isString(falseValue)) falseValue = false;

  element.on('click', function() {
    scope.$apply(function() {
      ctrl.$setViewValue(element[0].checked);
    });
  });

  ctrl.$render = function() {
    element[0].checked = ctrl.$viewValue;
  };

  // Override the standard `$isEmpty` because a value of `false` means empty in a checkbox.
  ctrl.$isEmpty = function(value) {
    return value !== trueValue;
  };

  ctrl.$formatters.push(function(value) {
    return value === trueValue;
  });

  ctrl.$parsers.push(function(value) {
    return value ? trueValue : falseValue;
  });
}


/**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 */


/**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control with angular data-binding. Input control follows HTML5 input types
 * and polyfills the HTML5 validation behavior for older browsers.
 *
 * *NOTE* Not every feature offered is available for all input types.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           User name: <input type="text" name="userName" ng-model="user.name" required>
           <span class="error" ng-show="myForm.userName.$error.required">
             Required!</span><br>
           Last name: <input type="text" name="lastName" ng-model="user.last"
             ng-minlength="3" ng-maxlength="10">
           <span class="error" ng-show="myForm.lastName.$error.minlength">
             Too short!</span>
           <span class="error" ng-show="myForm.lastName.$error.maxlength">
             Too long!</span><br>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.binding('{{user}}'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
var inputDirective = ['$browser', '$sniffer', function($browser, $sniffer) {
  return {
    restrict: 'E',
    require: '?ngModel',
    link: function(scope, element, attr, ctrl) {
      if (ctrl) {
        (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer,
                                                            $browser);
      }
    }
  };
}];

var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty';

/**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {string} $viewValue Actual string value in the view.
 * @property {*} $modelValue The value in the model, that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM.  Each function is called, in turn, passing the value
       through to the next. The last return value is used to populate the model.
       Used to sanitize / convert the value as well as validation. For validation,
       the parsers should update the validity state using
       {@link ngModel.NgModelController#$setValidity $setValidity()},
       and return `undefined` for invalid values.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. Each function is called, in turn, passing the value through to the
       next. Used to format / convert values for display in the control and validation.
 * ```js
 * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(formatter);
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all errors as keys.
 *
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 *
 * @description
 *
 * `NgModelController` provides API for the `ng-model` directive. The controller contains
 * services for data-binding, validation, CSS updates, and value formatting and parsing. It
 * purposefully does not contain any logic which deals with DOM rendering or listening to
 * DOM events. Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding.
 *
 * ## Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * Note that `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.  This will not work on older browsers.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if(!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$apply(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate) {
  this.$viewValue = Number.NaN;
  this.$modelValue = Number.NaN;
  this.$parsers = [];
  this.$formatters = [];
  this.$viewChangeListeners = [];
  this.$pristine = true;
  this.$dirty = false;
  this.$valid = true;
  this.$invalid = false;
  this.$name = $attr.name;

  var ngModelGet = $parse($attr.ngModel),
      ngModelSet = ngModelGet.assign;

  if (!ngModelSet) {
    throw minErr('ngModel')('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
        $attr.ngModel, startingTag($element));
  }

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   */
  this.$render = noop;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of the input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different to the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is empty.
   */
  this.$isEmpty = function(value) {
    return isUndefined(value) || value === '' || value === null || value !== value;
  };

  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,
      invalidCount = 0, // used to easily determine if we are valid
      $error = this.$error = {}; // keep invalid keys here


  // Setup initial state of the control
  $element.addClass(PRISTINE_CLASS);
  toggleValidCss(true);

  // convenience method for easy toggling of classes
  function toggleValidCss(isValid, validationErrorKey) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
    $animate.removeClass($element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
    $animate.addClass($element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
  }

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setValidity
   *
   * @description
   * Change the validity state, and notifies the form when the control changes validity. (i.e. it
   * does not notify form if given validator is already marked as invalid).
   *
   * This method should be called by validators - i.e. the parser or formatter functions.
   *
   * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign
   *        to `$error[validationErrorKey]=!isValid` so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).
   */
  this.$setValidity = function(validationErrorKey, isValid) {
    // Purposeful use of ! here to cast isValid to boolean in case it is undefined
    // jshint -W018
    if ($error[validationErrorKey] === !isValid) return;
    // jshint +W018

    if (isValid) {
      if ($error[validationErrorKey]) invalidCount--;
      if (!invalidCount) {
        toggleValidCss(true);
        this.$valid = true;
        this.$invalid = false;
      }
    } else {
      toggleValidCss(false);
      this.$invalid = true;
      this.$valid = false;
      invalidCount++;
    }

    $error[validationErrorKey] = !isValid;
    toggleValidCss(isValid, validationErrorKey);

    parentForm.$setValidity(validationErrorKey, isValid, this);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the control to its pristine
   * state (ng-pristine class).
   */
  this.$setPristine = function () {
    this.$dirty = false;
    this.$pristine = true;
    $animate.removeClass($element, DIRTY_CLASS);
    $animate.addClass($element, PRISTINE_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when the view value changes, typically from within a DOM event handler.
   * For example {@link ng.directive:input input} and
   * {@link ng.directive:select select} directives call it.
   *
   * It will update the $viewValue, then pass this value through each of the functions in `$parsers`,
   * which includes any validators. The value that comes out of this `$parsers` pipeline, be applied to
   * `$modelValue` and the **expression** specified in the `ng-model` attribute.
   *
   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
   *
   * Note that calling this function does not trigger a `$digest`.
   *
   * @param {string} value Value from the view.
   */
  this.$setViewValue = function(value) {
    this.$viewValue = value;

    // change to dirty
    if (this.$pristine) {
      this.$dirty = true;
      this.$pristine = false;
      $animate.removeClass($element, PRISTINE_CLASS);
      $animate.addClass($element, DIRTY_CLASS);
      parentForm.$setDirty();
    }

    forEach(this.$parsers, function(fn) {
      value = fn(value);
    });

    if (this.$modelValue !== value) {
      this.$modelValue = value;
      ngModelSet($scope, value);
      forEach(this.$viewChangeListeners, function(listener) {
        try {
          listener();
        } catch(e) {
          $exceptionHandler(e);
        }
      });
    }
  };

  // model -> value
  var ctrl = this;

  $scope.$watch(function ngModelWatch() {
    var value = ngModelGet($scope);

    // if scope model value and ngModel value are out of sync
    if (ctrl.$modelValue !== value) {

      var formatters = ctrl.$formatters,
          idx = formatters.length;

      ctrl.$modelValue = value;
      while(idx--) {
        value = formatters[idx](value);
      }

      if (ctrl.$viewValue !== value) {
        ctrl.$viewValue = value;
        ctrl.$render();
      }
    }

    return value;
  });
}];


/**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [https://github.com/angular/angular.js/wiki/Understanding-Scopes]
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid` is set if the model is valid.
 *  - `ng-invalid` is set if the model is invalid.
 *  - `ng-pristine` is set if the model is pristine.
 *  - `ng-dirty` is set if the model is dirty.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           -webkit-transition:all linear 0.5s;
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       Update input to see transitions when valid/invalid.
       Integer is a valid value.
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />
       </form>
     </file>
 * </example>
 */
var ngModelDirective = function() {
  return {
    require: ['ngModel', '^?form'],
    controller: NgModelController,
    link: function(scope, element, attr, ctrls) {
      // notify others, especially parent forms

      var modelCtrl = ctrls[0],
          formCtrl = ctrls[1] || nullFormCtrl;

      formCtrl.$addControl(modelCtrl);

      scope.$on('$destroy', function() {
        formCtrl.$removeControl(modelCtrl);
      });
    }
  };
};


/**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 * The expression is not evaluated when the value change is coming from the model.
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
var ngChangeDirective = valueFn({
  require: 'ngModel',
  link: function(scope, element, attr, ctrl) {
    ctrl.$viewChangeListeners.push(function() {
      scope.$eval(attr.ngChange);
    });
  }
});


var requiredDirective = function() {
  return {
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;
      attr.required = true; // force truthy in case we are on non input element

      var validator = function(value) {
        if (attr.required && ctrl.$isEmpty(value)) {
          ctrl.$setValidity('required', false);
          return;
        } else {
          ctrl.$setValidity('required', true);
          return value;
        }
      };

      ctrl.$formatters.push(validator);
      ctrl.$parsers.unshift(validator);

      attr.$observe('required', function() {
        validator(ctrl.$viewValue);
      });
    }
  };
};


/**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The delimiter
 * can be a fixed string (by default a comma) or a regular expression.
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value. If
 *   specified in form `/something/` then the value will be converted into a regular expression.
 *
 * @example
    <example name="ngList-directive" module="listExample">
      <file name="index.html">
       <script>
         angular.module('listExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.names = ['igor', 'misko', 'vojta'];
           }]);
       </script>
       <form name="myForm" ng-controller="ExampleController">
         List: <input name="namesInput" ng-model="names" ng-list required>
         <span class="error" ng-show="myForm.namesInput.$error.required">
           Required!</span>
         <br>
         <tt>names = {{names}}</tt><br/>
         <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
         <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var listInput = element(by.model('names'));
        var names = element(by.binding('{{names}}'));
        var valid = element(by.binding('myForm.namesInput.$valid'));
        var error = element(by.css('span.error'));

        it('should initialize to model', function() {
          expect(names.getText()).toContain('["igor","misko","vojta"]');
          expect(valid.getText()).toContain('true');
          expect(error.getCssValue('display')).toBe('none');
        });

        it('should be invalid if empty', function() {
          listInput.clear();
          listInput.sendKeys('');

          expect(names.getText()).toContain('');
          expect(valid.getText()).toContain('false');
          expect(error.getCssValue('display')).not.toBe('none');        });
      </file>
    </example>
 */
var ngListDirective = function() {
  return {
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      var match = /\/(.*)\//.exec(attr.ngList),
          separator = match && new RegExp(match[1]) || attr.ngList || ',';

      var parse = function(viewValue) {
        // If the viewValue is invalid (say required but empty) it will be `undefined`
        if (isUndefined(viewValue)) return;

        var list = [];

        if (viewValue) {
          forEach(viewValue.split(separator), function(value) {
            if (value) list.push(trim(value));
          });
        }

        return list;
      };

      ctrl.$parsers.push(parse);
      ctrl.$formatters.push(function(value) {
        if (isArray(value)) {
          return value.join(', ');
        }

        return undefined;
      });

      // Override the standard $isEmpty because an empty array means the input is empty.
      ctrl.$isEmpty = function(value) {
        return !value || !value.length;
      };
    }
  };
};


var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
/**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of `input[select]` or `input[radio]`, so
 * that when the element is selected, the `ngModel` of that element is set to the
 * bound value.
 *
 * `ngValue` is useful when dynamically generating lists of radio buttons using `ng-repeat`, as
 * shown below.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 *   of the `input` element
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
var ngValueDirective = function() {
  return {
    priority: 100,
    compile: function(tpl, tplAttr) {
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
        return function ngValueConstantLink(scope, elm, attr) {
          attr.$set('value', scope.$eval(attr.ngValue));
        };
      } else {
        return function ngValueLink(scope, elm, attr) {
          scope.$watch(attr.ngValue, function valueWatchAction(value) {
            attr.$set('value', value);
          });
        };
      }
    }
  };
};

/**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter name: <input type="text" ng-model="name"><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
var ngBindDirective = ngDirective({
  compile: function(templateElement) {
    templateElement.addClass('ng-binding');
    return function (scope, element, attr) {
      element.data('$binding', attr.ngBind);
      scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
        // We are purposefully using == here rather than === because we want to
        // catch when value is "null or undefined"
        // jshint -W041
        element.text(value == undefined ? '' : value);
      });
    };
  }
});


/**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function ($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        Salutation: <input type="text" ng-model="salutation"><br>
        Name: <input type="text" ng-model="name"><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
var ngBindTemplateDirective = ['$interpolate', function($interpolate) {
  return function(scope, element, attr) {
    // TODO: move this to scenario runner
    var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
    element.addClass('ng-binding').data('$binding', interpolateFn);
    attr.$observe('ngBindTemplate', function(value) {
      element.text(value);
    });
  };
}];


/**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Creates a binding that will innerHTML the result of evaluating the `expression` into the current
 * element in a secure way.  By default, the innerHTML-ed content will be sanitized using the {@link
 * ngSanitize.$sanitize $sanitize} service.  To utilize this functionality, ensure that `$sanitize`
 * is available, for example, by including {@link ngSanitize} in your module's dependencies (not in
 * core Angular.)  You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#Example Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
var ngBindHtmlDirective = ['$sce', '$parse', function($sce, $parse) {
  return {
    compile: function (tElement) {
      tElement.addClass('ng-binding');

      return function (scope, element, attr) {
        element.data('$binding', attr.ngBindHtml);

        var parsed = $parse(attr.ngBindHtml);

        function getStringValue() {
          return (parsed(scope) || '').toString();
        }

        scope.$watch(getStringValue, function ngBindHtmlWatchAction(value) {
          element.html($sce.getTrustedHtml(parsed(scope)) || '');
        });
      };
    }
  };
}];

function classDirective(name, selector) {
  name = 'ngClass' + name;
  return ['$animate', function($animate) {
    return {
      restrict: 'AC',
      link: function(scope, element, attr) {
        var oldVal;

        scope.$watch(attr[name], ngClassWatchAction, true);

        attr.$observe('class', function(value) {
          ngClassWatchAction(scope.$eval(attr[name]));
        });


        if (name !== 'ngClass') {
          scope.$watch('$index', function($index, old$index) {
            // jshint bitwise: false
            var mod = $index & 1;
            if (mod !== (old$index & 1)) {
              var classes = arrayClasses(scope.$eval(attr[name]));
              mod === selector ?
                addClasses(classes) :
                removeClasses(classes);
            }
          });
        }

        function addClasses(classes) {
          var newClasses = digestClassCounts(classes, 1);
          attr.$addClass(newClasses);
        }

        function removeClasses(classes) {
          var newClasses = digestClassCounts(classes, -1);
          attr.$removeClass(newClasses);
        }

        function digestClassCounts (classes, count) {
          var classCounts = element.data('$classCounts') || {};
          var classesToUpdate = [];
          forEach(classes, function (className) {
            if (count > 0 || classCounts[className]) {
              classCounts[className] = (classCounts[className] || 0) + count;
              if (classCounts[className] === +(count > 0)) {
                classesToUpdate.push(className);
              }
            }
          });
          element.data('$classCounts', classCounts);
          return classesToUpdate.join(' ');
        }

        function updateClasses (oldClasses, newClasses) {
          var toAdd = arrayDifference(newClasses, oldClasses);
          var toRemove = arrayDifference(oldClasses, newClasses);
          toRemove = digestClassCounts(toRemove, -1);
          toAdd = digestClassCounts(toAdd, 1);

          if (toAdd.length === 0) {
            $animate.removeClass(element, toRemove);
          } else if (toRemove.length === 0) {
            $animate.addClass(element, toAdd);
          } else {
            $animate.setClass(element, toAdd, toRemove);
          }
        }

        function ngClassWatchAction(newVal) {
          if (selector === true || scope.$index % 2 === selector) {
            var newClasses = arrayClasses(newVal || []);
            if (!oldVal) {
              addClasses(newClasses);
            } else if (!equals(newVal,oldVal)) {
              var oldClasses = arrayClasses(oldVal);
              updateClasses(oldClasses, newClasses);
            }
          }
          oldVal = shallowCopy(newVal);
        }
      }
    };

    function arrayDifference(tokens1, tokens2) {
      var values = [];

      outer:
      for(var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for(var j = 0; j < tokens2.length; j++) {
          if(token == tokens2[j]) continue outer;
        }
        values.push(token);
      }
      return values;
    }

    function arrayClasses (classVal) {
      if (isArray(classVal)) {
        return classVal;
      } else if (isString(classVal)) {
        return classVal.split(' ');
      } else if (isObject(classVal)) {
        var classes = [], i = 0;
        forEach(classVal, function(v, k) {
          if (v) {
            classes = classes.concat(k.split(' '));
          }
        });
        return classes;
      }
      return classVal;
    }
  }];
}

/**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an array, each element of the array should be a string that is
 * one or more space-delimited class names.
 *
 * 3. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then the
 * new classes are added.
 *
 * @animations
 * add - happens just before the class is applied to the element
 * remove - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
       <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
       <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
       <input type="checkbox" ng-model="error"> error (apply "red" class)
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style" placeholder="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
     </file>
     <file name="style.css">
       .strike {
         text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/red/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/red/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.last().getAttribute('class')).toBe('bold strike red');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ngAnimate.$animate#addclass $animate.addClass} and
   {@link ngAnimate.$animate#removeclass $animate.removeClass}.
 */
var ngClassDirective = classDirective('', true);

/**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassOddDirective = classDirective('Odd', 0);

/**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassEvenDirective = classDirective('Even', 1);

/**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
 * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
 * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.
 *
 * @element ANY
 *
 * @example
   <example>
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
var ngCloakDirective = ngDirective({
  compile: function(element, attr) {
    attr.$set('ngCloak', undefined);
    element.removeClass('ng-cloak');
  }
});

/**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @param {expression} ngController Name of a globally accessible constructor function or an
 *     {@link guide/expression expression} that on the current scope evaluates to a
 *     constructor function. The controller instance can be published into a scope property
 *     by specifying `as propertyName`.
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      Name: <input type="text" ng-model="settings.name"/>
 *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value"/>
 *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
 *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
 *        </li>
 *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.linkText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.linkText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     Name: <input type="text" ng-model="name"/>
 *     [ <a href="" ng-click="greet()">greet</a> ]<br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value"/>
 *         [ <a href="" ng-click="clearContact(contact)">clear</a>
 *         | <a href="" ng-click="removeContact(contact)">X</a> ]
 *       </li>
 *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.linkText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.linkText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
var ngControllerDirective = [function() {
  return {
    scope: true,
    controller: '@',
    priority: 500
  };
}];

/**
 * @ngdoc directive
 * @name ngCsp
 *
 * @element html
 * @description
 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
 *
 * This is necessary when developing things like Google Chrome Extensions.
 *
 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
 * For Angular to be CSP compatible there are only two things that we need to do differently:
 *
 * - don't use `Function` constructor to generate optimized value getters
 * - don't inject custom stylesheet into the document
 *
 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
 * be raised.
 *
 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
 * To make those directives work in CSP mode, include the `angular-csp.css` manually.
 *
 * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This
 * autodetection however triggers a CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on the root element of the application or on the `angular.js` script tag, whichever
 * appears first in the html document.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
 */

// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
// bootstrap the system (before $parse is instantiated), for this reason we just have
// the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc

/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      count: {{count}}
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
/*
 * A directive that allows creation of custom onclick handlers that are defined as angular
 * expressions and are compiled and executed within the current scope.
 *
 * Events that are handled via these handler are always configured not to propagate further.
 */
var ngEventDirectives = {};
forEach(
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(name) {
    var directiveName = directiveNormalize('ng-' + name);
    ngEventDirectives[directiveName] = ['$parse', function($parse) {
      return {
        compile: function($element, attr) {
          var fn = $parse(attr[directiveName]);
          return function ngEventHandler(scope, element) {
            element.on(lowercase(name), function(event) {
              scope.$apply(function() {
                fn(scope, {$event:event});
              });
            });
          };
        }
      };
    }];
  }
);

/**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * enter - happens just after the ngIf contents change and a new DOM element is created and injected into the ngIf container
 * leave - happens just before the ngIf contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        I'm removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
var ngIfDirective = ['$animate', function($animate) {
  return {
    transclude: 'element',
    priority: 600,
    terminal: true,
    restrict: 'A',
    $$tlb: true,
    link: function ($scope, $element, $attr, ctrl, $transclude) {
        var block, childScope, previousElements;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

          if (toBoolean(value)) {
            if (!childScope) {
              childScope = $scope.$new();
              $transclude(childScope, function (clone) {
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block = {
                  clone: clone
                };
                $animate.enter(clone, $element.parent(), $element);
              });
            }
          } else {
            if(previousElements) {
              previousElements.remove();
              previousElements = null;
            }
            if(childScope) {
              childScope.$destroy();
              childScope = null;
            }
            if(block) {
              previousElements = getBlockElements(block.clone);
              $animate.leave(previousElements, function() {
                previousElements = null;
              });
              block = null;
            }
          }
        });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * [wrap them](ng.$sce#trustAsResourceUrl) as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <tt>{{template.url}}</tt>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [ { name: 'template1.html', url: 'template1.html'},
              { name: 'template2.html', url: 'template2.html'} ];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 */
var ngIncludeDirective = ['$http', '$templateCache', '$anchorScroll', '$animate', '$sce',
                  function($http,   $templateCache,   $anchorScroll,   $animate,   $sce) {
  return {
    restrict: 'ECA',
    priority: 400,
    terminal: true,
    transclude: 'element',
    controller: angular.noop,
    compile: function(element, attr) {
      var srcExp = attr.ngInclude || attr.src,
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, $element, $attr, ctrl, $transclude) {
        var changeCounter = 0,
            currentScope,
            previousElement,
            currentElement;

        var cleanupLastIncludeContent = function() {
          if(previousElement) {
            previousElement.remove();
            previousElement = null;
          }
          if(currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if(currentElement) {
            $animate.leave(currentElement, function() {
              previousElement = null;
            });
            previousElement = currentElement;
            currentElement = null;
          }
        };

        scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
          var afterAnimation = function() {
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
              $anchorScroll();
            }
          };
          var thisChangeId = ++changeCounter;

          if (src) {
            $http.get(src, {cache: $templateCache}).success(function(response) {
              if (thisChangeId !== changeCounter) return;
              var newScope = scope.$new();
              ctrl.template = response;

              // Note: This will also link all children of ng-include that were contained in the original
              // html. If that content contains controllers, ... they could pollute/change the scope.
              // However, using ng-include on an element with additional content does not make sense...
              // Note: We can't remove them in the cloneAttchFn of $transclude as that
              // function is called before linking the content, which would apply child
              // directives to non existing elements.
              var clone = $transclude(newScope, function(clone) {
                cleanupLastIncludeContent();
                $animate.enter(clone, null, $element, afterAnimation);
              });

              currentScope = newScope;
              currentElement = clone;

              currentScope.$emit('$includeContentLoaded');
              scope.$eval(onloadExp);
            }).error(function() {
              if (thisChangeId === changeCounter) cleanupLastIncludeContent();
            });
            scope.$emit('$includeContentRequested');
          } else {
            cleanupLastIncludeContent();
            ctrl.template = null;
          }
        });
      };
    }
  };
}];

// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
var ngIncludeFillContentDirective = ['$compile',
  function($compile) {
    return {
      restrict: 'ECA',
      priority: -400,
      require: 'ngInclude',
      link: function(scope, $element, $attr, ctrl) {
        $element.html(ctrl.template);
        $compile($element.contents())(scope);
      }
    };
  }];

/**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-error">
 * The only appropriate use of `ngInit` is for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
 * should use {@link guide/controller controllers} rather than `ngInit`
 * to initialize values on a scope.
 * </div>
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
 * sure you have parenthesis for correct precedence:
 * <pre class="prettyprint">
 *   <div ng-init="test1 = (data | orderBy:'name')"></div>
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
var ngInitDirective = ngDirective({
  priority: 450,
  compile: function() {
    return {
      pre: function(scope, element, attrs) {
        scope.$eval(attrs.ngInit);
      }
    };
  }
});

/**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example>
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

/**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
          Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
          Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
var ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {
  var BRACE = /{}/g;
  return {
    restrict: 'EA',
    link: function(scope, element, attr) {
      var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          isWhen = /^when(Minus)?(.+)$/;

      forEach(attr, function(expression, attributeName) {
        if (isWhen.test(attributeName)) {
          whens[lowercase(attributeName.replace('when', '').replace('Minus', '-'))] =
            element.attr(attr.$attr[attributeName]);
        }
      });
      forEach(whens, function(expression, key) {
        whensExpFns[key] =
          $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' +
            offset + endSymbol));
      });

      scope.$watch(function ngPluralizeWatch() {
        var value = parseFloat(scope.$eval(numberExp));

        if (!isNaN(value)) {
          //if explicit number rule such as 1, 2, 3... is defined, just use it. Otherwise,
          //check it against pluralization rules in $locale service
          if (!(value in whens)) value = $locale.pluralCat(value - offset);
           return whensExpFns[value](scope, element, true);
        } else {
          return '';
        }
      }, function ngPluralizeWatchAction(newVal) {
        element.text(newVal);
      });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngRepeat
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 * This may be useful when, for instance, nesting ngRepeats.
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
 *
 * **.leave** - when an item is removed from the list or when an item is filtered out
 *
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
 *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have
 *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
 *     before specifying a tracking expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 * @example
 * This example initializes the scope to a list of names and
 * then uses `ngRepeat` to display every person:
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-init="friends = [
        {name:'John', age:25, gender:'boy'},
        {name:'Jessie', age:30, gender:'girl'},
        {name:'Johanna', age:28, gender:'girl'},
        {name:'Joy', age:15, gender:'girl'},
        {name:'Mary', age:28, gender:'girl'},
        {name:'Peter', age:95, gender:'boy'},
        {name:'Sebastian', age:50, gender:'boy'},
        {name:'Erika', age:27, gender:'girl'},
        {name:'Patrick', age:40, gender:'boy'},
        {name:'Samantha', age:60, gender:'girl'}
      ]">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
  var NG_REMOVED = '$$NG_REMOVED';
  var ngRepeatMinErr = minErr('ngRepeat');
  return {
    transclude: 'element',
    priority: 1000,
    terminal: true,
    $$tlb: true,
    link: function($scope, $element, $attr, ctrl, $transclude){
        var expression = $attr.ngRepeat;
        var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),
          trackByExp, trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn,
          lhs, rhs, valueIdentifier, keyIdentifier,
          hashFnLocals = {$id: hashKey};

        if (!match) {
          throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);
        }

        lhs = match[1];
        rhs = match[2];
        trackByExp = match[3];

        if (trackByExp) {
          trackByExpGetter = $parse(trackByExp);
          trackByIdExpFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        } else {
          trackByIdArrayFn = function(key, value) {
            return hashKey(value);
          };
          trackByIdObjFn = function(key) {
            return key;
          };
        }

        match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
        if (!match) {
          throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
                                                                    lhs);
        }
        valueIdentifier = match[3] || match[1];
        keyIdentifier = match[2];

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        var lastBlockMap = {};

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection){
          var index, length,
              previousNode = $element[0],     // current position of the node
              nextNode,
              // Same as lastBlockMap but it has the current state. It will become the
              // lastBlockMap on the next iteration.
              nextBlockMap = {},
              arrayLength,
              childScope,
              key, value, // key/value of iteration
              trackById,
              trackByIdFn,
              collectionKeys,
              block,       // last object information {scope, element, id}
              nextBlockOrder = [],
              elementsToRemove;


          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
            // if object, extract keys, sort them and use to determine order of iteration over obj props
            collectionKeys = [];
            for (key in collection) {
              if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {
                collectionKeys.push(key);
              }
            }
            collectionKeys.sort();
          }

          arrayLength = collectionKeys.length;

          // locate existing items
          length = nextBlockOrder.length = collectionKeys.length;
          for(index = 0; index < length; index++) {
           key = (collection === collectionKeys) ? index : collectionKeys[index];
           value = collection[key];
           trackById = trackByIdFn(key, value, index);
           assertNotHasOwnProperty(trackById, '`track by` id');
           if(lastBlockMap.hasOwnProperty(trackById)) {
             block = lastBlockMap[trackById];
             delete lastBlockMap[trackById];
             nextBlockMap[trackById] = block;
             nextBlockOrder[index] = block;
           } else if (nextBlockMap.hasOwnProperty(trackById)) {
             // restore lastBlockMap
             forEach(nextBlockOrder, function(block) {
               if (block && block.scope) lastBlockMap[block.id] = block;
             });
             // This is a duplicate and we need to throw an error
             throw ngRepeatMinErr('dupes', "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}",
                                                                                                                                                    expression,       trackById);
           } else {
             // new never before seen block
             nextBlockOrder[index] = { id: trackById };
             nextBlockMap[trackById] = false;
           }
         }

          // remove existing items
          for (key in lastBlockMap) {
            // lastBlockMap is our own object so we don't need to use special hasOwnPropertyFn
            if (lastBlockMap.hasOwnProperty(key)) {
              block = lastBlockMap[key];
              elementsToRemove = getBlockElements(block.clone);
              $animate.leave(elementsToRemove);
              forEach(elementsToRemove, function(element) { element[NG_REMOVED] = true; });
              block.scope.$destroy();
            }
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0, length = collectionKeys.length; index < length; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];
            if (nextBlockOrder[index - 1]) previousNode = getBlockEnd(nextBlockOrder[index - 1]);

            if (block.scope) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element
              childScope = block.scope;

              nextNode = previousNode;
              do {
                nextNode = nextNode.nextSibling;
              } while(nextNode && nextNode[NG_REMOVED]);

              if (getBlockStart(block) != nextNode) {
                // existing item which got moved
                $animate.move(getBlockElements(block.clone), null, jqLite(previousNode));
              }
              previousNode = getBlockEnd(block);
            } else {
              // new item which we don't know about
              childScope = $scope.$new();
            }

            childScope[valueIdentifier] = value;
            if (keyIdentifier) childScope[keyIdentifier] = key;
            childScope.$index = index;
            childScope.$first = (index === 0);
            childScope.$last = (index === (arrayLength - 1));
            childScope.$middle = !(childScope.$first || childScope.$last);
            // jshint bitwise: false
            childScope.$odd = !(childScope.$even = (index&1) === 0);
            // jshint bitwise: true

            if (!block.scope) {
              $transclude(childScope, function(clone) {
                clone[clone.length++] = document.createComment(' end ngRepeat: ' + expression + ' ');
                $animate.enter(clone, null, jqLite(previousNode));
                previousNode = clone;
                block.scope = childScope;
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block.clone = clone;
                nextBlockMap[block.id] = block;
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
    }
  };

  function getBlockStart(block) {
    return block.clone[0];
  }

  function getBlockEnd(block) {
    return block.clone[block.clone.length - 1];
  }
}];

/**
 * @ngdoc directive
 * @name ngShow
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression
 * provided to the ngShow attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the ngShow expression evaluates to false then the ng-hide CSS class is added to the class attribute
 * on the element causing it to become hidden. When true, the ng-hide CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * <div class="alert alert-warning">
 * **Note:** Here is a list of values that ngShow will consider as a falsy value (case insensitive):<br />
 * "f" / "0" / "false" / "no" / "n" / "[]"
 * </div>
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding .ng-hide
 *
 * By default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   //this is just another form of hiding an element
 *   display:block!important;
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with ngShow
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass except that
 * you must also include the !important flag to override the display property
 * so that you can perform an animation when the element is hidden during the time of the animation.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * addClass: .ng-hide - happens after the ngShow expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: .ng-hide - happens after the ngShow expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);
    </file>
    <file name="animations.css">
      .animate-show {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

      .animate-show.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

      .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngShowDirective = ['$animate', function($animate) {
  return function(scope, element, attr) {
    scope.$watch(attr.ngShow, function ngShowWatchAction(value){
      $animate[toBoolean(value) ? 'removeClass' : 'addClass'](element, 'ng-hide');
    });
  };
}];


/**
 * @ngdoc directive
 * @name ngHide
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression
 * provided to the ngHide attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the ngHide expression evaluates to true then the .ng-hide CSS class is added to the class attribute
 * on the element causing it to become hidden. When false, the ng-hide CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * <div class="alert alert-warning">
 * **Note:** Here is a list of values that ngHide will consider as a falsy value (case insensitive):<br />
 * "f" / "0" / "false" / "no" / "n" / "[]"
 * </div>
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding .ng-hide
 *
 * By default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   //this is just another form of hiding an element
 *   display:block!important;
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with ngHide
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
 * CSS class is added and removed for you instead of your own CSS class.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * removeClass: .ng-hide - happens after the ngHide expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: .ng-hide - happens after the ngHide expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);
    </file>
    <file name="animations.css">
      .animate-hide {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

      .animate-hide.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

      .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngHideDirective = ['$animate', function($animate) {
  return function(scope, element, attr) {
    scope.$watch(attr.ngHide, function ngHideWatchAction(value){
      $animate[toBoolean(value) ? 'addClass' : 'removeClass'](element, 'ng-hide');
    });
  };
}];

/**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */
var ngStyleDirective = ngDirective(function(scope, element, attr) {
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
    if (oldStyles && (newStyles !== oldStyles)) {
      forEach(oldStyles, function(val, style) { element.css(style, '');});
    }
    if (newStyles) element.css(newStyles);
  }, true);
});

/**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 800
 * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <tt>selection={{selection}}</tt>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
var ngSwitchDirective = ['$animate', function($animate) {
  return {
    restrict: 'EA',
    require: 'ngSwitch',

    // asks for $scope to fool the BC controller module
    controller: ['$scope', function ngSwitchController() {
     this.cases = {};
    }],
    link: function(scope, element, attr, ngSwitchController) {
      var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes = [],
          selectedElements = [],
          previousElements = [],
          selectedScopes = [];

      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
        var i, ii;
        for (i = 0, ii = previousElements.length; i < ii; ++i) {
          previousElements[i].remove();
        }
        previousElements.length = 0;

        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
          var selected = selectedElements[i];
          selectedScopes[i].$destroy();
          previousElements[i] = selected;
          $animate.leave(selected, function() {
            previousElements.splice(i, 1);
          });
        }

        selectedElements.length = 0;
        selectedScopes.length = 0;

        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
          scope.$eval(attr.change);
          forEach(selectedTranscludes, function(selectedTransclude) {
            var selectedScope = scope.$new();
            selectedScopes.push(selectedScope);
            selectedTransclude.transclude(selectedScope, function(caseElement) {
              var anchor = selectedTransclude.element;

              selectedElements.push(caseElement);
              $animate.enter(caseElement, anchor.parent(), anchor);
            });
          });
        }
      });
    }
  };
}];

var ngSwitchWhenDirective = ngDirective({
  transclude: 'element',
  priority: 800,
  require: '^ngSwitch',
  link: function(scope, element, attrs, ctrl, $transclude) {
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
  }
});

var ngSwitchDefaultDirective = ngDirective({
  transclude: 'element',
  priority: 800,
  require: '^ngSwitch',
  link: function(scope, element, attr, ctrl, $transclude) {
    ctrl.cases['?'] = (ctrl.cases['?'] || []);
    ctrl.cases['?'].push({ transclude: $transclude, element: element });
   }
});

/**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict AC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *
 * @element ANY
 *
 * @example
   <example module="transcludeExample">
     <file name="index.html">
       <script>
         angular.module('transcludeExample', [])
          .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
               template: '<div style="border: 1px solid black;">' +
                           '<div style="background-color: gray">{{title}}</div>' +
                           '<div ng-transclude></div>' +
                         '</div>'
             };
         })
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }]);
       </script>
       <div ng-controller="ExampleController">
         <input ng-model="title"><br>
         <textarea ng-model="text"></textarea> <br/>
         <pane title="{{title}}">{{text}}</pane>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
        it('should have transcluded', function() {
          var titleElement = element(by.model('title'));
          titleElement.clear();
          titleElement.sendKeys('TITLE');
          var textElement = element(by.model('text'));
          textElement.clear();
          textElement.sendKeys('TEXT');
          expect(element(by.binding('title')).getText()).toEqual('TITLE');
          expect(element(by.binding('text')).getText()).toEqual('TEXT');
        });
     </file>
   </example>
 *
 */
var ngTranscludeDirective = ngDirective({
  link: function($scope, $element, $attrs, controller, $transclude) {
    if (!$transclude) {
      throw minErr('ngTransclude')('orphan',
       'Illegal use of ngTransclude directive in the template! ' +
       'No parent directive that requires a transclusion found. ' +
       'Element: {0}',
       startingTag($element));
    }

    $transclude(function(clone) {
      $element.empty();
      $element.append(clone);
    });
  }
});

/**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example>
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
var scriptDirective = ['$templateCache', function($templateCache) {
  return {
    restrict: 'E',
    terminal: true,
    compile: function(element, attr) {
      if (attr.type == 'text/ng-template') {
        var templateUrl = attr.id,
            // IE is not consistent, in scripts we have to read .text but in other nodes we have to read .textContent
            text = element[0].text;

        $templateCache.put(templateUrl, text);
      }
    }
  };
}];

var ngOptionsMinErr = minErr('ngOptions');
/**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * # `ngOptions`
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension_expression.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
 * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
 * </div>
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngOptions` provides an iterator facility for the `<option>` element which should be used instead
 * of {@link ng.directive:ngRepeat ngRepeat} when you want the
 * `select` model to be bound to a non-string value. This is because an option element can only
 * be bound to string values at present.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`).
 *
 * @example
    <example module="selectExample">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light'},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark'},
              {name:'yellow', shade:'light'}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              Name: <input ng-model="color.name">
              [<a href ng-click="colors.splice($index, 1)">X</a>]
            </li>
            <li>
              [<a href ng-click="colors.push({})">add</a>]
            </li>
          </ul>
          <hr/>
          Color (null not allowed):
          <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>

          Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span><br/>

          Color grouped by shade:
          <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
          </select><br/>


          Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>
          <hr/>
          Currently selected: {{ {selected_color:myColor}  }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */

var ngOptionsDirective = valueFn({ terminal: true });
// jshint maxlen: false
var selectDirective = ['$compile', '$parse', function($compile,   $parse) {
                         //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888
  var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
      nullModelCtrl = {$setViewValue: noop};
// jshint maxlen: 100

  return {
    restrict: 'E',
    require: ['select', '?ngModel'],
    controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {
      var self = this,
          optionsMap = {},
          ngModelCtrl = nullModelCtrl,
          nullOption,
          unknownOption;


      self.databound = $attrs.ngModel;


      self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {
        ngModelCtrl = ngModelCtrl_;
        nullOption = nullOption_;
        unknownOption = unknownOption_;
      };


      self.addOption = function(value) {
        assertNotHasOwnProperty(value, '"option value"');
        optionsMap[value] = true;

        if (ngModelCtrl.$viewValue == value) {
          $element.val(value);
          if (unknownOption.parent()) unknownOption.remove();
        }
      };


      self.removeOption = function(value) {
        if (this.hasOption(value)) {
          delete optionsMap[value];
          if (ngModelCtrl.$viewValue == value) {
            this.renderUnknownOption(value);
          }
        }
      };


      self.renderUnknownOption = function(val) {
        var unknownVal = '? ' + hashKey(val) + ' ?';
        unknownOption.val(unknownVal);
        $element.prepend(unknownOption);
        $element.val(unknownVal);
        unknownOption.prop('selected', true); // needed for IE
      };


      self.hasOption = function(value) {
        return optionsMap.hasOwnProperty(value);
      };

      $scope.$on('$destroy', function() {
        // disable unknown option so that we don't do work when the whole select is being destroyed
        self.renderUnknownOption = noop;
      });
    }],

    link: function(scope, element, attr, ctrls) {
      // if ngModel is not defined, we don't need to do anything
      if (!ctrls[1]) return;

      var selectCtrl = ctrls[0],
          ngModelCtrl = ctrls[1],
          multiple = attr.multiple,
          optionsExp = attr.ngOptions,
          nullOption = false, // if false, user will not be able to select it (used by ngOptions)
          emptyOption,
          // we can't just jqLite('<option>') since jqLite is not smart enough
          // to create it in <select> and IE barfs otherwise.
          optionTemplate = jqLite(document.createElement('option')),
          optGroupTemplate =jqLite(document.createElement('optgroup')),
          unknownOption = optionTemplate.clone();

      // find "null" option
      for(var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
        if (children[i].value === '') {
          emptyOption = nullOption = children.eq(i);
          break;
        }
      }

      selectCtrl.init(ngModelCtrl, nullOption, unknownOption);

      // required validator
      if (multiple) {
        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };
      }

      if (optionsExp) setupAsOptions(scope, element, ngModelCtrl);
      else if (multiple) setupAsMultiple(scope, element, ngModelCtrl);
      else setupAsSingle(scope, element, ngModelCtrl, selectCtrl);


      ////////////////////////////



      function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
        ngModelCtrl.$render = function() {
          var viewValue = ngModelCtrl.$viewValue;

          if (selectCtrl.hasOption(viewValue)) {
            if (unknownOption.parent()) unknownOption.remove();
            selectElement.val(viewValue);
            if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy
          } else {
            if (isUndefined(viewValue) && emptyOption) {
              selectElement.val('');
            } else {
              selectCtrl.renderUnknownOption(viewValue);
            }
          }
        };

        selectElement.on('change', function() {
          scope.$apply(function() {
            if (unknownOption.parent()) unknownOption.remove();
            ngModelCtrl.$setViewValue(selectElement.val());
          });
        });
      }

      function setupAsMultiple(scope, selectElement, ctrl) {
        var lastView;
        ctrl.$render = function() {
          var items = new HashMap(ctrl.$viewValue);
          forEach(selectElement.find('option'), function(option) {
            option.selected = isDefined(items.get(option.value));
          });
        };

        // we have to do it on each watch since ngModel watches reference, but
        // we need to work of an array, so we need to see if anything was inserted/removed
        scope.$watch(function selectMultipleWatch() {
          if (!equals(lastView, ctrl.$viewValue)) {
            lastView = shallowCopy(ctrl.$viewValue);
            ctrl.$render();
          }
        });

        selectElement.on('change', function() {
          scope.$apply(function() {
            var array = [];
            forEach(selectElement.find('option'), function(option) {
              if (option.selected) {
                array.push(option.value);
              }
            });
            ctrl.$setViewValue(array);
          });
        });
      }

      function setupAsOptions(scope, selectElement, ctrl) {
        var match;

        if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
          throw ngOptionsMinErr('iexp',
            "Expected expression in form of " +
            "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
            " but got '{0}'. Element: {1}",
            optionsExp, startingTag(selectElement));
        }

        var displayFn = $parse(match[2] || match[1]),
            valueName = match[4] || match[6],
            keyName = match[5],
            groupByFn = $parse(match[3] || ''),
            valueFn = $parse(match[2] ? match[1] : valueName),
            valuesFn = $parse(match[7]),
            track = match[8],
            trackFn = track ? $parse(match[8]) : null,
            // This is an array of array of existing option groups in DOM.
            // We try to reuse these if possible
            // - optionGroupsCache[0] is the options with no option group
            // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
            optionGroupsCache = [[{element: selectElement, label:''}]];

        if (nullOption) {
          // compile the element since there might be bindings in it
          $compile(nullOption)(scope);

          // remove the class, which is added automatically because we recompile the element and it
          // becomes the compilation root
          nullOption.removeClass('ng-scope');

          // we need to remove it before calling selectElement.empty() because otherwise IE will
          // remove the label from the element. wtf?
          nullOption.remove();
        }

        // clear contents, we'll add what's needed based on the model
        selectElement.empty();

        selectElement.on('change', function() {
          scope.$apply(function() {
            var optionGroup,
                collection = valuesFn(scope) || [],
                locals = {},
                key, value, optionElement, index, groupIndex, length, groupLength, trackIndex;

            if (multiple) {
              value = [];
              for (groupIndex = 0, groupLength = optionGroupsCache.length;
                   groupIndex < groupLength;
                   groupIndex++) {
                // list of options for that group. (first item has the parent)
                optionGroup = optionGroupsCache[groupIndex];

                for(index = 1, length = optionGroup.length; index < length; index++) {
                  if ((optionElement = optionGroup[index].element)[0].selected) {
                    key = optionElement.val();
                    if (keyName) locals[keyName] = key;
                    if (trackFn) {
                      for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                        locals[valueName] = collection[trackIndex];
                        if (trackFn(scope, locals) == key) break;
                      }
                    } else {
                      locals[valueName] = collection[key];
                    }
                    value.push(valueFn(scope, locals));
                  }
                }
              }
            } else {
              key = selectElement.val();
              if (key == '?') {
                value = undefined;
              } else if (key === ''){
                value = null;
              } else {
                if (trackFn) {
                  for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                    locals[valueName] = collection[trackIndex];
                    if (trackFn(scope, locals) == key) {
                      value = valueFn(scope, locals);
                      break;
                    }
                  }
                } else {
                  locals[valueName] = collection[key];
                  if (keyName) locals[keyName] = key;
                  value = valueFn(scope, locals);
                }
              }
            }
            ctrl.$setViewValue(value);
            render();
          });
        });

        ctrl.$render = render;

        scope.$watchCollection(valuesFn, render);
        if ( multiple ) {
          scope.$watchCollection(function() { return ctrl.$modelValue; }, render);
        }

        function getSelectedSet() {
          var selectedSet = false;
          if (multiple) {
            var modelValue = ctrl.$modelValue;
            if (trackFn && isArray(modelValue)) {
              selectedSet = new HashMap([]);
              var locals = {};
              for (var trackIndex = 0; trackIndex < modelValue.length; trackIndex++) {
                locals[valueName] = modelValue[trackIndex];
                selectedSet.put(trackFn(scope, locals), modelValue[trackIndex]);
              }
            } else {
              selectedSet = new HashMap(modelValue);
            }
          }
          return selectedSet;
        }


        function render() {
              // Temporary location for the option groups before we render them
          var optionGroups = {'':[]},
              optionGroupNames = [''],
              optionGroupName,
              optionGroup,
              option,
              existingParent, existingOptions, existingOption,
              modelValue = ctrl.$modelValue,
              values = valuesFn(scope) || [],
              keys = keyName ? sortedKeys(values) : values,
              key,
              groupLength, length,
              groupIndex, index,
              locals = {},
              selected,
              selectedSet = getSelectedSet(),
              lastElement,
              element,
              label;


          // We now build up the list of options we need (we merge later)
          for (index = 0; length = keys.length, index < length; index++) {

            key = index;
            if (keyName) {
              key = keys[index];
              if ( key.charAt(0) === '$' ) continue;
              locals[keyName] = key;
            }

            locals[valueName] = values[key];

            optionGroupName = groupByFn(scope, locals) || '';
            if (!(optionGroup = optionGroups[optionGroupName])) {
              optionGroup = optionGroups[optionGroupName] = [];
              optionGroupNames.push(optionGroupName);
            }
            if (multiple) {
              selected = isDefined(
                selectedSet.remove(trackFn ? trackFn(scope, locals) : valueFn(scope, locals))
              );
            } else {
              if (trackFn) {
                var modelCast = {};
                modelCast[valueName] = modelValue;
                selected = trackFn(scope, modelCast) === trackFn(scope, locals);
              } else {
                selected = modelValue === valueFn(scope, locals);
              }
              selectedSet = selectedSet || selected; // see if at least one item is selected
            }
            label = displayFn(scope, locals); // what will be seen by the user

            // doing displayFn(scope, locals) || '' overwrites zero values
            label = isDefined(label) ? label : '';
            optionGroup.push({
              // either the index into array or key from object
              id: trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index),
              label: label,
              selected: selected                   // determine if we should be selected
            });
          }
          if (!multiple) {
            if (nullOption || modelValue === null) {
              // insert null option if we have a placeholder, or the model is null
              optionGroups[''].unshift({id:'', label:'', selected:!selectedSet});
            } else if (!selectedSet) {
              // option could not be found, we have to insert the undefined item
              optionGroups[''].unshift({id:'?', label:'', selected:true});
            }
          }

          // Now we need to update the list of DOM nodes to match the optionGroups we computed above
          for (groupIndex = 0, groupLength = optionGroupNames.length;
               groupIndex < groupLength;
               groupIndex++) {
            // current option group name or '' if no group
            optionGroupName = optionGroupNames[groupIndex];

            // list of options for that group. (first item has the parent)
            optionGroup = optionGroups[optionGroupName];

            if (optionGroupsCache.length <= groupIndex) {
              // we need to grow the optionGroups
              existingParent = {
                element: optGroupTemplate.clone().attr('label', optionGroupName),
                label: optionGroup.label
              };
              existingOptions = [existingParent];
              optionGroupsCache.push(existingOptions);
              selectElement.append(existingParent.element);
            } else {
              existingOptions = optionGroupsCache[groupIndex];
              existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element

              // update the OPTGROUP label if not the same.
              if (existingParent.label != optionGroupName) {
                existingParent.element.attr('label', existingParent.label = optionGroupName);
              }
            }

            lastElement = null;  // start at the beginning
            for(index = 0, length = optionGroup.length; index < length; index++) {
              option = optionGroup[index];
              if ((existingOption = existingOptions[index+1])) {
                // reuse elements
                lastElement = existingOption.element;
                if (existingOption.label !== option.label) {
                  lastElement.text(existingOption.label = option.label);
                }
                if (existingOption.id !== option.id) {
                  lastElement.val(existingOption.id = option.id);
                }
                // lastElement.prop('selected') provided by jQuery has side-effects
                if (lastElement[0].selected !== option.selected) {
                  lastElement.prop('selected', (existingOption.selected = option.selected));
                  if (msie) {
                    // See #7692
                    // The selected item wouldn't visually update on IE without this.
                    // Tested on Win7: IE9, IE10 and IE11. Future IEs should be tested as well
                    lastElement.prop('selected', existingOption.selected);
                  }
                }
              } else {
                // grow elements

                // if it's a null option
                if (option.id === '' && nullOption) {
                  // put back the pre-compiled element
                  element = nullOption;
                } else {
                  // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                  // in this version of jQuery on some browser the .text() returns a string
                  // rather then the element.
                  (element = optionTemplate.clone())
                      .val(option.id)
                      .prop('selected', option.selected)
                      .attr('selected', option.selected)
                      .text(option.label);
                }

                existingOptions.push(existingOption = {
                    element: element,
                    label: option.label,
                    id: option.id,
                    selected: option.selected
                });
                if (lastElement) {
                  lastElement.after(element);
                } else {
                  existingParent.element.append(element);
                }
                lastElement = element;
              }
            }
            // remove any excessive OPTIONs in a group
            index++; // increment since the existingOptions[0] is parent element not OPTION
            while(existingOptions.length > index) {
              existingOptions.pop().element.remove();
            }
          }
          // remove any excessive OPTGROUPs from select
          while(optionGroupsCache.length > groupIndex) {
            optionGroupsCache.pop()[0].element.remove();
          }
        }
      }
    }
  };
}];

var optionDirective = ['$interpolate', function($interpolate) {
  var nullSelectCtrl = {
    addOption: noop,
    removeOption: noop
  };

  return {
    restrict: 'E',
    priority: 100,
    compile: function(element, attr) {
      if (isUndefined(attr.value)) {
        var interpolateFn = $interpolate(element.text(), true);
        if (!interpolateFn) {
          attr.$set('value', element.text());
        }
      }

      return function (scope, element, attr) {
        var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

        if (selectCtrl && selectCtrl.databound) {
          // For some reason Opera defaults to true and if not overridden this messes up the repeater.
          // We don't want the view to drive the initialization of the model anyway.
          element.prop('selected', false);
        } else {
          selectCtrl = nullSelectCtrl;
        }

        if (interpolateFn) {
          scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
            attr.$set('value', newVal);
            if (newVal !== oldVal) selectCtrl.removeOption(oldVal);
            selectCtrl.addOption(newVal);
          });
        } else {
          selectCtrl.addOption(attr.value);
        }

        element.on('$destroy', function() {
          selectCtrl.removeOption(attr.value);
        });
      };
    }
  };
}];

var styleDirective = valueFn({
  restrict: 'E',
  terminal: true
});

  if (window.angular.bootstrap) {
    //AngularJS is already loaded, so we can return here...
    console.log('WARNING: Tried to load angular more than once.');
    return;
  }

  //try to bind to jquery now so that one can write angular.element().read()
  //but we will rebind on bootstrap again.
  bindJQuery();

  publishExternalAPI(angular);

  jqLite(document).ready(function() {
    angularInit(document, bootstrap);
  });

})(window, document);

!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}.ng-hide-add-active,.ng-hide-remove{display:block!important;}</style>');
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\bootstrap-daterangepicker\\bootstrap-daterange-picker.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./bootstrap-daterangepicker.min.js');
},{"./bootstrap-daterangepicker.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\bootstrap-daterangepicker\\bootstrap-daterangepicker.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\bootstrap-daterangepicker\\bootstrap-daterangepicker.min.js":[function(require,module,exports){
/**
* @version: 1.3.15
* @author: Dan Grossman http://www.dangrossman.info/
* @date: 2014-10-20
* @copyright: Copyright (c) 2012-2014 Dan Grossman. All rights reserved.
* @license: Licensed under Apache License v2.0. See http://www.apache.org/licenses/LICENSE-2.0
* @website: http://www.improvely.com/
*/

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['moment', 'jquery', 'exports'], function(momentjs, $, exports) {
      root.daterangepicker = factory(root, exports, momentjs, $);
    });

  } else if (typeof exports !== 'undefined') {
    var momentjs = require('third-party-modules/moment');
    var jQuery;
    try {
      jQuery = $;
    } catch (err) {
      jQuery = window.jQuery;
      if (!jQuery) throw new Error('jQuery dependency not found');
    }
    factory(root, exports, momentjs, jQuery);

  // Finally, as a browser global.
  } else {
    root.daterangepicker = factory(root, {}, root.moment, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(window, function(root, daterangepicker, moment, $) {

    var DateRangePicker = function (element, options, cb) {

        // by default, the daterangepicker element is placed at the bottom of HTML body
        this.parentEl = 'body';

        //element that triggered the date range picker
        this.element = $(element);

        //tracks visible state
        this.isShowing = false;

        //create the picker HTML object
        var DRPTemplate = '<div class="daterangepicker dropdown-menu">' +
                '<div class="calendar left"></div>' +
                '<div class="calendar right"></div>' +
                '<div class="ranges">' +
                  '<div class="range_inputs">' +
                    '<div class="daterangepicker_start_input">' +
                      '<label for="daterangepicker_start"></label>' +
                      '<input class="input-mini" type="text" name="daterangepicker_start" value="" />' +
                    '</div>' +
                    '<div class="daterangepicker_end_input">' +
                      '<label for="daterangepicker_end"></label>' +
                      '<input class="input-mini" type="text" name="daterangepicker_end" value="" />' +
                    '</div>' +
                    '<button class="applyBtn" disabled="disabled"></button>&nbsp;' +
                    '<button class="cancelBtn"></button>' +
                  '</div>' +
                '</div>' +
              '</div>';

        //custom options
        if (typeof options !== 'object' || options === null)
            options = {};

        this.parentEl = (typeof options === 'object' && options.parentEl && $(options.parentEl).length) ? $(options.parentEl) : $(this.parentEl);
        this.container = $(DRPTemplate).appendTo(this.parentEl);

        this.setOptions(options, cb);

        //apply CSS classes and labels to buttons
        var c = this.container;
        $.each(this.buttonClasses, function (idx, val) {
            c.find('button').addClass(val);
        });
        this.container.find('.daterangepicker_start_input label').html(this.locale.fromLabel);
        this.container.find('.daterangepicker_end_input label').html(this.locale.toLabel);
        if (this.applyClass.length)
            this.container.find('.applyBtn').addClass(this.applyClass);
        if (this.cancelClass.length)
            this.container.find('.cancelBtn').addClass(this.cancelClass);
        this.container.find('.applyBtn').html(this.locale.applyLabel);
        this.container.find('.cancelBtn').html(this.locale.cancelLabel);

        //event listeners

        this.container.find('.calendar')
            .on('click.daterangepicker', '.prev', $.proxy(this.clickPrev, this))
            .on('click.daterangepicker', '.next', $.proxy(this.clickNext, this))
            .on('click.daterangepicker', 'td.available', $.proxy(this.clickDate, this))
            .on('mouseenter.daterangepicker', 'td.available', $.proxy(this.hoverDate, this))
            .on('mouseleave.daterangepicker', 'td.available', $.proxy(this.updateFormInputs, this))
            .on('change.daterangepicker', 'select.yearselect', $.proxy(this.updateMonthYear, this))
            .on('change.daterangepicker', 'select.monthselect', $.proxy(this.updateMonthYear, this))
            .on('change.daterangepicker', 'select.hourselect,select.minuteselect,select.ampmselect', $.proxy(this.updateTime, this));

        this.container.find('.ranges')
            .on('click.daterangepicker', 'button.applyBtn', $.proxy(this.clickApply, this))
            .on('click.daterangepicker', 'button.cancelBtn', $.proxy(this.clickCancel, this))
            .on('click.daterangepicker', '.daterangepicker_start_input,.daterangepicker_end_input', $.proxy(this.showCalendars, this))
            .on('change.daterangepicker', '.daterangepicker_start_input,.daterangepicker_end_input', $.proxy(this.inputsChanged, this))
            .on('keydown.daterangepicker', '.daterangepicker_start_input,.daterangepicker_end_input', $.proxy(this.inputsKeydown, this))
            .on('click.daterangepicker', 'li', $.proxy(this.clickRange, this))
            .on('mouseenter.daterangepicker', 'li', $.proxy(this.enterRange, this))
            .on('mouseleave.daterangepicker', 'li', $.proxy(this.updateFormInputs, this));

        if (this.element.is('input')) {
            this.element.on({
                'click.daterangepicker': $.proxy(this.show, this),
                'focus.daterangepicker': $.proxy(this.show, this),
                'keyup.daterangepicker': $.proxy(this.updateFromControl, this)
            });
        } else {
            this.element.on('click.daterangepicker', $.proxy(this.toggle, this));
        }

    };

    DateRangePicker.prototype = {

        constructor: DateRangePicker,

        setOptions: function(options, callback) {

            this.startDate = moment().startOf('day');
            this.endDate = moment().endOf('day');
            this.minDate = false;
            this.maxDate = false;
            this.dateLimit = false;

            this.showDropdowns = false;
            this.showWeekNumbers = false;
            this.timePicker = false;
            this.timePickerIncrement = 30;
            this.timePicker12Hour = true;
            this.singleDatePicker = false;
            this.ranges = {};

            this.opens = 'right';
            if (this.element.hasClass('pull-right'))
                this.opens = 'left';

            this.buttonClasses = ['btn', 'btn-small btn-sm'];
            this.applyClass = 'btn-success';
            this.cancelClass = 'btn-default';

            this.format = 'MM/DD/YYYY';
            this.separator = ' - ';

            this.locale = {
                applyLabel: 'Apply',
                cancelLabel: 'Cancel',
                fromLabel: 'From',
                toLabel: 'To',
                weekLabel: 'W',
                customRangeLabel: 'Custom Range',
                daysOfWeek: moment.weekdaysMin(),
                monthNames: moment.monthsShort(),
                firstDay: moment.localeData()._week.dow
            };

            this.cb = function () { };

            if (typeof options.format === 'string')
                this.format = options.format;

            if (typeof options.separator === 'string')
                this.separator = options.separator;

            if (typeof options.startDate === 'string')
                this.startDate = moment(options.startDate, this.format);

            if (typeof options.endDate === 'string')
                this.endDate = moment(options.endDate, this.format);

            if (typeof options.minDate === 'string')
                this.minDate = moment(options.minDate, this.format);

            if (typeof options.maxDate === 'string')
                this.maxDate = moment(options.maxDate, this.format);

            if (typeof options.startDate === 'object')
                this.startDate = moment(options.startDate);

            if (typeof options.endDate === 'object')
                this.endDate = moment(options.endDate);

            if (typeof options.minDate === 'object')
                this.minDate = moment(options.minDate);

            if (typeof options.maxDate === 'object')
                this.maxDate = moment(options.maxDate);

            if (typeof options.applyClass === 'string')
                this.applyClass = options.applyClass;

            if (typeof options.cancelClass === 'string')
                this.cancelClass = options.cancelClass;

            if (typeof options.dateLimit === 'object')
                this.dateLimit = options.dateLimit;

            if (typeof options.locale === 'object') {

                if (typeof options.locale.daysOfWeek === 'object') {
                    // Create a copy of daysOfWeek to avoid modification of original
                    // options object for reusability in multiple daterangepicker instances
                    this.locale.daysOfWeek = options.locale.daysOfWeek.slice();
                }

                if (typeof options.locale.monthNames === 'object') {
                  this.locale.monthNames = options.locale.monthNames.slice();
                }

                if (typeof options.locale.firstDay === 'number') {
                  this.locale.firstDay = options.locale.firstDay;
                }

                if (typeof options.locale.applyLabel === 'string') {
                  this.locale.applyLabel = options.locale.applyLabel;
                }

                if (typeof options.locale.cancelLabel === 'string') {
                  this.locale.cancelLabel = options.locale.cancelLabel;
                }

                if (typeof options.locale.fromLabel === 'string') {
                  this.locale.fromLabel = options.locale.fromLabel;
                }

                if (typeof options.locale.toLabel === 'string') {
                  this.locale.toLabel = options.locale.toLabel;
                }

                if (typeof options.locale.weekLabel === 'string') {
                  this.locale.weekLabel = options.locale.weekLabel;
                }

                if (typeof options.locale.customRangeLabel === 'string') {
                  this.locale.customRangeLabel = options.locale.customRangeLabel;
                }
            }

            if (typeof options.opens === 'string')
                this.opens = options.opens;

            if (typeof options.showWeekNumbers === 'boolean') {
                this.showWeekNumbers = options.showWeekNumbers;
            }

            if (typeof options.buttonClasses === 'string') {
                this.buttonClasses = [options.buttonClasses];
            }

            if (typeof options.buttonClasses === 'object') {
                this.buttonClasses = options.buttonClasses;
            }

            if (typeof options.showDropdowns === 'boolean') {
                this.showDropdowns = options.showDropdowns;
            }

            if (typeof options.singleDatePicker === 'boolean') {
                this.singleDatePicker = options.singleDatePicker;
                if (this.singleDatePicker) {
                    this.endDate = this.startDate.clone();
                }
            }

            if (typeof options.timePicker === 'boolean') {
                this.timePicker = options.timePicker;
            }

            if (typeof options.timePickerIncrement === 'number') {
                this.timePickerIncrement = options.timePickerIncrement;
            }

            if (typeof options.timePicker12Hour === 'boolean') {
                this.timePicker12Hour = options.timePicker12Hour;
            }

            // update day names order to firstDay
            if (this.locale.firstDay != 0) {
                var iterator = this.locale.firstDay;
                while (iterator > 0) {
                    this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());
                    iterator--;
                }
            }

            var start, end, range;

            //if no start/end dates set, check if an input element contains initial values
            if (typeof options.startDate === 'undefined' && typeof options.endDate === 'undefined') {
                if ($(this.element).is('input[type=text]')) {
                    var val = $(this.element).val();
                    var split = val.split(this.separator);
                    start = end = null;
                    if (split.length == 2) {
                        start = moment(split[0], this.format);
                        end = moment(split[1], this.format);
                    } else if (this.singleDatePicker) {
                        start = moment(val, this.format);
                        end = moment(val, this.format);
                    }
                    if (start !== null && end !== null) {
                        this.startDate = start;
                        this.endDate = end;
                    }
                }
            }

            if (typeof options.ranges === 'object') {
                for (range in options.ranges) {

                    start = moment(options.ranges[range][0]);
                    end = moment(options.ranges[range][1]);

                    // If we have a min/max date set, bound this range
                    // to it, but only if it would otherwise fall
                    // outside of the min/max.
                    if (this.minDate && start.isBefore(this.minDate))
                        start = moment(this.minDate);

                    if (this.maxDate && end.isAfter(this.maxDate))
                        end = moment(this.maxDate);

                    // If the end of the range is before the minimum (if min is set) OR
                    // the start of the range is after the max (also if set) don't display this
                    // range option.
                    if ((this.minDate && end.isBefore(this.minDate)) || (this.maxDate && start.isAfter(this.maxDate))) {
                        continue;
                    }

                    this.ranges[range] = [start, end];
                }

                var list = '<ul>';
                for (range in this.ranges) {
                    list += '<li>' + range + '</li>';
                }
                list += '<li>' + this.locale.customRangeLabel + '</li>';
                list += '</ul>';
                this.container.find('.ranges ul').remove();
                this.container.find('.ranges').prepend(list);
            }

            if (typeof callback === 'function') {
                this.cb = callback;
            }

            if (!this.timePicker) {
                this.startDate = this.startDate.startOf('day');
                this.endDate = this.endDate.endOf('day');
            }

            if (this.singleDatePicker) {
                this.opens = 'right';
                this.container.addClass('single');
                this.container.find('.calendar.right').show();
                this.container.find('.calendar.left').hide();
                if (!this.timePicker) {
                    this.container.find('.ranges').hide();
                } else {
                    this.container.find('.ranges .daterangepicker_start_input, .ranges .daterangepicker_end_input').hide();
                }
                if (!this.container.find('.calendar.right').hasClass('single'))
                    this.container.find('.calendar.right').addClass('single');
            } else {
                this.container.removeClass('single');
                this.container.find('.calendar.right').removeClass('single');
                this.container.find('.ranges').show();
            }

            this.oldStartDate = this.startDate.clone();
            this.oldEndDate = this.endDate.clone();
            this.oldChosenLabel = this.chosenLabel;

            this.leftCalendar = {
                month: moment([this.startDate.year(), this.startDate.month(), 1, this.startDate.hour(), this.startDate.minute()]),
                calendar: []
            };

            this.rightCalendar = {
                month: moment([this.endDate.year(), this.endDate.month(), 1, this.endDate.hour(), this.endDate.minute()]),
                calendar: []
            };

            if (this.opens == 'right' || this.opens == 'center') {
                //swap calendar positions
                var left = this.container.find('.calendar.left');
                var right = this.container.find('.calendar.right');

                if (right.hasClass('single')) {
                    right.removeClass('single');
                    left.addClass('single');
                }

                left.removeClass('left').addClass('right');
                right.removeClass('right').addClass('left');

                if (this.singleDatePicker) {
                    left.show();
                    right.hide();
                }
            }

            if (typeof options.ranges === 'undefined' && !this.singleDatePicker) {
                this.container.addClass('show-calendar');
            }

            this.container.addClass('opens' + this.opens);

            this.updateView();
            this.updateCalendars();

        },

        setStartDate: function(startDate) {
            if (typeof startDate === 'string')
                this.startDate = moment(startDate, this.format);

            if (typeof startDate === 'object')
                this.startDate = moment(startDate);

            if (!this.timePicker)
                this.startDate = this.startDate.startOf('day');

            this.oldStartDate = this.startDate.clone();

            this.updateView();
            this.updateCalendars();
            this.updateInputText();
        },

        setEndDate: function(endDate) {
            if (typeof endDate === 'string')
                this.endDate = moment(endDate, this.format);

            if (typeof endDate === 'object')
                this.endDate = moment(endDate);

            if (!this.timePicker)
                this.endDate = this.endDate.endOf('day');

            this.oldEndDate = this.endDate.clone();

            this.updateView();
            this.updateCalendars();
            this.updateInputText();
        },

        updateView: function () {
            this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()).hour(this.startDate.hour()).minute(this.startDate.minute());
            this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year()).hour(this.endDate.hour()).minute(this.endDate.minute());
            this.updateFormInputs();
        },

        updateFormInputs: function () {
            this.container.find('input[name=daterangepicker_start]').val(this.startDate.format(this.format));
            this.container.find('input[name=daterangepicker_end]').val(this.endDate.format(this.format));

            if (this.startDate.isSame(this.endDate) || this.startDate.isBefore(this.endDate)) {
                this.container.find('button.applyBtn').removeAttr('disabled');
            } else {
                this.container.find('button.applyBtn').attr('disabled', 'disabled');
            }
        },

        updateFromControl: function () {
            if (!this.element.is('input')) return;
            if (!this.element.val().length) return;

            var dateString = this.element.val().split(this.separator),
                start = null,
                end = null;

            if(dateString.length === 2) {
                start = moment(dateString[0], this.format);
                end = moment(dateString[1], this.format);
            }

            if (this.singleDatePicker || start === null || end === null) {
                start = moment(this.element.val(), this.format);
                end = start;
            }

            if (end.isBefore(start)) return;

            this.oldStartDate = this.startDate.clone();
            this.oldEndDate = this.endDate.clone();

            this.startDate = start;
            this.endDate = end;

            if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate))
                this.notify();

            this.updateCalendars();
        },

        notify: function () {
            this.updateView();
            this.cb(this.startDate, this.endDate, this.chosenLabel);
        },

        move: function () {
            var parentOffset = { top: 0, left: 0 };
            var parentRightEdge = $(window).width();
            if (!this.parentEl.is('body')) {
                parentOffset = {
                    top: this.parentEl.offset().top - this.parentEl.scrollTop(),
                    left: this.parentEl.offset().left - this.parentEl.scrollLeft()
                };
                parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;
            }

            if (this.opens == 'left') {
                this.container.css({
                    top: this.element.offset().top + this.element.outerHeight() - parentOffset.top,
                    right: parentRightEdge - this.element.offset().left - this.element.outerWidth(),
                    left: 'auto'
                });
                if (this.container.offset().left < 0) {
                    this.container.css({
                        right: 'auto',
                        left: 9
                    });
                }
            } else if (this.opens == 'center') {
                this.container.css({
                    top: this.element.offset().top + this.element.outerHeight() - parentOffset.top,
                    left: this.element.offset().left - parentOffset.left + this.element.outerWidth() / 2
                            - this.container.outerWidth() / 2,
                    right: 'auto'
                });
                if (this.container.offset().left < 0) {
                    this.container.css({
                        right: 'auto',
                        left: 9
                    });
                }
            } else {
                this.container.css({
                    top: this.element.offset().top + this.element.outerHeight() - parentOffset.top,
                    left: this.element.offset().left - parentOffset.left,
                    right: 'auto'
                });
                if (this.container.offset().left + this.container.outerWidth() > $(window).width()) {
                    this.container.css({
                        left: 'auto',
                        right: 0
                    });
                }
            }
        },

        toggle: function (e) {
            if (this.element.hasClass('active')) {
                this.hide();
            } else {
                this.show();
            }
        },

        show: function (e) {
            if (this.isShowing) return;

            this.element.addClass('active');
            this.container.show();
            this.move();

            // Create a click proxy that is private to this instance of datepicker, for unbinding
            this._outsideClickProxy = $.proxy(function (e) { this.outsideClick(e); }, this);
            // Bind global datepicker mousedown for hiding and
            $(document)
              .on('mousedown.daterangepicker', this._outsideClickProxy)
              // also explicitly play nice with Bootstrap dropdowns, which stopPropagation when clicking them
              .on('click.daterangepicker', '[data-toggle=dropdown]', this._outsideClickProxy)
              // and also close when focus changes to outside the picker (eg. tabbing between controls)
              .on('focusin.daterangepicker', this._outsideClickProxy);

            this.isShowing = true;
            this.element.trigger('show.daterangepicker', this);
        },

        outsideClick: function (e) {
            var target = $(e.target);
            // if the page is clicked anywhere except within the daterangerpicker/button
            // itself then call this.hide()
            if (
                target.closest(this.element).length ||
                target.closest(this.container).length ||
                target.closest('.calendar-date').length
                ) return;
            this.hide();
        },

        hide: function (e) {
            if (!this.isShowing) return;

            $(document)
              .off('mousedown.daterangepicker')
              .off('click.daterangepicker', '[data-toggle=dropdown]')
              .off('focusin.daterangepicker');

            this.element.removeClass('active');
            this.container.hide();

            if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate))
                this.notify();

            this.oldStartDate = this.startDate.clone();
            this.oldEndDate = this.endDate.clone();

            this.isShowing = false;
            this.element.trigger('hide.daterangepicker', this);
        },

        enterRange: function (e) {
            // mouse pointer has entered a range label
            var label = e.target.innerHTML;
            if (label == this.locale.customRangeLabel) {
                this.updateView();
            } else {
                var dates = this.ranges[label];
                this.container.find('input[name=daterangepicker_start]').val(dates[0].format(this.format));
                this.container.find('input[name=daterangepicker_end]').val(dates[1].format(this.format));
            }
        },

        showCalendars: function() {
            this.container.addClass('show-calendar');
            this.move();
            this.element.trigger('showCalendar.daterangepicker', this);
        },

        hideCalendars: function() {
            this.container.removeClass('show-calendar');
            this.element.trigger('hideCalendar.daterangepicker', this);
        },

        // when a date is typed into the start to end date textboxes
        inputsChanged: function (e) {
            var el = $(e.target);
            var date = moment(el.val(), this.format);
            if (!date.isValid()) return;

            var startDate, endDate;
            if (el.attr('name') === 'daterangepicker_start') {
                startDate = date;
                endDate = this.endDate;
            } else {
                startDate = this.startDate;
                endDate = date;
            }
            this.setCustomDates(startDate, endDate);
        },

        inputsKeydown: function(e) {
            if (e.keyCode === 13) {
                this.inputsChanged(e);
                this.notify();
            }
        },

        updateInputText: function() {
            if (this.element.is('input') && !this.singleDatePicker) {
                this.element.val(this.startDate.format(this.format) + this.separator + this.endDate.format(this.format));
            } else if (this.element.is('input')) {
                this.element.val(this.endDate.format(this.format));
            }
        },

        clickRange: function (e) {
            var label = e.target.innerHTML;
            this.chosenLabel = label;
            if (label == this.locale.customRangeLabel) {
                this.showCalendars();
            } else {
                var dates = this.ranges[label];

                this.startDate = dates[0];
                this.endDate = dates[1];

                if (!this.timePicker) {
                    this.startDate.startOf('day');
                    this.endDate.endOf('day');
                }

                this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()).hour(this.startDate.hour()).minute(this.startDate.minute());
                this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year()).hour(this.endDate.hour()).minute(this.endDate.minute());
                this.updateCalendars();

                this.updateInputText();

                this.hideCalendars();
                this.hide();
                this.element.trigger('apply.daterangepicker', this);
            }
        },

        clickPrev: function (e) {
            var cal = $(e.target).parents('.calendar');
            if (cal.hasClass('left')) {
                this.leftCalendar.month.subtract(1, 'month');
            } else {
                this.rightCalendar.month.subtract(1, 'month');
            }
            this.updateCalendars();
        },

        clickNext: function (e) {
            var cal = $(e.target).parents('.calendar');
            if (cal.hasClass('left')) {
                this.leftCalendar.month.add(1, 'month');
            } else {
                this.rightCalendar.month.add(1, 'month');
            }
            this.updateCalendars();
        },

        hoverDate: function (e) {
            var title = $(e.target).attr('data-title');
            var row = title.substr(1, 1);
            var col = title.substr(3, 1);
            var cal = $(e.target).parents('.calendar');

            if (cal.hasClass('left')) {
                this.container.find('input[name=daterangepicker_start]').val(this.leftCalendar.calendar[row][col].format(this.format));
            } else {
                this.container.find('input[name=daterangepicker_end]').val(this.rightCalendar.calendar[row][col].format(this.format));
            }
        },

        setCustomDates: function(startDate, endDate) {
            this.chosenLabel = this.locale.customRangeLabel;
            if (startDate.isAfter(endDate)) {
                var difference = this.endDate.diff(this.startDate);
                endDate = moment(startDate).add(difference, 'ms');
            }
            this.startDate = startDate;
            this.endDate = endDate;

            this.updateView();
            this.updateCalendars();
        },

        clickDate: function (e) {
            var title = $(e.target).attr('data-title');
            var row = title.substr(1, 1);
            var col = title.substr(3, 1);
            var cal = $(e.target).parents('.calendar');

            var startDate, endDate;
            if (cal.hasClass('left')) {
                startDate = this.leftCalendar.calendar[row][col];
                endDate = this.endDate;
                if (typeof this.dateLimit === 'object') {
                    var maxDate = moment(startDate).add(this.dateLimit).startOf('day');
                    if (endDate.isAfter(maxDate)) {
                        endDate = maxDate;
                    }
                }
            } else {
                startDate = this.startDate;
                endDate = this.rightCalendar.calendar[row][col];
                if (typeof this.dateLimit === 'object') {
                    var minDate = moment(endDate).subtract(this.dateLimit).startOf('day');
                    if (startDate.isBefore(minDate)) {
                        startDate = minDate;
                    }
                }
            }

            if (this.singleDatePicker && cal.hasClass('left')) {
                endDate = startDate.clone();
            } else if (this.singleDatePicker && cal.hasClass('right')) {
                startDate = endDate.clone();
            }

            cal.find('td').removeClass('active');

            $(e.target).addClass('active');

            this.setCustomDates(startDate, endDate);

            if (!this.timePicker)
                endDate.endOf('day');

            if (this.singleDatePicker && !this.timePicker)
                this.clickApply();
        },

        clickApply: function (e) {
            this.updateInputText();
            this.hide();
            this.element.trigger('apply.daterangepicker', this);
        },

        clickCancel: function (e) {
            this.startDate = this.oldStartDate;
            this.endDate = this.oldEndDate;
            this.chosenLabel = this.oldChosenLabel;
            this.updateView();
            this.updateCalendars();
            this.hide();
            this.element.trigger('cancel.daterangepicker', this);
        },

        updateMonthYear: function (e) {
            var isLeft = $(e.target).closest('.calendar').hasClass('left'),
                leftOrRight = isLeft ? 'left' : 'right',
                cal = this.container.find('.calendar.'+leftOrRight);

            // Month must be Number for new moment versions
            var month = parseInt(cal.find('.monthselect').val(), 10);
            var year = cal.find('.yearselect').val();

            this[leftOrRight+'Calendar'].month.month(month).year(year);
            this.updateCalendars();
        },

        updateTime: function(e) {

            var cal = $(e.target).closest('.calendar'),
                isLeft = cal.hasClass('left');

            var hour = parseInt(cal.find('.hourselect').val(), 10);
            var minute = parseInt(cal.find('.minuteselect').val(), 10);

            if (this.timePicker12Hour) {
                var ampm = cal.find('.ampmselect').val();
                if (ampm === 'PM' && hour < 12)
                    hour += 12;
                if (ampm === 'AM' && hour === 12)
                    hour = 0;
            }

            if (isLeft) {
                var start = this.startDate.clone();
                start.hour(hour);
                start.minute(minute);
                this.startDate = start;
                this.leftCalendar.month.hour(hour).minute(minute);
                if (this.singleDatePicker)
                    this.endDate = start.clone();
            } else {
                var end = this.endDate.clone();
                end.hour(hour);
                end.minute(minute);
                this.endDate = end;
                if (this.singleDatePicker)
                    this.startDate = end.clone();
                this.rightCalendar.month.hour(hour).minute(minute);
            }

            this.updateCalendars();
        },

        updateCalendars: function () {
            this.leftCalendar.calendar = this.buildCalendar(this.leftCalendar.month.month(), this.leftCalendar.month.year(), this.leftCalendar.month.hour(), this.leftCalendar.month.minute(), 'left');
            this.rightCalendar.calendar = this.buildCalendar(this.rightCalendar.month.month(), this.rightCalendar.month.year(), this.rightCalendar.month.hour(), this.rightCalendar.month.minute(), 'right');
            this.container.find('.calendar.left').empty().html(this.renderCalendar(this.leftCalendar.calendar, this.startDate, this.minDate, this.maxDate, 'left'));
            this.container.find('.calendar.right').empty().html(this.renderCalendar(this.rightCalendar.calendar, this.endDate, this.singleDatePicker ? this.minDate : this.startDate, this.maxDate, 'right'));
            
            this.container.find('.ranges li').removeClass('active');
            var customRange = true;
            var i = 0;
            for (var range in this.ranges) {
                if (this.timePicker) {
                    if (this.startDate.isSame(this.ranges[range][0]) && this.endDate.isSame(this.ranges[range][1])) {
                        customRange = false;
                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')')
                            .addClass('active').html();
                    }
                } else {
                    //ignore times when comparing dates if time picker is not enabled
                    if (this.startDate.format('YYYY-MM-DD') == this.ranges[range][0].format('YYYY-MM-DD') && this.endDate.format('YYYY-MM-DD') == this.ranges[range][1].format('YYYY-MM-DD')) {
                        customRange = false;
                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')')
                            .addClass('active').html();
                    }
                }
                i++;
            }
            if (customRange) {
                this.chosenLabel = this.container.find('.ranges li:last').addClass('active').html();
                this.showCalendars();
            }
        },

        buildCalendar: function (month, year, hour, minute, side) {
            var daysInMonth = moment([year, month]).daysInMonth();
            var firstDay = moment([year, month, 1]);
            var lastDay = moment([year, month, daysInMonth]);
            var lastMonth = moment(firstDay).subtract(1, 'month').month();
            var lastYear = moment(firstDay).subtract(1, 'month').year();

            var daysInLastMonth = moment([lastYear, lastMonth]).daysInMonth();

            var dayOfWeek = firstDay.day();

            var i;

            //initialize a 6 rows x 7 columns array for the calendar
            var calendar = [];
            calendar.firstDay = firstDay;
            calendar.lastDay = lastDay;

            for (i = 0; i < 6; i++) {
                calendar[i] = [];
            }

            //populate the calendar with date objects
            var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;
            if (startDay > daysInLastMonth)
                startDay -= 7;

            if (dayOfWeek == this.locale.firstDay)
                startDay = daysInLastMonth - 6;

            var curDate = moment([lastYear, lastMonth, startDay, 12, minute]);
            var col, row;
            for (i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment(curDate).add(24, 'hour')) {
                if (i > 0 && col % 7 === 0) {
                    col = 0;
                    row++;
                }
                calendar[row][col] = curDate.clone().hour(hour);
                curDate.hour(12);

                if (this.minDate && calendar[row][col].format('YYYY-MM-DD') == this.minDate.format('YYYY-MM-DD') && calendar[row][col].isBefore(this.minDate) && side == 'left') {
                    calendar[row][col] = this.minDate.clone();
                }

                if (this.maxDate && calendar[row][col].format('YYYY-MM-DD') == this.maxDate.format('YYYY-MM-DD') && calendar[row][col].isAfter(this.maxDate) && side == 'right') {
                    calendar[row][col] = this.maxDate.clone();
                }

            }

            return calendar;
        },

        renderDropdowns: function (selected, minDate, maxDate) {
            var currentMonth = selected.month();
            var currentYear = selected.year();
            var maxYear = (maxDate && maxDate.year()) || (currentYear + 5);
            var minYear = (minDate && minDate.year()) || (currentYear - 50);

            var monthHtml = '<select class="monthselect">';
            var inMinYear = currentYear == minYear;
            var inMaxYear = currentYear == maxYear;

            for (var m = 0; m < 12; m++) {
                if ((!inMinYear || m >= minDate.month()) && (!inMaxYear || m <= maxDate.month())) {
                    monthHtml += "<option value='" + m + "'" +
                        (m === currentMonth ? " selected='selected'" : "") +
                        ">" + this.locale.monthNames[m] + "</option>";
                }
            }
            monthHtml += "</select>";

            var yearHtml = '<select class="yearselect">';

            for (var y = minYear; y <= maxYear; y++) {
                yearHtml += '<option value="' + y + '"' +
                    (y === currentYear ? ' selected="selected"' : '') +
                    '>' + y + '</option>';
            }

            yearHtml += '</select>';

            return monthHtml + yearHtml;
        },

        renderCalendar: function (calendar, selected, minDate, maxDate, side) {

            var html = '<div class="calendar-date">';
            html += '<table class="table-condensed">';
            html += '<thead>';
            html += '<tr>';

            // add empty cell for week number
            if (this.showWeekNumbers)
                html += '<th></th>';

            if (!minDate || minDate.isBefore(calendar.firstDay)) {
                html += '<th class="prev available"><i class="fa fa-arrow-left icon-arrow-left glyphicon glyphicon-arrow-left"></i></th>';
            } else {
                html += '<th></th>';
            }

            var dateHtml = this.locale.monthNames[calendar[1][1].month()] + calendar[1][1].format(" YYYY");

            if (this.showDropdowns) {
                dateHtml = this.renderDropdowns(calendar[1][1], minDate, maxDate);
            }

            html += '<th colspan="5" class="month">' + dateHtml + '</th>';
            if (!maxDate || maxDate.isAfter(calendar.lastDay)) {
                html += '<th class="next available"><i class="fa fa-arrow-right icon-arrow-right glyphicon glyphicon-arrow-right"></i></th>';
            } else {
                html += '<th></th>';
            }

            html += '</tr>';
            html += '<tr>';

            // add week number label
            if (this.showWeekNumbers)
                html += '<th class="week">' + this.locale.weekLabel + '</th>';

            $.each(this.locale.daysOfWeek, function (index, dayOfWeek) {
                html += '<th>' + dayOfWeek + '</th>';
            });

            html += '</tr>';
            html += '</thead>';
            html += '<tbody>';

            for (var row = 0; row < 6; row++) {
                html += '<tr>';

                // add week number
                if (this.showWeekNumbers)
                    html += '<td class="week">' + calendar[row][0].week() + '</td>';

                for (var col = 0; col < 7; col++) {
                    var cname = 'available ';
                    cname += (calendar[row][col].month() == calendar[1][1].month()) ? '' : 'off';

                    if ((minDate && calendar[row][col].isBefore(minDate, 'day')) || (maxDate && calendar[row][col].isAfter(maxDate, 'day'))) {
                        cname = ' off disabled ';
                    } else if (calendar[row][col].format('YYYY-MM-DD') == selected.format('YYYY-MM-DD')) {
                        cname += ' active ';
                        if (calendar[row][col].format('YYYY-MM-DD') == this.startDate.format('YYYY-MM-DD')) {
                            cname += ' start-date ';
                        }
                        if (calendar[row][col].format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD')) {
                            cname += ' end-date ';
                        }
                    } else if (calendar[row][col] >= this.startDate && calendar[row][col] <= this.endDate) {
                        cname += ' in-range ';
                        if (calendar[row][col].isSame(this.startDate)) { cname += ' start-date '; }
                        if (calendar[row][col].isSame(this.endDate)) { cname += ' end-date '; }
                    }

                    var title = 'r' + row + 'c' + col;
                    html += '<td class="' + cname.replace(/\s+/g, ' ').replace(/^\s?(.*?)\s?$/, '$1') + '" data-title="' + title + '">' + calendar[row][col].date() + '</td>';
                }
                html += '</tr>';
            }

            html += '</tbody>';
            html += '</table>';
            html += '</div>';

            var i;
            if (this.timePicker) {

                html += '<div class="calendar-time">';
                html += '<select class="hourselect">';

                // Disallow selections before the minDate or after the maxDate
                var min_hour = 0;
                var max_hour = 23;

                if (minDate && (side == 'left' || this.singleDatePicker) && selected.format('YYYY-MM-DD') == minDate.format('YYYY-MM-DD')) {
                    min_hour = minDate.hour();
                    if (selected.hour() < min_hour)
                        selected.hour(min_hour);
                    if (this.timePicker12Hour && min_hour >= 12 && selected.hour() >= 12)
                        min_hour -= 12;
                    if (this.timePicker12Hour && min_hour == 12)
                        min_hour = 1;
                }

                if (maxDate && (side == 'right' || this.singleDatePicker) && selected.format('YYYY-MM-DD') == maxDate.format('YYYY-MM-DD')) {
                    max_hour = maxDate.hour();
                    if (selected.hour() > max_hour)
                        selected.hour(max_hour);
                    if (this.timePicker12Hour && max_hour >= 12 && selected.hour() >= 12)
                        max_hour -= 12;
                }

                var start = 0;
                var end = 23;
                var selected_hour = selected.hour();
                if (this.timePicker12Hour) {
                    start = 1;
                    end = 12;
                    if (selected_hour >= 12)
                        selected_hour -= 12;
                    if (selected_hour === 0)
                        selected_hour = 12;
                }

                for (i = start; i <= end; i++) {

                    if (i == selected_hour) {
                        html += '<option value="' + i + '" selected="selected">' + i + '</option>';
                    } else if (i < min_hour || i > max_hour) {
                        html += '<option value="' + i + '" disabled="disabled" class="disabled">' + i + '</option>';
                    } else {
                        html += '<option value="' + i + '">' + i + '</option>';
                    }
                }

                html += '</select> : ';

                html += '<select class="minuteselect">';

                // Disallow selections before the minDate or after the maxDate
                var min_minute = 0;
                var max_minute = 59;

                if (minDate && (side == 'left' || this.singleDatePicker) && selected.format('YYYY-MM-DD h A') == minDate.format('YYYY-MM-DD h A')) {
                    min_minute = minDate.minute();
                    if (selected.minute() < min_minute)
                        selected.minute(min_minute);
                }

                if (maxDate && (side == 'right' || this.singleDatePicker) && selected.format('YYYY-MM-DD h A') == maxDate.format('YYYY-MM-DD h A')) {
                    max_minute = maxDate.minute();
                    if (selected.minute() > max_minute)
                        selected.minute(max_minute);
                }

                for (i = 0; i < 60; i += this.timePickerIncrement) {
                    var num = i;
                    if (num < 10)
                        num = '0' + num;
                    if (i == selected.minute()) {
                        html += '<option value="' + i + '" selected="selected">' + num + '</option>';
                    } else if (i < min_minute || i > max_minute) {
                        html += '<option value="' + i + '" disabled="disabled" class="disabled">' + num + '</option>';
                    } else {
                        html += '<option value="' + i + '">' + num + '</option>';
                    }
                }

                html += '</select> ';

                if (this.timePicker12Hour) {
                    html += '<select class="ampmselect">';

                    // Disallow selection before the minDate or after the maxDate
                    var am_html = '';
                    var pm_html = '';

                    if (minDate && (side == 'left' || this.singleDatePicker) && selected.format('YYYY-MM-DD') == minDate.format('YYYY-MM-DD') && minDate.hour() >= 12) {
                        am_html = ' disabled="disabled" class="disabled"';
                    }

                    if (maxDate && (side == 'right' || this.singleDatePicker) && selected.format('YYYY-MM-DD') == maxDate.format('YYYY-MM-DD') && maxDate.hour() < 12) {
                        pm_html = ' disabled="disabled" class="disabled"';
                    }

                    if (selected.hour() >= 12) {
                        html += '<option value="AM"' + am_html + '>AM</option><option value="PM" selected="selected"' + pm_html + '>PM</option>';
                    } else {
                        html += '<option value="AM" selected="selected"' + am_html + '>AM</option><option value="PM"' + pm_html + '>PM</option>';
                    }
                    html += '</select>';
                }

                html += '</div>';

            }

            return html;

        },

        remove: function() {

            this.container.remove();
            this.element.off('.daterangepicker');
            this.element.removeData('daterangepicker');

        }

    };

    $.fn.daterangepicker = function (options, cb) {
        this.each(function () {
            var el = $(this);
            if (el.data('daterangepicker'))
                el.data('daterangepicker').remove();
            el.data('daterangepicker', new DateRangePicker(el, options, cb));
        });
        return this;
    };

}));
},{"third-party-modules/moment":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\moment\\moment.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\bootstrap-datetimepicker\\bootstrap-datetime-picker.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./bootstrap-datetimepicker.min.js');
},{"./bootstrap-datetimepicker.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\bootstrap-datetimepicker\\bootstrap-datetimepicker.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\bootstrap-datetimepicker\\bootstrap-datetimepicker.min.js":[function(require,module,exports){
/*
Version 3.1.3
=========================================================
bootstrap-datetimepicker.js
https://github.com/Eonasdan/bootstrap-datetimepicker
=========================================================
The MIT License (MIT)

Copyright (c) 2014 Jonathan Peterson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
!function(a,b){"use strict";if("function"==typeof define&&define.amd)define(["third-party-modules/jquery","third-party-modules/moment"],b);else if("object"==typeof exports)b($,require("third-party-modules/moment"));else{if(!jQuery)throw new Error("bootstrap-datetimepicker requires jQuery to be loaded first");if(!moment)throw new Error("bootstrap-datetimepicker requires moment.js to be loaded first");b(a.jQuery,moment)}}(this,function(a,b){"use strict";if("undefined"==typeof b)throw new Error("momentjs is required");var c=0,d=function(d,e){var f,g=a.fn.datetimepicker.defaults,h={time:"glyphicon glyphicon-time",date:"glyphicon glyphicon-calendar",up:"glyphicon glyphicon-chevron-up",down:"glyphicon glyphicon-chevron-down"},i=this,j=!1,k=function(){var f,j,k=!1;if(i.options=a.extend({},g,e),i.options.icons=a.extend({},h,i.options.icons),i.element=a(d),m(),!i.options.pickTime&&!i.options.pickDate)throw new Error("Must choose at least one picker");if(i.id=c++,b.locale(i.options.language),i.date=b(),i.unset=!1,i.isInput=i.element.is("input"),i.component=!1,i.element.hasClass("input-group")&&(i.component=i.element.find(0===i.element.find(".datepickerbutton").size()?'[class^="input-group-"]':".datepickerbutton")),i.format=i.options.format,f=b().localeData(),i.format||(i.format=i.options.pickDate?f.longDateFormat("L"):"",i.options.pickDate&&i.options.pickTime&&(i.format+=" "),i.format+=i.options.pickTime?f.longDateFormat("LT"):"",i.options.useSeconds&&(-1!==f.longDateFormat("LT").indexOf(" A")?i.format=i.format.split(" A")[0]+":ss A":i.format+=":ss")),i.use24hours=i.format.toLowerCase().indexOf("a")<0&&i.format.indexOf("h")<0,i.component&&(k=i.component.find("span")),i.options.pickTime&&k&&k.addClass(i.options.icons.time),i.options.pickDate&&k&&(k.removeClass(i.options.icons.time),k.addClass(i.options.icons.date)),i.options.widgetParent="string"==typeof i.options.widgetParent&&i.options.widgetParent||i.element.parents().filter(function(){return"scroll"===a(this).css("overflow-y")}).get(0)||"body",i.widget=a(Q()).appendTo(i.options.widgetParent),i.minViewMode=i.options.minViewMode||0,"string"==typeof i.minViewMode)switch(i.minViewMode){case"months":i.minViewMode=1;break;case"years":i.minViewMode=2;break;default:i.minViewMode=0}if(i.viewMode=i.options.viewMode||0,"string"==typeof i.viewMode)switch(i.viewMode){case"months":i.viewMode=1;break;case"years":i.viewMode=2;break;default:i.viewMode=0}i.viewMode=Math.max(i.viewMode,i.minViewMode),i.options.disabledDates=O(i.options.disabledDates),i.options.enabledDates=O(i.options.enabledDates),i.startViewMode=i.viewMode,i.setMinDate(i.options.minDate),i.setMaxDate(i.options.maxDate),r(),s(),u(),v(),w(),q(),E(),l().prop("disabled")||F(),""!==i.options.defaultDate&&""===l().val()&&i.setValue(i.options.defaultDate),1!==i.options.minuteStepping&&(j=i.options.minuteStepping,i.date.minutes(Math.round(i.date.minutes()/j)*j%60).seconds(0))},l=function(){var a;if(i.isInput)return i.element;if(a=i.element.find(".datepickerinput"),0===a.size())a=i.element.find("input");else if(!a.is("input"))throw new Error('CSS class "datepickerinput" cannot be applied to non input element');return a},m=function(){var a;a=i.element.is("input")?i.element.data():i.element.find("input").data(),void 0!==a.dateFormat&&(i.options.format=a.dateFormat),void 0!==a.datePickdate&&(i.options.pickDate=a.datePickdate),void 0!==a.datePicktime&&(i.options.pickTime=a.datePicktime),void 0!==a.dateUseminutes&&(i.options.useMinutes=a.dateUseminutes),void 0!==a.dateUseseconds&&(i.options.useSeconds=a.dateUseseconds),void 0!==a.dateUsecurrent&&(i.options.useCurrent=a.dateUsecurrent),void 0!==a.calendarWeeks&&(i.options.calendarWeeks=a.calendarWeeks),void 0!==a.dateMinutestepping&&(i.options.minuteStepping=a.dateMinutestepping),void 0!==a.dateMindate&&(i.options.minDate=a.dateMindate),void 0!==a.dateMaxdate&&(i.options.maxDate=a.dateMaxdate),void 0!==a.dateShowtoday&&(i.options.showToday=a.dateShowtoday),void 0!==a.dateCollapse&&(i.options.collapse=a.dateCollapse),void 0!==a.dateLanguage&&(i.options.language=a.dateLanguage),void 0!==a.dateDefaultdate&&(i.options.defaultDate=a.dateDefaultdate),void 0!==a.dateDisableddates&&(i.options.disabledDates=a.dateDisableddates),void 0!==a.dateEnableddates&&(i.options.enabledDates=a.dateEnableddates),void 0!==a.dateIcons&&(i.options.icons=a.dateIcons),void 0!==a.dateUsestrict&&(i.options.useStrict=a.dateUsestrict),void 0!==a.dateDirection&&(i.options.direction=a.dateDirection),void 0!==a.dateSidebyside&&(i.options.sideBySide=a.dateSidebyside),void 0!==a.dateDaysofweekdisabled&&(i.options.daysOfWeekDisabled=a.dateDaysofweekdisabled)},n=function(){var b,c="absolute",d=i.component?i.component.offset():i.element.offset(),e=a(window);i.width=i.component?i.component.outerWidth():i.element.outerWidth(),d.top=d.top+i.element.outerHeight(),"up"===i.options.direction?b="top":"bottom"===i.options.direction?b="bottom":"auto"===i.options.direction&&(b=d.top+i.widget.height()>e.height()+e.scrollTop()&&i.widget.height()+i.element.outerHeight()<d.top?"top":"bottom"),"top"===b?(d.bottom=e.height()-d.top+i.element.outerHeight()+3,i.widget.addClass("top").removeClass("bottom")):(d.top+=1,i.widget.addClass("bottom").removeClass("top")),void 0!==i.options.width&&i.widget.width(i.options.width),"left"===i.options.orientation&&(i.widget.addClass("left-oriented"),d.left=d.left-i.widget.width()+20),J()&&(c="fixed",d.top-=e.scrollTop(),d.left-=e.scrollLeft()),e.width()<d.left+i.widget.outerWidth()?(d.right=e.width()-d.left-i.width,d.left="auto",i.widget.addClass("pull-right")):(d.right="auto",i.widget.removeClass("pull-right")),i.widget.css("top"===b?{position:c,bottom:d.bottom,top:"auto",left:d.left,right:d.right}:{position:c,top:d.top,bottom:"auto",left:d.left,right:d.right})},o=function(a,c){(!b(i.date).isSame(b(a))||j)&&(j=!1,i.element.trigger({type:"dp.change",date:b(i.date),oldDate:b(a)}),"change"!==c&&i.element.change())},p=function(a){j=!0,i.element.trigger({type:"dp.error",date:b(a,i.format,i.options.useStrict)})},q=function(a){b.locale(i.options.language);var c=a;c||(c=l().val(),c&&(i.date=b(c,i.format,i.options.useStrict)),i.date||(i.date=b())),i.viewDate=b(i.date).startOf("month"),t(),x()},r=function(){b.locale(i.options.language);var c,d=a("<tr>"),e=b.weekdaysMin();if(i.options.calendarWeeks===!0&&d.append('<th class="cw">#</th>'),0===b().localeData()._week.dow)for(c=0;7>c;c++)d.append('<th class="dow">'+e[c]+"</th>");else for(c=1;8>c;c++)d.append(7===c?'<th class="dow">'+e[0]+"</th>":'<th class="dow">'+e[c]+"</th>");i.widget.find(".datepicker-days thead").append(d)},s=function(){b.locale(i.options.language);var a,c="",d=b.monthsShort();for(a=0;12>a;a++)c+='<span class="month">'+d[a]+"</span>";i.widget.find(".datepicker-months td").append(c)},t=function(){if(i.options.pickDate){b.locale(i.options.language);var c,d,e,f,g,h,j,k,l,m=i.viewDate.year(),n=i.viewDate.month(),o=i.options.minDate.year(),p=i.options.minDate.month(),q=i.options.maxDate.year(),r=i.options.maxDate.month(),s=[],t=b.months();for(i.widget.find(".datepicker-days").find(".disabled").removeClass("disabled"),i.widget.find(".datepicker-months").find(".disabled").removeClass("disabled"),i.widget.find(".datepicker-years").find(".disabled").removeClass("disabled"),i.widget.find(".datepicker-days th:eq(1)").text(t[n]+" "+m),d=b(i.viewDate,i.format,i.options.useStrict).subtract(1,"months"),j=d.daysInMonth(),d.date(j).startOf("week"),(m===o&&p>=n||o>m)&&i.widget.find(".datepicker-days th:eq(0)").addClass("disabled"),(m===q&&n>=r||m>q)&&i.widget.find(".datepicker-days th:eq(2)").addClass("disabled"),e=b(d).add(42,"d");d.isBefore(e);){if(d.weekday()===b().startOf("week").weekday()&&(f=a("<tr>"),s.push(f),i.options.calendarWeeks===!0&&f.append('<td class="cw">'+d.week()+"</td>")),g="",d.year()<m||d.year()===m&&d.month()<n?g+=" old":(d.year()>m||d.year()===m&&d.month()>n)&&(g+=" new"),d.isSame(b({y:i.date.year(),M:i.date.month(),d:i.date.date()}))&&(g+=" active"),(M(d,"day")||!N(d))&&(g+=" disabled"),i.options.showToday===!0&&d.isSame(b(),"day")&&(g+=" today"),i.options.daysOfWeekDisabled)for(h=0;h<i.options.daysOfWeekDisabled.length;h++)if(d.day()===i.options.daysOfWeekDisabled[h]){g+=" disabled";break}f.append('<td class="day'+g+'">'+d.date()+"</td>"),c=d.date(),d.add(1,"d"),c===d.date()&&d.add(1,"d")}for(i.widget.find(".datepicker-days tbody").empty().append(s),l=i.date.year(),t=i.widget.find(".datepicker-months").find("th:eq(1)").text(m).end().find("span").removeClass("active"),l===m&&t.eq(i.date.month()).addClass("active"),o>m-1&&i.widget.find(".datepicker-months th:eq(0)").addClass("disabled"),m+1>q&&i.widget.find(".datepicker-months th:eq(2)").addClass("disabled"),h=0;12>h;h++)m===o&&p>h||o>m?a(t[h]).addClass("disabled"):(m===q&&h>r||m>q)&&a(t[h]).addClass("disabled");for(s="",m=10*parseInt(m/10,10),k=i.widget.find(".datepicker-years").find("th:eq(1)").text(m+"-"+(m+9)).parents("table").find("td"),i.widget.find(".datepicker-years").find("th").removeClass("disabled"),o>m&&i.widget.find(".datepicker-years").find("th:eq(0)").addClass("disabled"),m+9>q&&i.widget.find(".datepicker-years").find("th:eq(2)").addClass("disabled"),m-=1,h=-1;11>h;h++)s+='<span class="year'+(-1===h||10===h?" old":"")+(l===m?" active":"")+(o>m||m>q?" disabled":"")+'">'+m+"</span>",m+=1;k.html(s)}},u=function(){b.locale(i.options.language);var a,c,d,e=i.widget.find(".timepicker .timepicker-hours table"),f="";if(e.parent().hide(),i.use24hours)for(a=0,c=0;6>c;c+=1){for(f+="<tr>",d=0;4>d;d+=1)f+='<td class="hour">'+P(a.toString())+"</td>",a++;f+="</tr>"}else for(a=1,c=0;3>c;c+=1){for(f+="<tr>",d=0;4>d;d+=1)f+='<td class="hour">'+P(a.toString())+"</td>",a++;f+="</tr>"}e.html(f)},v=function(){var a,b,c=i.widget.find(".timepicker .timepicker-minutes table"),d="",e=0,f=i.options.minuteStepping;for(c.parent().hide(),1===f&&(f=5),a=0;a<Math.ceil(60/f/4);a++){for(d+="<tr>",b=0;4>b;b+=1)60>e?(d+='<td class="minute">'+P(e.toString())+"</td>",e+=f):d+="<td></td>";d+="</tr>"}c.html(d)},w=function(){var a,b,c=i.widget.find(".timepicker .timepicker-seconds table"),d="",e=0;for(c.parent().hide(),a=0;3>a;a++){for(d+="<tr>",b=0;4>b;b+=1)d+='<td class="second">'+P(e.toString())+"</td>",e+=5;d+="</tr>"}c.html(d)},x=function(){if(i.date){var a=i.widget.find(".timepicker span[data-time-component]"),b=i.date.hours(),c=i.date.format("A");i.use24hours||(0===b?b=12:12!==b&&(b%=12),i.widget.find(".timepicker [data-action=togglePeriod]").text(c)),a.filter("[data-time-component=hours]").text(P(b)),a.filter("[data-time-component=minutes]").text(P(i.date.minutes())),a.filter("[data-time-component=seconds]").text(P(i.date.second()))}},y=function(c){c.stopPropagation(),c.preventDefault(),i.unset=!1;var d,e,f,g,h=a(c.target).closest("span, td, th"),j=b(i.date);if(1===h.length&&!h.is(".disabled"))switch(h[0].nodeName.toLowerCase()){case"th":switch(h[0].className){case"picker-switch":E(1);break;case"prev":case"next":f=R.modes[i.viewMode].navStep,"prev"===h[0].className&&(f=-1*f),i.viewDate.add(f,R.modes[i.viewMode].navFnc),t()}break;case"span":h.is(".month")?(d=h.parent().find("span").index(h),i.viewDate.month(d)):(e=parseInt(h.text(),10)||0,i.viewDate.year(e)),i.viewMode===i.minViewMode&&(i.date=b({y:i.viewDate.year(),M:i.viewDate.month(),d:i.viewDate.date(),h:i.date.hours(),m:i.date.minutes(),s:i.date.seconds()}),K(),o(j,c.type)),E(-1),t();break;case"td":h.is(".day")&&(g=parseInt(h.text(),10)||1,d=i.viewDate.month(),e=i.viewDate.year(),h.is(".old")?0===d?(d=11,e-=1):d-=1:h.is(".new")&&(11===d?(d=0,e+=1):d+=1),i.date=b({y:e,M:d,d:g,h:i.date.hours(),m:i.date.minutes(),s:i.date.seconds()}),i.viewDate=b({y:e,M:d,d:Math.min(28,g)}),t(),K(),o(j,c.type))}},z={incrementHours:function(){L("add","hours",1)},incrementMinutes:function(){L("add","minutes",i.options.minuteStepping)},incrementSeconds:function(){L("add","seconds",1)},decrementHours:function(){L("subtract","hours",1)},decrementMinutes:function(){L("subtract","minutes",i.options.minuteStepping)},decrementSeconds:function(){L("subtract","seconds",1)},togglePeriod:function(){var a=i.date.hours();a>=12?a-=12:a+=12,i.date.hours(a)},showPicker:function(){i.widget.find(".timepicker > div:not(.timepicker-picker)").hide(),i.widget.find(".timepicker .timepicker-picker").show()},showHours:function(){i.widget.find(".timepicker .timepicker-picker").hide(),i.widget.find(".timepicker .timepicker-hours").show()},showMinutes:function(){i.widget.find(".timepicker .timepicker-picker").hide(),i.widget.find(".timepicker .timepicker-minutes").show()},showSeconds:function(){i.widget.find(".timepicker .timepicker-picker").hide(),i.widget.find(".timepicker .timepicker-seconds").show()},selectHour:function(b){var c=parseInt(a(b.target).text(),10);i.use24hours||(i.date.hours()>=12?12!==c&&(c+=12):12===c&&(c=0)),i.date.hours(c),z.showPicker.call(i)},selectMinute:function(b){i.date.minutes(parseInt(a(b.target).text(),10)),z.showPicker.call(i)},selectSecond:function(b){i.date.seconds(parseInt(a(b.target).text(),10)),z.showPicker.call(i)}},A=function(c){var d=b(i.date),e=a(c.currentTarget).data("action"),f=z[e].apply(i,arguments);return B(c),i.date||(i.date=b({y:1970})),K(),x(),o(d,c.type),f},B=function(a){a.stopPropagation(),a.preventDefault()},C=function(a){27===a.keyCode&&i.hide()},D=function(c){b.locale(i.options.language);var d=a(c.target),e=b(i.date),f=b(d.val(),i.format,i.options.useStrict);f.isValid()&&!M(f)&&N(f)?(q(),i.setValue(f),o(e,c.type),K()):(i.viewDate=e,i.unset=!0,o(e,c.type),p(f))},E=function(a){a&&(i.viewMode=Math.max(i.minViewMode,Math.min(2,i.viewMode+a))),i.widget.find(".datepicker > div").hide().filter(".datepicker-"+R.modes[i.viewMode].clsName).show()},F=function(){var b,c,d,e,f;i.widget.on("click",".datepicker *",a.proxy(y,this)),i.widget.on("click","[data-action]",a.proxy(A,this)),i.widget.on("mousedown",a.proxy(B,this)),i.element.on("keydown",a.proxy(C,this)),i.options.pickDate&&i.options.pickTime&&i.widget.on("click.togglePicker",".accordion-toggle",function(g){if(g.stopPropagation(),b=a(this),c=b.closest("ul"),d=c.find(".in"),e=c.find(".collapse:not(.in)"),d&&d.length){if(f=d.data("collapse"),f&&f.transitioning)return;d.collapse("hide"),e.collapse("show"),b.find("span").toggleClass(i.options.icons.time+" "+i.options.icons.date),i.component&&i.component.find("span").toggleClass(i.options.icons.time+" "+i.options.icons.date)}}),i.isInput?i.element.on({click:a.proxy(i.show,this),focus:a.proxy(i.show,this),change:a.proxy(D,this),blur:a.proxy(i.hide,this)}):(i.element.on({change:a.proxy(D,this)},"input"),i.component?(i.component.on("click",a.proxy(i.show,this)),i.component.on("mousedown",a.proxy(B,this))):i.element.on("click",a.proxy(i.show,this)))},G=function(){a(window).on("resize.datetimepicker"+i.id,a.proxy(n,this)),i.isInput||a(document).on("mousedown.datetimepicker"+i.id,a.proxy(i.hide,this))},H=function(){i.widget.off("click",".datepicker *",i.click),i.widget.off("click","[data-action]"),i.widget.off("mousedown",i.stopEvent),i.options.pickDate&&i.options.pickTime&&i.widget.off("click.togglePicker"),i.isInput?i.element.off({focus:i.show,change:D,click:i.show,blur:i.hide}):(i.element.off({change:D},"input"),i.component?(i.component.off("click",i.show),i.component.off("mousedown",i.stopEvent)):i.element.off("click",i.show))},I=function(){a(window).off("resize.datetimepicker"+i.id),i.isInput||a(document).off("mousedown.datetimepicker"+i.id)},J=function(){if(i.element){var b,c=i.element.parents(),d=!1;for(b=0;b<c.length;b++)if("fixed"===a(c[b]).css("position")){d=!0;break}return d}return!1},K=function(){b.locale(i.options.language);var a="";i.unset||(a=b(i.date).format(i.format)),l().val(a),i.element.data("date",a),i.options.pickTime||i.hide()},L=function(a,c,d){b.locale(i.options.language);var e;return"add"===a?(e=b(i.date),23===e.hours()&&e.add(d,c),e.add(d,c)):e=b(i.date).subtract(d,c),M(b(e.subtract(d,c)))||M(e)?void p(e.format(i.format)):("add"===a?i.date.add(d,c):i.date.subtract(d,c),void(i.unset=!1))},M=function(a,c){b.locale(i.options.language);var d=b(i.options.maxDate,i.format,i.options.useStrict),e=b(i.options.minDate,i.format,i.options.useStrict);return c&&(d=d.endOf(c),e=e.startOf(c)),a.isAfter(d)||a.isBefore(e)?!0:i.options.disabledDates===!1?!1:i.options.disabledDates[a.format("YYYY-MM-DD")]===!0},N=function(a){return b.locale(i.options.language),i.options.enabledDates===!1?!0:i.options.enabledDates[a.format("YYYY-MM-DD")]===!0},O=function(a){var c,d={},e=0;for(c=0;c<a.length;c++)f=b.isMoment(a[c])||a[c]instanceof Date?b(a[c]):b(a[c],i.format,i.options.useStrict),f.isValid()&&(d[f.format("YYYY-MM-DD")]=!0,e++);return e>0?d:!1},P=function(a){return a=a.toString(),a.length>=2?a:"0"+a},Q=function(){var a='<thead><tr><th class="prev">&lsaquo;</th><th colspan="'+(i.options.calendarWeeks?"6":"5")+'" class="picker-switch"></th><th class="next">&rsaquo;</th></tr></thead>',b='<tbody><tr><td colspan="'+(i.options.calendarWeeks?"8":"7")+'"></td></tr></tbody>',c='<div class="datepicker-days"><table class="table-condensed">'+a+'<tbody></tbody></table></div><div class="datepicker-months"><table class="table-condensed">'+a+b+'</table></div><div class="datepicker-years"><table class="table-condensed">'+a+b+"</table></div>",d="";return i.options.pickDate&&i.options.pickTime?(d='<div class="bootstrap-datetimepicker-widget'+(i.options.sideBySide?" timepicker-sbs":"")+(i.use24hours?" usetwentyfour":"")+' dropdown-menu" style="z-index:9999 !important;">',d+=i.options.sideBySide?'<div class="row"><div class="col-sm-6 datepicker">'+c+'</div><div class="col-sm-6 timepicker">'+S.getTemplate()+"</div></div>":'<ul class="list-unstyled"><li'+(i.options.collapse?' class="collapse in"':"")+'><div class="datepicker">'+c+'</div></li><li class="picker-switch accordion-toggle"><a class="btn" style="width:100%"><span class="'+i.options.icons.time+'"></span></a></li><li'+(i.options.collapse?' class="collapse"':"")+'><div class="timepicker">'+S.getTemplate()+"</div></li></ul>",d+="</div>"):i.options.pickTime?'<div class="bootstrap-datetimepicker-widget dropdown-menu"><div class="timepicker">'+S.getTemplate()+"</div></div>":'<div class="bootstrap-datetimepicker-widget dropdown-menu"><div class="datepicker">'+c+"</div></div>"},R={modes:[{clsName:"days",navFnc:"month",navStep:1},{clsName:"months",navFnc:"year",navStep:1},{clsName:"years",navFnc:"year",navStep:10}]},S={hourTemplate:'<span data-action="showHours"   data-time-component="hours"   class="timepicker-hour"></span>',minuteTemplate:'<span data-action="showMinutes" data-time-component="minutes" class="timepicker-minute"></span>',secondTemplate:'<span data-action="showSeconds"  data-time-component="seconds" class="timepicker-second"></span>'};S.getTemplate=function(){return'<div class="timepicker-picker"><table class="table-condensed"><tr><td><a href="#" class="btn" data-action="incrementHours"><span class="'+i.options.icons.up+'"></span></a></td><td class="separator"></td><td>'+(i.options.useMinutes?'<a href="#" class="btn" data-action="incrementMinutes"><span class="'+i.options.icons.up+'"></span></a>':"")+"</td>"+(i.options.useSeconds?'<td class="separator"></td><td><a href="#" class="btn" data-action="incrementSeconds"><span class="'+i.options.icons.up+'"></span></a></td>':"")+(i.use24hours?"":'<td class="separator"></td>')+"</tr><tr><td>"+S.hourTemplate+'</td> <td class="separator">:</td><td>'+(i.options.useMinutes?S.minuteTemplate:'<span class="timepicker-minute">00</span>')+"</td> "+(i.options.useSeconds?'<td class="separator">:</td><td>'+S.secondTemplate+"</td>":"")+(i.use24hours?"":'<td class="separator"></td><td><button type="button" class="btn btn-primary" data-action="togglePeriod"></button></td>')+'</tr><tr><td><a href="#" class="btn" data-action="decrementHours"><span class="'+i.options.icons.down+'"></span></a></td><td class="separator"></td><td>'+(i.options.useMinutes?'<a href="#" class="btn" data-action="decrementMinutes"><span class="'+i.options.icons.down+'"></span></a>':"")+"</td>"+(i.options.useSeconds?'<td class="separator"></td><td><a href="#" class="btn" data-action="decrementSeconds"><span class="'+i.options.icons.down+'"></span></a></td>':"")+(i.use24hours?"":'<td class="separator"></td>')+'</tr></table></div><div class="timepicker-hours" data-action="selectHour"><table class="table-condensed"></table></div><div class="timepicker-minutes" data-action="selectMinute"><table class="table-condensed"></table></div>'+(i.options.useSeconds?'<div class="timepicker-seconds" data-action="selectSecond"><table class="table-condensed"></table></div>':"")},i.destroy=function(){H(),I(),i.widget.remove(),i.element.removeData("DateTimePicker"),i.component&&i.component.removeData("DateTimePicker")},i.show=function(a){if(!l().prop("disabled")){if(i.options.useCurrent&&""===l().val()){if(1!==i.options.minuteStepping){var c=b(),d=i.options.minuteStepping;c.minutes(Math.round(c.minutes()/d)*d%60).seconds(0),i.setValue(c.format(i.format))}else i.setValue(b().format(i.format));o("",a.type)}a&&"click"===a.type&&i.isInput&&i.widget.hasClass("picker-open")||(i.widget.hasClass("picker-open")?(i.widget.hide(),i.widget.removeClass("picker-open")):(i.widget.show(),i.widget.addClass("picker-open")),i.height=i.component?i.component.outerHeight():i.element.outerHeight(),n(),i.element.trigger({type:"dp.show",date:b(i.date)}),G(),a&&B(a))}},i.disable=function(){var a=l();a.prop("disabled")||(a.prop("disabled",!0),H())},i.enable=function(){var a=l();a.prop("disabled")&&(a.prop("disabled",!1),F())},i.hide=function(){var a,c,d=i.widget.find(".collapse");for(a=0;a<d.length;a++)if(c=d.eq(a).data("collapse"),c&&c.transitioning)return;i.widget.hide(),i.widget.removeClass("picker-open"),i.viewMode=i.startViewMode,E(),i.element.trigger({type:"dp.hide",date:b(i.date)}),I()},i.setValue=function(a){b.locale(i.options.language),a?i.unset=!1:(i.unset=!0,K()),a=b.isMoment(a)?a.locale(i.options.language):a instanceof Date?b(a):b(a,i.format,i.options.useStrict),a.isValid()?(i.date=a,K(),i.viewDate=b({y:i.date.year(),M:i.date.month()}),t(),x()):p(a)},i.getDate=function(){return i.unset?null:b(i.date)},i.setDate=function(a){var c=b(i.date);i.setValue(a?a:null),o(c,"function")},i.setDisabledDates=function(a){i.options.disabledDates=O(a),i.viewDate&&q()},i.setEnabledDates=function(a){i.options.enabledDates=O(a),i.viewDate&&q()},i.setMaxDate=function(a){void 0!==a&&(i.options.maxDate=b.isMoment(a)||a instanceof Date?b(a):b(a,i.format,i.options.useStrict),i.viewDate&&q())},i.setMinDate=function(a){void 0!==a&&(i.options.minDate=b.isMoment(a)||a instanceof Date?b(a):b(a,i.format,i.options.useStrict),i.viewDate&&q())},k()};a.fn.datetimepicker=function(b){return this.each(function(){var c=a(this),e=c.data("DateTimePicker");e||c.data("DateTimePicker",new d(this,b))})},a.fn.datetimepicker.defaults={format:!1,pickDate:!0,pickTime:!0,useMinutes:!0,useSeconds:!1,useCurrent:!0,calendarWeeks:!1,minuteStepping:1,minDate:b({y:1900}),maxDate:b().add(100,"y"),showToday:!0,collapse:!0,language:b.locale(),defaultDate:"",disabledDates:!1,enabledDates:!1,icons:{},useStrict:!1,direction:"auto",sideBySide:!1,daysOfWeekDisabled:[],widgetParent:!1}});
},{"third-party-modules/moment":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\moment\\moment.shim.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\easy-piecharts\\easy-piecharts.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./easypiechart.min.js');
},{"./easypiechart.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\easy-piecharts\\easypiechart.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\easy-piecharts\\easypiechart.min.js":[function(require,module,exports){
/**!
 * easyPieChart
 * Lightweight plugin to render simple, animated and retina optimized pie charts
 *
 * @license 
 * @author Robert Fleischmann <rendro87@gmail.com> (http://robert-fleischmann.de)
 * @version 2.1.5
 **/

/*! SmartAdmin - v1.4.1 - 2014-06-22 */!function(a){return a.easyPieChart=function(b,c){var d,e,f,g,h,i,j,k,l=this;return this.el=b,this.$el=a(b),this.$el.data("easyPieChart",this),this.init=function(){var b,d;return l.options=a.extend({},a.easyPieChart.defaultOptions,c),b=parseInt(l.$el.data("percent"),10),l.percentage=0,l.canvas=a("<canvas width='"+l.options.size+"' height='"+l.options.size+"'></canvas>").get(0),l.$el.append(l.canvas),"undefined"!=typeof G_vmlCanvasManager&&null!==G_vmlCanvasManager&&G_vmlCanvasManager.initElement(l.canvas),l.ctx=l.canvas.getContext("2d"),window.devicePixelRatio>1&&(d=window.devicePixelRatio,a(l.canvas).css({width:l.options.size,height:l.options.size}),l.canvas.width*=d,l.canvas.height*=d,l.ctx.scale(d,d)),l.ctx.translate(l.options.size/2,l.options.size/2),l.ctx.rotate(l.options.rotate*Math.PI/180),l.$el.addClass("easyPieChart"),l.$el.css({width:l.options.size,height:l.options.size,lineHeight:""+l.options.size+"px"}),l.update(b),l},this.update=function(a){return a=parseFloat(a)||0,l.options.animate===!1?f(a):e(l.percentage,a),l},j=function(){var a,b,c;for(l.ctx.fillStyle=l.options.scaleColor,l.ctx.lineWidth=1,c=[],a=b=0;24>=b;a=++b)c.push(d(a));return c},d=function(a){var b;b=a%6===0?0:.017*l.options.size,l.ctx.save(),l.ctx.rotate(a*Math.PI/12),l.ctx.fillRect(l.options.size/2-b,0,.05*-l.options.size+b,1),l.ctx.restore()},k=function(){var a;a=l.options.size/2-l.options.lineWidth/2,l.options.scaleColor!==!1&&(a-=.08*l.options.size),l.ctx.beginPath(),l.ctx.arc(0,0,a,0,2*Math.PI,!0),l.ctx.closePath(),l.ctx.strokeStyle=l.options.trackColor,l.ctx.lineWidth=l.options.lineWidth,l.ctx.stroke()},i=function(){l.options.scaleColor!==!1&&j(),l.options.trackColor!==!1&&k()},f=function(b){var c;i(),l.ctx.strokeStyle=a.isFunction(l.options.barColor)?l.options.barColor(b):l.options.barColor,l.ctx.lineCap=l.options.lineCap,l.ctx.lineWidth=l.options.lineWidth,c=l.options.size/2-l.options.lineWidth/2,l.options.scaleColor!==!1&&(c-=.08*l.options.size),l.ctx.save(),l.ctx.rotate(-Math.PI/2),l.ctx.beginPath(),l.ctx.arc(0,0,c,0,2*Math.PI*b/100,!1),l.ctx.stroke(),l.ctx.restore()},h=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(a){return window.setTimeout(a,1e3/60)}}(),e=function(a,b){var c,d;l.options.onStart.call(l),l.percentage=b,d=Date.now(),c=function(){var e,j;return j=Date.now()-d,j<l.options.animate&&h(c),l.ctx.clearRect(-l.options.size/2,-l.options.size/2,l.options.size,l.options.size),i.call(l),e=[g(j,a,b-a,l.options.animate)],l.options.onStep.call(l,e),f.call(l,e),j>=l.options.animate?l.options.onStop.call(l):void 0},h(c)},g=function(a,b,c,d){var e,f;return e=function(a){return Math.pow(a,2)},f=function(a){return 1>a?e(a):2-e(a/2*-2+2)},a/=d/2,c/2*f(a)+b},this.init()},a.easyPieChart.defaultOptions={barColor:"#ef1e25",trackColor:"#f2f2f2",scaleColor:"#dfe0e0",lineCap:"round",rotate:0,size:110,lineWidth:3,animate:!1,onStart:a.noop,onStop:a.noop,onStep:a.noop},void(a.fn.easyPieChart=function(b){return a.each(this,function(c,d){var e,f;return e=a(d),e.data("easyPieChart")?void 0:(f=a.extend({},b,e.data()),e.data("easyPieChart",new a.easyPieChart(d,f)))})})}(jQuery);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\footable\\footable.min.js":[function(require,module,exports){
/*!
 * FooTable - Awesome Responsive Tables
 * Version : 2.0.1.4
 * http://fooplugins.com/plugins/footable-jquery/
 *
 * Requires jQuery - http://jquery.com/
 *
 * Copyright 2014 Steven Usher & Brad Vincent
 * Released under the MIT license
 * You are free to use FooTable in commercial projects as long as this copyright header is left intact.
 *
 * Date: 16 Feb 2014
 */
(function(e,t){function a(){var e=this;e.id=null,e.busy=!1,e.start=function(t,a){e.busy||(e.stop(),e.id=setTimeout(function(){t(),e.id=null,e.busy=!1},a),e.busy=!0)},e.stop=function(){null!==e.id&&(clearTimeout(e.id),e.id=null,e.busy=!1)}}function o(o,i,n){var r=this;r.id=n,r.table=o,r.options=i,r.breakpoints=[],r.breakpointNames="",r.columns={},r.plugins=t.footable.plugins.load(r);var l=r.options,d=l.classes,s=l.events,u=l.triggers,f=0;return r.timers={resize:new a,register:function(e){return r.timers[e]=new a,r.timers[e]}},r.init=function(){var a=e(t),o=e(r.table);if(t.footable.plugins.init(r),o.hasClass(d.loaded))return r.raise(s.alreadyInitialized),undefined;r.raise(s.initializing),o.addClass(d.loading),o.find(l.columnDataSelector).each(function(){var e=r.getColumnData(this);r.columns[e.index]=e});for(var i in l.breakpoints)r.breakpoints.push({name:i,width:l.breakpoints[i]}),r.breakpointNames+=i+" ";r.breakpoints.sort(function(e,t){return e.width-t.width}),o.unbind(u.initialize).bind(u.initialize,function(){o.removeData("footable_info"),o.data("breakpoint",""),o.trigger(u.resize),o.removeClass(d.loading),o.addClass(d.loaded).addClass(d.main),r.raise(s.initialized)}).unbind(u.redraw).bind(u.redraw,function(){r.redraw()}).unbind(u.resize).bind(u.resize,function(){r.resize()}).unbind(u.expandFirstRow).bind(u.expandFirstRow,function(){o.find(l.toggleSelector).first().not("."+d.detailShow).trigger(u.toggleRow)}).unbind(u.expandAll).bind(u.expandAll,function(){o.find(l.toggleSelector).not("."+d.detailShow).trigger(u.toggleRow)}).unbind(u.collapseAll).bind(u.collapseAll,function(){o.find("."+d.detailShow).trigger(u.toggleRow)}),o.trigger(u.initialize),a.bind("resize.footable",function(){r.timers.resize.stop(),r.timers.resize.start(function(){r.raise(u.resize)},l.delay)})},r.addRowToggle=function(){if(l.addRowToggle){var t=e(r.table),a=!1;t.find("span."+d.toggle).remove();for(var o in r.columns){var i=r.columns[o];if(i.toggle){a=!0;var n="> tbody > tr:not(."+d.detail+",."+d.disabled+") > td:nth-child("+(parseInt(i.index,10)+1)+")";return t.find(n).not("."+d.detailCell).prepend(e(l.toggleHTMLElement).addClass(d.toggle)),undefined}}a||t.find("> tbody > tr:not(."+d.detail+",."+d.disabled+") > td:first-child").not("."+d.detailCell).prepend(e(l.toggleHTMLElement).addClass(d.toggle))}},r.setColumnClasses=function(){$table=e(r.table);for(var t in r.columns){var a=r.columns[t];if(null!==a.className){var o="",i=!0;e.each(a.matches,function(e,t){i||(o+=", "),o+="> tbody > tr:not(."+d.detail+") > td:nth-child("+(parseInt(t,10)+1)+")",i=!1}),$table.find(o).not("."+d.detailCell).addClass(a.className)}}},r.bindToggleSelectors=function(){var t=e(r.table);r.hasAnyBreakpointColumn()&&(t.find(l.toggleSelector).unbind(u.toggleRow).bind(u.toggleRow,function(){var t=e(this).is("tr")?e(this):e(this).parents("tr:first");r.toggleDetail(t)}),t.find(l.toggleSelector).unbind("click.footable").bind("click.footable",function(a){t.is(".breakpoint")&&e(a.target).is("td,."+d.toggle)&&e(this).trigger(u.toggleRow)}))},r.parse=function(e,t){var a=l.parsers[t.type]||l.parsers.alpha;return a(e)},r.getColumnData=function(t){var a=e(t),o=a.data("hide"),i=a.index();o=o||"",o=jQuery.map(o.split(","),function(e){return jQuery.trim(e)});var n={index:i,hide:{},type:a.data("type")||"alpha",name:a.data("name")||e.trim(a.text()),ignore:a.data("ignore")||!1,toggle:a.data("toggle")||!1,className:a.data("class")||null,matches:[],names:{},group:a.data("group")||null,groupName:null};if(null!==n.group){var d=e(r.table).find('> thead > tr.footable-group-row > th[data-group="'+n.group+'"], > thead > tr.footable-group-row > td[data-group="'+n.group+'"]').first();n.groupName=r.parse(d,{type:"alpha"})}var u=parseInt(a.prev().attr("colspan")||0,10);f+=u>1?u-1:0;var p=parseInt(a.attr("colspan")||0,10),c=n.index+f;if(p>1){var g=a.data("names");g=g||"",g=g.split(",");for(var b=0;p>b;b++)n.matches.push(b+c),g.length>b&&(n.names[b+c]=g[b])}else n.matches.push(c);n.hide["default"]="all"===a.data("hide")||e.inArray("default",o)>=0;var h=!1;for(var m in l.breakpoints)n.hide[m]="all"===a.data("hide")||e.inArray(m,o)>=0,h=h||n.hide[m];n.hasBreakpoint=h;var v=r.raise(s.columnData,{column:{data:n,th:t}});return v.column.data},r.getViewportWidth=function(){return window.innerWidth||(document.body?document.body.offsetWidth:0)},r.calculateWidth=function(e,t){return jQuery.isFunction(l.calculateWidthOverride)?l.calculateWidthOverride(e,t):(t.viewportWidth<t.width&&(t.width=t.viewportWidth),t.parentWidth<t.width&&(t.width=t.parentWidth),t)},r.hasBreakpointColumn=function(e){for(var t in r.columns)if(r.columns[t].hide[e]){if(r.columns[t].ignore)continue;return!0}return!1},r.hasAnyBreakpointColumn=function(){for(var e in r.columns)if(r.columns[e].hasBreakpoint)return!0;return!1},r.resize=function(){var t=e(r.table);if(t.is(":visible")&&r.hasAnyBreakpointColumn()){var a={width:t.width(),viewportWidth:r.getViewportWidth(),parentWidth:t.parent().width()};a=r.calculateWidth(t,a);var o=t.data("footable_info");if(t.data("footable_info",a),r.raise(s.resizing,{old:o,info:a}),!o||o&&o.width&&o.width!==a.width){for(var i,n=null,l=0;r.breakpoints.length>l;l++)if(i=r.breakpoints[l],i&&i.width&&a.width<=i.width){n=i;break}var d=null===n?"default":n.name,f=r.hasBreakpointColumn(d),p=t.data("breakpoint");t.data("breakpoint",d).removeClass("default breakpoint").removeClass(r.breakpointNames).addClass(d+(f?" breakpoint":"")),d!==p&&(t.trigger(u.redraw),r.raise(s.breakpoint,{breakpoint:d,info:a}))}r.raise(s.resized,{old:o,info:a})}},r.redraw=function(){r.addRowToggle(),r.bindToggleSelectors(),r.setColumnClasses();var t=e(r.table),a=t.data("breakpoint"),o=r.hasBreakpointColumn(a);t.find("> tbody > tr:not(."+d.detail+")").data("detail_created",!1).end().find("> thead > tr:last-child > th").each(function(){var o=r.columns[e(this).index()],i="",n=!0;e.each(o.matches,function(e,t){n||(i+=", ");var a=t+1;i+="> tbody > tr:not(."+d.detail+") > td:nth-child("+a+")",i+=", > tfoot > tr:not(."+d.detail+") > td:nth-child("+a+")",i+=", > colgroup > col:nth-child("+a+")",n=!1}),i+=', > thead > tr[data-group-row="true"] > th[data-group="'+o.group+'"]';var l=t.find(i).add(this);if(""!==a&&(o.hide[a]===!1?l.addClass("footable-visible").show():l.removeClass("footable-visible").hide()),1===t.find("> thead > tr.footable-group-row").length){var s=t.find('> thead > tr:last-child > th[data-group="'+o.group+'"]:visible, > thead > tr:last-child > th[data-group="'+o.group+'"]:visible'),u=t.find('> thead > tr.footable-group-row > th[data-group="'+o.group+'"], > thead > tr.footable-group-row > td[data-group="'+o.group+'"]'),f=0;e.each(s,function(){f+=parseInt(e(this).attr("colspan")||1,10)}),f>0?u.attr("colspan",f).show():u.hide()}}).end().find("> tbody > tr."+d.detailShow).each(function(){r.createOrUpdateDetailRow(this)}),t.find("> tbody > tr."+d.detailShow+":visible").each(function(){var t=e(this).next();t.hasClass(d.detail)&&(o?t.show():t.hide())}),t.find("> thead > tr > th.footable-last-column, > tbody > tr > td.footable-last-column").removeClass("footable-last-column"),t.find("> thead > tr > th.footable-first-column, > tbody > tr > td.footable-first-column").removeClass("footable-first-column"),t.find("> thead > tr, > tbody > tr").find("> th.footable-visible:last, > td.footable-visible:last").addClass("footable-last-column").end().find("> th.footable-visible:first, > td.footable-visible:first").addClass("footable-first-column"),r.raise(s.redrawn)},r.toggleDetail=function(t){var a=t.jquery?t:e(t),o=a.next();a.hasClass(d.detailShow)?(a.removeClass(d.detailShow),o.hasClass(d.detail)&&o.hide(),r.raise(s.rowCollapsed,{row:a[0]})):(r.createOrUpdateDetailRow(a[0]),a.addClass(d.detailShow).next().show(),r.raise(s.rowExpanded,{row:a[0]}))},r.removeRow=function(t){var a=t.jquery?t:e(t);a.hasClass(d.detail)&&(a=a.prev());var o=a.next();a.data("detail_created")===!0&&o.remove(),a.remove(),r.raise(s.rowRemoved)},r.appendRow=function(t){var a=t.jquery?t:e(t);e(r.table).find("tbody").append(a),r.redraw()},r.getColumnFromTdIndex=function(t){var a=null;for(var o in r.columns)if(e.inArray(t,r.columns[o].matches)>=0){a=r.columns[o];break}return a},r.createOrUpdateDetailRow=function(t){var a,o=e(t),i=o.next(),n=[];if(o.data("detail_created")===!0)return!0;if(o.is(":hidden"))return!1;if(r.raise(s.rowDetailUpdating,{row:o,detail:i}),o.find("> td:hidden").each(function(){var t=e(this).index(),a=r.getColumnFromTdIndex(t),o=a.name;return a.ignore===!0?!0:(t in a.names&&(o=a.names[t]),n.push({name:o,value:r.parse(this,a),display:e.trim(e(this).html()),group:a.group,groupName:a.groupName}),!0)}),0===n.length)return!1;var u=o.find("> td:visible").length,f=i.hasClass(d.detail);return f||(i=e('<tr class="'+d.detail+'"><td class="'+d.detailCell+'"><div class="'+d.detailInner+'"></div></td></tr>'),o.after(i)),i.find("> td:first").attr("colspan",u),a=i.find("."+d.detailInner).empty(),l.createDetail(a,n,l.createGroupedDetail,l.detailSeparator,d),o.data("detail_created",!0),r.raise(s.rowDetailUpdated,{row:o,detail:i}),!f},r.raise=function(t,a){r.options.debug===!0&&e.isFunction(r.options.log)&&r.options.log(t,"event"),a=a||{};var o={ft:r};e.extend(!0,o,a);var i=e.Event(t,o);return i.ft||e.extend(!0,i,o),e(r.table).trigger(i),i},r.reset=function(){var t=e(r.table);t.removeData("footable_info").data("breakpoint","").removeClass(d.loading).removeClass(d.loaded),t.find(l.toggleSelector).unbind(u.toggleRow).unbind("click.footable"),t.find("> tbody > tr").removeClass(d.detailShow),t.find("> tbody > tr."+d.detail).remove(),r.raise(s.reset)},r.init(),r}t.footable={options:{delay:100,breakpoints:{phone:480,tablet:1024},parsers:{alpha:function(t){return e(t).data("value")||e.trim(e(t).text())},numeric:function(t){var a=e(t).data("value")||e(t).text().replace(/[^0-9.\-]/g,"");return a=parseFloat(a),isNaN(a)&&(a=0),a}},addRowToggle:!0,calculateWidthOverride:null,toggleSelector:" > tbody > tr:not(.footable-row-detail)",columnDataSelector:"> thead > tr:last-child > th, > thead > tr:last-child > td",detailSeparator:":",toggleHTMLElement:"<span />",createGroupedDetail:function(e){for(var t={_none:{name:null,data:[]}},a=0;e.length>a;a++){var o=e[a].group;null!==o?(o in t||(t[o]={name:e[a].groupName||e[a].group,data:[]}),t[o].data.push(e[a])):t._none.data.push(e[a])}return t},createDetail:function(e,t,a,o,i){var n=a(t);for(var r in n)if(0!==n[r].data.length){"_none"!==r&&e.append('<div class="'+i.detailInnerGroup+'">'+n[r].name+"</div>");for(var l=0;n[r].data.length>l;l++){var d=n[r].data[l].name?o:"";e.append('<div class="'+i.detailInnerRow+'"><div class="'+i.detailInnerName+'">'+n[r].data[l].name+d+'</div><div class="'+i.detailInnerValue+'">'+n[r].data[l].display+"</div></div>")}}},classes:{main:"footable",loading:"footable-loading",loaded:"footable-loaded",toggle:"footable-toggle",disabled:"footable-disabled",detail:"footable-row-detail",detailCell:"footable-row-detail-cell",detailInner:"footable-row-detail-inner",detailInnerRow:"footable-row-detail-row",detailInnerGroup:"footable-row-detail-group",detailInnerName:"footable-row-detail-name",detailInnerValue:"footable-row-detail-value",detailShow:"footable-detail-show"},triggers:{initialize:"footable_initialize",resize:"footable_resize",redraw:"footable_redraw",toggleRow:"footable_toggle_row",expandFirstRow:"footable_expand_first_row",expandAll:"footable_expand_all",collapseAll:"footable_collapse_all"},events:{alreadyInitialized:"footable_already_initialized",initializing:"footable_initializing",initialized:"footable_initialized",resizing:"footable_resizing",resized:"footable_resized",redrawn:"footable_redrawn",breakpoint:"footable_breakpoint",columnData:"footable_column_data",rowDetailUpdating:"footable_row_detail_updating",rowDetailUpdated:"footable_row_detail_updated",rowCollapsed:"footable_row_collapsed",rowExpanded:"footable_row_expanded",rowRemoved:"footable_row_removed",reset:"footable_reset"},debug:!1,log:null},version:{major:0,minor:5,toString:function(){return t.footable.version.major+"."+t.footable.version.minor},parse:function(e){return version=/(\d+)\.?(\d+)?\.?(\d+)?/.exec(e),{major:parseInt(version[1],10)||0,minor:parseInt(version[2],10)||0,patch:parseInt(version[3],10)||0}}},plugins:{_validate:function(a){if(!e.isFunction(a))return t.footable.options.debug===!0&&console.error('Validation failed, expected type "function", received type "{0}".',typeof a),!1;var o=new a;return"string"!=typeof o.name?(t.footable.options.debug===!0&&console.error('Validation failed, plugin does not implement a string property called "name".',o),!1):e.isFunction(o.init)?(t.footable.options.debug===!0&&console.log('Validation succeeded for plugin "'+o.name+'".',o),!0):(t.footable.options.debug===!0&&console.error('Validation failed, plugin "'+o.name+'" does not implement a function called "init".',o),!1)},registered:[],register:function(a,o){t.footable.plugins._validate(a)&&(t.footable.plugins.registered.push(a),"object"==typeof o&&e.extend(!0,t.footable.options,o))},load:function(e){var a,o,i=[];for(o=0;t.footable.plugins.registered.length>o;o++)try{a=t.footable.plugins.registered[o],i.push(new a(e))}catch(n){t.footable.options.debug===!0&&console.error(n)}return i},init:function(e){for(var a=0;e.plugins.length>a;a++)try{e.plugins[a].init(e)}catch(o){t.footable.options.debug===!0&&console.error(o)}}}};var i=0;e.fn.footable=function(a){a=a||{};var n=e.extend(!0,{},t.footable.options,a);return this.each(function(){i++;var t=new o(this,n,i);e(this).data("footable",t)})}})(jQuery,window);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\footable\\footable.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./footable.min.js');
},{"./footable.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\footable\\footable.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\highcharts\\highcharts.min.js":[function(require,module,exports){
/**
 * @license Highcharts JS v4.0.4 (2014-09-02)
 *
 * (c) 2009-2014 Torstein Honsi
 *
 * License: www.highcharts.com/license
 */
!function(){function t(t,e){var i;t||(t={});for(i in e)t[i]=e[i];return t}function e(){var t,e,i=arguments,n={},o=function(t,e){var i,n;"object"!=typeof t&&(t={});for(n in e)e.hasOwnProperty(n)&&(i=e[n],t[n]=i&&"object"==typeof i&&"[object Array]"!==Object.prototype.toString.call(i)&&"renderTo"!==n&&"number"!=typeof i.nodeType?o(t[n]||{},i):e[n]);return t};for(i[0]===!0&&(n=i[1],i=Array.prototype.slice.call(i,2)),e=i.length,t=0;e>t;t++)n=o(n,i[t]);return n}function i(t,e){return parseInt(t,e||10)}function n(t){return"string"==typeof t}function o(t){return t&&"object"==typeof t}function r(t){return"[object Array]"===Object.prototype.toString.call(t)}function s(t){return"number"==typeof t}function a(t){return ue.log(t)/ue.LN10}function l(t){return ue.pow(10,t)}function h(t,e){for(var i=t.length;i--;)if(t[i]===e){t.splice(i,1);break}}function c(t){return t!==G&&null!==t}function d(t,e,i){var r,s;if(n(e))c(i)?t.setAttribute(e,i):t&&t.getAttribute&&(s=t.getAttribute(e));else if(c(e)&&o(e))for(r in e)t.setAttribute(r,e[r]);return s}function p(t){return r(t)?t:[t]}function u(){var t,e,i=arguments,n=i.length;for(t=0;n>t;t++)if(e=i[t],e!==G&&null!==e)return e}function f(e,i){Ae&&!Be&&i&&i.opacity!==G&&(i.filter="alpha(opacity="+100*i.opacity+")"),t(e.style,i)}function g(e,i,n,o,r){var s=de.createElement(e);return i&&t(s,i),r&&f(s,{padding:0,border:Ke,margin:0}),n&&f(s,n),o&&o.appendChild(s),s}function m(e,i){var n=function(){return G};return n.prototype=new e,t(n.prototype,i),n}function y(t,e,n,o){var r=ce.numberFormat,s=F.lang,a=+t||0,l=-1===e?((""+a).split(".")[1]||"").length:isNaN(e=xe(e))?2:e,h=void 0===n?s.decimalPoint:n,c=void 0===o?s.thousandsSep:o,d=0>a?"-":"",p=i(a=xe(a).toFixed(l))+"",u=p.length>3?p.length%3:0;return r!==y?r(t,e,n,o):d+(u?p.substr(0,u)+c:"")+p.substr(u).replace(/(\d{3})(?=\d)/g,"$1"+c)+(l?h+xe(a-p).toFixed(l).slice(2):"")}function v(t,e){return Array((e||2)+1-(t+"").length).join(0)+t}function x(t,e,i){var n=t[e];t[e]=function(){var t=Array.prototype.slice.call(arguments);return t.unshift(n),i.apply(this,t)}}function b(t,e){var i,n=/f$/,o=/\.([0-9])/,r=F.lang;return n.test(t)?(i=t.match(o),i=i?i[1]:-1,null!==e&&(e=y(e,i,r.decimalPoint,t.indexOf(",")>-1?r.thousandsSep:""))):e=j(t,e),e}function k(t,e){for(var i,n,o,r,s,a,l,h="{",c=!1,d=[];-1!==(l=t.indexOf(h));){if(i=t.slice(0,l),c){for(n=i.split(":"),o=n.shift().split("."),s=o.length,a=e,r=0;s>r;r++)a=a[o[r]];n.length&&(a=b(n.join(":"),a)),d.push(a)}else d.push(i);t=t.slice(l+1),c=!c,h=c?"}":"{"}return d.push(t),d.join("")}function w(t){return ue.pow(10,ge(ue.log(t)/ue.LN10))}function S(t,e,i,n){var o,r;for(i=u(i,1),o=t/i,e||(e=[1,2,2.5,5,10],n===!1&&(1===i?e=[1,2,5,10]:i>.1||(e=[1/i]))),r=0;r<e.length&&(t=e[r],o>(e[r]+(e[r+1]||e[r]))/2);r++);return t*=i}function T(t,e){var i,n,o=t.length;for(n=0;o>n;n++)t[n].ss_i=n;for(t.sort(function(t,n){return i=e(t,n),0===i?t.ss_i-n.ss_i:i}),n=0;o>n;n++)delete t[n].ss_i}function P(t){for(var e=t.length,i=t[0];e--;)t[e]<i&&(i=t[e]);return i}function A(t){for(var e=t.length,i=t[0];e--;)t[e]>i&&(i=t[e]);return i}function C(t,e){var i;for(i in t)t[i]&&t[i]!==e&&t[i].destroy&&t[i].destroy(),delete t[i]}function L(t){N||(N=g(Ne)),t&&N.appendChild(t),N.innerHTML=""}function M(t){return parseFloat(t.toPrecision(14))}function D(t,e){V=u(t,e.animation)}function I(){var t=F.global.useUTC,e=t?"getUTC":"get",i=t?"setUTC":"set";$=F.global.Date||window.Date,J=6e4*(t&&F.global.timezoneOffset||0),q=t?$.UTC:function(t,e,i,n,o,r){return new $(t,e,u(i,1),u(n,0),u(o,0),u(r,0)).getTime()},Q=e+"Minutes",te=e+"Hours",ee=e+"Day",ie=e+"Date",ne=e+"Month",oe=e+"FullYear",re=i+"Minutes",se=i+"Hours",ae=i+"Date",le=i+"Month",he=i+"FullYear"}function B(t){return F=e(!0,F,t),I(),F}function O(){return F}function z(){}function R(t,e,i,n){this.axis=t,this.pos=e,this.type=i||"",this.isNew=!0,i||n||this.addLabel()}function H(){this.init.apply(this,arguments)}function X(){this.init.apply(this,arguments)}function E(t,e,i,n,o){var r=t.chart.inverted;this.axis=t,this.isNegative=i,this.options=e,this.x=n,this.total=null,this.points={},this.stack=o,this.alignOptions={align:e.align||(r?i?"left":"right":"center"),verticalAlign:e.verticalAlign||(r?"middle":i?"bottom":"top"),y:u(e.y,r?4:i?14:-6),x:u(e.x,r?i?-6:6:0)},this.textAlign=e.textAlign||(r?i?"right":"left":"center")}var G,W,Y,N,F,j,V,_,U,Z,K,$,q,J,Q,te,ee,ie,ne,oe,re,se,ae,le,he,ce,de=document,pe=window,ue=Math,fe=ue.round,ge=ue.floor,me=ue.ceil,ye=ue.max,ve=ue.min,xe=ue.abs,be=ue.cos,ke=ue.sin,we=ue.PI,Se=2*we/360,Te=navigator.userAgent,Pe=pe.opera,Ae=/msie/i.test(Te)&&!Pe,Ce=8===de.documentMode,Le=/AppleWebKit/.test(Te),Me=/Firefox/.test(Te),De=/(Mobile|Android|Windows Phone)/.test(Te),Ie="http://www.w3.org/2000/svg",Be=!!de.createElementNS&&!!de.createElementNS(Ie,"svg").createSVGRect,Oe=Me&&parseInt(Te.split("Firefox/")[1],10)<4,ze=!Be&&!Ae&&!!de.createElement("canvas").getContext,Re={},He=0,Xe=function(){return G},Ee=[],Ge=0,We="Highcharts",Ye="4.0.4",Ne="div",Fe="absolute",je="relative",Ve="hidden",_e="highcharts-",Ue="visible",Ze="px",Ke="none",$e="M",qe="L",Je=/^[0-9]+$/,Qe="",ti="hover",ei="select",ii="stroke-width",ni={};pe.Highcharts?Z(16,!0):ce=pe.Highcharts={},j=function(e,i,n){if(!c(i)||isNaN(i))return"Invalid date";e=u(e,"%Y-%m-%d %H:%M:%S");var o,r=new $(i-J),s=r[te](),a=r[ee](),l=r[ie](),h=r[ne](),d=r[oe](),p=F.lang,f=p.weekdays,g=t({a:f[a].substr(0,3),A:f[a],d:v(l),e:l,b:p.shortMonths[h],B:p.months[h],m:v(h+1),y:(""+d).substr(2,2),Y:d,H:v(s),I:v(s%12||12),l:s%12||12,M:v(r[Q]()),p:12>s?"AM":"PM",P:12>s?"am":"pm",S:v(r.getSeconds()),L:v(fe(i%1e3),3)},ce.dateFormats);for(o in g)for(;-1!==e.indexOf("%"+o);)e=e.replace("%"+o,"function"==typeof g[o]?g[o](i):g[o]);return n?e.substr(0,1).toUpperCase()+e.substr(1):e},Z=function(t,e){var i="Highcharts error #"+t+": www.highcharts.com/errors/"+t;if(e)throw i;pe.console&&console.log(i)},U={millisecond:1,second:1e3,minute:6e4,hour:36e5,day:864e5,week:6048e5,month:26784e5,year:31556952e3},_={init:function(t,e,i){e=e||"";var n,o,r,s,a,l=t.shift,h=e.indexOf("C")>-1,c=h?7:3,d=e.split(" "),p=[].concat(i),u=function(t){for(r=t.length;r--;)t[r]===$e&&t.splice(r+1,0,t[r+1],t[r+2],t[r+1],t[r+2])};if(h&&(u(d),u(p)),t.isArea&&(s=d.splice(d.length-6,6),a=p.splice(p.length-6,6)),l<=p.length/c&&d.length===p.length)for(;l--;)p=[].concat(p).splice(0,c).concat(p);if(t.shift=0,d.length)for(n=p.length;d.length<n;)o=[].concat(d).splice(d.length-c,c),h&&(o[c-6]=o[c-2],o[c-5]=o[c-1]),d=d.concat(o);return s&&(d=d.concat(s),p=p.concat(a)),[d,p]},step:function(t,e,i,n){var o,r=[],s=t.length;if(1===i)r=n;else if(s===e.length&&1>i)for(;s--;)o=parseFloat(t[s]),r[s]=isNaN(o)?t[s]:i*parseFloat(e[s]-o)+o;else r=e;return r}},function(e){pe.HighchartsAdapter=pe.HighchartsAdapter||e&&{init:function(t){var i=e.fx;e.extend(e.easing,{easeOutQuad:function(t,e,i,n,o){return-n*(e/=o)*(e-2)+i}}),e.each(["cur","_default","width","height","opacity"],function(t,n){var o,r=i.step;"cur"===n?r=i.prototype:"_default"===n&&e.Tween&&(r=e.Tween.propHooks[n],n="set"),o=r[n],o&&(r[n]=function(e){var i;return e=t?e:this,"align"!==e.prop?(i=e.elem,i.attr?i.attr(e.prop,"cur"===n?G:e.now):o.apply(this,arguments)):void 0})}),x(e.cssHooks.opacity,"get",function(t,e,i){return e.attr?e.opacity||0:t.call(this,e,i)}),this.addAnimSetter("d",function(e){var i,n=e.elem;e.started||(i=t.init(n,n.d,n.toD),e.start=i[0],e.end=i[1],e.started=!0),n.attr("d",t.step(e.start,e.end,e.pos,n.toD))}),this.each=Array.prototype.forEach?function(t,e){return Array.prototype.forEach.call(t,e)}:function(t,e){var i,n=t.length;for(i=0;n>i;i++)if(e.call(t[i],t[i],i,t)===!1)return i},e.fn.highcharts=function(){var t,e,i,o="Chart",r=arguments;return this[0]&&(n(r[0])&&(o=r[0],r=Array.prototype.slice.call(r,1)),t=r[0],t!==G&&(t.chart=t.chart||{},t.chart.renderTo=this[0],i=new ce[o](t,r[1]),e=this),t===G&&(e=Ee[d(this[0],"data-highcharts-chart")])),e}},addAnimSetter:function(t,i){e.Tween?e.Tween.propHooks[t]={set:i}:e.fx.step[t]=i},getScript:e.getScript,inArray:e.inArray,adapterRun:function(t,i){return e(t)[i]()},grep:e.grep,map:function(t,e){for(var i=[],n=0,o=t.length;o>n;n++)i[n]=e.call(t[n],t[n],n,t);return i},offset:function(t){return e(t).offset()},addEvent:function(t,i,n){e(t).bind(i,n)},removeEvent:function(t,i,n){var o=de.removeEventListener?"removeEventListener":"detachEvent";de[o]&&t&&!t[o]&&(t[o]=function(){}),e(t).unbind(i,n)},fireEvent:function(i,n,o,r){var s,a=e.Event(n),l="detached"+n;!Ae&&o&&(delete o.layerX,delete o.layerY,delete o.returnValue),t(a,o),i[n]&&(i[l]=i[n],i[n]=null),e.each(["preventDefault","stopPropagation"],function(t,e){var i=a[e];a[e]=function(){try{i.call(a)}catch(t){"preventDefault"===e&&(s=!0)}}}),e(i).trigger(a),i[l]&&(i[n]=i[l],i[l]=null),!r||a.isDefaultPrevented()||s||r(a)},washMouseEvent:function(t){var e=t.originalEvent||t;return e.pageX===G&&(e.pageX=t.pageX,e.pageY=t.pageY),e},animate:function(t,i,n){var o=e(t);t.style||(t.style={}),i.d&&(t.toD=i.d,i.d=1),o.stop(),i.opacity!==G&&t.attr&&(i.opacity+="px"),t.hasAnim=1,o.animate(i,n)},stop:function(t){t.hasAnim&&e(t).stop()}}}(pe.jQuery);var oi=pe.HighchartsAdapter,ri=oi||{};oi&&oi.init.call(oi,_);var si=ri.adapterRun,ai=ri.getScript,li=ri.inArray,hi=ri.each,ci=ri.grep,di=ri.offset,pi=ri.map,ui=ri.addEvent,fi=ri.removeEvent,gi=ri.fireEvent,mi=ri.washMouseEvent,yi=ri.animate,vi=ri.stop,xi={enabled:!0,x:0,y:15,style:{color:"#606060",cursor:"default",fontSize:"11px"}};F={colors:["#7cb5ec","#434348","#90ed7d","#f7a35c","#8085e9","#f15c80","#e4d354","#8085e8","#8d4653","#91e8e1"],symbols:["circle","diamond","square","triangle","triangle-down"],lang:{loading:"Loading...",months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],weekdays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],decimalPoint:".",numericSymbols:["k","M","G","T","P","E"],resetZoom:"Reset zoom",resetZoomTitle:"Reset zoom level 1:1",thousandsSep:","},global:{useUTC:!0,canvasToolsURL:"http://code.highcharts.com/4.0.4/modules/canvas-tools.js",VMLRadialGradientURL:"http://code.highcharts.com/4.0.4/gfx/vml-radial-gradient.png"},chart:{borderColor:"#4572A7",borderRadius:0,defaultSeriesType:"line",ignoreHiddenSeries:!0,spacing:[10,10,15,10],backgroundColor:"#FFFFFF",plotBorderColor:"#C0C0C0",resetZoomButton:{theme:{zIndex:20},position:{align:"right",x:-10,y:10}}},title:{text:"Chart title",align:"center",margin:15,style:{color:"#333333",fontSize:"18px"}},subtitle:{text:"",align:"center",style:{color:"#555555"}},plotOptions:{line:{allowPointSelect:!1,showCheckbox:!1,animation:{duration:1e3},events:{},lineWidth:2,marker:{lineWidth:0,radius:4,lineColor:"#FFFFFF",states:{hover:{enabled:!0,lineWidthPlus:1,radiusPlus:2},select:{fillColor:"#FFFFFF",lineColor:"#000000",lineWidth:2}}},point:{events:{}},dataLabels:e(xi,{align:"center",enabled:!1,formatter:function(){return null===this.y?"":y(this.y,-1)},verticalAlign:"bottom",y:0}),cropThreshold:300,pointRange:0,states:{hover:{lineWidthPlus:1,marker:{},halo:{size:10,opacity:.25}},select:{marker:{}}},stickyTracking:!0,turboThreshold:1e3}},labels:{style:{position:Fe,color:"#3E576F"}},legend:{enabled:!0,align:"center",layout:"horizontal",labelFormatter:function(){return this.name},borderColor:"#909090",borderRadius:0,navigation:{activeColor:"#274b6d",inactiveColor:"#CCC"},shadow:!1,itemStyle:{color:"#333333",fontSize:"12px",fontWeight:"bold"},itemHoverStyle:{color:"#000"},itemHiddenStyle:{color:"#CCC"},itemCheckboxStyle:{position:Fe,width:"13px",height:"13px"},symbolPadding:5,verticalAlign:"bottom",x:0,y:0,title:{style:{fontWeight:"bold"}}},loading:{labelStyle:{fontWeight:"bold",position:je,top:"45%"},style:{position:Fe,backgroundColor:"white",opacity:.5,textAlign:"center"}},tooltip:{enabled:!0,animation:Be,backgroundColor:"rgba(249, 249, 249, .85)",borderWidth:1,borderRadius:3,dateTimeLabelFormats:{millisecond:"%A, %b %e, %H:%M:%S.%L",second:"%A, %b %e, %H:%M:%S",minute:"%A, %b %e, %H:%M",hour:"%A, %b %e, %H:%M",day:"%A, %b %e, %Y",week:"Week from %A, %b %e, %Y",month:"%B %Y",year:"%Y"},headerFormat:'<span style="font-size: 10px">{point.key}</span><br/>',pointFormat:'<span style="color:{series.color}">●</span> {series.name}: <b>{point.y}</b><br/>',shadow:!0,snap:De?25:10,style:{color:"#333333",cursor:"default",fontSize:"12px",padding:"8px",whiteSpace:"nowrap"}},credits:{enabled:!0,text:"Highcharts.com",href:"http://www.highcharts.com",position:{align:"right",x:-10,verticalAlign:"bottom",y:-5},style:{cursor:"pointer",color:"#909090",fontSize:"9px"}}};var bi=F.plotOptions,ki=bi.line;I();var wi=/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/,Si=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,Ti=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/,Pi=function(t){function n(t){t&&t.stops?h=pi(t.stops,function(t){return Pi(t[1])}):(l=wi.exec(t),l?c=[i(l[1]),i(l[2]),i(l[3]),parseFloat(l[4],10)]:(l=Si.exec(t),l?c=[i(l[1],16),i(l[2],16),i(l[3],16),1]:(l=Ti.exec(t),l&&(c=[i(l[1]),i(l[2]),i(l[3]),1]))))}function o(i){var n;return h?(n=e(t),n.stops=[].concat(n.stops),hi(h,function(t,e){n.stops[e]=[n.stops[e][0],t.get(i)]})):n=c&&!isNaN(c[0])?"rgb"===i?"rgb("+c[0]+","+c[1]+","+c[2]+")":"a"===i?c[3]:"rgba("+c.join(",")+")":t,n}function r(t){if(h)hi(h,function(e){e.brighten(t)});else if(s(t)&&0!==t){var e;for(e=0;3>e;e++)c[e]+=i(255*t),c[e]<0&&(c[e]=0),c[e]>255&&(c[e]=255)}return this}function a(t){return c[3]=t,this}var l,h,c=[];return n(t),{get:o,brighten:r,rgba:c,setOpacity:a}};z.prototype={opacity:1,textProps:["fontSize","fontWeight","fontFamily","color","lineHeight","width","textDecoration","textShadow","HcTextStroke"],init:function(t,e){var i=this;i.element="span"===e?g(e):de.createElementNS(Ie,e),i.renderer=t},animate:function(t,i,n){var o=u(i,V,!0);return vi(this),o?(o=e(o,{}),n&&(o.complete=n),yi(this,t,o)):(this.attr(t),n&&n()),this},colorGradient:function(t,i,n){var o,s,a,l,h,d,p,u,f,g,m,y=this.renderer,v=[];if(t.linearGradient?s="linearGradient":t.radialGradient&&(s="radialGradient"),s){a=t[s],l=y.gradients,d=t.stops,f=n.radialReference,r(a)&&(t[s]=a={x1:a[0],y1:a[1],x2:a[2],y2:a[3],gradientUnits:"userSpaceOnUse"}),"radialGradient"===s&&f&&!c(a.gradientUnits)&&(a=e(a,{cx:f[0]-f[2]/2+a.cx*f[2],cy:f[1]-f[2]/2+a.cy*f[2],r:a.r*f[2],gradientUnits:"userSpaceOnUse"}));for(g in a)"id"!==g&&v.push(g,a[g]);for(g in d)v.push(d[g]);v=v.join(","),l[v]?m=l[v].attr("id"):(a.id=m=_e+He++,l[v]=h=y.createElement(s).attr(a).add(y.defs),h.stops=[],hi(d,function(t){var e;0===t[1].indexOf("rgba")?(o=Pi(t[1]),p=o.get("rgb"),u=o.get("a")):(p=t[1],u=1),e=y.createElement("stop").attr({offset:t[0],"stop-color":p,"stop-opacity":u}).add(h),h.stops.push(e)})),n.setAttribute(i,"url("+y.url+"#"+m+")")}},attr:function(t,e){var i,n,o,r,s=this.element,a=this;if("string"==typeof t&&e!==G&&(i=t,t={},t[i]=e),"string"==typeof t)a=(this[t+"Getter"]||this._defaultGetter).call(this,t,s);else{for(i in t)n=t[i],r=!1,this.symbolName&&/^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(i)&&(o||(this.symbolAttr(t),o=!0),r=!0),!this.rotation||"x"!==i&&"y"!==i||(this.doTransform=!0),r||(this[i+"Setter"]||this._defaultSetter).call(this,n,i,s),this.shadows&&/^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(i)&&this.updateShadows(i,n);this.doTransform&&(this.updateTransform(),this.doTransform=!1)}return a},updateShadows:function(t,e){for(var i=this.shadows,n=i.length;n--;)i[n].setAttribute(t,"height"===t?ye(e-(i[n].cutHeight||0),0):"d"===t?this.d:e)},addClass:function(t){var e=this.element,i=d(e,"class")||"";return-1===i.indexOf(t)&&d(e,"class",i+" "+t),this},symbolAttr:function(t){var e=this;hi(["x","y","r","start","end","width","height","innerR","anchorX","anchorY"],function(i){e[i]=u(t[i],e[i])}),e.attr({d:e.renderer.symbols[e.symbolName](e.x,e.y,e.width,e.height,e)})},clip:function(t){return this.attr("clip-path",t?"url("+this.renderer.url+"#"+t.id+")":Ke)},crisp:function(t){var e,i,n=this,o={},r=t.strokeWidth||n.strokeWidth||0;i=fe(r)%2/2,t.x=ge(t.x||n.x||0)+i,t.y=ge(t.y||n.y||0)+i,t.width=ge((t.width||n.width||0)-2*i),t.height=ge((t.height||n.height||0)-2*i),t.strokeWidth=r;for(e in t)n[e]!==t[e]&&(n[e]=o[e]=t[e]);return o},css:function(e){var n,o,r,s=this,a=s.styles,l={},h=s.element,c="",p=!a;if(e&&e.color&&(e.fill=e.color),a)for(o in e)e[o]!==a[o]&&(l[o]=e[o],p=!0);if(p){if(n=s.textWidth=e&&e.width&&"text"===h.nodeName.toLowerCase()&&i(e.width),a&&(e=t(a,l)),s.styles=e,n&&(ze||!Be&&s.renderer.forExport)&&delete e.width,Ae&&!Be)f(s.element,e);else{r=function(t,e){return"-"+e.toLowerCase()};for(o in e)c+=o.replace(/([A-Z])/g,r)+":"+e[o]+";";d(h,"style",c)}n&&s.added&&s.renderer.buildText(s)}return s},on:function(t,e){var i=this,n=i.element;return Y&&"click"===t?(n.ontouchstart=function(t){i.touchEventFired=$.now(),t.preventDefault(),e.call(n,t)},n.onclick=function(t){(-1===Te.indexOf("Android")||$.now()-(i.touchEventFired||0)>1100)&&e.call(n,t)}):n["on"+t]=e,this},setRadialReference:function(t){return this.element.radialReference=t,this},translate:function(t,e){return this.attr({translateX:t,translateY:e})},invert:function(){var t=this;return t.inverted=!0,t.updateTransform(),t},updateTransform:function(){var t,e=this,i=e.translateX||0,n=e.translateY||0,o=e.scaleX,r=e.scaleY,s=e.inverted,a=e.rotation,l=e.element;s&&(i+=e.attr("width"),n+=e.attr("height")),t=["translate("+i+","+n+")"],s?t.push("rotate(90) scale(-1,1)"):a&&t.push("rotate("+a+" "+(l.getAttribute("x")||0)+" "+(l.getAttribute("y")||0)+")"),(c(o)||c(r))&&t.push("scale("+u(o,1)+" "+u(r,1)+")"),t.length&&l.setAttribute("transform",t.join(" "))},toFront:function(){var t=this.element;return t.parentNode.appendChild(t),this},align:function(t,e,i){var o,r,s,a,l,c={},d=this.renderer,p=d.alignedObjects;return t?(this.alignOptions=t,this.alignByTranslate=e,(!i||n(i))&&(this.alignTo=l=i||"renderer",h(p,this),p.push(this),i=null)):(t=this.alignOptions,e=this.alignByTranslate,l=this.alignTo),i=u(i,d[l],d),o=t.align,r=t.verticalAlign,s=(i.x||0)+(t.x||0),a=(i.y||0)+(t.y||0),("right"===o||"center"===o)&&(s+=(i.width-(t.width||0))/{right:1,center:2}[o]),c[e?"translateX":"x"]=fe(s),("bottom"===r||"middle"===r)&&(a+=(i.height-(t.height||0))/({bottom:1,middle:2}[r]||1)),c[e?"translateY":"y"]=fe(a),this[this.placed?"animate":"attr"](c),this.placed=!0,this.alignAttr=c,this},getBBox:function(){var e,i,n,o=this,r=o.bBox,s=o.renderer,a=o.rotation,l=o.element,h=o.styles,c=a*Se,d=o.textStr;if((""===d||Je.test(d))&&(n="num."+(""+d).length+(h?"|"+h.fontSize+"|"+h.fontFamily:"")),n&&(r=s.cache[n]),!r){if(l.namespaceURI===Ie||s.forExport){try{r=l.getBBox?t({},l.getBBox()):{width:l.offsetWidth,height:l.offsetHeight}}catch(p){}(!r||r.width<0)&&(r={width:0,height:0})}else r=o.htmlGetBBox();s.isSVG&&(e=r.width,i=r.height,Ae&&h&&"11px"===h.fontSize&&"16.9"===i.toPrecision(3)&&(r.height=i=14),a&&(r.width=xe(i*ke(c))+xe(e*be(c)),r.height=xe(i*be(c))+xe(e*ke(c)))),o.bBox=r,n&&(s.cache[n]=r)}return r},show:function(t){return t&&this.element.namespaceURI===Ie?this.element.removeAttribute("visibility"):this.attr({visibility:t?"inherit":Ue}),this},hide:function(){return this.attr({visibility:Ve})},fadeOut:function(t){var e=this;e.animate({opacity:0},{duration:t||150,complete:function(){e.attr({y:-9999})}})},add:function(t){var e,n,o,r,s,a=this.renderer,l=t||a,h=l.element||a.box,p=this.element,u=this.zIndex;if(t&&(this.parentGroup=t),this.parentInverted=t&&t.inverted,void 0!==this.textStr&&a.buildText(this),u&&(l.handleZ=!0,u=i(u)),l.handleZ)for(e=h.childNodes,r=0;r<e.length;r++)if(n=e[r],o=d(n,"zIndex"),n!==p&&(i(o)>u||!c(u)&&c(o))){h.insertBefore(p,n),s=!0;break}return s||h.appendChild(p),this.added=!0,this.onAdd&&this.onAdd(),this},safeRemoveChild:function(t){var e=t.parentNode;e&&e.removeChild(t)},destroy:function(){var t,e,i,n=this,o=n.element||{},r=n.shadows,s=n.renderer.isSVG&&"SPAN"===o.nodeName&&n.parentGroup;if(o.onclick=o.onmouseout=o.onmouseover=o.onmousemove=o.point=null,vi(n),n.clipPath&&(n.clipPath=n.clipPath.destroy()),n.stops){for(i=0;i<n.stops.length;i++)n.stops[i]=n.stops[i].destroy();n.stops=null}for(n.safeRemoveChild(o),r&&hi(r,function(t){n.safeRemoveChild(t)});s&&s.div&&0===s.div.childNodes.length;)t=s.parentGroup,n.safeRemoveChild(s.div),delete s.div,s=t;n.alignTo&&h(n.renderer.alignedObjects,n);for(e in n)delete n[e];return null},shadow:function(t,e,i){var n,o,r,s,a,l,h=[],c=this.element;if(t){for(s=u(t.width,3),a=(t.opacity||.15)/s,l=this.parentInverted?"(-1,-1)":"("+u(t.offsetX,1)+", "+u(t.offsetY,1)+")",n=1;s>=n;n++)o=c.cloneNode(0),r=2*s+1-2*n,d(o,{isShadow:"true",stroke:t.color||"black","stroke-opacity":a*n,"stroke-width":r,transform:"translate"+l,fill:Ke}),i&&(d(o,"height",ye(d(o,"height")-r,0)),o.cutHeight=r),e?e.element.appendChild(o):c.parentNode.insertBefore(o,c),h.push(o);this.shadows=h}return this},xGetter:function(t){return"circle"===this.element.nodeName&&(t={x:"cx",y:"cy"}[t]||t),this._defaultGetter(t)},_defaultGetter:function(t){var e=u(this[t],this.element?this.element.getAttribute(t):null,0);return/^[\-0-9\.]+$/.test(e)&&(e=parseFloat(e)),e},dSetter:function(t,e,i){t&&t.join&&(t=t.join(" ")),/(NaN| {2}|^$)/.test(t)&&(t="M 0 0"),i.setAttribute(e,t),this[e]=t},dashstyleSetter:function(t){var e;if(t=t&&t.toLowerCase()){for(t=t.replace("shortdashdotdot","3,1,1,1,1,1,").replace("shortdashdot","3,1,1,1").replace("shortdot","1,1,").replace("shortdash","3,1,").replace("longdash","8,3,").replace(/dot/g,"1,3,").replace("dash","4,3,").replace(/,$/,"").split(","),e=t.length;e--;)t[e]=i(t[e])*this["stroke-width"];t=t.join(",").replace("NaN","none"),this.element.setAttribute("stroke-dasharray",t)}},alignSetter:function(t){this.element.setAttribute("text-anchor",{left:"start",center:"middle",right:"end"}[t])},opacitySetter:function(t,e,i){this[e]=t,i.setAttribute(e,t)},titleSetter:function(t){var e=this.element.getElementsByTagName("title")[0];e||(e=de.createElementNS(Ie,"title"),this.element.appendChild(e)),e.textContent=u(t,"").replace(/<[^>]*>/g,"")},textSetter:function(t){t!==this.textStr&&(delete this.bBox,this.textStr=t,this.added&&this.renderer.buildText(this))},fillSetter:function(t,e,i){"string"==typeof t?i.setAttribute(e,t):t&&this.colorGradient(t,e,i)},zIndexSetter:function(t,e,i){i.setAttribute(e,t),this[e]=t},_defaultSetter:function(t,e,i){i.setAttribute(e,t)}},z.prototype.yGetter=z.prototype.xGetter,z.prototype.translateXSetter=z.prototype.translateYSetter=z.prototype.rotationSetter=z.prototype.verticalAlignSetter=z.prototype.scaleXSetter=z.prototype.scaleYSetter=function(t,e){this[e]=t,this.doTransform=!0},z.prototype["stroke-widthSetter"]=z.prototype.strokeSetter=function(t,e,i){this[e]=t,this.stroke&&this["stroke-width"]?(this.strokeWidth=this["stroke-width"],z.prototype.fillSetter.call(this,this.stroke,"stroke",i),i.setAttribute("stroke-width",this["stroke-width"]),this.hasStroke=!0):"stroke-width"===e&&0===t&&this.hasStroke&&(i.removeAttribute("stroke"),this.hasStroke=!1)};var Ai=function(){this.init.apply(this,arguments)};Ai.prototype={Element:z,init:function(t,e,i,n,o){var r,s,a,l=this,h=location;r=l.createElement("svg").attr({version:"1.1"}).css(this.getStyle(n)),s=r.element,t.appendChild(s),-1===t.innerHTML.indexOf("xmlns")&&d(s,"xmlns",Ie),l.isSVG=!0,l.box=s,l.boxWrapper=r,l.alignedObjects=[],l.url=(Me||Le)&&de.getElementsByTagName("base").length?h.href.replace(/#.*?$/,"").replace(/([\('\)])/g,"\\$1").replace(/ /g,"%20"):"",a=this.createElement("desc").add(),a.element.appendChild(de.createTextNode("Created with "+We+" "+Ye)),l.defs=this.createElement("defs").add(),l.forExport=o,l.gradients={},l.cache={},l.setSize(e,i,!1);var c,p;Me&&t.getBoundingClientRect&&(l.subPixelFix=c=function(){f(t,{left:0,top:0}),p=t.getBoundingClientRect(),f(t,{left:me(p.left)-p.left+Ze,top:me(p.top)-p.top+Ze})},c(),ui(pe,"resize",c))},getStyle:function(e){return this.style=t({fontFamily:'"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif',fontSize:"12px"},e)},isHidden:function(){return!this.boxWrapper.getBBox().width},destroy:function(){var t=this,e=t.defs;return t.box=null,t.boxWrapper=t.boxWrapper.destroy(),C(t.gradients||{}),t.gradients=null,e&&(t.defs=e.destroy()),t.subPixelFix&&fi(pe,"resize",t.subPixelFix),t.alignedObjects=null,null},createElement:function(t){var e=new this.Element;return e.init(this,t),e},draw:function(){},buildText:function(t){for(var e,n,o,r=t.element,s=this,a=s.forExport,l=""+u(t.textStr,""),h=-1!==l.indexOf("<"),c=r.childNodes,p=d(r,"x"),g=t.styles,m=t.textWidth,y=g&&g.lineHeight,v=g&&g.HcTextStroke,x=c.length,b=function(t){return y?i(y):s.fontMetrics(/(px|em)$/.test(t&&t.style.fontSize)?t.style.fontSize:g&&g.fontSize||s.style.fontSize||12,t).h};x--;)r.removeChild(c[x]);return h||v||-1!==l.indexOf(" ")?(n=/<.*style="([^"]+)".*>/,o=/<.*href="(http[^"]+)".*>/,m&&!t.added&&this.box.appendChild(r),e=h?l.replace(/<(b|strong)>/g,'<span style="font-weight:bold">').replace(/<(i|em)>/g,'<span style="font-style:italic">').replace(/<a/g,"<span").replace(/<\/(b|strong|i|em|a)>/g,"</span>").split(/<br.*?>/g):[l],""===e[e.length-1]&&e.pop(),hi(e,function(e,i){var l,h=0;e=e.replace(/<span/g,"|||<span").replace(/<\/span>/g,"</span>|||"),l=e.split("|||"),hi(l,function(e){if(""!==e||1===l.length){var c,u={},y=de.createElementNS(Ie,"tspan");if(n.test(e)&&(c=e.match(n)[1].replace(/(;| |^)color([ :])/,"$1fill$2"),d(y,"style",c)),o.test(e)&&!a&&(d(y,"onclick",'location.href="'+e.match(o)[1]+'"'),f(y,{cursor:"pointer"})),e=(e.replace(/<(.|\n)*?>/g,"")||" ").replace(/&lt;/g,"<").replace(/&gt;/g,">")," "!==e){if(y.appendChild(de.createTextNode(e)),h?u.dx=0:i&&null!==p&&(u.x=p),d(y,u),r.appendChild(y),!h&&i&&(!Be&&a&&f(y,{display:"block"}),d(y,"dy",b(y))),m)for(var v,x,k,w=e.replace(/([^\^])-/g,"$1- ").split(" "),S=l.length>1||w.length>1&&"nowrap"!==g.whiteSpace,T=g.HcHeight,P=[],A=b(y),C=1;S&&(w.length||P.length);)delete t.bBox,k=t.getBBox(),x=k.width,!Be&&s.forExport&&(x=s.measureSpanWidth(y.firstChild.data,t.styles)),v=x>m,v&&1!==w.length?(y.removeChild(y.firstChild),P.unshift(w.pop())):(w=P,P=[],w.length&&(C++,T&&C*A>T?(w=["..."],t.attr("title",t.textStr)):(y=de.createElementNS(Ie,"tspan"),d(y,{dy:A,x:p}),c&&d(y,"style",c),r.appendChild(y))),x>m&&(m=x)),w.length&&y.appendChild(de.createTextNode(w.join(" ").replace(/- /g,"-")));h++}}})}),void 0):void r.appendChild(de.createTextNode(l))},button:function(i,n,o,r,s,a,l,h,c){var d,p,u,f,g,m,y=this.label(i,n,o,c,null,null,null,null,"button"),v=0,x={x1:0,y1:0,x2:0,y2:1};return s=e({"stroke-width":1,stroke:"#CCCCCC",fill:{linearGradient:x,stops:[[0,"#FEFEFE"],[1,"#F6F6F6"]]},r:2,padding:5,style:{color:"black"}},s),u=s.style,delete s.style,a=e(s,{stroke:"#68A",fill:{linearGradient:x,stops:[[0,"#FFF"],[1,"#ACF"]]}},a),f=a.style,delete a.style,l=e(s,{stroke:"#68A",fill:{linearGradient:x,stops:[[0,"#9BD"],[1,"#CDF"]]}},l),g=l.style,delete l.style,h=e(s,{style:{color:"#CCC"}},h),m=h.style,delete h.style,ui(y.element,Ae?"mouseover":"mouseenter",function(){3!==v&&y.attr(a).css(f)}),ui(y.element,Ae?"mouseout":"mouseleave",function(){3!==v&&(d=[s,a,l][v],p=[u,f,g][v],y.attr(d).css(p))}),y.setState=function(t){y.state=v=t,t?2===t?y.attr(l).css(g):3===t&&y.attr(h).css(m):y.attr(s).css(u)},y.on("click",function(){3!==v&&r.call(y)}).attr(s).css(t({cursor:"default"},u))},crispLine:function(t,e){return t[1]===t[4]&&(t[1]=t[4]=fe(t[1])-e%2/2),t[2]===t[5]&&(t[2]=t[5]=fe(t[2])+e%2/2),t},path:function(e){var i={fill:Ke};return r(e)?i.d=e:o(e)&&t(i,e),this.createElement("path").attr(i)},circle:function(t,e,i){var n=o(t)?t:{x:t,y:e,r:i},r=this.createElement("circle");return r.xSetter=function(t){this.element.setAttribute("cx",t)},r.ySetter=function(t){this.element.setAttribute("cy",t)},r.attr(n)},arc:function(t,e,i,n,r,s){var a;return o(t)&&(e=t.y,i=t.r,n=t.innerR,r=t.start,s=t.end,t=t.x),a=this.symbol("arc",t||0,e||0,i||0,i||0,{innerR:n||0,start:r||0,end:s||0}),a.r=i,a},rect:function(t,e,i,n,r,s){r=o(t)?t.r:r;var a=this.createElement("rect"),l=o(t)?t:t===G?{}:{x:t,y:e,width:ye(i,0),height:ye(n,0)};return s!==G&&(l.strokeWidth=s,l=a.crisp(l)),r&&(l.r=r),a.rSetter=function(t){d(this.element,{rx:t,ry:t})},a.attr(l)},setSize:function(t,e,i){var n=this,o=n.alignedObjects,r=o.length;for(n.width=t,n.height=e,n.boxWrapper[u(i,!0)?"animate":"attr"]({width:t,height:e});r--;)o[r].align()},g:function(t){var e=this.createElement("g");return c(t)?e.attr({"class":_e+t}):e},image:function(e,i,n,o,r){var s,a={preserveAspectRatio:Ke};return arguments.length>1&&t(a,{x:i,y:n,width:o,height:r}),s=this.createElement("image").attr(a),s.element.setAttributeNS?s.element.setAttributeNS("http://www.w3.org/1999/xlink","href",e):s.element.setAttribute("hc-svg-href",e),s},symbol:function(e,i,n,o,r,s){var a,l,h,c,d,p=this.symbols[e],u=p&&p(fe(i),fe(n),o,r,s),f=/^url\((.*?)\)$/;return u?(a=this.path(u),t(a,{symbolName:e,x:i,y:n,width:o,height:r}),s&&t(a,s)):f.test(e)&&(d=function(t,e){t.element&&(t.attr({width:e[0],height:e[1]}),t.alignByTranslate||t.translate(fe((o-e[0])/2),fe((r-e[1])/2)))},h=e.match(f)[1],c=Re[h]||s&&s.width&&s.height&&[s.width,s.height],a=this.image(h).attr({x:i,y:n}),a.isImg=!0,c?d(a,c):(a.attr({width:0,height:0}),l=g("img",{onload:function(){d(a,Re[h]=[this.width,this.height])},src:h}))),a},symbols:{circle:function(t,e,i,n){var o=.166*i;return[$e,t+i/2,e,"C",t+i+o,e,t+i+o,e+n,t+i/2,e+n,"C",t-o,e+n,t-o,e,t+i/2,e,"Z"]},square:function(t,e,i,n){return[$e,t,e,qe,t+i,e,t+i,e+n,t,e+n,"Z"]},triangle:function(t,e,i,n){return[$e,t+i/2,e,qe,t+i,e+n,t,e+n,"Z"]},"triangle-down":function(t,e,i,n){return[$e,t,e,qe,t+i,e,t+i/2,e+n,"Z"]},diamond:function(t,e,i,n){return[$e,t+i/2,e,qe,t+i,e+n/2,t+i/2,e+n,t,e+n/2,"Z"]},arc:function(t,e,i,n,o){var r=o.start,s=o.r||i||n,a=o.end-.001,l=o.innerR,h=o.open,c=be(r),d=ke(r),p=be(a),u=ke(a),f=o.end-r<we?0:1;return[$e,t+s*c,e+s*d,"A",s,s,0,f,1,t+s*p,e+s*u,h?$e:qe,t+l*p,e+l*u,"A",l,l,0,f,0,t+l*c,e+l*d,h?"":"Z"]},callout:function(t,e,i,n,o){var r,s=6,a=6,l=ve(o&&o.r||0,i,n),h=l+a,c=o&&o.anchorX,d=o&&o.anchorY,p=fe(o.strokeWidth||0)%2/2;return t+=p,e+=p,r=["M",t+l,e,"L",t+i-l,e,"C",t+i,e,t+i,e,t+i,e+l,"L",t+i,e+n-l,"C",t+i,e+n,t+i,e+n,t+i-l,e+n,"L",t+l,e+n,"C",t,e+n,t,e+n,t,e+n-l,"L",t,e+l,"C",t,e,t,e,t+l,e],c&&c>i&&d>e+h&&e+n-h>d?r.splice(13,3,"L",t+i,d-a,t+i+s,d,t+i,d+a,t+i,e+n-l):c&&0>c&&d>e+h&&e+n-h>d?r.splice(33,3,"L",t,d+a,t-s,d,t,d-a,t,e+l):d&&d>n&&c>t+h&&t+i-h>c?r.splice(23,3,"L",c+a,e+n,c,e+n+s,c-a,e+n,t+l,e+n):d&&0>d&&c>t+h&&t+i-h>c&&r.splice(3,3,"L",c-a,e,c,e-s,c+a,e,i-l,e),r}},clipRect:function(t,e,i,n){var o,r=_e+He++,s=this.createElement("clipPath").attr({id:r}).add(this.defs);return o=this.rect(t,e,i,n,0).add(s),o.id=r,o.clipPath=s,o},text:function(t,e,i,n){var o,r=this,s=ze||!Be&&r.forExport,a={};return n&&!r.forExport?r.html(t,e,i):(a.x=Math.round(e||0),i&&(a.y=Math.round(i)),(t||0===t)&&(a.text=t),o=r.createElement("text").attr(a),s&&o.css({position:Fe}),n||(o.xSetter=function(t,e,i){var n,o,r=i.getElementsByTagName("tspan"),s=i.getAttribute(e);for(o=0;o<r.length;o++)n=r[o],n.getAttribute(e)===s&&n.setAttribute(e,t);i.setAttribute(e,t)}),o)},fontMetrics:function(t,e){t=t||this.style.fontSize,e&&pe.getComputedStyle&&(e=e.element||e,t=pe.getComputedStyle(e,"").fontSize),t=/px/.test(t)?i(t):/em/.test(t)?12*parseFloat(t):12;var n=24>t?t+4:fe(1.2*t),o=fe(.8*n);return{h:n,b:o,f:t}},label:function(i,n,o,r,s,a,l,h,d){function p(){var e,i,n=P.element.style;m=(void 0===y||void 0===v||T.styles.textAlign)&&P.textStr&&P.getBBox(),T.width=(y||m.width||0)+2*C+L,T.height=(v||m.height||0)+2*C,k=C+S.fontMetrics(n&&n.fontSize,P).b,w&&(g||(e=fe(-A*C),i=h?-k:0,T.box=g=r?S.symbol(r,e,i,T.width,T.height,D):S.rect(e,i,T.width,T.height,0,D[ii]),g.attr("fill",Ke).add(T)),g.isImg||g.attr(t({width:fe(T.width),height:fe(T.height)},D)),D=null)}function u(){var t,e=T.styles,i=e&&e.textAlign,n=L+C*(1-A);t=h?0:k,c(y)&&m&&("center"===i||"right"===i)&&(n+={center:.5,right:1}[i]*(y-m.width)),(n!==P.x||t!==P.y)&&(P.attr("x",n),t!==G&&P.attr("y",t)),P.x=n,P.y=t
}function f(t,e){g?g.attr(t,e):D[t]=e}var g,m,y,v,x,b,k,w,S=this,T=S.g(d),P=S.text("",0,0,l).attr({zIndex:1}),A=0,C=3,L=0,M=0,D={};T.onAdd=function(){P.add(T),T.attr({text:i||0===i?i:"",x:n,y:o}),g&&c(s)&&T.attr({anchorX:s,anchorY:a})},T.widthSetter=function(t){y=t},T.heightSetter=function(t){v=t},T.paddingSetter=function(t){c(t)&&t!==C&&(C=t,u())},T.paddingLeftSetter=function(t){c(t)&&t!==L&&(L=t,u())},T.alignSetter=function(t){A={left:0,center:.5,right:1}[t]},T.textSetter=function(t){t!==G&&P.textSetter(t),p(),u()},T["stroke-widthSetter"]=function(t,e){t&&(w=!0),M=t%2/2,f(e,t)},T.strokeSetter=T.fillSetter=T.rSetter=function(t,e){"fill"===e&&t&&(w=!0),f(e,t)},T.anchorXSetter=function(t,e){s=t,f(e,t+M-x)},T.anchorYSetter=function(t,e){a=t,f(e,t-b)},T.xSetter=function(t){T.x=t,A&&(t-=A*((y||m.width)+C)),x=fe(t),T.attr("translateX",x)},T.ySetter=function(t){b=T.y=fe(t),T.attr("translateY",b)};var I=T.css;return t(T,{css:function(t){if(t){var i={};t=e(t),hi(T.textProps,function(e){t[e]!==G&&(i[e]=t[e],delete t[e])}),P.css(i)}return I.call(T,t)},getBBox:function(){return{width:m.width+2*C,height:m.height+2*C,x:m.x-C,y:m.y-C}},shadow:function(t){return g&&g.shadow(t),T},destroy:function(){fi(T.element,"mouseenter"),fi(T.element,"mouseleave"),P&&(P=P.destroy()),g&&(g=g.destroy()),z.prototype.destroy.call(T),T=S=p=u=f=null}})}},W=Ai,t(z.prototype,{htmlCss:function(e){var i=this,n=i.element,o=e&&"SPAN"===n.tagName&&e.width;return o&&(delete e.width,i.textWidth=o,i.updateTransform()),i.styles=t(i.styles,e),f(i.element,e),i},htmlGetBBox:function(){var t=this,e=t.element,i=t.bBox;return i||("text"===e.nodeName&&(e.style.position=Fe),i=t.bBox={x:e.offsetLeft,y:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}),i},htmlUpdateTransform:function(){if(!this.added)return void(this.alignOnAdd=!0);var t=this,e=t.renderer,n=t.element,o=t.translateX||0,r=t.translateY||0,s=t.x||0,a=t.y||0,l=t.textAlign||"left",h={left:0,center:.5,right:1}[l],d=t.shadows;if(f(n,{marginLeft:o,marginTop:r}),d&&hi(d,function(t){f(t,{marginLeft:o+1,marginTop:r+1})}),t.inverted&&hi(n.childNodes,function(t){e.invertChild(t,n)}),"SPAN"===n.tagName){var p,g,m=t.rotation,y=i(t.textWidth),v=[m,l,n.innerHTML,t.textWidth].join(",");v!==t.cTT&&(g=e.fontMetrics(n.style.fontSize).b,c(m)&&t.setSpanRotation(m,h,g),p=u(t.elemWidth,n.offsetWidth),p>y&&/[ \-]/.test(n.textContent||n.innerText)&&(f(n,{width:y+Ze,display:"block",whiteSpace:"normal"}),p=y),t.getSpanCorrection(p,g,h,m,l)),f(n,{left:s+(t.xCorr||0)+Ze,top:a+(t.yCorr||0)+Ze}),Le&&(g=n.offsetHeight),t.cTT=v}},setSpanRotation:function(t,e,i){var n={},o=Ae?"-ms-transform":Le?"-webkit-transform":Me?"MozTransform":Pe?"-o-transform":"";n[o]=n.transform="rotate("+t+"deg)",n[o+(Me?"Origin":"-origin")]=n.transformOrigin=100*e+"% "+i+"px",f(this.element,n)},getSpanCorrection:function(t,e,i){this.xCorr=-t*i,this.yCorr=-e}}),t(Ai.prototype,{html:function(e,i,n){var o=this.createElement("span"),r=o.element,s=o.renderer;return o.textSetter=function(t){t!==r.innerHTML&&delete this.bBox,r.innerHTML=this.textStr=t},o.xSetter=o.ySetter=o.alignSetter=o.rotationSetter=function(t,e){"align"===e&&(e="textAlign"),o[e]=t,o.htmlUpdateTransform()},o.attr({text:e,x:fe(i),y:fe(n)}).css({position:Fe,whiteSpace:"nowrap",fontFamily:this.style.fontFamily,fontSize:this.style.fontSize}),o.css=o.htmlCss,s.isSVG&&(o.add=function(e){var i,n,a=s.box.parentNode,l=[];if(this.parentGroup=e,e){if(i=e.div,!i){for(n=e;n;)l.push(n),n=n.parentGroup;hi(l.reverse(),function(e){var n;i=e.div=e.div||g(Ne,{className:d(e.element,"class")},{position:Fe,left:(e.translateX||0)+Ze,top:(e.translateY||0)+Ze},i||a),n=i.style,t(e,{translateXSetter:function(t,i){n.left=t+Ze,e[i]=t,e.doTransform=!0},translateYSetter:function(t,i){n.top=t+Ze,e[i]=t,e.doTransform=!0},visibilitySetter:function(t,e){n[e]=t}})})}}else i=a;return i.appendChild(r),o.added=!0,o.alignOnAdd&&o.htmlUpdateTransform(),o}),o}});var Ci,Li;if(!Be&&!ze){Li={init:function(t,e){var i=this,n=["<",e,' filled="f" stroked="f"'],o=["position: ",Fe,";"],r=e===Ne;("shape"===e||r)&&o.push("left:0;top:0;width:1px;height:1px;"),o.push("visibility: ",r?Ve:Ue),n.push(' style="',o.join(""),'"/>'),e&&(n=r||"span"===e||"img"===e?n.join(""):t.prepVML(n),i.element=g(n)),i.renderer=t},add:function(t){var e=this,i=e.renderer,n=e.element,o=i.box,r=t&&t.inverted,s=t?t.element||t:o;return r&&i.invertChild(n,s),s.appendChild(n),e.added=!0,e.alignOnAdd&&!e.deferUpdateTransform&&e.updateTransform(),e.onAdd&&e.onAdd(),e},updateTransform:z.prototype.htmlUpdateTransform,setSpanRotation:function(){var t=this.rotation,e=be(t*Se),i=ke(t*Se);f(this.element,{filter:t?"progid:DXImageTransform.Microsoft.Matrix(M11="+e+", M12="+-i+", M21="+i+", M22="+e+", sizingMethod='auto expand')":Ke})},getSpanCorrection:function(t,e,i,n,o){var r,s=n?be(n*Se):1,a=n?ke(n*Se):0,l=u(this.elemHeight,this.element.offsetHeight),h=o&&"left"!==o;this.xCorr=0>s&&-t,this.yCorr=0>a&&-l,r=0>s*a,this.xCorr+=a*e*(r?1-i:i),this.yCorr-=s*e*(n?r?i:1-i:1),h&&(this.xCorr-=t*i*(0>s?-1:1),n&&(this.yCorr-=l*i*(0>a?-1:1)),f(this.element,{textAlign:o}))},pathToVML:function(t){for(var e=t.length,i=[];e--;)s(t[e])?i[e]=fe(10*t[e])-5:"Z"===t[e]?i[e]="x":(i[e]=t[e],!t.isArc||"wa"!==t[e]&&"at"!==t[e]||(i[e+5]===i[e+7]&&(i[e+7]+=t[e+7]>t[e+5]?1:-1),i[e+6]===i[e+8]&&(i[e+8]+=t[e+8]>t[e+6]?1:-1)));return i.join(" ")||"x"},clip:function(t){var e,i,n=this;return t?(e=t.members,h(e,n),e.push(n),n.destroyClip=function(){h(e,n)},i=t.getCSS(n)):(n.destroyClip&&n.destroyClip(),i={clip:Ce?"inherit":"rect(auto)"}),n.css(i)},css:z.prototype.htmlCss,safeRemoveChild:function(t){t.parentNode&&L(t)},destroy:function(){return this.destroyClip&&this.destroyClip(),z.prototype.destroy.apply(this)},on:function(t,e){return this.element["on"+t]=function(){var t=pe.event;t.target=t.srcElement,e(t)},this},cutOffPath:function(t,e){var n;return t=t.split(/[ ,]/),n=t.length,(9===n||11===n)&&(t[n-4]=t[n-2]=i(t[n-2])-10*e),t.join(" ")},shadow:function(t,e,n){var o,r,s,a,l,h,c,d=[],p=this.element,f=this.renderer,m=p.style,y=p.path;if(y&&"string"!=typeof y.value&&(y="x"),l=y,t){for(h=u(t.width,3),c=(t.opacity||.15)/h,o=1;3>=o;o++)a=2*h+1-2*o,n&&(l=this.cutOffPath(y.value,a+.5)),s=['<shape isShadow="true" strokeweight="',a,'" filled="false" path="',l,'" coordsize="10 10" style="',p.style.cssText,'" />'],r=g(f.prepVML(s),null,{left:i(m.left)+u(t.offsetX,1),top:i(m.top)+u(t.offsetY,1)}),n&&(r.cutOff=a+1),s=['<stroke color="',t.color||"black",'" opacity="',c*o,'"/>'],g(f.prepVML(s),null,null,r),e?e.element.appendChild(r):p.parentNode.insertBefore(r,p),d.push(r);this.shadows=d}return this},updateShadows:Xe,setAttr:function(t,e){Ce?this.element[t]=e:this.element.setAttribute(t,e)},classSetter:function(t){this.element.className=t},dashstyleSetter:function(t,e,i){var n=i.getElementsByTagName("stroke")[0]||g(this.renderer.prepVML(["<stroke/>"]),null,null,i);n[e]=t||"solid",this[e]=t},dSetter:function(t,e,i){var n,o=this.shadows;if(t=t||[],this.d=t.join&&t.join(" "),i.path=t=this.pathToVML(t),o)for(n=o.length;n--;)o[n].path=o[n].cutOff?this.cutOffPath(t,o[n].cutOff):t;this.setAttr(e,t)},fillSetter:function(t,e,i){var n=i.nodeName;"SPAN"===n?i.style.color=t:"IMG"!==n&&(i.filled=t!==Ke,this.setAttr("fillcolor",this.renderer.color(t,i,e,this)))},opacitySetter:Xe,rotationSetter:function(t,e,i){var n=i.style;this[e]=n[e]=t,n.left=-fe(ke(t*Se)+1)+Ze,n.top=fe(be(t*Se))+Ze},strokeSetter:function(t,e,i){this.setAttr("strokecolor",this.renderer.color(t,i,e))},"stroke-widthSetter":function(t,e,i){i.stroked=!!t,this[e]=t,s(t)&&(t+=Ze),this.setAttr("strokeweight",t)},titleSetter:function(t,e){this.setAttr(e,t)},visibilitySetter:function(t,e,i){"inherit"===t&&(t=Ue),this.shadows&&hi(this.shadows,function(i){i.style[e]=t}),"DIV"===i.nodeName&&(t=t===Ve?"-999em":0,Ce||(i.style[e]=t?Ue:Ve),e="top"),i.style[e]=t},xSetter:function(t,e,i){this[e]=t,"x"===e?e="left":"y"===e&&(e="top"),this.updateClipping?(this[e]=t,this.updateClipping()):i.style[e]=t},zIndexSetter:function(t,e,i){i.style[e]=t}},ce.VMLElement=Li=m(z,Li),Li.prototype.ySetter=Li.prototype.widthSetter=Li.prototype.heightSetter=Li.prototype.xSetter;var Mi={Element:Li,isIE8:Te.indexOf("MSIE 8.0")>-1,init:function(e,i,n,o){var r,s,a,l=this;if(l.alignedObjects=[],r=l.createElement(Ne).css(t(this.getStyle(o),{position:je})),s=r.element,e.appendChild(r.element),l.isVML=!0,l.box=s,l.boxWrapper=r,l.cache={},l.setSize(i,n,!1),!de.namespaces.hcv){de.namespaces.add("hcv","urn:schemas-microsoft-com:vml"),a="hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke{ behavior:url(#default#VML); display: inline-block; } ";try{de.createStyleSheet().cssText=a}catch(h){de.styleSheets[0].cssText+=a}}},isHidden:function(){return!this.box.offsetWidth},clipRect:function(e,i,n,r){var s=this.createElement(),a=o(e);return t(s,{members:[],left:(a?e.x:e)+1,top:(a?e.y:i)+1,width:(a?e.width:n)-1,height:(a?e.height:r)-1,getCSS:function(e){var i=e.element,n=i.nodeName,o="shape"===n,r=e.inverted,s=this,a=s.top-(o?i.offsetTop:0),l=s.left,h=l+s.width,c=a+s.height,d={clip:"rect("+fe(r?l:a)+"px,"+fe(r?c:h)+"px,"+fe(r?h:c)+"px,"+fe(r?a:l)+"px)"};return!r&&Ce&&"DIV"===n&&t(d,{width:h+Ze,height:c+Ze}),d},updateClipping:function(){hi(s.members,function(t){t.element&&t.css(s.getCSS(t))})}})},color:function(t,e,i,n){var o,r,s,a=this,l=/^rgba/,h=Ke;if(t&&t.linearGradient?s="gradient":t&&t.radialGradient&&(s="pattern"),s){var c,d,p,u,f,m,y,v,x,b,k,w,S=t.linearGradient||t.radialGradient,T="",P=t.stops,A=[],C=function(){r=['<fill colors="'+A.join(",")+'" opacity="',v,'" o:opacity2="',y,'" type="',s,'" ',T,'focus="100%" method="any" />'],g(a.prepVML(r),null,null,e)};if(k=P[0],w=P[P.length-1],k[0]>0&&P.unshift([0,k[1]]),w[0]<1&&P.push([1,w[1]]),hi(P,function(t,e){l.test(t[1])?(o=Pi(t[1]),c=o.get("rgb"),d=o.get("a")):(c=t[1],d=1),A.push(100*t[0]+"% "+c),e?(v=d,x=c):(y=d,b=c)}),"fill"===i)if("gradient"===s)p=S.x1||S[0]||0,u=S.y1||S[1]||0,f=S.x2||S[2]||0,m=S.y2||S[3]||0,T='angle="'+(90-180*ue.atan((m-u)/(f-p))/we)+'"',C();else{var L,M=S.r,D=2*M,I=2*M,B=S.cx,O=S.cy,z=e.radialReference,R=function(){z&&(L=n.getBBox(),B+=(z[0]-L.x)/L.width-.5,O+=(z[1]-L.y)/L.height-.5,D*=z[2]/L.width,I*=z[2]/L.height),T='src="'+F.global.VMLRadialGradientURL+'" size="'+D+","+I+'" origin="0.5,0.5" position="'+B+","+O+'" color2="'+b+'" ',C()};n.added?R():n.onAdd=R,h=x}else h=c}else if(l.test(t)&&"IMG"!==e.tagName)o=Pi(t),r=["<",i,' opacity="',o.get("a"),'"/>'],g(this.prepVML(r),null,null,e),h=o.get("rgb");else{var H=e.getElementsByTagName(i);H.length&&(H[0].opacity=1,H[0].type="solid"),h=t}return h},prepVML:function(t){var e="display:inline-block;behavior:url(#default#VML);",i=this.isIE8;return t=t.join(""),i?(t=t.replace("/>",' xmlns="urn:schemas-microsoft-com:vml" />'),t=-1===t.indexOf('style="')?t.replace("/>",' style="'+e+'" />'):t.replace('style="','style="'+e)):t=t.replace("<","<hcv:"),t},text:Ai.prototype.html,path:function(e){var i={coordsize:"10 10"};return r(e)?i.d=e:o(e)&&t(i,e),this.createElement("shape").attr(i)},circle:function(t,e,i){var n=this.symbol("circle");return o(t)&&(i=t.r,e=t.y,t=t.x),n.isCircle=!0,n.r=i,n.attr({x:t,y:e})},g:function(t){var e,i;return t&&(i={className:_e+t,"class":_e+t}),e=this.createElement(Ne).attr(i)},image:function(t,e,i,n,o){var r=this.createElement("img").attr({src:t});return arguments.length>1&&r.attr({x:e,y:i,width:n,height:o}),r},createElement:function(t){return"rect"===t?this.symbol(t):Ai.prototype.createElement.call(this,t)},invertChild:function(t,e){var n=this,o=e.style,r="IMG"===t.tagName&&t.style;f(t,{flip:"x",left:i(o.width)-(r?i(r.top):1),top:i(o.height)-(r?i(r.left):1),rotation:-90}),hi(t.childNodes,function(e){n.invertChild(e,t)})},symbols:{arc:function(t,e,i,n,o){var r,s=o.start,a=o.end,l=o.r||i||n,h=o.innerR,c=be(s),d=ke(s),p=be(a),u=ke(a);return a-s===0?["x"]:(r=["wa",t-l,e-l,t+l,e+l,t+l*c,e+l*d,t+l*p,e+l*u],o.open&&!h&&r.push("e",$e,t,e),r.push("at",t-h,e-h,t+h,e+h,t+h*p,e+h*u,t+h*c,e+h*d,"x","e"),r.isArc=!0,r)},circle:function(t,e,i,n,o){return o&&(i=n=2*o.r),o&&o.isCircle&&(t-=i/2,e-=n/2),["wa",t,e,t+i,e+n,t+i,e+n/2,t+i,e+n/2,"e"]},rect:function(t,e,i,n,o){return Ai.prototype.symbols[c(o)&&o.r?"callout":"square"].call(0,t,e,i,n,o)}}};ce.VMLRenderer=Ci=function(){this.init.apply(this,arguments)},Ci.prototype=e(Ai.prototype,Mi),W=Ci}Ai.prototype.measureSpanWidth=function(t,e){var i,n=de.createElement("span"),o=de.createTextNode(t);return n.appendChild(o),f(n,e),this.box.appendChild(n),i=n.offsetWidth,L(n),i};var Di,Ii;ze&&(ce.CanVGRenderer=Di=function(){Ie="http://www.w3.org/1999/xhtml"},Di.prototype.symbols={},Ii=function(){function t(){var t,i=e.length;for(t=0;i>t;t++)e[t]();e=[]}var e=[];return{push:function(i,n){0===e.length&&ai(n,t),e.push(i)}}}(),W=Di),R.prototype={addLabel:function(){var e,i,n,o,r=this,a=r.axis,h=a.options,d=a.chart,p=a.horiz,f=a.categories,g=a.names,m=r.pos,y=h.labels,v=y.rotation,x=a.tickPositions,b=p&&f&&!y.step&&!y.staggerLines&&!y.rotation&&d.plotWidth/x.length||!p&&(d.margin[3]||.33*d.chartWidth),k=m===x[0],w=m===x[x.length-1],S=f?u(f[m],g[m],m):m,T=r.label,P=x.info;a.isDatetimeAxis&&P&&(o=h.dateTimeLabelFormats[P.higherRanks[m]||P.unitName]),r.isFirst=k,r.isLast=w,e=a.labelFormatter.call({axis:a,chart:d,isFirst:k,isLast:w,dateTimeLabelFormat:o,value:a.isLog?M(l(S)):S}),i=b&&{width:ye(1,fe(b-2*(y.padding||10)))+Ze},c(T)?T&&T.attr({text:e}).css(i):(n={align:a.labelAlign},s(v)&&(n.rotation=v),b&&y.ellipsis&&(i.HcHeight=a.len/x.length),r.label=T=c(e)&&y.enabled?d.renderer.text(e,0,0,y.useHTML).attr(n).css(t(i,y.style)).add(a.labelGroup):null,a.tickBaseline=d.renderer.fontMetrics(y.style.fontSize,T).b,v&&2===a.side&&(a.tickBaseline*=be(v*Se))),r.yOffset=T?u(y.y,a.tickBaseline+(2===a.side?8:-(T.getBBox().height/2))):0},getLabelSize:function(){var t=this.label,e=this.axis;return t?t.getBBox()[e.horiz?"height":"width"]:0},getLabelSides:function(){var t=this.label.getBBox(),e=this.axis,i=e.horiz,n=e.options,o=n.labels,r=i?t.width:t.height,s=i?o.x-r*{left:0,center:.5,right:1}[e.labelAlign]:0,a=i?r+s:r;return[s,a]},handleOverflow:function(t,e){var i,n,o,r,s,a=!0,l=this.axis,h=this.isFirst,c=this.isLast,d=l.horiz,p=d?e.x:e.y,u=l.reversed,f=l.tickPositions,g=this.getLabelSides(),m=g[0],y=g[1],v=this.label.line,x=v||0,b=l.labelEdge,k=l.justifyLabels&&(h||c);if(b[x]===G||p+m>b[x]?b[x]=p+y:k||(a=!1),k){s=l.justifyToPlot,i=s?l.pos:0,n=s?i+l.len:l.chart.chartWidth;do t+=h?1:-1,o=l.ticks[f[t]];while(f[t]&&(!o||!o.label||o.label.line!==v));r=o&&o.label.xy&&o.label.xy.x+o.getLabelSides()[h?0:1],h&&!u||c&&u?i>p+m&&(p=i-m,o&&p+y>r&&(a=!1)):p+y>n&&(p=n-y,o&&r>p+m&&(a=!1)),e.x=p}return a},getPosition:function(t,e,i,n){var o=this.axis,r=o.chart,s=n&&r.oldChartHeight||r.chartHeight;return{x:t?o.translate(e+i,null,null,n)+o.transB:o.left+o.offset+(o.opposite?(n&&r.oldChartWidth||r.chartWidth)-o.right-o.left:0),y:t?s-o.bottom+o.offset-(o.opposite?o.height:0):s-o.translate(e+i,null,null,n)-o.transB}},getLabelPosition:function(t,e,i,n,o,r,s,a){var l=this.axis,h=l.transA,c=l.reversed,d=l.staggerLines;return t=t+o.x-(r&&n?r*h*(c?-1:1):0),e=e+this.yOffset-(r&&!n?r*h*(c?1:-1):0),d&&(i.line=s/(a||1)%d,e+=i.line*(l.labelOffset/d)),{x:t,y:e}},getMarkPath:function(t,e,i,n,o,r){return r.crispLine([$e,t,e,qe,t+(o?0:-i),e+(o?i:0)],n)},render:function(t,e,i){var n,o,r,s=this,a=s.axis,l=a.options,h=a.chart,c=h.renderer,d=a.horiz,p=s.type,f=s.label,g=s.pos,m=l.labels,y=s.gridLine,v=p?p+"Grid":"grid",x=p?p+"Tick":"tick",b=l[v+"LineWidth"],k=l[v+"LineColor"],w=l[v+"LineDashStyle"],S=l[x+"Length"],T=l[x+"Width"]||0,P=l[x+"Color"],A=l[x+"Position"],C=s.mark,L=m.step,M=!0,D=a.tickmarkOffset,I=s.getPosition(d,g,D,e),B=I.x,O=I.y,z=d&&B===a.pos+a.len||!d&&O===a.pos?-1:1;i=u(i,1),this.isActive=!0,b&&(n=a.getPlotLinePath(g+D,b*z,e,!0),y===G&&(r={stroke:k,"stroke-width":b},w&&(r.dashstyle=w),p||(r.zIndex=1),e&&(r.opacity=0),s.gridLine=y=b?c.path(n).attr(r).add(a.gridGroup):null),!e&&y&&n&&y[s.isNew?"attr":"animate"]({d:n,opacity:i})),T&&S&&("inside"===A&&(S=-S),a.opposite&&(S=-S),o=s.getMarkPath(B,O,S,T*z,d,c),C?C.animate({d:o,opacity:i}):s.mark=c.path(o).attr({stroke:P,"stroke-width":T,opacity:i}).add(a.axisGroup)),f&&!isNaN(B)&&(f.xy=I=s.getLabelPosition(B,O,f,d,m,D,t,L),s.isFirst&&!s.isLast&&!u(l.showFirstLabel,1)||s.isLast&&!s.isFirst&&!u(l.showLastLabel,1)?M=!1:a.isRadial||m.step||m.rotation||e||0===i||(M=s.handleOverflow(t,I)),L&&t%L&&(M=!1),M&&!isNaN(I.y)?(I.opacity=i,f[s.isNew?"attr":"animate"](I),s.isNew=!1):f.attr("y",-9999))},destroy:function(){C(this,this.axis)}},ce.PlotLineOrBand=function(t,e){this.axis=t,e&&(this.options=e,this.id=e.id)},ce.PlotLineOrBand.prototype={render:function(){var t,i,n,o,r,s,l=this,h=l.axis,d=h.horiz,p=(h.pointRange||0)/2,u=l.options,f=u.label,g=l.label,m=u.width,y=u.to,v=u.from,x=c(v)&&c(y),b=u.value,k=u.dashStyle,w=l.svgElem,S=[],T=u.color,C=u.zIndex,L=u.events,M={},D=h.chart.renderer;if(h.isLog&&(v=a(v),y=a(y),b=a(b)),m)S=h.getPlotLinePath(b,m),M={stroke:T,"stroke-width":m},k&&(M.dashstyle=k);else{if(!x)return;v=ye(v,h.min-p),y=ve(y,h.max+p),S=h.getPlotBandPath(v,y,u),T&&(M.fill=T),u.borderWidth&&(M.stroke=u.borderColor,M["stroke-width"]=u.borderWidth)}if(c(C)&&(M.zIndex=C),w)S?w.animate({d:S},null,w.onGetPath):(w.hide(),w.onGetPath=function(){w.show()},g&&(l.label=g=g.destroy()));else if(S&&S.length&&(l.svgElem=w=D.path(S).attr(M).add(),L)){t=function(t){w.on(t,function(e){L[t].apply(l,[e])})};for(i in L)t(i)}return f&&c(f.text)&&S&&S.length&&h.width>0&&h.height>0?(f=e({align:d&&x&&"center",x:d?!x&&4:10,verticalAlign:!d&&x&&"middle",y:d?x?16:10:x?6:-4,rotation:d&&!x&&90},f),g||(M={align:f.textAlign||f.align,rotation:f.rotation},c(C)&&(M.zIndex=C),l.label=g=D.text(f.text,0,0,f.useHTML).attr(M).css(f.style).add()),n=[S[1],S[4],x?S[6]:S[1]],o=[S[2],S[5],x?S[7]:S[2]],r=P(n),s=P(o),g.align(f,!1,{x:r,y:s,width:A(n)-r,height:A(o)-s}),g.show()):g&&g.hide(),l},destroy:function(){h(this.axis.plotLinesAndBands,this),delete this.axis,C(this)}},K={getPlotBandPath:function(t,e){var i=this.getPlotLinePath(e),n=this.getPlotLinePath(t);return n&&i?n.push(i[4],i[5],i[1],i[2]):n=null,n},addPlotBand:function(t){return this.addPlotBandOrLine(t,"plotBands")},addPlotLine:function(t){return this.addPlotBandOrLine(t,"plotLines")},addPlotBandOrLine:function(t,e){var i=new ce.PlotLineOrBand(this,t).render(),n=this.userOptions;return i&&(e&&(n[e]=n[e]||[],n[e].push(t)),this.plotLinesAndBands.push(i)),i},removePlotBandOrLine:function(t){for(var e=this.plotLinesAndBands,i=this.options,n=this.userOptions,o=e.length;o--;)e[o].id===t&&e[o].destroy();hi([i.plotLines||[],n.plotLines||[],i.plotBands||[],n.plotBands||[]],function(e){for(o=e.length;o--;)e[o].id===t&&h(e,e[o])})}},H.prototype={defaultOptions:{dateTimeLabelFormats:{millisecond:"%H:%M:%S.%L",second:"%H:%M:%S",minute:"%H:%M",hour:"%H:%M",day:"%e. %b",week:"%e. %b",month:"%b '%y",year:"%Y"},endOnTick:!1,gridLineColor:"#C0C0C0",labels:xi,lineColor:"#C0D0E0",lineWidth:1,minPadding:.01,maxPadding:.01,minorGridLineColor:"#E0E0E0",minorGridLineWidth:1,minorTickColor:"#A0A0A0",minorTickLength:2,minorTickPosition:"outside",startOfWeek:1,startOnTick:!1,tickColor:"#C0D0E0",tickLength:10,tickmarkPlacement:"between",tickPixelInterval:100,tickPosition:"outside",tickWidth:1,title:{align:"middle",style:{color:"#707070"}},type:"linear"},defaultYAxisOptions:{endOnTick:!0,gridLineWidth:1,tickPixelInterval:72,showLastLabel:!0,labels:{x:-8,y:3},lineWidth:0,maxPadding:.05,minPadding:.05,startOnTick:!0,tickWidth:0,title:{rotation:270,text:"Values"},stackLabels:{enabled:!1,formatter:function(){return y(this.total,-1)},style:xi.style}},defaultLeftAxisOptions:{labels:{x:-15,y:null},title:{rotation:270}},defaultRightAxisOptions:{labels:{x:15,y:null},title:{rotation:90}},defaultBottomAxisOptions:{labels:{x:0,y:null},title:{rotation:0}},defaultTopAxisOptions:{labels:{x:0,y:-15},title:{rotation:0}},init:function(t,e){var i=e.isX,n=this;n.horiz=t.inverted?!i:i,n.isXAxis=i,n.coll=i?"xAxis":"yAxis",n.opposite=e.opposite,n.side=e.side||(n.horiz?n.opposite?0:2:n.opposite?1:3),n.setOptions(e);var o=this.options,r=o.type,s="datetime"===r;n.labelFormatter=o.labels.formatter||n.defaultLabelFormatter,n.userOptions=e,n.minPixelPadding=0,n.chart=t,n.reversed=o.reversed,n.zoomEnabled=o.zoomEnabled!==!1,n.categories=o.categories||"category"===r,n.names=[],n.isLog="logarithmic"===r,n.isDatetimeAxis=s,n.isLinked=c(o.linkedTo),n.tickmarkOffset=n.categories&&"between"===o.tickmarkPlacement&&1===u(o.tickInterval,1)?.5:0,n.ticks={},n.labelEdge=[],n.minorTicks={},n.plotLinesAndBands=[],n.alternateBands={},n.len=0,n.minRange=n.userMinRange=o.minRange||o.maxZoom,n.range=o.range,n.offset=o.offset||0,n.stacks={},n.oldStacks={},n.max=null,n.min=null,n.crosshair=u(o.crosshair,p(t.options.tooltip.crosshairs)[i?0:1],!1);var h,d=n.options.events;-1===li(n,t.axes)&&(i&&!this.isColorAxis?t.axes.splice(t.xAxis.length,0,n):t.axes.push(n),t[n.coll].push(n)),n.series=n.series||[],t.inverted&&i&&n.reversed===G&&(n.reversed=!0),n.removePlotBand=n.removePlotBandOrLine,n.removePlotLine=n.removePlotBandOrLine;for(h in d)ui(n,h,d[h]);n.isLog&&(n.val2lin=a,n.lin2val=l)},setOptions:function(t){this.options=e(this.defaultOptions,this.isXAxis?{}:this.defaultYAxisOptions,[this.defaultTopAxisOptions,this.defaultRightAxisOptions,this.defaultBottomAxisOptions,this.defaultLeftAxisOptions][this.side],e(F[this.coll],t))},defaultLabelFormatter:function(){var t,e,i=this.axis,n=this.value,o=i.categories,r=this.dateTimeLabelFormat,s=F.lang.numericSymbols,a=s&&s.length,l=i.options.labels.format,h=i.isLog?n:i.tickInterval;if(l)e=k(l,this);else if(o)e=n;else if(r)e=j(r,n);else if(a&&h>=1e3)for(;a--&&e===G;)t=Math.pow(1e3,a+1),t>h||null===s[a]||(e=y(n/t,-1)+s[a]);return e===G&&(e=xe(n)<1e4?y(n,-1,G,""):y(n,0)),e},getSeriesExtremes:function(){var t=this,e=t.chart;t.hasVisibleSeries=!1,t.dataMin=t.dataMax=t.ignoreMinPadding=t.ignoreMaxPadding=null,t.buildStacks&&t.buildStacks(),hi(t.series,function(i){if(i.visible||!e.options.chart.ignoreHiddenSeries){var n,o,r,s=i.options,a=s.threshold;t.hasVisibleSeries=!0,t.isLog&&0>=a&&(a=null),t.isXAxis?(n=i.xData,n.length&&(t.dataMin=ve(u(t.dataMin,n[0]),P(n)),t.dataMax=ye(u(t.dataMax,n[0]),A(n)))):(i.getExtremes(),r=i.dataMax,o=i.dataMin,c(o)&&c(r)&&(t.dataMin=ve(u(t.dataMin,o),o),t.dataMax=ye(u(t.dataMax,r),r)),c(a)&&(t.dataMin<a?t.dataMax<a&&(t.dataMax=a,t.ignoreMaxPadding=!0):(t.dataMin=a,t.ignoreMinPadding=!0)))}})},translate:function(t,e,i,n,o,r){var a,l=this,h=1,c=0,d=n?l.oldTransA:l.transA,p=n?l.oldMin:l.min,u=l.minPixelPadding,f=(l.options.ordinal||l.isLog&&o)&&l.lin2val;return d||(d=l.transA),i&&(h*=-1,c=l.len),l.reversed&&(h*=-1,c-=h*(l.sector||l.len)),e?(t=t*h+c,t-=u,a=t/d+p,f&&(a=l.lin2val(a))):(f&&(t=l.val2lin(t)),"between"===r&&(r=.5),a=h*(t-p)*d+c+h*u+(s(r)?d*r*l.pointRange:0)),a},toPixels:function(t,e){return this.translate(t,!1,!this.horiz,null,!0)+(e?0:this.pos)},toValue:function(t,e){return this.translate(t-(e?0:this.pos),!0,!this.horiz,null,!0)},getPlotLinePath:function(t,e,i,n,o){var r,s,a,l,h,c=this,d=c.chart,p=c.left,f=c.top,g=i&&d.oldChartHeight||d.chartHeight,m=i&&d.oldChartWidth||d.chartWidth,y=c.transB;return o=u(o,c.translate(t,null,null,i)),r=a=fe(o+y),s=l=fe(g-o-y),isNaN(o)?h=!0:c.horiz?(s=f,l=g-c.bottom,(p>r||r>p+c.width)&&(h=!0)):(r=p,a=m-c.right,(f>s||s>f+c.height)&&(h=!0)),h&&!n?null:d.renderer.crispLine([$e,r,s,qe,a,l],e||1)},getLinearTickPositions:function(t,e,i){var n,o,r=M(ge(e/t)*t),a=M(me(i/t)*t),l=[];if(e===i&&s(e))return[e];for(n=r;a>=n&&(l.push(n),n=M(n+t),n!==o);)o=n;return l},getMinorTickPositions:function(){var t,e,i,n=this,o=n.options,r=n.tickPositions,s=n.minorTickInterval,a=[];if(n.isLog)for(i=r.length,e=1;i>e;e++)a=a.concat(n.getLogTickPositions(s,r[e-1],r[e],!0));else if(n.isDatetimeAxis&&"auto"===o.minorTickInterval)a=a.concat(n.getTimeTicks(n.normalizeTimeTickInterval(s),n.min,n.max,o.startOfWeek)),a[0]<n.min&&a.shift();else for(t=n.min+(r[0]-n.min)%s;t<=n.max;t+=s)a.push(t);return a},adjustForMinRange:function(){var t,e,i,n,o,r,s,a,l=this,h=l.options,d=l.min,p=l.max,f=l.dataMax-l.dataMin>=l.minRange;if(l.isXAxis&&l.minRange===G&&!l.isLog&&(c(h.min)||c(h.max)?l.minRange=null:(hi(l.series,function(t){for(o=t.xData,r=t.xIncrement?1:o.length-1,i=r;i>0;i--)n=o[i]-o[i-1],(e===G||e>n)&&(e=n)}),l.minRange=ve(5*e,l.dataMax-l.dataMin))),p-d<l.minRange){var g=l.minRange;t=(g-p+d)/2,s=[d-t,u(h.min,d-t)],f&&(s[2]=l.dataMin),d=A(s),a=[d+g,u(h.max,d+g)],f&&(a[2]=l.dataMax),p=P(a),g>p-d&&(s[0]=p-g,s[1]=u(h.min,p-g),d=A(s))}l.min=d,l.max=p},setAxisTranslation:function(t){var e,i,o=this,r=o.max-o.min,s=o.axisPointRange||0,a=0,l=0,h=o.linkedParent,d=!!o.categories,p=o.transA;(o.isXAxis||d||s)&&(h?(a=h.minPointOffset,l=h.pointRangePadding):hi(o.series,function(t){var i=d?1:o.isXAxis?t.pointRange:o.axisPointRange||0,h=t.options.pointPlacement,p=t.closestPointRange;i>r&&(i=0),s=ye(s,i),a=ye(a,n(h)?0:i/2),l=ye(l,"on"===h?0:i),!t.noSharedTooltip&&c(p)&&(e=c(e)?ve(e,p):p)}),i=o.ordinalSlope&&e?o.ordinalSlope/e:1,o.minPointOffset=a*=i,o.pointRangePadding=l*=i,o.pointRange=ve(s,r),o.closestPointRange=e),t&&(o.oldTransA=p),o.translationSlope=o.transA=p=o.len/(r+l||1),o.transB=o.horiz?o.left:o.bottom,o.minPixelPadding=p*a},setTickPositions:function(t){var e,i,n,o,r=this,l=r.chart,h=r.options,d=h.startOnTick,p=h.endOnTick,f=r.isLog,g=r.isDatetimeAxis,m=r.isXAxis,y=r.isLinked,v=r.options.tickPositioner,x=h.maxPadding,b=h.minPadding,k=h.tickInterval,T=h.minTickInterval,P=h.tickPixelInterval,A=r.categories;if(y?(r.linkedParent=l[r.coll][h.linkedTo],i=r.linkedParent.getExtremes(),r.min=u(i.min,i.dataMin),r.max=u(i.max,i.dataMax),h.type!==r.linkedParent.options.type&&Z(11,1)):(r.min=u(r.userMin,h.min,r.dataMin),r.max=u(r.userMax,h.max,r.dataMax)),f&&(t||ve(r.min,u(r.dataMin,r.min))>0||Z(10,1),r.min=M(a(r.min)),r.max=M(a(r.max))),r.range&&c(r.max)&&(r.userMin=r.min=ye(r.min,r.max-r.range),r.userMax=r.max,r.range=null),r.beforePadding&&r.beforePadding(),r.adjustForMinRange(),A||r.axisPointRange||r.usePercentage||y||!c(r.min)||!c(r.max)||(e=r.max-r.min,e&&(c(h.min)||c(r.userMin)||!b||r.dataMin>=0&&r.ignoreMinPadding||(r.min-=e*b),c(h.max)||c(r.userMax)||!x||r.dataMax<=0&&r.ignoreMaxPadding||(r.max+=e*x))),s(h.floor)&&(r.min=ye(r.min,h.floor)),s(h.ceiling)&&(r.max=ve(r.max,h.ceiling)),r.min===r.max||void 0===r.min||void 0===r.max?r.tickInterval=1:y&&!k&&P===r.linkedParent.options.tickPixelInterval?r.tickInterval=r.linkedParent.tickInterval:(r.tickInterval=u(k,A?1:(r.max-r.min)*P/ye(r.len,P)),c(k)||r.len>=P||this.isRadial||this.isLog||A||!d||!p||(o=!0,r.tickInterval/=4)),m&&!t&&hi(r.series,function(t){t.processData(r.min!==r.oldMin||r.max!==r.oldMax)}),r.setAxisTranslation(!0),r.beforeSetTickPositions&&r.beforeSetTickPositions(),r.postProcessTickInterval&&(r.tickInterval=r.postProcessTickInterval(r.tickInterval)),r.pointRange&&(r.tickInterval=ye(r.pointRange,r.tickInterval)),!k&&r.tickInterval<T&&(r.tickInterval=T),g||f||k||(r.tickInterval=S(r.tickInterval,null,w(r.tickInterval),u(h.allowDecimals,!(r.tickInterval>1&&r.tickInterval<5&&r.max>1e3&&r.max<9999)))),r.minorTickInterval="auto"===h.minorTickInterval&&r.tickInterval?r.tickInterval/5:h.minorTickInterval,r.tickPositions=n=h.tickPositions?[].concat(h.tickPositions):v&&v.apply(r,[r.min,r.max]),n||(!r.ordinalPositions&&(r.max-r.min)/r.tickInterval>ye(2*r.len,200)&&Z(19,!0),n=g?r.getTimeTicks(r.normalizeTimeTickInterval(r.tickInterval,h.units),r.min,r.max,h.startOfWeek,r.ordinalPositions,r.closestPointRange,!0):f?r.getLogTickPositions(r.tickInterval,r.min,r.max):r.getLinearTickPositions(r.tickInterval,r.min,r.max),o&&n.splice(1,n.length-2),r.tickPositions=n),!y){var C,L=n[0],D=n[n.length-1],I=r.minPointOffset||0;d?r.min=L:r.min-I>L&&n.shift(),p?r.max=D:r.max+I<D&&n.pop(),0===n.length&&c(L)&&n.push((D+L)/2),1===n.length&&(C=xe(r.max)>1e13?1:.001,r.min-=C,r.max+=C)}},setMaxTicks:function(){var t=this.chart,e=t.maxTicks||{},i=this.tickPositions,n=this._maxTicksKey=[this.coll,this.pos,this.len].join("-");!this.isLinked&&!this.isDatetimeAxis&&i&&i.length>(e[n]||0)&&this.options.alignTicks!==!1&&(e[n]=i.length),t.maxTicks=e},adjustTickAmount:function(){var t=this,e=t.chart,i=t._maxTicksKey,n=t.tickPositions,o=e.maxTicks;if(o&&o[i]&&!t.isDatetimeAxis&&!t.categories&&!t.isLinked&&t.options.alignTicks!==!1&&this.min!==G){var r,s=t.tickAmount,a=n.length;if(t.tickAmount=r=o[i],r>a){for(;n.length<r;)n.push(M(n[n.length-1]+t.tickInterval));t.transA*=(a-1)/(r-1),t.max=n[n.length-1]}c(s)&&r!==s&&(t.isDirty=!0)}},setScale:function(){var t,e,i,n,o=this,r=o.stacks;if(o.oldMin=o.min,o.oldMax=o.max,o.oldAxisLength=o.len,o.setAxisSize(),n=o.len!==o.oldAxisLength,hi(o.series,function(t){(t.isDirtyData||t.isDirty||t.xAxis.isDirty)&&(i=!0)}),n||i||o.isLinked||o.forceRedraw||o.userMin!==o.oldUserMin||o.userMax!==o.oldUserMax){if(!o.isXAxis)for(t in r)for(e in r[t])r[t][e].total=null,r[t][e].cum=0;o.forceRedraw=!1,o.getSeriesExtremes(),o.setTickPositions(),o.oldUserMin=o.userMin,o.oldUserMax=o.userMax,o.isDirty||(o.isDirty=n||o.min!==o.oldMin||o.max!==o.oldMax)}else if(!o.isXAxis){o.oldStacks&&(r=o.stacks=o.oldStacks);for(t in r)for(e in r[t])r[t][e].cum=r[t][e].total}o.setMaxTicks()},setExtremes:function(e,i,n,o,r){var s=this,a=s.chart;n=u(n,!0),r=t(r,{min:e,max:i}),gi(s,"setExtremes",r,function(){s.userMin=e,s.userMax=i,s.eventArgs=r,s.isDirtyExtremes=!0,n&&a.redraw(o)})},zoom:function(t,e){var i=this.dataMin,n=this.dataMax,o=this.options;return this.allowZoomOutside||(c(i)&&t<=ve(i,u(o.min,i))&&(t=G),c(n)&&e>=ye(n,u(o.max,n))&&(e=G)),this.displayBtn=t!==G||e!==G,this.setExtremes(t,e,!1,G,{trigger:"zoom"}),!0},setAxisSize:function(){var t=this.chart,e=this.options,i=e.offsetLeft||0,n=e.offsetRight||0,o=this.horiz,r=u(e.width,t.plotWidth-i+n),s=u(e.height,t.plotHeight),a=u(e.top,t.plotTop),l=u(e.left,t.plotLeft+i),h=/%$/;h.test(s)&&(s=parseInt(s,10)/100*t.plotHeight),h.test(a)&&(a=parseInt(a,10)/100*t.plotHeight+t.plotTop),this.left=l,this.top=a,this.width=r,this.height=s,this.bottom=t.chartHeight-s-a,this.right=t.chartWidth-r-l,this.len=ye(o?r:s,0),this.pos=o?l:a},getExtremes:function(){var t=this,e=t.isLog;return{min:e?M(l(t.min)):t.min,max:e?M(l(t.max)):t.max,dataMin:t.dataMin,dataMax:t.dataMax,userMin:t.userMin,userMax:t.userMax}},getThreshold:function(t){var e=this,i=e.isLog,n=i?l(e.min):e.min,o=i?l(e.max):e.max;return n>t||null===t?t=n:t>o&&(t=o),e.translate(t,0,1,0,1)},autoLabelAlign:function(t){var e,i=(u(t,0)-90*this.side+720)%360;return e=i>15&&165>i?"right":i>195&&345>i?"left":"center"},getOffset:function(){var t,e,i,n,o,r,s,a,l,h,d,p,f,g,m,y=this,v=y.chart,x=v.renderer,b=y.options,k=y.tickPositions,w=y.ticks,S=y.horiz,T=y.side,P=v.inverted?[1,0,3,2][T]:T,A=0,C=0,L=b.title,M=b.labels,D=0,I=v.axisOffset,B=v.clipOffset,O=[-1,1,1,-1][T],z=1,H=u(M.maxStaggerLines,5);if(y.hasData=t=y.hasVisibleSeries||c(y.min)&&c(y.max)&&!!k,y.showAxis=e=t||u(b.showEmpty,!0),y.staggerLines=y.horiz&&M.staggerLines,y.axisGroup||(y.gridGroup=x.g("grid").attr({zIndex:b.gridZIndex||1}).add(),y.axisGroup=x.g("axis").attr({zIndex:b.zIndex||2}).add(),y.labelGroup=x.g("axis-labels").attr({zIndex:M.zIndex||7}).addClass(_e+y.coll.toLowerCase()+"-labels").add()),t||y.isLinked){if(y.labelAlign=u(M.align||y.autoLabelAlign(M.rotation)),hi(k,function(t){w[t]?w[t].addLabel():w[t]=new R(y,t)}),y.horiz&&!y.staggerLines&&H&&!M.rotation){for(s=y.reversed?[].concat(k).reverse():k;H>z;){for(a=[],l=!1,r=0;r<s.length;r++)h=s[r],d=w[h].label&&w[h].label.getBBox(),f=d?d.width:0,g=r%z,f&&(p=y.translate(h),a[g]!==G&&p<a[g]&&(l=!0),a[g]=p+f);if(!l)break;z++}z>1&&(y.staggerLines=z)}hi(k,function(t){(0===T||2===T||{1:"left",3:"right"}[T]===y.labelAlign)&&(D=ye(w[t].getLabelSize(),D))}),y.staggerLines&&(D*=y.staggerLines,y.labelOffset=D)}else for(o in w)w[o].destroy(),delete w[o];L&&L.text&&L.enabled!==!1&&(y.axisTitle||(y.axisTitle=x.text(L.text,0,0,L.useHTML).attr({zIndex:7,rotation:L.rotation||0,align:L.textAlign||{low:"left",middle:"center",high:"right"}[L.align]}).addClass(_e+this.coll.toLowerCase()+"-title").css(L.style).add(y.axisGroup),y.axisTitle.isNew=!0),e&&(A=y.axisTitle.getBBox()[S?"height":"width"],i=L.offset,C=c(i)?0:u(L.margin,S?5:10)),y.axisTitle[e?"show":"hide"]()),y.offset=O*u(b.offset,I[T]),m=2===T?y.tickBaseline:0,n=D+C+(D&&O*(S?u(M.y,y.tickBaseline+8):M.x)-m),y.axisTitleMargin=u(i,n),I[T]=ye(I[T],y.axisTitleMargin+A+O*y.offset,n),B[P]=ye(B[P],2*ge(b.lineWidth/2))
},getLinePath:function(t){var e=this.chart,i=this.opposite,n=this.offset,o=this.horiz,r=this.left+(i?this.width:0)+n,s=e.chartHeight-this.bottom-(i?this.height:0)+n;return i&&(t*=-1),e.renderer.crispLine([$e,o?this.left:r,o?s:this.top,qe,o?e.chartWidth-this.right:r,o?s:e.chartHeight-this.bottom],t)},getTitlePosition:function(){var t=this.horiz,e=this.left,n=this.top,o=this.len,r=this.options.title,s=t?e:n,a=this.opposite,l=this.offset,h=i(r.style.fontSize||12),c={low:s+(t?0:o),middle:s+o/2,high:s+(t?o:0)}[r.align],d=(t?n+this.height:e)+(t?1:-1)*(a?-1:1)*this.axisTitleMargin+(2===this.side?h:0);return{x:t?c:d+(a?this.width:0)+l+(r.x||0),y:t?d-(a?this.height:0)+l:c+(r.y||0)}},render:function(){var t,e,i,n,o=this,r=o.horiz,s=o.reversed,a=o.chart,h=a.renderer,d=o.options,p=o.isLog,u=o.isLinked,f=o.tickPositions,g=o.axisTitle,m=o.ticks,y=o.minorTicks,v=o.alternateBands,x=d.stackLabels,b=d.alternateGridColor,k=o.tickmarkOffset,w=d.lineWidth,S=a.hasRendered,T=S&&c(o.oldMin)&&!isNaN(o.oldMin),P=o.hasData,A=o.showAxis,C=d.labels.overflow,L=o.justifyLabels=r&&C!==!1;o.labelEdge.length=0,o.justifyToPlot="justify"===C,hi([m,y,v],function(t){var e;for(e in t)t[e].isActive=!1}),(P||u)&&(o.minorTickInterval&&!o.categories&&hi(o.getMinorTickPositions(),function(t){y[t]||(y[t]=new R(o,t,"minor")),T&&y[t].isNew&&y[t].render(null,!0),y[t].render(null,!1,1)}),f.length&&(t=f.slice(),(r&&s||!r&&!s)&&t.reverse(),L&&(t=t.slice(1).concat([t[0]])),hi(t,function(e,i){L&&(i=i===t.length-1?0:i+1),u&&(e<o.min||e>o.max)||(m[e]||(m[e]=new R(o,e)),T&&m[e].isNew&&m[e].render(i,!0,.1),m[e].render(i))}),k&&0===o.min&&(m[-1]||(m[-1]=new R(o,-1,null,!0)),m[-1].render(-1))),b&&hi(f,function(t,e){e%2===0&&t<o.max&&(v[t]||(v[t]=new ce.PlotLineOrBand(o)),i=t+k,n=f[e+1]!==G?f[e+1]+k:o.max,v[t].options={from:p?l(i):i,to:p?l(n):n,color:b},v[t].render(),v[t].isActive=!0)}),o._addedPlotLB||(hi((d.plotLines||[]).concat(d.plotBands||[]),function(t){o.addPlotBandOrLine(t)}),o._addedPlotLB=!0)),hi([m,y,v],function(t){var e,i,n=[],o=V?V.duration||500:0,r=function(){for(i=n.length;i--;)t[n[i]]&&!t[n[i]].isActive&&(t[n[i]].destroy(),delete t[n[i]])};for(e in t)t[e].isActive||(t[e].render(e,!1,0),t[e].isActive=!1,n.push(e));t!==v&&a.hasRendered&&o?o&&setTimeout(r,o):r()}),w&&(e=o.getLinePath(w),o.axisLine?o.axisLine.animate({d:e}):o.axisLine=h.path(e).attr({stroke:d.lineColor,"stroke-width":w,zIndex:7}).add(o.axisGroup),o.axisLine[A?"show":"hide"]()),g&&A&&(g[g.isNew?"attr":"animate"](o.getTitlePosition()),g.isNew=!1),x&&x.enabled&&o.renderStackTotals(),o.isDirty=!1},redraw:function(){this.render(),hi(this.plotLinesAndBands,function(t){t.render()}),hi(this.series,function(t){t.isDirty=!0})},destroy:function(t){var e,i,n=this,o=n.stacks,r=n.plotLinesAndBands;t||fi(n);for(e in o)C(o[e]),o[e]=null;for(hi([n.ticks,n.minorTicks,n.alternateBands],function(t){C(t)}),i=r.length;i--;)r[i].destroy();hi(["stackTotalGroup","axisLine","axisTitle","axisGroup","cross","gridGroup","labelGroup"],function(t){n[t]&&(n[t]=n[t].destroy())}),this.cross&&this.cross.destroy()},drawCrosshair:function(t,e){if(this.crosshair){if((c(e)||!u(this.crosshair.snap,!0))===!1)return void this.hideCrosshair();var i,n,o=this.crosshair,r=o.animation;if(u(o.snap,!0)?c(e)&&(n=this.chart.inverted!=this.horiz?e.plotX:this.len-e.plotY):n=this.horiz?t.chartX-this.pos:this.len-t.chartY+this.pos,i=this.isRadial?this.getPlotLinePath(this.isXAxis?e.x:u(e.stackY,e.y)):this.getPlotLinePath(null,null,null,null,n),null===i)return void this.hideCrosshair();if(this.cross)this.cross.attr({visibility:Ue})[r?"animate":"attr"]({d:i},r);else{var s={"stroke-width":o.width||1,stroke:o.color||"#C0C0C0",zIndex:o.zIndex||2};o.dashStyle&&(s.dashstyle=o.dashStyle),this.cross=this.chart.renderer.path(i).attr(s).add()}}},hideCrosshair:function(){this.cross&&this.cross.hide()}},t(H.prototype,K),H.prototype.getTimeTicks=function(e,i,n,o){var r,s,a=[],l={},h=F.global.useUTC,d=new $(i-J),p=e.unitRange,f=e.count;if(c(i)){p<U.second||(d.setMilliseconds(0),d.setSeconds(p<U.minute?f*ge(d.getSeconds()/f):0)),p<U.minute||d[re](p<U.hour?f*ge(d[Q]()/f):0),p<U.hour||d[se](p<U.day?f*ge(d[te]()/f):0),p<U.day||d[ae](p<U.month?f*ge(d[ie]()/f):1),p<U.month||(d[le](p<U.year?f*ge(d[ne]()/f):0),s=d[oe]()),p<U.year||(s-=s%f,d[he](s)),p===U.week&&d[ae](d[ie]()-d[ee]()+u(o,1)),r=1,J&&(d=new $(d.getTime()+J)),s=d[oe]();for(var g=d.getTime(),m=d[ne](),y=d[ie](),v=(U.day+(h?J:60*d.getTimezoneOffset()*1e3))%U.day;n>g;)a.push(g),p===U.year?g=q(s+r*f,0):p===U.month?g=q(s,m+r*f):h||p!==U.day&&p!==U.week?g+=p*f:g=q(s,m,y+r*f*(p===U.day?1:7)),r++;a.push(g),hi(ci(a,function(t){return p<=U.hour&&t%U.day===v}),function(t){l[t]="day"})}return a.info=t(e,{higherRanks:l,totalRange:p*f}),a},H.prototype.normalizeTimeTickInterval=function(t,e){var i,n,o=e||[["millisecond",[1,2,5,10,20,25,50,100,200,500]],["second",[1,2,5,10,15,30]],["minute",[1,2,5,10,15,30]],["hour",[1,2,3,4,6,8,12]],["day",[1,2]],["week",[1,2]],["month",[1,2,3,4,6]],["year",null]],r=o[o.length-1],s=U[r[0]],a=r[1];for(n=0;n<o.length;n++)if(r=o[n],s=U[r[0]],a=r[1],o[n+1]){var l=(s*a[a.length-1]+U[o[n+1][0]])/2;if(l>=t)break}return s===U.year&&5*s>t&&(a=[1,2,5]),i=S(t/s,a,"year"===r[0]?ye(w(t/s),1):1),{unitRange:s,count:i,unitName:r[0]}},H.prototype.getLogTickPositions=function(t,e,i,n){var o=this,r=o.options,s=o.len,h=[];if(n||(o._minorAutoInterval=null),.5>t)if(t<.08){var c=l(e),d=l(i),p=r[n?"minorTickInterval":"tickInterval"],f="auto"===p?null:p,g=r.tickPixelInterval/(n?5:1),m=n?s/o.tickPositions.length:s;t=u(f,o._minorAutoInterval,(d-c)*g/(m||1)),t=S(t,null,w(t)),h=pi(o.getLinearTickPositions(t,c,d),a),n||(o._minorAutoInterval=t/5)}else{var y,v,x,b,k,T,P,A=ge(e);for(y=t>.3?[1,2,4]:t>.15?[1,2,4,6,8]:[1,2,3,4,5,6,7,8,9],v=A;i+1>v&&!P;v++)for(b=y.length,x=0;b>x&&!P;x++)k=a(l(v)*y[x]),e>=k||n&&T>i||T===G||h.push(T),T>i&&(P=!0),T=k}else t=fe(t),h=o.getLinearTickPositions(t,e,i);return n||(o.tickInterval=t),h};var Bi=ce.Tooltip=function(){this.init.apply(this,arguments)};Bi.prototype={init:function(t,e){var n=e.borderWidth,o=e.style,r=i(o.padding);this.chart=t,this.options=e,this.crosshairs=[],this.now={x:0,y:0},this.isHidden=!0,this.label=t.renderer.label("",0,0,e.shape||"callout",null,null,e.useHTML,null,"tooltip").attr({padding:r,fill:e.backgroundColor,"stroke-width":n,r:e.borderRadius,zIndex:8}).css(o).css({padding:0}).add().attr({y:-9999}),ze||this.label.shadow(e.shadow),this.shared=e.shared},destroy:function(){this.label&&(this.label=this.label.destroy()),clearTimeout(this.hideTimer),clearTimeout(this.tooltipTimeout)},move:function(e,i,n,o){var r=this,s=r.now,a=r.options.animation!==!1&&!r.isHidden&&(xe(e-s.x)>1||xe(i-s.y)>1),l=r.followPointer||r.len>1;t(s,{x:a?(2*s.x+e)/3:e,y:a?(s.y+i)/2:i,anchorX:l?G:a?(2*s.anchorX+n)/3:n,anchorY:l?G:a?(s.anchorY+o)/2:o}),r.label.attr(s),a&&(clearTimeout(this.tooltipTimeout),this.tooltipTimeout=setTimeout(function(){r&&r.move(e,i,n,o)},32))},hide:function(t){var e,i=this;clearTimeout(this.hideTimer),this.isHidden||(e=this.chart.hoverPoints,this.hideTimer=setTimeout(function(){i.label.fadeOut(),i.isHidden=!0},u(t,this.options.hideDelay,500)),e&&hi(e,function(t){t.setState()}),this.chart.hoverPoints=null)},getAnchor:function(t,e){var i,n,o=this.chart,r=o.inverted,s=o.plotTop,a=0,l=0;return t=p(t),i=t[0].tooltipPos,this.followPointer&&e&&(e.chartX===G&&(e=o.pointer.normalize(e)),i=[e.chartX-o.plotLeft,e.chartY-s]),i||(hi(t,function(t){n=t.series.yAxis,a+=t.plotX,l+=(t.plotLow?(t.plotLow+t.plotHigh)/2:t.plotY)+(!r&&n?n.top-s:0)}),a/=t.length,l/=t.length,i=[r?o.plotWidth-l:a,this.shared&&!r&&t.length>1&&e?e.chartY-s:r?o.plotHeight-a:l]),pi(i,fe)},getPosition:function(t,e,i){var n,o=this.chart,r=this.distance,s={},a=["y",o.chartHeight,e,i.plotY+o.plotTop],l=["x",o.chartWidth,t,i.plotX+o.plotLeft],h=i.ttBelow||o.inverted&&!i.negative||!o.inverted&&i.negative,c=function(t,e,i,n){var o=n-r>i,a=e>n+r+i,l=n-r-i,c=n+r;if(h&&a)s[t]=c;else if(!h&&o)s[t]=l;else if(o)s[t]=l;else{if(!a)return!1;s[t]=c}},d=function(t,e,i,n){return r>n||n>e-r?!1:void(s[t]=i/2>n?1:n>e-i/2?e-i-2:n-i/2)},p=function(t){var e=a;a=l,l=e,n=t},u=function(){c.apply(0,a)!==!1?d.apply(0,l)!==!1||n||(p(!0),u()):n?s.x=s.y=0:(p(!0),u())};return(o.inverted||this.len>1)&&p(),u(),s},defaultFormatter:function(t){var e,i=this.points||p(this),n=i[0].series;return e=[t.tooltipHeaderFormatter(i[0])],hi(i,function(t){n=t.series,e.push(n.tooltipFormatter&&n.tooltipFormatter(t)||t.point.tooltipFormatter(n.tooltipOptions.pointFormat))}),e.push(t.options.footerFormat||""),e.join("")},refresh:function(t,e){var i,n,o,r,s,a,l=this,h=l.chart,c=l.label,d=l.options,f={},g=[],m=d.formatter||l.defaultFormatter,y=h.hoverPoints,v=l.shared;clearTimeout(this.hideTimer),l.followPointer=p(t)[0].series.tooltipOptions.followPointer,o=l.getAnchor(t,e),i=o[0],n=o[1],!v||t.series&&t.series.noSharedTooltip?f=t.getLabelConfig():(h.hoverPoints=t,y&&hi(y,function(t){t.setState()}),hi(t,function(t){t.setState(ti),g.push(t.getLabelConfig())}),f={x:t[0].category,y:t[0].y},f.points=g,this.len=g.length,t=t[0]),r=m.call(f,l),a=t.series,this.distance=u(a.tooltipOptions.distance,16),r===!1?this.hide():(l.isHidden&&(vi(c),c.attr("opacity",1).show()),c.attr({text:r}),s=d.borderColor||t.color||a.color||"#606060",c.attr({stroke:s}),l.updatePosition({plotX:i,plotY:n,negative:t.negative,ttBelow:t.ttBelow}),this.isHidden=!1),gi(h,"tooltipRefresh",{text:r,x:i+h.plotLeft,y:n+h.plotTop,borderColor:s})},updatePosition:function(t){var e=this.chart,i=this.label,n=(this.options.positioner||this.getPosition).call(this,i.width,i.height,t);this.move(fe(n.x),fe(n.y),t.plotX+e.plotLeft,t.plotY+e.plotTop)},tooltipHeaderFormatter:function(t){var e,i=t.series,n=i.tooltipOptions,o=n.dateTimeLabelFormats,r=n.xDateFormat,a=i.xAxis,l=a&&"datetime"===a.options.type&&s(t.key),h=n.headerFormat,c=a&&a.closestPointRange;if(l&&!r){if(c){for(e in U)if(U[e]>=c||U[e]<=U.day&&t.key%U[e]>0){r=o[e];break}}else r=o.day;r=r||o.year}return l&&r&&(h=h.replace("{point.key}","{point.key:"+r+"}")),k(h,{point:t,series:i})}};var Oi;Y=de.documentElement.ontouchstart!==G;var zi=ce.Pointer=function(t,e){this.init(t,e)};if(zi.prototype={init:function(t,e){var i,n,o=e.chart,r=o.events,s=ze?"":o.zoomType,a=t.inverted;this.options=e,this.chart=t,this.zoomX=i=/x/.test(s),this.zoomY=n=/y/.test(s),this.zoomHor=i&&!a||n&&a,this.zoomVert=n&&!a||i&&a,this.hasZoom=i||n,this.runChartClick=r&&!!r.click,this.pinchDown=[],this.lastValidTouch={},ce.Tooltip&&e.tooltip.enabled&&(t.tooltip=new Bi(t,e.tooltip),this.followTouchMove=e.tooltip.followTouchMove),this.setDOMEvents()},normalize:function(e,i){var n,o,r;return e=e||window.event,e=mi(e),e.target||(e.target=e.srcElement),r=e.touches?e.touches.length?e.touches.item(0):e.changedTouches[0]:e,i||(this.chartPosition=i=di(this.chart.container)),r.pageX===G?(n=ye(e.x,e.clientX-i.left),o=e.y):(n=r.pageX-i.left,o=r.pageY-i.top),t(e,{chartX:fe(n),chartY:fe(o)})},getCoordinates:function(t){var e={xAxis:[],yAxis:[]};return hi(this.chart.axes,function(i){e[i.isXAxis?"xAxis":"yAxis"].push({axis:i,value:i.toValue(t[i.horiz?"chartX":"chartY"])})}),e},getIndex:function(t){var e=this.chart;return e.inverted?e.plotHeight+e.plotTop-t.chartY:t.chartX-e.plotLeft},runPointActions:function(t){var e,i,n,o,r,s,a=this,l=a.chart,h=l.series,c=l.tooltip,d=l.hoverPoint,p=l.hoverSeries,f=l.chartWidth,g=a.getIndex(t);if(c&&a.options.tooltip.shared&&(!p||!p.noSharedTooltip)){for(n=[],o=h.length,r=0;o>r;r++)h[r].visible&&h[r].options.enableMouseTracking!==!1&&!h[r].noSharedTooltip&&h[r].singularTooltips!==!0&&h[r].tooltipPoints.length&&(i=h[r].tooltipPoints[g],i&&i.series&&(i._dist=xe(g-i.clientX),f=ve(f,i._dist),n.push(i)));for(o=n.length;o--;)n[o]._dist>f&&n.splice(o,1);n.length&&n[0].clientX!==a.hoverX&&(c.refresh(n,t),a.hoverX=n[0].clientX)}e=p&&p.tooltipOptions.followPointer,p&&p.tracker&&!e?(i=p.tooltipPoints[g],i&&i!==d&&i.onMouseOver(t)):c&&e&&!c.isHidden&&(s=c.getAnchor([{}],t),c.updatePosition({plotX:s[0],plotY:s[1]})),c&&!a._onDocumentMouseMove&&(a._onDocumentMouseMove=function(t){Ee[Oi]&&Ee[Oi].pointer.onDocumentMouseMove(t)},ui(de,"mousemove",a._onDocumentMouseMove)),hi(l.axes,function(e){e.drawCrosshair(t,u(i,d))})},reset:function(t,e){var i=this,n=i.chart,o=n.hoverSeries,r=n.hoverPoint,s=n.tooltip,a=s&&s.shared?n.hoverPoints:r;t=t&&s&&a,t&&p(a)[0].plotX===G&&(t=!1),t?(s.refresh(a),r&&r.setState(r.state,!0)):(r&&r.onMouseOut(),o&&o.onMouseOut(),s&&s.hide(e),i._onDocumentMouseMove&&(fi(de,"mousemove",i._onDocumentMouseMove),i._onDocumentMouseMove=null),hi(n.axes,function(t){t.hideCrosshair()}),i.hoverX=null)},scaleGroups:function(t,e){var i,n=this.chart;hi(n.series,function(o){i=t||o.getPlotBox(),o.xAxis&&o.xAxis.zoomEnabled&&(o.group.attr(i),o.markerGroup&&(o.markerGroup.attr(i),o.markerGroup.clip(e?n.clipRect:null)),o.dataLabelsGroup&&o.dataLabelsGroup.attr(i))}),n.clipRect.attr(e||n.clipBox)},dragStart:function(t){var e=this.chart;e.mouseIsDown=t.type,e.cancelClick=!1,e.mouseDownX=this.mouseDownX=t.chartX,e.mouseDownY=this.mouseDownY=t.chartY},drag:function(t){var e,i,n=this.chart,o=n.options.chart,r=t.chartX,s=t.chartY,a=this.zoomHor,l=this.zoomVert,h=n.plotLeft,c=n.plotTop,d=n.plotWidth,p=n.plotHeight,u=this.mouseDownX,f=this.mouseDownY,g=o.panKey&&t[o.panKey+"Key"];h>r?r=h:r>h+d&&(r=h+d),c>s?s=c:s>c+p&&(s=c+p),this.hasDragged=Math.sqrt(Math.pow(u-r,2)+Math.pow(f-s,2)),this.hasDragged>10&&(e=n.isInsidePlot(u-h,f-c),n.hasCartesianSeries&&(this.zoomX||this.zoomY)&&e&&!g&&(this.selectionMarker||(this.selectionMarker=n.renderer.rect(h,c,a?1:d,l?1:p,0).attr({fill:o.selectionMarkerFill||"rgba(69,114,167,0.25)",zIndex:7}).add())),this.selectionMarker&&a&&(i=r-u,this.selectionMarker.attr({width:xe(i),x:(i>0?0:i)+u})),this.selectionMarker&&l&&(i=s-f,this.selectionMarker.attr({height:xe(i),y:(i>0?0:i)+f})),e&&!this.selectionMarker&&o.panning&&n.pan(t,o.panning))},drop:function(e){var i=this.chart,n=this.hasPinched;if(this.selectionMarker){var o,r={xAxis:[],yAxis:[],originalEvent:e.originalEvent||e},s=this.selectionMarker,a=s.attr?s.attr("x"):s.x,l=s.attr?s.attr("y"):s.y,h=s.attr?s.attr("width"):s.width,c=s.attr?s.attr("height"):s.height;(this.hasDragged||n)&&(hi(i.axes,function(t){if(t.zoomEnabled){var i=t.horiz,n="touchend"===e.type?t.minPixelPadding:0,s=t.toValue((i?a:l)+n),d=t.toValue((i?a+h:l+c)-n);isNaN(s)||isNaN(d)||(r[t.coll].push({axis:t,min:ve(s,d),max:ye(s,d)}),o=!0)}}),o&&gi(i,"selection",r,function(e){i.zoom(t(e,n?{animation:!1}:null))})),this.selectionMarker=this.selectionMarker.destroy(),n&&this.scaleGroups()}i&&(f(i.container,{cursor:i._cursor}),i.cancelClick=this.hasDragged>10,i.mouseIsDown=this.hasDragged=this.hasPinched=!1,this.pinchDown=[])},onContainerMouseDown:function(t){t=this.normalize(t),t.preventDefault&&t.preventDefault(),this.dragStart(t)},onDocumentMouseUp:function(t){Ee[Oi]&&Ee[Oi].pointer.drop(t)},onDocumentMouseMove:function(t){var e=this.chart,i=this.chartPosition,n=e.hoverSeries;t=this.normalize(t,i),i&&n&&!this.inClass(t.target,"highcharts-tracker")&&!e.isInsidePlot(t.chartX-e.plotLeft,t.chartY-e.plotTop)&&this.reset()},onContainerMouseLeave:function(){var t=Ee[Oi];t&&(t.pointer.reset(),t.pointer.chartPosition=null)},onContainerMouseMove:function(t){var e=this.chart;Oi=e.index,t=this.normalize(t),t.returnValue=!1,"mousedown"===e.mouseIsDown&&this.drag(t),!this.inClass(t.target,"highcharts-tracker")&&!e.isInsidePlot(t.chartX-e.plotLeft,t.chartY-e.plotTop)||e.openMenu||this.runPointActions(t)},inClass:function(t,e){for(var i;t;){if(i=d(t,"class")){if(-1!==i.indexOf(e))return!0;if(-1!==i.indexOf(_e+"container"))return!1}t=t.parentNode}},onTrackerMouseOut:function(t){var e=this.chart.hoverSeries,i=t.relatedTarget||t.toElement,n=i&&i.point&&i.point.series;!e||e.options.stickyTracking||this.inClass(i,_e+"tooltip")||n===e||e.onMouseOut()},onContainerClick:function(e){var i=this.chart,n=i.hoverPoint,o=i.plotLeft,r=i.plotTop;e=this.normalize(e),e.cancelBubble=!0,i.cancelClick||(n&&this.inClass(e.target,_e+"tracker")?(gi(n.series,"click",t(e,{point:n})),i.hoverPoint&&n.firePointEvent("click",e)):(t(e,this.getCoordinates(e)),i.isInsidePlot(e.chartX-o,e.chartY-r)&&gi(i,"click",e)))},setDOMEvents:function(){var t=this,e=t.chart.container;e.onmousedown=function(e){t.onContainerMouseDown(e)},e.onmousemove=function(e){t.onContainerMouseMove(e)},e.onclick=function(e){t.onContainerClick(e)},ui(e,"mouseleave",t.onContainerMouseLeave),1===Ge&&ui(de,"mouseup",t.onDocumentMouseUp),Y&&(e.ontouchstart=function(e){t.onContainerTouchStart(e)},e.ontouchmove=function(e){t.onContainerTouchMove(e)},1===Ge&&ui(de,"touchend",t.onDocumentTouchEnd))},destroy:function(){var t;fi(this.chart.container,"mouseleave",this.onContainerMouseLeave),Ge||(fi(de,"mouseup",this.onDocumentMouseUp),fi(de,"touchend",this.onDocumentTouchEnd)),clearInterval(this.tooltipTimeout);for(t in this)this[t]=null}},t(ce.Pointer.prototype,{pinchTranslate:function(t,e,i,n,o,r){(this.zoomHor||this.pinchHor)&&this.pinchTranslateDirection(!0,t,e,i,n,o,r),(this.zoomVert||this.pinchVert)&&this.pinchTranslateDirection(!1,t,e,i,n,o,r)},pinchTranslateDirection:function(t,e,i,n,o,r,s,a){var l,h,c,d,p,u,f=this.chart,g=t?"x":"y",m=t?"X":"Y",y="chart"+m,v=t?"width":"height",x=f["plot"+(t?"Left":"Top")],b=a||1,k=f.inverted,w=f.bounds[t?"h":"v"],S=1===e.length,T=e[0][y],P=i[0][y],A=!S&&e[1][y],C=!S&&i[1][y],L=function(){!S&&xe(T-A)>20&&(b=a||xe(P-C)/xe(T-A)),c=(x-P)/b+T,l=f["plot"+(t?"Width":"Height")]/b};L(),h=c,h<w.min?(h=w.min,d=!0):h+l>w.max&&(h=w.max-l,d=!0),d?(P-=.8*(P-s[g][0]),S||(C-=.8*(C-s[g][1])),L()):s[g]=[P,C],k||(r[g]=c-x,r[v]=l),u=k?t?"scaleY":"scaleX":"scale"+m,p=k?1/b:b,o[v]=l,o[g]=h,n[u]=b,n["translate"+m]=p*x+(P-p*T)},pinch:function(e){var i=this,n=i.chart,o=i.pinchDown,r=i.followTouchMove,s=e.touches,a=s.length,l=i.lastValidTouch,h=i.hasZoom,c=i.selectionMarker,d={},p=1===a&&(i.inClass(e.target,_e+"tracker")&&n.runTrackerClick||i.runChartClick),f={};!h&&!r||p||e.preventDefault(),pi(s,function(t){return i.normalize(t)}),"touchstart"===e.type?(hi(s,function(t,e){o[e]={chartX:t.chartX,chartY:t.chartY}}),l.x=[o[0].chartX,o[1]&&o[1].chartX],l.y=[o[0].chartY,o[1]&&o[1].chartY],hi(n.axes,function(t){if(t.zoomEnabled){var e=n.bounds[t.horiz?"h":"v"],i=t.minPixelPadding,o=t.toPixels(u(t.options.min,t.dataMin)),r=t.toPixels(u(t.options.max,t.dataMax)),s=ve(o,r),a=ye(o,r);e.min=ve(t.pos,s-i),e.max=ye(t.pos+t.len,a+i)}}),i.res=!0):o.length&&(c||(i.selectionMarker=c=t({destroy:Xe},n.plotBox)),i.pinchTranslate(o,s,d,c,f,l),i.hasPinched=h,i.scaleGroups(d,f),!h&&r&&1===a?this.runPointActions(i.normalize(e)):i.res&&(i.res=!1,this.reset(!1,0)))},onContainerTouchStart:function(t){var e=this.chart;Oi=e.index,1===t.touches.length?(t=this.normalize(t),e.isInsidePlot(t.chartX-e.plotLeft,t.chartY-e.plotTop)?(this.runPointActions(t),this.pinch(t)):this.reset()):2===t.touches.length&&this.pinch(t)},onContainerTouchMove:function(t){(1===t.touches.length||2===t.touches.length)&&this.pinch(t)},onDocumentTouchEnd:function(t){Ee[Oi]&&Ee[Oi].pointer.drop(t)}}),pe.PointerEvent||pe.MSPointerEvent){var Ri={},Hi=!!pe.PointerEvent,Xi=function(){var t,e=[];e.item=function(t){return this[t]};for(t in Ri)Ri.hasOwnProperty(t)&&e.push({pageX:Ri[t].pageX,pageY:Ri[t].pageY,target:Ri[t].target});return e},Ei=function(t,e,i,n){var o;t=t.originalEvent||t,"touch"!==t.pointerType&&t.pointerType!==t.MSPOINTER_TYPE_TOUCH||!Ee[Oi]||(n(t),o=Ee[Oi].pointer,o[e]({type:i,target:t.currentTarget,preventDefault:Xe,touches:Xi()}))};t(zi.prototype,{onContainerPointerDown:function(t){Ei(t,"onContainerTouchStart","touchstart",function(t){Ri[t.pointerId]={pageX:t.pageX,pageY:t.pageY,target:t.currentTarget}})},onContainerPointerMove:function(t){Ei(t,"onContainerTouchMove","touchmove",function(t){Ri[t.pointerId]={pageX:t.pageX,pageY:t.pageY},Ri[t.pointerId].target||(Ri[t.pointerId].target=t.currentTarget)})},onDocumentPointerUp:function(t){Ei(t,"onContainerTouchEnd","touchend",function(t){delete Ri[t.pointerId]})},batchMSEvents:function(t){t(this.chart.container,Hi?"pointerdown":"MSPointerDown",this.onContainerPointerDown),t(this.chart.container,Hi?"pointermove":"MSPointerMove",this.onContainerPointerMove),t(de,Hi?"pointerup":"MSPointerUp",this.onDocumentPointerUp)}}),x(zi.prototype,"init",function(t,e,i){t.call(this,e,i),(this.hasZoom||this.followTouchMove)&&f(e.container,{"-ms-touch-action":Ke,"touch-action":Ke})}),x(zi.prototype,"setDOMEvents",function(t){t.apply(this),(this.hasZoom||this.followTouchMove)&&this.batchMSEvents(ui)}),x(zi.prototype,"destroy",function(t){this.batchMSEvents(fi),t.call(this)})}var Gi=ce.Legend=function(t,e){this.init(t,e)};Gi.prototype={init:function(t,i){var n=this,o=i.itemStyle,r=u(i.padding,8),s=i.itemMarginTop||0;this.options=i,i.enabled&&(n.itemStyle=o,n.itemHiddenStyle=e(o,i.itemHiddenStyle),n.itemMarginTop=s,n.padding=r,n.initialItemX=r,n.initialItemY=r-5,n.maxItemWidth=0,n.chart=t,n.itemHeight=0,n.lastLineHeight=0,n.symbolWidth=u(i.symbolWidth,16),n.pages=[],n.render(),ui(n.chart,"endResize",function(){n.positionCheckboxes()}))},colorizeItem:function(t,e){var i,n,o=this,r=o.options,s=t.legendItem,a=t.legendLine,l=t.legendSymbol,h=o.itemHiddenStyle.color,c=e?r.itemStyle.color:h,d=e?t.legendColor||t.color||"#CCC":h,p=t.options&&t.options.marker,u={fill:d};if(s&&s.css({fill:c,color:c}),a&&a.attr({stroke:d}),l){if(p&&l.isMarker){u.stroke=d,p=t.convertAttribs(p);for(i in p)n=p[i],n!==G&&(u[i]=n)}l.attr(u)}},positionItem:function(t){var e=this,i=e.options,n=i.symbolPadding,o=!i.rtl,r=t._legendItemPos,s=r[0],a=r[1],l=t.checkbox;t.legendGroup&&t.legendGroup.translate(o?s:e.legendWidth-s-2*n-4,a),l&&(l.x=s,l.y=a)},destroyItem:function(t){var e=t.checkbox;hi(["legendItem","legendLine","legendSymbol","legendGroup"],function(e){t[e]&&(t[e]=t[e].destroy())}),e&&L(t.checkbox)},destroy:function(){var t=this,e=t.group,i=t.box;i&&(t.box=i.destroy()),e&&(t.group=e.destroy())},positionCheckboxes:function(t){var e,i=this.group.alignAttr,n=this.clipHeight||this.legendHeight;i&&(e=i.translateY,hi(this.allItems,function(o){var r,s=o.checkbox;s&&(r=e+s.y+(t||0)+3,f(s,{left:i.translateX+o.checkboxOffset+s.x-20+Ze,top:r+Ze,display:r>e-6&&e+n-6>r?"":Ke}))}))},renderTitle:function(){var t,e=this.options,i=this.padding,n=e.title,o=0;n.text&&(this.title||(this.title=this.chart.renderer.label(n.text,i-3,i-4,null,null,null,null,null,"legend-title").attr({zIndex:1}).css(n.style).add(this.group)),t=this.title.getBBox(),o=t.height,this.offsetWidth=t.width,this.contentGroup.attr({translateY:o})),this.titleHeight=o},renderItem:function(t){var i,n,o,r=this,s=r.chart,a=s.renderer,l=r.options,h="horizontal"===l.layout,c=r.symbolWidth,d=l.symbolPadding,p=r.itemStyle,f=r.itemHiddenStyle,g=r.padding,m=h?u(l.itemDistance,20):0,y=!l.rtl,v=l.width,x=l.itemMarginBottom||0,b=r.itemMarginTop,w=r.initialItemX,S=t.legendItem,T=t.series&&t.series.drawLegendSymbol?t.series:t,P=T.options,A=r.createCheckboxForItem&&P&&P.showCheckbox,C=l.useHTML;S||(t.legendGroup=a.g("legend-item").attr({zIndex:1}).add(r.scrollGroup),t.legendItem=S=a.text(l.labelFormat?k(l.labelFormat,t):l.labelFormatter.call(t),y?c+d:-d,r.baseline||0,C).css(e(t.visible?p:f)).attr({align:y?"left":"right",zIndex:2}).add(t.legendGroup),r.baseline||(r.baseline=a.fontMetrics(p.fontSize,S).f+3+b,S.attr("y",r.baseline)),T.drawLegendSymbol(r,t),r.setItemEvents&&r.setItemEvents(t,S,C,p,f),r.colorizeItem(t,t.visible),A&&r.createCheckboxForItem(t)),n=S.getBBox(),o=t.checkboxOffset=l.itemWidth||t.legendItemWidth||c+d+n.width+m+(A?20:0),r.itemHeight=i=fe(t.legendItemHeight||n.height),h&&r.itemX-w+o>(v||s.chartWidth-2*g-w-l.x)&&(r.itemX=w,r.itemY+=b+r.lastLineHeight+x,r.lastLineHeight=0),r.maxItemWidth=ye(r.maxItemWidth,o),r.lastItemY=b+r.itemY+x,r.lastLineHeight=ye(i,r.lastLineHeight),t._legendItemPos=[r.itemX,r.itemY],h?r.itemX+=o:(r.itemY+=b+i+x,r.lastLineHeight=i),r.offsetWidth=v||ye((h?r.itemX-w-m:o)+g,r.offsetWidth)},getAllItems:function(){var t=[];return hi(this.chart.series,function(e){var i=e.options;u(i.showInLegend,c(i.linkedTo)?!1:G,!0)&&(t=t.concat(e.legendItems||("point"===i.legendType?e.data:e)))}),t},render:function(){var e,i,n,o,r=this,s=r.chart,a=s.renderer,l=r.group,h=r.box,c=r.options,d=r.padding,p=c.borderWidth,u=c.backgroundColor;r.itemX=r.initialItemX,r.itemY=r.initialItemY,r.offsetWidth=0,r.lastItemY=0,l||(r.group=l=a.g("legend").attr({zIndex:7}).add(),r.contentGroup=a.g().attr({zIndex:1}).add(l),r.scrollGroup=a.g().add(r.contentGroup)),r.renderTitle(),e=r.getAllItems(),T(e,function(t,e){return(t.options&&t.options.legendIndex||0)-(e.options&&e.options.legendIndex||0)}),c.reversed&&e.reverse(),r.allItems=e,r.display=i=!!e.length,hi(e,function(t){r.renderItem(t)}),n=c.width||r.offsetWidth,o=r.lastItemY+r.lastLineHeight+r.titleHeight,o=r.handleOverflow(o),(p||u)&&(n+=d,o+=d,h?n>0&&o>0&&(h[h.isNew?"attr":"animate"](h.crisp({width:n,height:o})),h.isNew=!1):(r.box=h=a.rect(0,0,n,o,c.borderRadius,p||0).attr({stroke:c.borderColor,"stroke-width":p||0,fill:u||Ke}).add(l).shadow(c.shadow),h.isNew=!0),h[i?"show":"hide"]()),r.legendWidth=n,r.legendHeight=o,hi(e,function(t){r.positionItem(t)}),i&&l.align(t({width:n,height:o},c),!0,"spacingBox"),s.isResizing||this.positionCheckboxes()},handleOverflow:function(t){var e,i,n=this,o=this.chart,r=o.renderer,s=this.options,a=s.y,l="top"===s.verticalAlign,h=o.spacingBox.height+(l?-a:a)-this.padding,c=s.maxHeight,d=this.clipRect,p=s.navigation,f=u(p.animation,!0),g=p.arrowSize||12,m=this.nav,y=this.pages,v=this.allItems;return"horizontal"===s.layout&&(h/=2),c&&(h=ve(h,c)),y.length=0,t>h&&!s.useHTML?(this.clipHeight=e=ye(h-20-this.titleHeight-this.padding,0),this.currentPage=u(this.currentPage,1),this.fullHeight=t,hi(v,function(t,n){var o=t._legendItemPos[1],r=fe(t.legendItem.getBBox().height),s=y.length;(!s||o-y[s-1]>e&&(i||o)!==y[s-1])&&(y.push(i||o),s++),n===v.length-1&&o+r-y[s-1]>e&&y.push(o),o!==i&&(i=o)}),d||(d=n.clipRect=r.clipRect(0,this.padding,9999,0),n.contentGroup.clip(d)),d.attr({height:e}),m||(this.nav=m=r.g().attr({zIndex:1}).add(this.group),this.up=r.symbol("triangle",0,0,g,g).on("click",function(){n.scroll(-1,f)}).add(m),this.pager=r.text("",15,10).css(p.style).add(m),this.down=r.symbol("triangle-down",0,0,g,g).on("click",function(){n.scroll(1,f)}).add(m)),n.scroll(0),t=h):m&&(d.attr({height:o.chartHeight}),m.hide(),this.scrollGroup.attr({translateY:1}),this.clipHeight=0),t},scroll:function(t,e){var i,n=this.pages,o=n.length,r=this.currentPage+t,s=this.clipHeight,a=this.options.navigation,l=a.activeColor,h=a.inactiveColor,c=this.pager,d=this.padding;r>o&&(r=o),r>0&&(e!==G&&D(e,this.chart),this.nav.attr({translateX:d,translateY:s+this.padding+7+this.titleHeight,visibility:Ue}),this.up.attr({fill:1===r?h:l}).css({cursor:1===r?"default":"pointer"}),c.attr({text:r+"/"+o}),this.down.attr({x:18+this.pager.getBBox().width,fill:r===o?h:l}).css({cursor:r===o?"default":"pointer"}),i=-n[r-1]+this.initialItemY,this.scrollGroup.animate({translateY:i}),this.currentPage=r,this.positionCheckboxes(i))}};var Wi=ce.LegendSymbolMixin={drawRectangle:function(t,e){var i=t.options.symbolHeight||12;e.legendSymbol=this.chart.renderer.rect(0,t.baseline-5-i/2,t.symbolWidth,i,t.options.symbolRadius||0).attr({zIndex:3}).add(e.legendGroup)},drawLineMarker:function(t){var e,i,n,o=this.options,r=o.marker,s=t.options,a=t.symbolWidth,l=this.chart.renderer,h=this.legendGroup,c=t.baseline-fe(.3*l.fontMetrics(s.itemStyle.fontSize,this.legendItem).b);o.lineWidth&&(n={"stroke-width":o.lineWidth},o.dashStyle&&(n.dashstyle=o.dashStyle),this.legendLine=l.path([$e,0,c,qe,a,c]).attr(n).add(h)),r&&r.enabled!==!1&&(e=r.radius,this.legendSymbol=i=l.symbol(this.symbol,a/2-e,c-e,2*e,2*e).add(h),i.isMarker=!0)}};(/Trident\/7\.0/.test(Te)||Me)&&x(Gi.prototype,"positionItem",function(t,e){var i=this,n=function(){e._legendItemPos&&t.call(i,e)};n(),setTimeout(n)}),X.prototype={init:function(t,i){var n,o=t.series;t.series=null,n=e(F,t),n.series=t.series=o,this.userOptions=t;var r=n.chart;this.margin=this.splashArray("margin",r),this.spacing=this.splashArray("spacing",r);var s=r.events;this.bounds={h:{},v:{}},this.callback=i,this.isResizing=0,this.options=n,this.axes=[],this.series=[],this.hasCartesianSeries=r.showAxes;var a,l=this;if(l.index=Ee.length,Ee.push(l),Ge++,r.reflow!==!1&&ui(l,"load",function(){l.initReflow()}),s)for(a in s)ui(l,a,s[a]);l.xAxis=[],l.yAxis=[],l.animation=ze?!1:u(r.animation,!0),l.pointCount=l.colorCounter=l.symbolCounter=0,l.firstRender()},initSeries:function(t){var e,i=this,n=i.options.chart,o=t.type||n.type||n.defaultSeriesType,r=ni[o];return r||Z(17,!0),e=new r,e.init(this,t),e},isInsidePlot:function(t,e,i){var n=i?e:t,o=i?t:e;return!(0>n||n>this.plotWidth||0>o||o>this.plotHeight)},adjustTickAmounts:function(){this.options.chart.alignTicks!==!1&&hi(this.axes,function(t){t.adjustTickAmount()}),this.maxTicks=null},redraw:function(e){var i,n,o,r=this,s=r.axes,a=r.series,l=r.pointer,h=r.legend,c=r.isDirtyLegend,d=r.hasCartesianSeries,p=r.isDirtyBox,u=a.length,f=u,g=r.renderer,m=g.isHidden(),y=[];for(D(e,r),m&&r.cloneRenderTo(),r.layOutTitles();f--;)if(o=a[f],o.options.stacking&&(i=!0,o.isDirty)){n=!0;break}if(n)for(f=u;f--;)o=a[f],o.options.stacking&&(o.isDirty=!0);hi(a,function(t){t.isDirty&&"point"===t.options.legendType&&(c=!0)}),c&&h.options.enabled&&(h.render(),r.isDirtyLegend=!1),i&&r.getStacks(),d&&(r.isResizing||(r.maxTicks=null,hi(s,function(t){t.setScale()})),r.adjustTickAmounts()),r.getMargins(),d&&(hi(s,function(t){t.isDirty&&(p=!0)}),hi(s,function(e){e.isDirtyExtremes&&(e.isDirtyExtremes=!1,y.push(function(){gi(e,"afterSetExtremes",t(e.eventArgs,e.getExtremes())),delete e.eventArgs})),(p||i)&&e.redraw()})),p&&r.drawChartBox(),hi(a,function(t){t.isDirty&&t.visible&&(!t.isCartesian||t.xAxis)&&t.redraw()}),l&&l.reset(!0),g.draw(),gi(r,"redraw"),m&&r.cloneRenderTo(!0),hi(y,function(t){t.call()})},get:function(t){var e,i,n,o=this,r=o.axes,s=o.series;for(e=0;e<r.length;e++)if(r[e].options.id===t)return r[e];for(e=0;e<s.length;e++)if(s[e].options.id===t)return s[e];for(e=0;e<s.length;e++)for(n=s[e].points||[],i=0;i<n.length;i++)if(n[i].id===t)return n[i];return null},getAxes:function(){var t,e,i=this,n=this.options,o=n.xAxis=p(n.xAxis||{}),r=n.yAxis=p(n.yAxis||{});hi(o,function(t,e){t.index=e,t.isX=!0}),hi(r,function(t,e){t.index=e}),t=o.concat(r),hi(t,function(t){e=new H(i,t)}),i.adjustTickAmounts()},getSelectedPoints:function(){var t=[];return hi(this.series,function(e){t=t.concat(ci(e.points||[],function(t){return t.selected}))}),t},getSelectedSeries:function(){return ci(this.series,function(t){return t.selected})},getStacks:function(){var t=this;hi(t.yAxis,function(t){t.stacks&&t.hasVisibleSeries&&(t.oldStacks=t.stacks)}),hi(t.series,function(e){!e.options.stacking||e.visible!==!0&&t.options.chart.ignoreHiddenSeries!==!1||(e.stackKey=e.type+u(e.options.stack,""))})},setTitle:function(t,i,n){var o,r,s=this,a=s.options;o=a.title=e(a.title,t),r=a.subtitle=e(a.subtitle,i),hi([["title",t,o],["subtitle",i,r]],function(t){var e=t[0],i=s[e],n=t[1],o=t[2];i&&n&&(s[e]=i=i.destroy()),o&&o.text&&!i&&(s[e]=s.renderer.text(o.text,0,0,o.useHTML).attr({align:o.align,"class":_e+e,zIndex:o.zIndex||4}).css(o.style).add())}),s.layOutTitles(n)},layOutTitles:function(e){var i,n=0,o=this.title,r=this.subtitle,s=this.options,a=s.title,l=s.subtitle,h=this.renderer,c=this.spacingBox.width-44;o&&(o.css({width:(a.width||c)+Ze}).align(t({y:h.fontMetrics(a.style.fontSize,o).b-3},a),!1,"spacingBox"),a.floating||a.verticalAlign||(n=o.getBBox().height)),r&&(r.css({width:(l.width||c)+Ze}).align(t({y:n+(a.margin-13)+h.fontMetrics(a.style.fontSize,r).b},l),!1,"spacingBox"),l.floating||l.verticalAlign||(n=me(n+r.getBBox().height))),i=this.titleOffset!==n,this.titleOffset=n,!this.isDirtyBox&&i&&(this.isDirtyBox=i,this.hasRendered&&u(e,!0)&&this.isDirtyBox&&this.redraw())},getChartSize:function(){var t=this,e=t.options.chart,i=e.width,n=e.height,o=t.renderToClone||t.renderTo;c(i)||(t.containerWidth=si(o,"width")),c(n)||(t.containerHeight=si(o,"height")),t.chartWidth=ye(0,i||t.containerWidth||600),t.chartHeight=ye(0,u(n,t.containerHeight>19?t.containerHeight:400))
},cloneRenderTo:function(t){var e=this.renderToClone,i=this.container;t?e&&(this.renderTo.appendChild(i),L(e),delete this.renderToClone):(i&&i.parentNode===this.renderTo&&this.renderTo.removeChild(i),this.renderToClone=e=this.renderTo.cloneNode(0),f(e,{position:Fe,top:"-9999px",display:"block"}),e.style.setProperty&&e.style.setProperty("display","block","important"),de.body.appendChild(e),i&&e.appendChild(i))},getContainer:function(){var e,o,r,s,a,l,h=this,c=h.options.chart,p="data-highcharts-chart";h.renderTo=s=c.renderTo,l=_e+He++,n(s)&&(h.renderTo=s=de.getElementById(s)),s||Z(13,!0),a=i(d(s,p)),!isNaN(a)&&Ee[a]&&Ee[a].hasRendered&&Ee[a].destroy(),d(s,p,h.index),s.innerHTML="",c.skipClone||s.offsetWidth||h.cloneRenderTo(),h.getChartSize(),o=h.chartWidth,r=h.chartHeight,h.container=e=g(Ne,{className:_e+"container"+(c.className?" "+c.className:""),id:l},t({position:je,overflow:Ve,width:o+Ze,height:r+Ze,textAlign:"left",lineHeight:"normal",zIndex:0,"-webkit-tap-highlight-color":"rgba(0,0,0,0)"},c.style),h.renderToClone||s),h._cursor=e.style.cursor,h.renderer=c.forExport?new Ai(e,o,r,c.style,!0):new W(e,o,r,c.style),ze&&h.renderer.create(h,e,o,r)},getMargins:function(){var t,e=this,i=e.spacing,n=e.legend,o=e.margin,r=e.options.legend,s=u(r.margin,20),a=r.x,l=r.y,h=r.align,d=r.verticalAlign,p=e.titleOffset;e.resetMargins(),t=e.axisOffset,p&&!c(o[0])&&(e.plotTop=ye(e.plotTop,p+e.options.title.margin+i[0])),n.display&&!r.floating&&("right"===h?c(o[1])||(e.marginRight=ye(e.marginRight,n.legendWidth-a+s+i[1])):"left"===h?c(o[3])||(e.plotLeft=ye(e.plotLeft,n.legendWidth+a+s+i[3])):"top"===d?c(o[0])||(e.plotTop=ye(e.plotTop,n.legendHeight+l+s+i[0])):"bottom"===d&&(c(o[2])||(e.marginBottom=ye(e.marginBottom,n.legendHeight-l+s+i[2])))),e.extraBottomMargin&&(e.marginBottom+=e.extraBottomMargin),e.extraTopMargin&&(e.plotTop+=e.extraTopMargin),e.hasCartesianSeries&&hi(e.axes,function(t){t.getOffset()}),c(o[3])||(e.plotLeft+=t[3]),c(o[0])||(e.plotTop+=t[0]),c(o[2])||(e.marginBottom+=t[2]),c(o[1])||(e.marginRight+=t[1]),e.setChartSize()},reflow:function(t){var e=this,i=e.options.chart,n=e.renderTo,o=i.width||si(n,"width"),r=i.height||si(n,"height"),s=t?t.target:pe,a=function(){e.container&&(e.setSize(o,r,!1),e.hasUserSize=null)};e.hasUserSize||!o||!r||s!==pe&&s!==de||((o!==e.containerWidth||r!==e.containerHeight)&&(clearTimeout(e.reflowTimeout),t?e.reflowTimeout=setTimeout(a,100):a()),e.containerWidth=o,e.containerHeight=r)},initReflow:function(){var t=this,e=function(e){t.reflow(e)};ui(pe,"resize",e),ui(t,"destroy",function(){fi(pe,"resize",e)})},setSize:function(t,e,i){var n,o,r,s=this;s.isResizing+=1,r=function(){s&&gi(s,"endResize",null,function(){s.isResizing-=1})},D(i,s),s.oldChartHeight=s.chartHeight,s.oldChartWidth=s.chartWidth,c(t)&&(s.chartWidth=n=ye(0,fe(t)),s.hasUserSize=!!n),c(e)&&(s.chartHeight=o=ye(0,fe(e))),(V?yi:f)(s.container,{width:n+Ze,height:o+Ze},V),s.setChartSize(!0),s.renderer.setSize(n,o,i),s.maxTicks=null,hi(s.axes,function(t){t.isDirty=!0,t.setScale()}),hi(s.series,function(t){t.isDirty=!0}),s.isDirtyLegend=!0,s.isDirtyBox=!0,s.layOutTitles(),s.getMargins(),s.redraw(i),s.oldChartHeight=null,gi(s,"resize"),V===!1?r():setTimeout(r,V&&V.duration||500)},setChartSize:function(t){var e,i,n,o,r,s,a,l=this,h=l.inverted,c=l.renderer,d=l.chartWidth,p=l.chartHeight,u=l.options.chart,f=l.spacing,g=l.clipOffset;l.plotLeft=n=fe(l.plotLeft),l.plotTop=o=fe(l.plotTop),l.plotWidth=r=ye(0,fe(d-n-l.marginRight)),l.plotHeight=s=ye(0,fe(p-o-l.marginBottom)),l.plotSizeX=h?s:r,l.plotSizeY=h?r:s,l.plotBorderWidth=u.plotBorderWidth||0,l.spacingBox=c.spacingBox={x:f[3],y:f[0],width:d-f[3]-f[1],height:p-f[0]-f[2]},l.plotBox=c.plotBox={x:n,y:o,width:r,height:s},a=2*ge(l.plotBorderWidth/2),e=me(ye(a,g[3])/2),i=me(ye(a,g[0])/2),l.clipBox={x:e,y:i,width:ge(l.plotSizeX-ye(a,g[1])/2-e),height:ye(0,ge(l.plotSizeY-ye(a,g[2])/2-i))},t||hi(l.axes,function(t){t.setAxisSize(),t.setAxisTranslation()})},resetMargins:function(){var t=this,e=t.spacing,i=t.margin;t.plotTop=u(i[0],e[0]),t.marginRight=u(i[1],e[1]),t.marginBottom=u(i[2],e[2]),t.plotLeft=u(i[3],e[3]),t.axisOffset=[0,0,0,0],t.clipOffset=[0,0,0,0]},drawChartBox:function(){var t,e,i=this,n=i.options.chart,o=i.renderer,r=i.chartWidth,s=i.chartHeight,a=i.chartBackground,l=i.plotBackground,h=i.plotBorder,c=i.plotBGImage,d=n.borderWidth||0,p=n.backgroundColor,u=n.plotBackgroundColor,f=n.plotBackgroundImage,g=n.plotBorderWidth||0,m=i.plotLeft,y=i.plotTop,v=i.plotWidth,x=i.plotHeight,b=i.plotBox,k=i.clipRect,w=i.clipBox;t=d+(n.shadow?8:0),(d||p)&&(a?a.animate(a.crisp({width:r-t,height:s-t})):(e={fill:p||Ke},d&&(e.stroke=n.borderColor,e["stroke-width"]=d),i.chartBackground=o.rect(t/2,t/2,r-t,s-t,n.borderRadius,d).attr(e).addClass(_e+"background").add().shadow(n.shadow))),u&&(l?l.animate(b):i.plotBackground=o.rect(m,y,v,x,0).attr({fill:u}).add().shadow(n.plotShadow)),f&&(c?c.animate(b):i.plotBGImage=o.image(f,m,y,v,x).add()),k?k.animate({width:w.width,height:w.height}):i.clipRect=o.clipRect(w),g&&(h?h.animate(h.crisp({x:m,y:y,width:v,height:x,strokeWidth:-g})):i.plotBorder=o.rect(m,y,v,x,0,-g).attr({stroke:n.plotBorderColor,"stroke-width":g,fill:Ke,zIndex:1}).add()),i.isDirtyBox=!1},propFromSeries:function(){var t,e,i,n=this,o=n.options.chart,r=n.options.series;hi(["inverted","angular","polar"],function(s){for(t=ni[o.type||o.defaultSeriesType],i=n[s]||o[s]||t&&t.prototype[s],e=r&&r.length;!i&&e--;)t=ni[r[e].type],t&&t.prototype[s]&&(i=!0);n[s]=i})},linkSeries:function(){var t=this,e=t.series;hi(e,function(t){t.linkedSeries.length=0}),hi(e,function(e){var i=e.options.linkedTo;n(i)&&(i=":previous"===i?t.series[e.index-1]:t.get(i),i&&(i.linkedSeries.push(e),e.linkedParent=i))})},renderSeries:function(){hi(this.series,function(t){t.translate(),t.setTooltipPoints&&t.setTooltipPoints(),t.render()})},renderLabels:function(){var e=this,n=e.options.labels;n.items&&hi(n.items,function(o){var r=t(n.style,o.style),s=i(r.left)+e.plotLeft,a=i(r.top)+e.plotTop+12;delete r.left,delete r.top,e.renderer.text(o.html,s,a).attr({zIndex:2}).css(r).add()})},render:function(){var t=this,e=t.axes,i=t.renderer,n=t.options;t.setTitle(),t.legend=new Gi(t,n.legend),t.getStacks(),hi(e,function(t){t.setScale()}),t.getMargins(),t.maxTicks=null,hi(e,function(t){t.setTickPositions(!0),t.setMaxTicks()}),t.adjustTickAmounts(),t.getMargins(),t.drawChartBox(),t.hasCartesianSeries&&hi(e,function(t){t.render()}),t.seriesGroup||(t.seriesGroup=i.g("series-group").attr({zIndex:3}).add()),t.renderSeries(),t.renderLabels(),t.showCredits(n.credits),t.hasRendered=!0},showCredits:function(t){t.enabled&&!this.credits&&(this.credits=this.renderer.text(t.text,0,0).on("click",function(){t.href&&(location.href=t.href)}).attr({align:t.position.align,zIndex:8}).css(t.style).add().align(t.position))},destroy:function(){var t,e=this,i=e.axes,n=e.series,o=e.container,r=o&&o.parentNode;for(gi(e,"destroy"),Ee[e.index]=G,Ge--,e.renderTo.removeAttribute("data-highcharts-chart"),fi(e),t=i.length;t--;)i[t]=i[t].destroy();for(t=n.length;t--;)n[t]=n[t].destroy();hi(["title","subtitle","chartBackground","plotBackground","plotBGImage","plotBorder","seriesGroup","clipRect","credits","pointer","scroller","rangeSelector","legend","resetZoomButton","tooltip","renderer"],function(t){var i=e[t];i&&i.destroy&&(e[t]=i.destroy())}),o&&(o.innerHTML="",fi(o),r&&L(o));for(t in e)delete e[t]},isReadyToRender:function(){var t=this;return!Be&&pe==pe.top&&"complete"!==de.readyState||ze&&!pe.canvg?(ze?Ii.push(function(){t.firstRender()},t.options.global.canvasToolsURL):de.attachEvent("onreadystatechange",function(){de.detachEvent("onreadystatechange",t.firstRender),"complete"===de.readyState&&t.firstRender()}),!1):!0},firstRender:function(){var t=this,e=t.options,i=t.callback;t.isReadyToRender()&&(t.getContainer(),gi(t,"init"),t.resetMargins(),t.setChartSize(),t.propFromSeries(),t.getAxes(),hi(e.series||[],function(e){t.initSeries(e)}),t.linkSeries(),gi(t,"beforeRender"),ce.Pointer&&(t.pointer=new zi(t,e)),t.render(),t.renderer.draw(),i&&i.apply(t,[t]),hi(t.callbacks,function(e){e.apply(t,[t])}),t.cloneRenderTo(!0),gi(t,"load"))},splashArray:function(t,e){var i=e[t],n=o(i)?i:[i,i,i,i];return[u(e[t+"Top"],n[0]),u(e[t+"Right"],n[1]),u(e[t+"Bottom"],n[2]),u(e[t+"Left"],n[3])]}},X.prototype.callbacks=[];var Yi=ce.CenteredSeriesMixin={getCenter:function(){var t,e,n=this.options,o=this.chart,r=2*(n.slicedOffset||0),s=o.plotWidth-2*r,a=o.plotHeight-2*r,l=n.center,h=[u(l[0],"50%"),u(l[1],"50%"),n.size||"100%",n.innerSize||0],c=ve(s,a);return pi(h,function(n,o){return e=/%$/.test(n),t=2>o||2===o&&e,(e?[s,a,c,c][o]*i(n)/100:n)+(t?r:0)})}},Ni=function(){};Ni.prototype={init:function(t,e,i){var n,o=this;return o.series=t,o.applyOptions(e,i),o.pointAttr={},t.options.colorByPoint&&(n=t.options.colors||t.chart.options.colors,o.color=o.color||n[t.colorCounter++],t.colorCounter===n.length&&(t.colorCounter=0)),t.chart.pointCount++,o},applyOptions:function(e,i){var n=this,o=n.series,r=o.options.pointValKey||o.pointValKey;return e=Ni.prototype.optionsToObject.call(this,e),t(n,e),n.options=n.options?t(n.options,e):e,r&&(n.y=n[r]),n.x===G&&o&&(n.x=i===G?o.autoIncrement():i),n},optionsToObject:function(t){var e,i={},n=this.series,o=n.pointArrayMap||["y"],s=o.length,a=0,l=0;if("number"==typeof t||null===t)i[o[0]]=t;else if(r(t))for(t.length>s&&(e=typeof t[0],"string"===e?i.name=t[0]:"number"===e&&(i.x=t[0]),a++);s>l;)i[o[l++]]=t[a++];else"object"==typeof t&&(i=t,t.dataLabels&&(n._hasPointLabels=!0),t.marker&&(n._hasPointMarkers=!0));return i},destroy:function(){var t,e=this,i=e.series,n=i.chart,o=n.hoverPoints;n.pointCount--,o&&(e.setState(),h(o,e),o.length||(n.hoverPoints=null)),e===n.hoverPoint&&e.onMouseOut(),(e.graphic||e.dataLabel)&&(fi(e),e.destroyElements()),e.legendItem&&n.legend.destroyItem(e);for(t in e)e[t]=null},destroyElements:function(){for(var t,e=this,i=["graphic","dataLabel","dataLabelUpper","group","connector","shadowGroup"],n=6;n--;)t=i[n],e[t]&&(e[t]=e[t].destroy())},getLabelConfig:function(){var t=this;return{x:t.category,y:t.y,key:t.name||t.category,series:t.series,point:t,percentage:t.percentage,total:t.total||t.stackTotal}},tooltipFormatter:function(t){var e=this.series,i=e.tooltipOptions,n=u(i.valueDecimals,""),o=i.valuePrefix||"",r=i.valueSuffix||"";return hi(e.pointArrayMap||["y"],function(e){e="{point."+e,(o||r)&&(t=t.replace(e+"}",o+e+"}"+r)),t=t.replace(e+"}",e+":,."+n+"f}")}),k(t,{point:this,series:this.series})},firePointEvent:function(t,e,i){var n=this,o=this.series,r=o.options;(r.point.events[t]||n.options&&n.options.events&&n.options.events[t])&&this.importEvents(),"click"===t&&r.allowPointSelect&&(i=function(t){n.select(null,t.ctrlKey||t.metaKey||t.shiftKey)}),gi(this,t,e,i)}};var Fi=function(){};Fi.prototype={isCartesian:!0,type:"line",pointClass:Ni,sorted:!0,requireSorting:!0,pointAttrToOptions:{stroke:"lineColor","stroke-width":"lineWidth",fill:"fillColor",r:"radius"},axisTypes:["xAxis","yAxis"],colorCounter:0,parallelArrays:["x","y"],init:function(e,i){var n,o,r=this,s=e.series,a=function(t,e){return u(t.options.index,t._i)-u(e.options.index,e._i)};r.chart=e,r.options=i=r.setOptions(i),r.linkedSeries=[],r.bindAxes(),t(r,{name:i.name,state:Qe,pointAttr:{},visible:i.visible!==!1,selected:i.selected===!0}),ze&&(i.animation=!1),o=i.events;for(n in o)ui(r,n,o[n]);(o&&o.click||i.point&&i.point.events&&i.point.events.click||i.allowPointSelect)&&(e.runTrackerClick=!0),r.getColor(),r.getSymbol(),hi(r.parallelArrays,function(t){r[t+"Data"]=[]}),r.setData(i.data,!1),r.isCartesian&&(e.hasCartesianSeries=!0),s.push(r),r._i=s.length-1,T(s,a),this.yAxis&&T(this.yAxis.series,a),hi(s,function(t,e){t.index=e,t.name=t.name||"Series "+(e+1)})},bindAxes:function(){var t,e=this,i=e.options,n=e.chart;hi(e.axisTypes||[],function(o){hi(n[o],function(n){t=n.options,(i[o]===t.index||i[o]!==G&&i[o]===t.id||i[o]===G&&0===t.index)&&(n.series.push(e),e[o]=n,n.isDirty=!0)}),e[o]||e.optionalAxis===o||Z(18,!0)})},updateParallelArrays:function(t,e){var i=t.series,n=arguments,o="number"==typeof e?function(n){var o="y"===n&&i.toYData?i.toYData(t):t[n];i[n+"Data"][e]=o}:function(t){Array.prototype[e].apply(i[t+"Data"],Array.prototype.slice.call(n,2))};hi(i.parallelArrays,o)},autoIncrement:function(){var t=this,e=t.options,i=t.xIncrement;return i=u(i,e.pointStart,0),t.pointInterval=u(t.pointInterval,e.pointInterval,1),t.xIncrement=i+t.pointInterval,i},getSegments:function(){var t,e=this,i=-1,n=[],o=e.points,r=o.length;if(r)if(e.options.connectNulls){for(t=r;t--;)null===o[t].y&&o.splice(t,1);o.length&&(n=[o])}else hi(o,function(t,e){null===t.y?(e>i+1&&n.push(o.slice(i+1,e)),i=e):e===r-1&&n.push(o.slice(i+1,e+1))});e.segments=n},setOptions:function(t){var i,n=this.chart,o=n.options,r=o.plotOptions,s=n.userOptions||{},a=s.plotOptions||{},l=r[this.type];return this.userOptions=t,i=e(l,r.series,t),this.tooltipOptions=e(F.tooltip,F.plotOptions[this.type].tooltip,s.tooltip,a.series&&a.series.tooltip,a[this.type]&&a[this.type].tooltip,t.tooltip),null===l.marker&&delete i.marker,i},getCyclic:function(t,e,i){var n,o=this.userOptions,r="_"+t+"Index",s=t+"Counter";e||(c(o[r])?n=o[r]:(o[r]=n=this.chart[s]%i.length,this.chart[s]+=1),e=i[n]),this[t]=e},getColor:function(){this.options.colorByPoint||this.getCyclic("color",this.options.color||bi[this.type].color,this.chart.options.colors)},getSymbol:function(){var t=this.options.marker;this.getCyclic("symbol",t.symbol,this.chart.options.symbols),/^url/.test(this.symbol)&&(t.radius=0)},drawLegendSymbol:Wi.drawLineMarker,setData:function(t,e,i,o){var a,l,h,c=this,d=c.points,p=d&&d.length||0,f=c.options,g=c.chart,m=null,y=c.xAxis,v=y&&!!y.categories,x=c.tooltipPoints,b=f.turboThreshold,k=this.xData,w=this.yData,S=c.pointArrayMap,T=S&&S.length;if(t=t||[],a=t.length,e=u(e,!0),o===!1||!a||p!==a||c.cropped||c.hasGroupedData){if(c.xIncrement=null,c.pointRange=v?1:f.pointRange,c.colorCounter=0,hi(this.parallelArrays,function(t){c[t+"Data"].length=0}),b&&a>b){for(l=0;null===m&&a>l;)m=t[l],l++;if(s(m)){var P=u(f.pointStart,0),A=u(f.pointInterval,1);for(l=0;a>l;l++)k[l]=P,w[l]=t[l],P+=A;c.xIncrement=P}else if(r(m))if(T)for(l=0;a>l;l++)h=t[l],k[l]=h[0],w[l]=h.slice(1,T+1);else for(l=0;a>l;l++)h=t[l],k[l]=h[0],w[l]=h[1];else Z(12)}else for(l=0;a>l;l++)t[l]!==G&&(h={series:c},c.pointClass.prototype.applyOptions.apply(h,[t[l]]),c.updateParallelArrays(h,l),v&&h.name&&(y.names[h.x]=h.name));for(n(w[0])&&Z(14,!0),c.data=[],c.options.data=t,l=p;l--;)d[l]&&d[l].destroy&&d[l].destroy();x&&(x.length=0),y&&(y.minRange=y.userMinRange),c.isDirty=c.isDirtyData=g.isDirtyBox=!0,i=!1}else hi(t,function(t,e){d[e].update(t,!1,null,!1)});e&&g.redraw(i)},processData:function(t){var e,i,n,o,r,s,a,l,h=this,c=h.xData,d=h.yData,p=c.length,u=0,f=h.xAxis,g=h.options,m=g.cropThreshold,y=0,v=h.isCartesian;if(v&&!h.isDirty&&!f.isDirty&&!h.yAxis.isDirty&&!t)return!1;for(f&&(s=f.getExtremes(),a=s.min,l=s.max),v&&h.sorted&&(!m||p>m||h.forceCrop)&&(c[p-1]<a||c[0]>l?(c=[],d=[]):(c[0]<a||c[p-1]>l)&&(e=this.cropData(h.xData,h.yData,a,l),c=e.xData,d=e.yData,u=e.start,i=!0,y=c.length)),r=c.length-1;r>=0;r--)n=c[r]-c[r-1],!i&&c[r]>a&&c[r]<l&&y++,n>0&&(o===G||o>n)?o=n:0>n&&h.requireSorting&&Z(15);h.cropped=i,h.cropStart=u,h.processedXData=c,h.processedYData=d,h.activePointCount=y,null===g.pointRange&&(h.pointRange=o||1),h.closestPointRange=o},cropData:function(t,e,i,n){var o,r=t.length,s=0,a=r,l=u(this.cropShoulder,1);for(o=0;r>o;o++)if(t[o]>=i){s=ye(0,o-l);break}for(;r>o;o++)if(t[o]>n){a=o+l;break}return{xData:t.slice(s,a),yData:e.slice(s,a),start:s,end:a}},generatePoints:function(){var t,e,i,n,o=this,r=o.options,s=r.data,a=o.data,l=o.processedXData,h=o.processedYData,c=o.pointClass,d=l.length,u=o.cropStart||0,f=o.hasGroupedData,g=[];if(!a&&!f){var m=[];m.length=s.length,a=o.data=m}for(n=0;d>n;n++)e=u+n,f?g[n]=(new c).init(o,[l[n]].concat(p(h[n]))):(a[e]?i=a[e]:s[e]!==G&&(a[e]=i=(new c).init(o,s[e],l[n])),g[n]=i),g[n].index=e;if(a&&(d!==(t=a.length)||f))for(n=0;t>n;n++)n!==u||f||(n+=d),a[n]&&(a[n].destroyElements(),a[n].plotX=G);o.data=a,o.points=g},getExtremes:function(t){var e,i,n,o,r,s,a,l,h,c=this.xAxis,d=this.yAxis,p=this.processedXData,f=[],g=0,m=c.getExtremes(),y=m.min,v=m.max;for(t=t||this.stackedYData||this.processedYData,e=t.length,l=0;e>l;l++)if(s=p[l],a=t[l],i=null!==a&&a!==G&&(!d.isLog||a.length||a>0),n=this.getExtremesFromAll||this.cropped||(p[l+1]||s)>=y&&(p[l-1]||s)<=v,i&&n)if(h=a.length)for(;h--;)null!==a[h]&&(f[g++]=a[h]);else f[g++]=a;this.dataMin=u(o,P(f)),this.dataMax=u(r,A(f))},translate:function(){this.processedXData||this.processData(),this.generatePoints();var t,e=this,i=e.options,n=i.stacking,o=e.xAxis,r=o.categories,a=e.yAxis,l=e.points,h=l.length,d=!!e.modifyValue,p=i.pointPlacement,f="between"===p||s(p),g=i.threshold;for(t=0;h>t;t++){var m,y,v=l[t],x=v.x,b=v.y,k=v.low,w=n&&a.stacks[(e.negStacks&&g>b?"-":"")+e.stackKey];a.isLog&&0>=b&&(v.y=b=null,Z(10)),v.plotX=o.translate(x,0,0,0,1,p,"flags"===this.type),n&&e.visible&&w&&w[x]&&(m=w[x],y=m.points[e.index+","+t],k=y[0],b=y[1],0===k&&(k=u(g,a.min)),a.isLog&&0>=k&&(k=null),v.total=v.stackTotal=m.total,v.percentage=m.total&&v.y/m.total*100,v.stackY=b,m.setOffset(e.pointXOffset||0,e.barW||0)),v.yBottom=c(k)?a.translate(k,0,1,0,1):null,d&&(b=e.modifyValue(b,v)),v.plotY="number"==typeof b&&1/0!==b?a.translate(b,0,1,0,1):G,v.clientX=f?o.translate(x,0,0,0,1):v.plotX,v.negative=v.y<(g||0),v.category=r&&r[v.x]!==G?r[v.x]:v.x}e.getSegments()},animate:function(e){var i,n,r,s=this,a=s.chart,l=a.renderer,h=s.options.animation,c=s.clipBox||a.clipBox,d=a.inverted;h&&!o(h)&&(h=bi[s.type].animation),r=["_sharedClip",h.duration,h.easing,c.height].join(","),e?(i=a[r],n=a[r+"m"],i||(a[r]=i=l.clipRect(t(c,{width:0})),a[r+"m"]=n=l.clipRect(-99,d?-a.plotLeft:-a.plotTop,99,d?a.chartWidth:a.chartHeight)),s.group.clip(i),s.markerGroup.clip(n),s.sharedClipKey=r):(i=a[r],i&&i.animate({width:a.plotSizeX},h),a[r+"m"]&&a[r+"m"].animate({width:a.plotSizeX+99},h),s.animate=null)},afterAnimate:function(){var t=this.chart,e=this.sharedClipKey,i=this.group,n=this.clipBox;i&&this.options.clip!==!1&&(e&&n||i.clip(n?t.renderer.clipRect(n):t.clipRect),this.markerGroup.clip()),gi(this,"afterAnimate"),setTimeout(function(){e&&t[e]&&(n||(t[e]=t[e].destroy()),t[e+"m"]&&(t[e+"m"]=t[e+"m"].destroy()))},100)},drawPoints:function(){var e,i,n,o,r,s,a,l,h,c,d,p,f,g=this,m=g.points,y=g.chart,v=g.options,x=v.marker,b=g.pointAttr[""],k=g.markerGroup,w=u(x.enabled,!g.requireSorting||g.activePointCount<.5*g.xAxis.len/x.radius);if(x.enabled!==!1||g._hasPointMarkers)for(o=m.length;o--;)r=m[o],i=ge(r.plotX),n=r.plotY,h=r.graphic,c=r.marker||{},d=!!r.marker,p=w&&c.enabled===G||c.enabled,f=y.isInsidePlot(fe(i),n,y.inverted),p&&n!==G&&!isNaN(n)&&null!==r.y?(e=r.pointAttr[r.selected?ei:Qe]||b,s=e.r,a=u(c.symbol,g.symbol),l=0===a.indexOf("url"),h?h[f?"show":"hide"](!0).animate(t({x:i-s,y:n-s},h.symbolName?{width:2*s,height:2*s}:{})):f&&(s>0||l)&&(r.graphic=h=y.renderer.symbol(a,i-s,n-s,2*s,2*s,d?c:x).attr(e).add(k))):h&&(r.graphic=h.destroy())},convertAttribs:function(t,e,i,n){var o,r,s=this.pointAttrToOptions,a={};t=t||{},e=e||{},i=i||{},n=n||{};for(o in s)r=s[o],a[o]=u(t[r],e[o],i[o],n[o]);return a},getAttribs:function(){var e,i,n,o,r,s,a=this,l=a.options,h=bi[a.type].marker?l.marker:l,d=h.states,p=d[ti],u=a.color,f={stroke:u,fill:u},g=a.points||[],m=[],y=a.pointAttrToOptions,v=a.hasPointSpecificOptions,x=l.negativeColor,b=h.lineColor,k=h.fillColor,w=l.turboThreshold;if(l.marker?(p.radius=p.radius||h.radius+p.radiusPlus,p.lineWidth=p.lineWidth||h.lineWidth+p.lineWidthPlus):p.color=p.color||Pi(p.color||u).brighten(p.brightness).get(),m[Qe]=a.convertAttribs(h,f),hi([ti,ei],function(t){m[t]=a.convertAttribs(d[t],m[Qe])}),a.pointAttr=m,i=g.length,!w||w>i||v)for(;i--;){if(n=g[i],h=n.options&&n.options.marker||n.options,h&&h.enabled===!1&&(h.radius=0),n.negative&&x&&(n.color=n.fillColor=x),v=l.colorByPoint||n.color,n.options)for(s in y)c(h[y[s]])&&(v=!0);v?(h=h||{},o=[],d=h.states||{},e=d[ti]=d[ti]||{},l.marker||(e.color=e.color||!n.options.color&&p.color||Pi(n.color).brighten(e.brightness||p.brightness).get()),r={color:n.color},k||(r.fillColor=n.color),b||(r.lineColor=n.color),o[Qe]=a.convertAttribs(t(r,h),m[Qe]),o[ti]=a.convertAttribs(d[ti],m[ti],o[Qe]),o[ei]=a.convertAttribs(d[ei],m[ei],o[Qe])):o=m,n.pointAttr=o}},destroy:function(){var t,e,i,n,o,r=this,s=r.chart,a=/AppleWebKit\/533/.test(Te),l=r.data||[];for(gi(r,"destroy"),fi(r),hi(r.axisTypes||[],function(t){o=r[t],o&&(h(o.series,r),o.isDirty=o.forceRedraw=!0)}),r.legendItem&&r.chart.legend.destroyItem(r),e=l.length;e--;)i=l[e],i&&i.destroy&&i.destroy();r.points=null,clearTimeout(r.animationTimeout),hi(["area","graph","dataLabelsGroup","group","markerGroup","tracker","graphNeg","areaNeg","posClip","negClip"],function(e){r[e]&&(t=a&&"group"===e?"hide":"destroy",r[e][t]())}),s.hoverSeries===r&&(s.hoverSeries=null),h(s.series,r);for(n in r)delete r[n]},getSegmentPath:function(t){var e=this,i=[],n=e.options.step;return hi(t,function(o,r){var s,a=o.plotX,l=o.plotY;e.getPointSpline?i.push.apply(i,e.getPointSpline(t,o,r)):(i.push(r?qe:$e),n&&r&&(s=t[r-1],"right"===n?i.push(s.plotX,l):"center"===n?i.push((s.plotX+a)/2,s.plotY,(s.plotX+a)/2,l):i.push(a,s.plotY)),i.push(o.plotX,o.plotY))}),i},getGraphPath:function(){var t,e=this,i=[],n=[];return hi(e.segments,function(o){t=e.getSegmentPath(o),o.length>1?i=i.concat(t):n.push(o[0])}),e.singlePoints=n,e.graphPath=i,i},drawGraph:function(){var t=this,e=this.options,i=[["graph",e.lineColor||this.color]],n=e.lineWidth,o=e.dashStyle,r="square"!==e.linecap,s=this.getGraphPath(),a=e.negativeColor;a&&i.push(["graphNeg",a]),hi(i,function(i,a){var l,h=i[0],c=t[h];c?(vi(c),c.animate({d:s})):n&&s.length&&(l={stroke:i[1],"stroke-width":n,fill:Ke,zIndex:1},o?l.dashstyle=o:r&&(l["stroke-linecap"]=l["stroke-linejoin"]="round"),t[h]=t.chart.renderer.path(s).attr(l).add(t.group).shadow(!a&&e.shadow))})},clipNeg:function(){var t,e,i,n,o,r=this.options,s=this.chart,a=s.renderer,l=r.negativeColor||r.negativeFillColor,h=this.graph,c=this.area,d=this.posClip,p=this.negClip,u=s.chartWidth,f=s.chartHeight,g=ye(u,f),m=this.yAxis;l&&(h||c)&&(t=fe(m.toPixels(r.threshold||0,!0)),0>t&&(g-=t),n={x:0,y:0,width:g,height:t},o={x:0,y:t,width:g,height:g},s.inverted&&(n.height=o.y=s.plotWidth-t,a.isVML&&(n={x:s.plotWidth-t-s.plotLeft,y:0,width:u,height:f},o={x:t+s.plotLeft-u,y:0,width:s.plotLeft+t,height:u})),m.reversed?(e=o,i=n):(e=n,i=o),d?(d.animate(e),p.animate(i)):(this.posClip=d=a.clipRect(e),this.negClip=p=a.clipRect(i),h&&this.graphNeg&&(h.clip(d),this.graphNeg.clip(p)),c&&(c.clip(d),this.areaNeg.clip(p))))},invertGroups:function(){function t(){var t={width:e.yAxis.len,height:e.xAxis.len};hi(["group","markerGroup"],function(i){e[i]&&e[i].attr(t).invert()})}var e=this,i=e.chart;e.xAxis&&(ui(i,"resize",t),ui(e,"destroy",function(){fi(i,"resize",t)}),t(),e.invertGroups=t)},plotGroup:function(t,e,i,n,o){var r=this[t],s=!r;return s&&(this[t]=r=this.chart.renderer.g(e).attr({visibility:i,zIndex:n||.1}).add(o)),r[s?"attr":"animate"](this.getPlotBox()),r},getPlotBox:function(){var t=this.chart,e=this.xAxis,i=this.yAxis;return t.inverted&&(e=i,i=this.xAxis),{translateX:e?e.left:t.plotLeft,translateY:i?i.top:t.plotTop,scaleX:1,scaleY:1}},render:function(){var t,e=this,i=e.chart,n=e.options,o=n.animation,r=o&&!!e.animate&&i.renderer.isSVG&&u(o.duration,500)||0,s=e.visible?Ue:Ve,a=n.zIndex,l=e.hasRendered,h=i.seriesGroup;t=e.plotGroup("group","series",s,a,h),e.markerGroup=e.plotGroup("markerGroup","markers",s,a,h),r&&e.animate(!0),e.getAttribs(),t.inverted=e.isCartesian?i.inverted:!1,e.drawGraph&&(e.drawGraph(),e.clipNeg()),hi(e.points,function(t){t.redraw&&t.redraw()}),e.drawDataLabels&&e.drawDataLabels(),e.visible&&e.drawPoints(),e.drawTracker&&e.options.enableMouseTracking!==!1&&e.drawTracker(),i.inverted&&e.invertGroups(),n.clip===!1||e.sharedClipKey||l||t.clip(i.clipRect),r&&e.animate(),l||(r?e.animationTimeout=setTimeout(function(){e.afterAnimate()},r):e.afterAnimate()),e.isDirty=e.isDirtyData=!1,e.hasRendered=!0},redraw:function(){var t=this,e=t.chart,i=t.isDirtyData,n=t.group,o=t.xAxis,r=t.yAxis;n&&(e.inverted&&n.attr({width:e.plotWidth,height:e.plotHeight}),n.animate({translateX:u(o&&o.left,e.plotLeft),translateY:u(r&&r.top,e.plotTop)})),t.translate(),t.setTooltipPoints&&t.setTooltipPoints(!0),t.render(),i&&gi(t,"updatedData")}},E.prototype={destroy:function(){C(this,this.axis)},render:function(t){var e=this.options,i=e.format,n=i?k(i,this):e.formatter.call(this);this.label?this.label.attr({text:n,visibility:Ve}):this.label=this.axis.chart.renderer.text(n,null,null,e.useHTML).css(e.style).attr({align:this.textAlign,rotation:e.rotation,visibility:Ve}).add(t)},setOffset:function(t,e){var i,n=this,o=n.axis,r=o.chart,s=r.inverted,a=this.isNegative,l=o.translate(o.usePercentage?100:this.total,0,0,0,1),h=o.translate(0),c=xe(l-h),d=r.xAxis[0].translate(this.x)+t,p=r.plotHeight,u={x:s?a?l:l-c:d,y:s?p-d-e:a?p-l-c:p-l,width:s?c:e,height:s?e:c},f=this.label;f&&(f.align(this.alignOptions,null,u),i=f.alignAttr,f[this.options.crop===!1||r.isInsidePlot(i.x,i.y)?"show":"hide"](!0))}},H.prototype.buildStacks=function(){var t=this.series,e=u(this.options.reversedStacks,!0),i=t.length;if(!this.isXAxis){for(this.usePercentage=!1;i--;)t[e?i:t.length-i-1].setStackedPoints();if(this.usePercentage)for(i=0;i<t.length;i++)t[i].setPercentStacks()}},H.prototype.renderStackTotals=function(){var t,e,i,n=this,o=n.chart,r=o.renderer,s=n.stacks,a=n.stackTotalGroup;a||(n.stackTotalGroup=a=r.g("stack-labels").attr({visibility:Ue,zIndex:6}).add()),a.translate(o.plotLeft,o.plotTop);for(t in s){e=s[t];for(i in e)e[i].render(a)}},Fi.prototype.setStackedPoints=function(){if(this.options.stacking&&(this.visible===!0||this.chart.options.chart.ignoreHiddenSeries===!1)){var t,e,i,n,o,r,s,a,l=this,h=l.processedXData,c=l.processedYData,d=[],p=c.length,u=l.options,f=u.threshold,g=u.stack,m=u.stacking,y=l.stackKey,v="-"+y,x=l.negStacks,b=l.yAxis,k=b.stacks,w=b.oldStacks;for(r=0;p>r;r++)s=h[r],a=c[r],o=l.index+","+r,t=x&&f>a,n=t?v:y,k[n]||(k[n]={}),k[n][s]||(w[n]&&w[n][s]?(k[n][s]=w[n][s],k[n][s].total=null):k[n][s]=new E(b,b.options.stackLabels,t,s,g)),e=k[n][s],e.points[o]=[e.cum||0],"percent"===m?(i=t?y:v,x&&k[i]&&k[i][s]?(i=k[i][s],e.total=i.total=ye(i.total,e.total)+xe(a)||0):e.total=M(e.total+(xe(a)||0))):e.total=M(e.total+(a||0)),e.cum=(e.cum||0)+(a||0),e.points[o].push(e.cum),d[r]=e.cum;"percent"===m&&(b.usePercentage=!0),this.stackedYData=d,b.oldStacks={}}},Fi.prototype.setPercentStacks=function(){var t=this,e=t.stackKey,i=t.yAxis.stacks,n=t.processedXData;hi([e,"-"+e],function(e){for(var o,r,s,a,l=n.length;l--;)o=n[l],r=i[e]&&i[e][o],s=r&&r.points[t.index+","+l],s&&(a=r.total?100/r.total:0,s[0]=M(s[0]*a),s[1]=M(s[1]*a),t.stackedYData[l]=s[1])})},t(X.prototype,{addSeries:function(t,e,i){var n,o=this;return t&&(e=u(e,!0),gi(o,"addSeries",{options:t},function(){n=o.initSeries(t),o.isDirtyLegend=!0,o.linkSeries(),e&&o.redraw(i)})),n},addAxis:function(t,i,n,o){var r,s=i?"xAxis":"yAxis",a=this.options;r=new H(this,e(t,{index:this[s].length,isX:i})),a[s]=p(a[s]||{}),a[s].push(t),u(n,!0)&&this.redraw(o)},showLoading:function(e){var i=this,n=i.options,o=i.loadingDiv,r=n.loading,s=function(){o&&f(o,{left:i.plotLeft+Ze,top:i.plotTop+Ze,width:i.plotWidth+Ze,height:i.plotHeight+Ze})};o||(i.loadingDiv=o=g(Ne,{className:_e+"loading"},t(r.style,{zIndex:10,display:Ke}),i.container),i.loadingSpan=g("span",null,r.labelStyle,o),ui(i,"redraw",s)),i.loadingSpan.innerHTML=e||n.lang.loading,i.loadingShown||(f(o,{opacity:0,display:""}),yi(o,{opacity:r.style.opacity},{duration:r.showDuration||0}),i.loadingShown=!0),s()},hideLoading:function(){var t=this.options,e=this.loadingDiv;e&&yi(e,{opacity:0},{duration:t.loading.hideDuration||100,complete:function(){f(e,{display:Ke})}}),this.loadingShown=!1}}),t(Ni.prototype,{update:function(t,e,i,n){function s(){l.applyOptions(t),o(t)&&!r(t)&&(l.redraw=function(){c&&(t&&t.marker&&t.marker.symbol?l.graphic=c.destroy():c.attr(l.pointAttr[l.state||""])),t&&t.dataLabels&&l.dataLabel&&(l.dataLabel=l.dataLabel.destroy()),l.redraw=null}),a=l.index,h.updateParallelArrays(l,a),p.data[a]=l.options,h.isDirty=h.isDirtyData=!0,!h.fixedBox&&h.hasCartesianSeries&&(d.isDirtyBox=!0),"point"===p.legendType&&d.legend.destroyItem(l),e&&d.redraw(i)}var a,l=this,h=l.series,c=l.graphic,d=h.chart,p=h.options;e=u(e,!0),n===!1?s():l.firePointEvent("update",{options:t},s)},remove:function(t,e){var i,n=this,o=n.series,r=o.points,s=o.chart,a=o.data;D(e,s),t=u(t,!0),n.firePointEvent("remove",null,function(){i=li(n,a),a.length===r.length&&r.splice(i,1),a.splice(i,1),o.options.data.splice(i,1),o.updateParallelArrays(n,"splice",i,1),n.destroy(),o.isDirty=!0,o.isDirtyData=!0,t&&s.redraw()})}}),t(Fi.prototype,{addPoint:function(t,e,i,n){var o,r,s,a,l=this,h=l.options,c=l.data,d=l.graph,p=l.area,f=l.chart,g=l.xAxis&&l.xAxis.names,m=d&&d.shift||0,y=h.data,v=l.xData;if(D(n,f),i&&hi([d,p,l.graphNeg,l.areaNeg],function(t){t&&(t.shift=m+1)}),p&&(p.isArea=!0),e=u(e,!0),o={series:l},l.pointClass.prototype.applyOptions.apply(o,[t]),s=o.x,a=v.length,l.requireSorting&&s<v[a-1])for(r=!0;a&&v[a-1]>s;)a--;l.updateParallelArrays(o,"splice",a,0,0),l.updateParallelArrays(o,a),g&&o.name&&(g[s]=o.name),y.splice(a,0,t),r&&(l.data.splice(a,0,null),l.processData()),"point"===h.legendType&&l.generatePoints(),i&&(c[0]&&c[0].remove?c[0].remove(!1):(c.shift(),l.updateParallelArrays(o,"shift"),y.shift())),l.isDirty=!0,l.isDirtyData=!0,e&&(l.getAttribs(),f.redraw())},remove:function(t,e){var i=this,n=i.chart;t=u(t,!0),i.isRemoving||(i.isRemoving=!0,gi(i,"remove",null,function(){i.destroy(),n.isDirtyLegend=n.isDirtyBox=!0,n.linkSeries(),t&&n.redraw(e)})),i.isRemoving=!1},update:function(i,n){var o,r=this,s=this.chart,a=this.userOptions,l=this.type,h=ni[l].prototype,c=["group","markerGroup","dataLabelsGroup"];hi(c,function(t){c[t]=r[t],delete r[t]}),i=e(a,{animation:!1,index:this.index,pointStart:this.xData[0]},{data:this.options.data},i),this.remove(!1);for(o in h)h.hasOwnProperty(o)&&(this[o]=G);t(this,ni[i.type||l].prototype),hi(c,function(t){r[t]=c[t]}),this.init(s,i),s.linkSeries(),u(n,!0)&&s.redraw(!1)}}),t(H.prototype,{update:function(i,n){var o=this.chart;i=o.options[this.coll][this.options.index]=e(this.userOptions,i),this.destroy(!0),this._addedPlotLB=G,this.init(o,t(i,{events:G})),o.isDirtyBox=!0,u(n,!0)&&o.redraw()},remove:function(t){for(var e=this.chart,i=this.coll,n=this.series,o=n.length;o--;)n[o]&&n[o].remove(!1);h(e.axes,this),h(e[i],this),e.options[i].splice(this.options.index,1),hi(e[i],function(t,e){t.options.index=e}),this.destroy(),e.isDirtyBox=!0,u(t,!0)&&e.redraw()},setTitle:function(t,e){this.update({title:t},e)},setCategories:function(t,e){this.update({categories:t},e)}});var ji=m(Fi);ni.line=ji,bi.area=e(ki,{threshold:0});var Vi=m(Fi,{type:"area",getSegments:function(){var t,e,i,n,o=this,r=[],s=[],a=[],l=this.xAxis,h=this.yAxis,c=h.stacks[this.stackKey],d={},p=this.points,u=this.options.connectNulls;if(this.options.stacking&&!this.cropped){for(i=0;i<p.length;i++)d[p[i].x]=p[i];for(n in c)null!==c[n].total&&a.push(+n);a.sort(function(t,e){return t-e}),hi(a,function(n){var r,a=0;if(!u||d[n]&&null!==d[n].y)if(d[n])s.push(d[n]);else{for(i=o.index;i<=h.series.length;i++)if(r=c[n].points[i+","+n]){a=r[1];break}t=l.translate(n),e=h.toPixels(a,!0),s.push({y:null,plotX:t,clientX:t,plotY:e,yBottom:e,onMouseOver:Xe})}}),s.length&&r.push(s)}else Fi.prototype.getSegments.call(this),r=this.segments;this.segments=r},getSegmentPath:function(t){var e,i,n=Fi.prototype.getSegmentPath.call(this,t),o=[].concat(n),r=this.options,s=n.length,a=this.yAxis.getThreshold(r.threshold);if(3===s&&o.push(qe,n[1],n[2]),r.stacking&&!this.closedStacks)for(e=t.length-1;e>=0;e--)i=u(t[e].yBottom,a),e<t.length-1&&r.step&&o.push(t[e+1].plotX,i),o.push(t[e].plotX,i);else this.closeSegment(o,t,a);return this.areaPath=this.areaPath.concat(o),n},closeSegment:function(t,e,i){t.push(qe,e[e.length-1].plotX,i,qe,e[0].plotX,i)
},drawGraph:function(){this.areaPath=[],Fi.prototype.drawGraph.apply(this);var t=this,e=this.areaPath,i=this.options,n=i.negativeColor,o=i.negativeFillColor,r=[["area",this.color,i.fillColor]];(n||o)&&r.push(["areaNeg",n,o]),hi(r,function(n){var o=n[0],r=t[o];r?r.animate({d:e}):t[o]=t.chart.renderer.path(e).attr({fill:u(n[2],Pi(n[1]).setOpacity(u(i.fillOpacity,.75)).get()),zIndex:0}).add(t.group)})},drawLegendSymbol:Wi.drawRectangle});ni.area=Vi,bi.spline=e(ki);var _i=m(Fi,{type:"spline",getPointSpline:function(t,e,i){var n,o,r,s,a,l=1.5,h=l+1,c=e.plotX,d=e.plotY,p=t[i-1],u=t[i+1];if(p&&u){var f,g=p.plotX,m=p.plotY,y=u.plotX,v=u.plotY;n=(l*c+g)/h,o=(l*d+m)/h,r=(l*c+y)/h,s=(l*d+v)/h,f=(s-o)*(r-c)/(r-n)+d-s,o+=f,s+=f,o>m&&o>d?(o=ye(m,d),s=2*d-o):m>o&&d>o&&(o=ve(m,d),s=2*d-o),s>v&&s>d?(s=ye(v,d),o=2*d-s):v>s&&d>s&&(s=ve(v,d),o=2*d-s),e.rightContX=r,e.rightContY=s}return i?(a=["C",p.rightContX||p.plotX,p.rightContY||p.plotY,n||c,o||d,c,d],p.rightContX=p.rightContY=null):a=[$e,c,d],a}});ni.spline=_i,bi.areaspline=e(bi.area);var Ui=Vi.prototype,Zi=m(_i,{type:"areaspline",closedStacks:!0,getSegmentPath:Ui.getSegmentPath,closeSegment:Ui.closeSegment,drawGraph:Ui.drawGraph,drawLegendSymbol:Wi.drawRectangle});ni.areaspline=Zi,bi.column=e(ki,{borderColor:"#FFFFFF",borderRadius:0,groupPadding:.2,marker:null,pointPadding:.1,minPointLength:0,cropThreshold:50,pointRange:null,states:{hover:{brightness:.1,shadow:!1,halo:!1},select:{color:"#C0C0C0",borderColor:"#000000",shadow:!1}},dataLabels:{align:null,verticalAlign:null,y:null},stickyTracking:!1,tooltip:{distance:6},threshold:0});var Ki=m(Fi,{type:"column",pointAttrToOptions:{stroke:"borderColor",fill:"color",r:"borderRadius"},cropShoulder:0,trackerGroups:["group","dataLabelsGroup"],negStacks:!0,init:function(){Fi.prototype.init.apply(this,arguments);var t=this,e=t.chart;e.hasRendered&&hi(e.series,function(e){e.type===t.type&&(e.isDirty=!0)})},getColumnMetrics:function(){var t,e,i=this,n=i.options,o=i.xAxis,r=i.yAxis,s=o.reversed,a={},l=0;n.grouping===!1?l=1:hi(i.chart.series,function(n){var o=n.options,s=n.yAxis;n.type===i.type&&n.visible&&r.len===s.len&&r.pos===s.pos&&(o.stacking?(t=n.stackKey,a[t]===G&&(a[t]=l++),e=a[t]):o.grouping!==!1&&(e=l++),n.columnIndex=e)});var h=ve(xe(o.transA)*(o.ordinalSlope||n.pointRange||o.closestPointRange||o.tickInterval||1),o.len),d=h*n.groupPadding,p=h-2*d,f=p/l,g=n.pointWidth,m=c(g)?(f-g)/2:f*n.pointPadding,y=u(g,f-2*m),v=(s?l-(i.columnIndex||0):i.columnIndex)||0,x=m+(d+v*f-h/2)*(s?-1:1);return i.columnMetrics={width:y,offset:x}},translate:function(){var t=this,e=t.chart,i=t.options,n=t.borderWidth=u(i.borderWidth,t.activePointCount>.5*t.xAxis.len?0:1),o=t.yAxis,r=i.threshold,s=t.translatedThreshold=o.getThreshold(r),a=u(i.minPointLength,5),l=t.getColumnMetrics(),h=l.width,c=t.barW=ye(h,1+2*n),d=t.pointXOffset=l.offset,p=-(n%2?.5:0),f=n%2?.5:1;e.renderer.isVML&&e.inverted&&(f+=1),i.pointPadding&&(c=me(c)),Fi.prototype.translate.apply(t),hi(t.points,function(i){var n,r,l,g=u(i.yBottom,s),m=ve(ye(-999-g,i.plotY),o.len+999+g),y=i.plotX+d,v=c,x=ve(m,g),b=ye(m,g)-x;xe(b)<a&&a&&(b=a,x=fe(xe(x-s)>a?g-a:s-(o.translate(i.y,0,1,0,1)>s?0:a))),i.barX=y,i.pointWidth=h,i.tooltipPos=e.inverted?[o.len-m,t.xAxis.len-y-v/2]:[y+v/2,m+o.pos-e.plotTop],n=fe(y+v)+p,y=fe(y)+p,v=n-y,l=xe(x)<.5,r=fe(x+b)+f,x=fe(x)+f,b=r-x,l&&(x-=1,b+=1),i.shapeType="rect",i.shapeArgs={x:y,y:x,width:v,height:b}})},getSymbol:Xe,drawLegendSymbol:Wi.drawRectangle,drawGraph:Xe,drawPoints:function(){var t,i,n=this,o=this.chart,r=n.options,s=o.renderer,a=r.animationLimit||250;hi(n.points,function(l){var h,d=l.plotY,p=l.graphic;d===G||isNaN(d)||null===l.y?p&&(l.graphic=p.destroy()):(t=l.shapeArgs,h=c(n.borderWidth)?{"stroke-width":n.borderWidth}:{},i=l.pointAttr[l.selected?ei:Qe]||n.pointAttr[Qe],p?(vi(p),p.attr(h)[o.pointCount<a?"animate":"attr"](e(t))):l.graphic=p=s[l.shapeType](t).attr(i).attr(h).add(n.group).shadow(r.shadow,null,r.stacking&&!r.borderRadius))})},animate:function(t){var e,i=this,n=this.yAxis,o=i.options,r=this.chart.inverted,s={};Be&&(t?(s.scaleY=.001,e=ve(n.pos+n.len,ye(n.pos,n.toPixels(o.threshold))),r?s.translateX=e-n.len:s.translateY=e,i.group.attr(s)):(s.scaleY=1,s[r?"translateX":"translateY"]=n.pos,i.group.animate(s,i.options.animation),i.animate=null))},remove:function(){var t=this,e=t.chart;e.hasRendered&&hi(e.series,function(e){e.type===t.type&&(e.isDirty=!0)}),Fi.prototype.remove.apply(t,arguments)}});ni.column=Ki,bi.bar=e(bi.column);var $i=m(Ki,{type:"bar",inverted:!0});ni.bar=$i,bi.scatter=e(ki,{lineWidth:0,tooltip:{headerFormat:'<span style="color:{series.color}">●</span> <span style="font-size: 10px;"> {series.name}</span><br/>',pointFormat:"x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>"},stickyTracking:!1});var qi=m(Fi,{type:"scatter",sorted:!1,requireSorting:!1,noSharedTooltip:!0,trackerGroups:["markerGroup","dataLabelsGroup"],takeOrdinalPosition:!1,singularTooltips:!0,drawGraph:function(){this.options.lineWidth&&Fi.prototype.drawGraph.call(this)}});ni.scatter=qi,bi.pie=e(ki,{borderColor:"#FFFFFF",borderWidth:1,center:[null,null],clip:!1,colorByPoint:!0,dataLabels:{distance:30,enabled:!0,formatter:function(){return this.point.name}},ignoreHiddenPoint:!0,legendType:"point",marker:null,size:null,showInLegend:!1,slicedOffset:10,states:{hover:{brightness:.1,shadow:!1}},stickyTracking:!1,tooltip:{followPointer:!0}});var Ji=m(Ni,{init:function(){Ni.prototype.init.apply(this,arguments);var e,i=this;return i.y<0&&(i.y=null),t(i,{visible:i.visible!==!1,name:u(i.name,"Slice")}),e=function(t){i.slice("select"===t.type)},ui(i,"select",e),ui(i,"unselect",e),i},setVisible:function(t){var e=this,i=e.series,n=i.chart;e.visible=e.options.visible=t=t===G?!e.visible:t,i.options.data[li(e,i.data)]=e.options,hi(["graphic","dataLabel","connector","shadowGroup"],function(i){e[i]&&e[i][t?"show":"hide"](!0)}),e.legendItem&&n.legend.colorizeItem(e,t),!i.isDirty&&i.options.ignoreHiddenPoint&&(i.isDirty=!0,n.redraw())},slice:function(t,e,i){var n,o=this,r=o.series,s=r.chart;D(i,s),e=u(e,!0),o.sliced=o.options.sliced=t=c(t)?t:!o.sliced,r.options.data[li(o,r.data)]=o.options,n=t?o.slicedTranslation:{translateX:0,translateY:0},o.graphic.animate(n),o.shadowGroup&&o.shadowGroup.animate(n)},haloPath:function(t){var e=this.shapeArgs,i=this.series.chart;return this.sliced||!this.visible?[]:this.series.chart.renderer.symbols.arc(i.plotLeft+e.x,i.plotTop+e.y,e.r+t,e.r+t,{innerR:this.shapeArgs.r,start:e.start,end:e.end})}}),Qi={type:"pie",isCartesian:!1,pointClass:Ji,requireSorting:!1,noSharedTooltip:!0,trackerGroups:["group","dataLabelsGroup"],axisTypes:[],pointAttrToOptions:{stroke:"borderColor","stroke-width":"borderWidth",fill:"color"},singularTooltips:!0,getColor:Xe,animate:function(t){var e=this,i=e.points,n=e.startAngleRad;t||(hi(i,function(t){var i=t.graphic,o=t.shapeArgs;i&&(i.attr({r:e.center[3]/2,start:n,end:n}),i.animate({r:o.r,start:o.start,end:o.end},e.options.animation))}),e.animate=null)},setData:function(t,e,i,n){Fi.prototype.setData.call(this,t,!1,i,n),this.processData(),this.generatePoints(),u(e,!0)&&this.chart.redraw(i)},generatePoints:function(){var t,e,i,n,o=0,r=this.options.ignoreHiddenPoint;for(Fi.prototype.generatePoints.call(this),e=this.points,i=e.length,t=0;i>t;t++)n=e[t],o+=r&&!n.visible?0:n.y;for(this.total=o,t=0;i>t;t++)n=e[t],n.percentage=o>0?n.y/o*100:0,n.total=o},translate:function(t){this.generatePoints();var e,i,n,o,r,s,a,l=this,h=0,c=1e3,d=l.options,p=d.slicedOffset,f=p+d.borderWidth,g=d.startAngle||0,m=l.startAngleRad=we/180*(g-90),y=l.endAngleRad=we/180*(u(d.endAngle,g+360)-90),v=y-m,x=l.points,b=d.dataLabels.distance,k=d.ignoreHiddenPoint,w=x.length;for(t||(l.center=t=l.getCenter()),l.getX=function(e,i){return n=ue.asin(ve((e-t[1])/(t[2]/2+b),1)),t[0]+(i?-1:1)*be(n)*(t[2]/2+b)},s=0;w>s;s++)a=x[s],e=m+h*v,(!k||a.visible)&&(h+=a.percentage/100),i=m+h*v,a.shapeType="arc",a.shapeArgs={x:t[0],y:t[1],r:t[2]/2,innerR:t[3]/2,start:fe(e*c)/c,end:fe(i*c)/c},n=(i+e)/2,n>1.5*we?n-=2*we:-we/2>n&&(n+=2*we),a.slicedTranslation={translateX:fe(be(n)*p),translateY:fe(ke(n)*p)},o=be(n)*t[2]/2,r=ke(n)*t[2]/2,a.tooltipPos=[t[0]+.7*o,t[1]+.7*r],a.half=-we/2>n||n>we/2?1:0,a.angle=n,f=ve(f,b/2),a.labelPos=[t[0]+o+be(n)*b,t[1]+r+ke(n)*b,t[0]+o+be(n)*f,t[1]+r+ke(n)*f,t[0]+o,t[1]+r,0>b?"center":a.half?"right":"left",n]},drawGraph:null,drawPoints:function(){var e,i,n,o,r=this,s=r.chart,a=s.renderer,l=r.options.shadow;l&&!r.shadowGroup&&(r.shadowGroup=a.g("shadow").add(r.group)),hi(r.points,function(s){i=s.graphic,o=s.shapeArgs,n=s.shadowGroup,l&&!n&&(n=s.shadowGroup=a.g("shadow").add(r.shadowGroup)),e=s.sliced?s.slicedTranslation:{translateX:0,translateY:0},n&&n.attr(e),i?i.animate(t(o,e)):s.graphic=i=a[s.shapeType](o).setRadialReference(r.center).attr(s.pointAttr[s.selected?ei:Qe]).attr({"stroke-linejoin":"round"}).attr(e).add(r.group).shadow(l,n),void 0!==s.visible&&s.setVisible(s.visible)})},sortByAngle:function(t,e){t.sort(function(t,i){return void 0!==t.angle&&(i.angle-t.angle)*e})},drawLegendSymbol:Wi.drawRectangle,getCenter:Yi.getCenter,getSymbol:Xe};Qi=m(Fi,Qi),ni.pie=Qi,Fi.prototype.drawDataLabels=function(){var i,n,o,r,s=this,a=s.options,l=a.cursor,h=a.dataLabels,d=s.points,p=s.hasRendered||0;(h.enabled||s._hasPointLabels)&&(s.dlProcessOptions&&s.dlProcessOptions(h),r=s.plotGroup("dataLabelsGroup","data-labels",h.defer?Ve:Ue,h.zIndex||6),u(h.defer,!0)&&(r.attr({opacity:+p}),p||ui(s,"afterAnimate",function(){s.visible&&r.show(),r[a.animation?"animate":"attr"]({opacity:1},{duration:200})})),n=h,hi(d,function(a){var d,p,f,g,m,y=a.dataLabel,v=a.connector,x=!0;if(i=a.options&&a.options.dataLabels,d=u(i&&i.enabled,n.enabled),y&&!d)a.dataLabel=y.destroy();else if(d){if(h=e(n,i),m=h.rotation,p=a.getLabelConfig(),o=h.format?k(h.format,p):h.formatter.call(p,h),h.style.color=u(h.color,h.style.color,s.color,"black"),y)c(o)?(y.attr({text:o}),x=!1):(a.dataLabel=y=y.destroy(),v&&(a.connector=v.destroy()));else if(c(o)){f={fill:h.backgroundColor,stroke:h.borderColor,"stroke-width":h.borderWidth,r:h.borderRadius||0,rotation:m,padding:h.padding,zIndex:1};for(g in f)f[g]===G&&delete f[g];y=a.dataLabel=s.chart.renderer[m?"text":"label"](o,0,-999,null,null,null,h.useHTML).attr(f).css(t(h.style,l&&{cursor:l})).add(r).shadow(h.shadow)}y&&s.alignDataLabel(a,y,h,null,x)}}))},Fi.prototype.alignDataLabel=function(e,i,n,o,r){var s,a=this.chart,l=a.inverted,h=u(e.plotX,-999),c=u(e.plotY,-999),d=i.getBBox(),p=this.visible&&(e.series.forceDL||a.isInsidePlot(h,fe(c),l)||o&&a.isInsidePlot(h,l?o.x+1:o.y+o.height-1,l));p&&(o=t({x:l?a.plotWidth-c:h,y:fe(l?a.plotHeight-h:c),width:0,height:0},o),t(n,{width:d.width,height:d.height}),n.rotation?i[r?"attr":"animate"]({x:o.x+n.x+o.width/2,y:o.y+n.y+o.height/2}).attr({align:n.align}):(i.align(n,null,o),s=i.alignAttr,"justify"===u(n.overflow,"justify")?this.justifyDataLabel(i,n,s,d,o,r):u(n.crop,!0)&&(p=a.isInsidePlot(s.x,s.y)&&a.isInsidePlot(s.x+d.width,s.y+d.height)))),p||(i.attr({y:-999}),i.placed=!1)},Fi.prototype.justifyDataLabel=function(t,e,i,n,o,r){var s,a,l=this.chart,h=e.align,c=e.verticalAlign;s=i.x,0>s&&("right"===h?e.align="left":e.x=-s,a=!0),s=i.x+n.width,s>l.plotWidth&&("left"===h?e.align="right":e.x=l.plotWidth-s,a=!0),s=i.y,0>s&&("bottom"===c?e.verticalAlign="top":e.y=-s,a=!0),s=i.y+n.height,s>l.plotHeight&&("top"===c?e.verticalAlign="bottom":e.y=l.plotHeight-s,a=!0),a&&(t.placed=!r,t.align(e,null,o))},ni.pie&&(ni.pie.prototype.drawDataLabels=function(){var t,e,i,n,o,r,s,a,l,h,c,d,p,f=this,g=f.data,m=f.chart,y=f.options.dataLabels,v=u(y.connectorPadding,10),x=u(y.connectorWidth,1),b=m.plotWidth,k=m.plotHeight,w=u(y.softConnector,!0),S=y.distance,T=f.center,P=T[2]/2,C=T[1],L=S>0,M=[[],[]],D=[0,0,0,0],I=function(t,e){return e.y-t.y};if(f.visible&&(y.enabled||f._hasPointLabels)){for(Fi.prototype.drawDataLabels.apply(f),hi(g,function(t){t.dataLabel&&t.visible&&M[t.half].push(t)}),d=2;d--;){var B,O,z,R,H=[],X=[],E=M[d],G=E.length;if(G){for(f.sortByAngle(E,d-.5),p=s=0;!s&&E[p];)s=E[p]&&E[p].dataLabel&&(E[p].dataLabel.getBBox().height||21),p++;if(S>0){for(z=ve(C+P+S,m.plotHeight),O=ye(0,C-P-S);z>=O;O+=s)H.push(O);if(B=H.length,G>B){for(c=[].concat(E),c.sort(I),p=G;p--;)c[p].rank=p;for(p=G;p--;)E[p].rank<B||E.splice(p,1);G=E.length}for(p=0;G>p;p++){t=E[p],r=t.labelPos;var W,Y,N=9999;for(Y=0;B>Y;Y++)W=xe(H[Y]-r[1]),N>W&&(N=W,R=Y);if(p>R&&null!==H[p])R=p;else if(G-p+R>B&&null!==H[p])for(R=B-G+p;null===H[R];)R++;else for(;null===H[R];)R++;X.push({i:R,y:H[R]}),H[R]=null}X.sort(I)}for(p=0;G>p;p++){var F,j;t=E[p],r=t.labelPos,n=t.dataLabel,h=t.visible===!1?Ve:Ue,j=r[1],S>0?(F=X.pop(),R=F.i,l=F.y,(j>l&&null!==H[R+1]||l>j&&null!==H[R-1])&&(l=ve(ye(0,j),m.plotHeight))):l=j,a=y.justify?T[0]+(d?-1:1)*(P+S):f.getX(l===C-P-S||l===C+P+S?j:l,d),n._attr={visibility:h,align:r[6]},n._pos={x:a+y.x+({left:v,right:-v}[r[6]]||0),y:l+y.y-10},n.connX=a,n.connY=l,null===this.options.size&&(o=n.width,v>a-o?D[3]=ye(fe(o-a+v),D[3]):a+o>b-v&&(D[1]=ye(fe(a+o-b+v),D[1])),0>l-s/2?D[0]=ye(fe(-l+s/2),D[0]):l+s/2>k&&(D[2]=ye(fe(l+s/2-k),D[2])))}}}(0===A(D)||this.verifyDataLabelOverflow(D))&&(this.placeDataLabels(),L&&x&&hi(this.points,function(t){e=t.connector,r=t.labelPos,n=t.dataLabel,n&&n._pos?(h=n._attr.visibility,a=n.connX,l=n.connY,i=w?[$e,a+("left"===r[6]?5:-5),l,"C",a,l,2*r[2]-r[4],2*r[3]-r[5],r[2],r[3],qe,r[4],r[5]]:[$e,a+("left"===r[6]?5:-5),l,qe,r[2],r[3],qe,r[4],r[5]],e?(e.animate({d:i}),e.attr("visibility",h)):t.connector=e=f.chart.renderer.path(i).attr({"stroke-width":x,stroke:y.connectorColor||t.color||"#606060",visibility:h}).add(f.dataLabelsGroup)):e&&(t.connector=e.destroy())}))}},ni.pie.prototype.placeDataLabels=function(){hi(this.points,function(t){var e,i=t.dataLabel;i&&(e=i._pos,e?(i.attr(i._attr),i[i.moved?"animate":"attr"](e),i.moved=!0):i&&i.attr({y:-999}))})},ni.pie.prototype.alignDataLabel=Xe,ni.pie.prototype.verifyDataLabelOverflow=function(t){var e,i=this.center,n=this.options,o=n.center,r=n.minSize||80,s=r;return null!==o[0]?s=ye(i[2]-ye(t[1],t[3]),r):(s=ye(i[2]-t[1]-t[3],r),i[0]+=(t[3]-t[1])/2),null!==o[1]?s=ye(ve(s,i[2]-ye(t[0],t[2])),r):(s=ye(ve(s,i[2]-t[0]-t[2]),r),i[1]+=(t[0]-t[2])/2),s<i[2]?(i[2]=s,this.translate(i),hi(this.points,function(t){t.dataLabel&&(t.dataLabel._pos=null)}),this.drawDataLabels&&this.drawDataLabels()):e=!0,e}),ni.column&&(ni.column.prototype.alignDataLabel=function(t,i,n,o,r){var s=this.chart,a=s.inverted,l=t.dlBox||t.shapeArgs,h=t.below||t.plotY>u(this.translatedThreshold,s.plotSizeY),c=u(n.inside,!!this.options.stacking);l&&(o=e(l),a&&(o={x:s.plotWidth-o.y-o.height,y:s.plotHeight-o.x-o.width,width:o.height,height:o.width}),c||(a?(o.x+=h?0:o.width,o.width=0):(o.y+=h?o.height:0,o.height=0))),n.align=u(n.align,!a||c?"center":h?"right":"left"),n.verticalAlign=u(n.verticalAlign,a||c?"middle":h?"top":"bottom"),Fi.prototype.alignDataLabel.call(this,t,i,n,o,r)});var tn=ce.TrackerMixin={drawTrackerPoint:function(){var t=this,e=t.chart,i=e.pointer,n=t.options.cursor,o=n&&{cursor:n},r=function(i){var n,o=i.target;for(e.hoverSeries!==t&&t.onMouseOver();o&&!n;)n=o.point,o=o.parentNode;n!==G&&n!==e.hoverPoint&&n.onMouseOver(i)};hi(t.points,function(t){t.graphic&&(t.graphic.element.point=t),t.dataLabel&&(t.dataLabel.element.point=t)}),t._hasTracking||(hi(t.trackerGroups,function(e){t[e]&&(t[e].addClass(_e+"tracker").on("mouseover",r).on("mouseout",function(t){i.onTrackerMouseOut(t)}).css(o),Y&&t[e].on("touchstart",r))}),t._hasTracking=!0)},drawTrackerGraph:function(){var t,e,i=this,n=i.options,o=n.trackByArea,r=[].concat(o?i.areaPath:i.graphPath),s=r.length,a=i.chart,l=a.pointer,h=a.renderer,c=a.options.tooltip.snap,d=i.tracker,p=n.cursor,u=p&&{cursor:p},f=i.singlePoints,g=function(){a.hoverSeries!==i&&i.onMouseOver()},m="rgba(192,192,192,"+(Be?1e-4:.002)+")";if(s&&!o)for(e=s+1;e--;)r[e]===$e&&r.splice(e+1,0,r[e+1]-c,r[e+2],qe),(e&&r[e]===$e||e===s)&&r.splice(e,0,qe,r[e-2]+c,r[e-1]);for(e=0;e<f.length;e++)t=f[e],r.push($e,t.plotX-c,t.plotY,qe,t.plotX+c,t.plotY);d?d.attr({d:r}):(i.tracker=h.path(r).attr({"stroke-linejoin":"round",visibility:i.visible?Ue:Ve,stroke:m,fill:o?m:Ke,"stroke-width":n.lineWidth+(o?0:2*c),zIndex:2}).add(i.group),hi([i.tracker,i.markerGroup],function(t){t.addClass(_e+"tracker").on("mouseover",g).on("mouseout",function(t){l.onTrackerMouseOut(t)}).css(u),Y&&t.on("touchstart",g)}))}};ni.column&&(Ki.prototype.drawTracker=tn.drawTrackerPoint),ni.pie&&(ni.pie.prototype.drawTracker=tn.drawTrackerPoint),ni.scatter&&(qi.prototype.drawTracker=tn.drawTrackerPoint),t(Gi.prototype,{setItemEvents:function(t,e,i,n,o){var r=this;(i?e:t.legendGroup).on("mouseover",function(){t.setState(ti),e.css(r.options.itemHoverStyle)}).on("mouseout",function(){e.css(t.visible?n:o),t.setState()}).on("click",function(e){var i="legendItemClick",n=function(){t.setVisible()};e={browserEvent:e},t.firePointEvent?t.firePointEvent(i,e,n):gi(t,i,e,n)})},createCheckboxForItem:function(t){var e=this;t.checkbox=g("input",{type:"checkbox",checked:t.selected,defaultChecked:t.selected},e.options.itemCheckboxStyle,e.chart.container),ui(t.checkbox,"click",function(e){var i=e.target;gi(t,"checkboxClick",{checked:i.checked},function(){t.select()})})}}),F.legend.itemStyle.cursor="pointer",t(X.prototype,{showResetZoom:function(){var t=this,e=F.lang,i=t.options.chart.resetZoomButton,n=i.theme,o=n.states,r="chart"===i.relativeTo?null:"plotBox";this.resetZoomButton=t.renderer.button(e.resetZoom,null,null,function(){t.zoomOut()},n,o&&o.hover).attr({align:i.position.align,title:e.resetZoomTitle}).add().align(i.position,!1,r)},zoomOut:function(){var t=this;gi(t,"selection",{resetSelection:!0},function(){t.zoom()})},zoom:function(t){var e,i,n=this,r=n.pointer,s=!1;!t||t.resetSelection?hi(n.axes,function(t){e=t.zoom()}):hi(t.xAxis.concat(t.yAxis),function(t){var i=t.axis,n=i.isXAxis;(r[n?"zoomX":"zoomY"]||r[n?"pinchX":"pinchY"])&&(e=i.zoom(t.min,t.max),i.displayBtn&&(s=!0))}),i=n.resetZoomButton,s&&!i?n.showResetZoom():!s&&o(i)&&(n.resetZoomButton=i.destroy()),e&&n.redraw(u(n.options.chart.animation,t&&t.animation,n.pointCount<100))},pan:function(t,e){var i,n=this,o=n.hoverPoints;o&&hi(o,function(t){t.setState()}),hi("xy"===e?[1,0]:[1],function(e){var o=t[e?"chartX":"chartY"],r=n[e?"xAxis":"yAxis"][0],s=n[e?"mouseDownX":"mouseDownY"],a=(r.pointRange||0)/2,l=r.getExtremes(),h=r.toValue(s-o,!0)+a,c=r.toValue(s+n[e?"plotWidth":"plotHeight"]-o,!0)-a;r.series.length&&h>ve(l.dataMin,l.min)&&c<ye(l.dataMax,l.max)&&(r.setExtremes(h,c,!1,!1,{trigger:"pan"}),i=!0),n[e?"mouseDownX":"mouseDownY"]=o}),i&&n.redraw(!1),f(n.container,{cursor:"move"})}}),t(Ni.prototype,{select:function(t,e){var i=this,n=i.series,o=n.chart;t=u(t,!i.selected),i.firePointEvent(t?"select":"unselect",{accumulate:e},function(){i.selected=i.options.selected=t,n.options.data[li(i,n.data)]=i.options,i.setState(t&&ei),e||hi(o.getSelectedPoints(),function(t){t.selected&&t!==i&&(t.selected=t.options.selected=!1,n.options.data[li(t,n.data)]=t.options,t.setState(Qe),t.firePointEvent("unselect"))})})},onMouseOver:function(t){var e=this,i=e.series,n=i.chart,o=n.tooltip,r=n.hoverPoint;r&&r!==e&&r.onMouseOut(),e.firePointEvent("mouseOver"),!o||o.shared&&!i.noSharedTooltip||o.refresh(e,t),e.setState(ti),n.hoverPoint=e},onMouseOut:function(){var t=this.series.chart,e=t.hoverPoints;this.firePointEvent("mouseOut"),e&&-1!==li(this,e)||(this.setState(),t.hoverPoint=null)},importEvents:function(){if(!this.hasImportedEvents){var t,i=this,n=e(i.series.options.point,i.options),o=n.events;i.events=o;for(t in o)ui(i,t,o[t]);this.hasImportedEvents=!0}},setState:function(i,n){var o,r,s,a,l=this,h=l.plotX,c=l.plotY,d=l.series,p=d.options.states,u=bi[d.type].marker&&d.options.marker,f=u&&!u.enabled,g=u&&u.states[i],m=g&&g.enabled===!1,y=d.stateMarkerGraphic,v=l.marker||{},x=d.chart,b=d.halo;i=i||Qe,a=l.pointAttr[i]||d.pointAttr[i],i===l.state&&!n||l.selected&&i!==ei||p[i]&&p[i].enabled===!1||i&&(m||f&&g.enabled===!1)||i&&v.states&&v.states[i]&&v.states[i].enabled===!1||(l.graphic?(o=u&&l.graphic.symbolName&&a.r,l.graphic.attr(e(a,o?{x:h-o,y:c-o,width:2*o,height:2*o}:{})),y&&y.hide()):(i&&g&&(o=g.radius,s=v.symbol||d.symbol,y&&y.currentSymbol!==s&&(y=y.destroy()),y?y[n?"animate":"attr"]({x:h-o,y:c-o}):s&&(d.stateMarkerGraphic=y=x.renderer.symbol(s,h-o,c-o,2*o,2*o).attr(a).add(d.markerGroup),y.currentSymbol=s)),y&&y[i&&x.isInsidePlot(h,c,x.inverted)?"show":"hide"]()),r=p[i]&&p[i].halo,r&&r.size?(b||(d.halo=b=x.renderer.path().add(d.seriesGroup)),b.attr(t({fill:Pi(l.color||d.color).setOpacity(r.opacity).get()},r.attributes))[n?"animate":"attr"]({d:l.haloPath(r.size)})):b&&b.attr({d:[]}),l.state=i)},haloPath:function(t){var e=this.series,i=e.chart,n=e.getPlotBox(),o=i.inverted;return i.renderer.symbols.circle(n.translateX+(o?e.yAxis.len-this.plotY:this.plotX)-t,n.translateY+(o?e.xAxis.len-this.plotX:this.plotY)-t,2*t,2*t)}}),t(Fi.prototype,{onMouseOver:function(){var t=this,e=t.chart,i=e.hoverSeries;i&&i!==t&&i.onMouseOut(),t.options.events.mouseOver&&gi(t,"mouseOver"),t.setState(ti),e.hoverSeries=t},onMouseOut:function(){var t=this,e=t.options,i=t.chart,n=i.tooltip,o=i.hoverPoint;o&&o.onMouseOut(),t&&e.events.mouseOut&&gi(t,"mouseOut"),!n||e.stickyTracking||n.shared&&!t.noSharedTooltip||n.hide(),t.setState(),i.hoverSeries=null},setState:function(t){var e,i=this,n=i.options,o=i.graph,r=i.graphNeg,s=n.states,a=n.lineWidth;if(t=t||Qe,i.state!==t){if(i.state=t,s[t]&&s[t].enabled===!1)return;t&&(a=s[t].lineWidth||a+(s[t].lineWidthPlus||0)),o&&!o.dashstyle&&(e={"stroke-width":a},o.attr(e),r&&r.attr(e))}},setVisible:function(t,e){var i,n=this,o=n.chart,r=n.legendItem,s=o.options.chart.ignoreHiddenSeries,a=n.visible;n.visible=t=n.userOptions.visible=t===G?!a:t,i=t?"show":"hide",hi(["group","dataLabelsGroup","markerGroup","tracker"],function(t){n[t]&&n[t][i]()}),o.hoverSeries===n&&n.onMouseOut(),r&&o.legend.colorizeItem(n,t),n.isDirty=!0,n.options.stacking&&hi(o.series,function(t){t.options.stacking&&t.visible&&(t.isDirty=!0)}),hi(n.linkedSeries,function(e){e.setVisible(t,!1)}),s&&(o.isDirtyBox=!0),e!==!1&&o.redraw(),gi(n,i)},setTooltipPoints:function(t){var e,i,n,o,r,s,a,l=this,h=[],c=l.xAxis,d=c&&c.getExtremes(),p=c?c.tooltipLen||c.len:l.chart.plotSizeX,u=[];if(l.options.enableMouseTracking!==!1&&!l.singularTooltips){for(t&&(l.tooltipPoints=null),hi(l.segments||l.points,function(t){h=h.concat(t)}),c&&c.reversed&&(h=h.reverse()),l.orderTooltipPoints&&l.orderTooltipPoints(h),e=h.length,a=0;e>a;a++)if(o=h[a],r=o.x,r>=d.min&&r<=d.max)for(s=h[a+1],i=n===G?0:n+1,n=h[a+1]?ve(ye(0,ge((o.clientX+(s?s.wrappedClientX||s.clientX:p))/2)),p):p;i>=0&&n>=i;)u[i++]=o;l.tooltipPoints=u}},show:function(){this.setVisible(!0)},hide:function(){this.setVisible(!1)},select:function(t){var e=this;e.selected=t=t===G?!e.selected:t,e.checkbox&&(e.checkbox.checked=t),gi(e,t?"select":"unselect")},drawTracker:tn.drawTrackerGraph}),t(ce,{Axis:H,Chart:X,Color:Pi,Point:Ni,Tick:R,Renderer:W,Series:Fi,SVGElement:z,SVGRenderer:Ai,arrayMin:P,arrayMax:A,charts:Ee,dateFormat:j,format:k,pathAnim:_,getOptions:O,hasBidiBug:Oe,isTouchDevice:De,numberFormat:y,seriesTypes:ni,setOptions:B,addEvent:ui,removeEvent:fi,createElement:g,discardElement:L,css:f,each:hi,extend:t,map:pi,merge:e,pick:u,splat:p,extendClass:m,pInt:i,wrap:x,svg:Be,canvas:ze,vml:!Be&&!ze,product:We,version:Ye})}();
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\highcharts\\highcharts.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./highcharts.min.js');
},{"./highcharts.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\highcharts\\highcharts.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\isinviewport\\is-in-viewport.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./jquery.isInViewport.js');
},{"./jquery.isInViewport.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\isinviewport\\jquery.isInViewport.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\isinviewport\\jquery.isInViewport.js":[function(require,module,exports){
/**
 * @author  Mudit Ameta
 * @license https://github.com/zeusdeux/isInViewport/blob/master/license.md MIT
 */
(function($) {

  //lets you chain any arbitrary function or an array of functions and returns a jquery object
  $.fn.do = function(args) {
    if (arguments.length === 1 && typeof args === 'function')
      args = [args];

    if (!(args instanceof Array))
      throw new SyntaxError('isInViewport: Argument(s) passed to .do should be a function or an array of functions');

    for (var i = 0; i < args.length; i++) {
      if (typeof args[i] !== 'function') {
        console.warn('isInViewport: Argument(s) passed to .do should be a function or an array of functions');
        console.warn('isInViewport: Ignoring non-function values in array and moving on');
        continue;
      }
      for (var j = 0; j < this.length; j++)
        args[i].call($(this[j]));
    }
    return this;
  };

  //gets the width of the scrollbar

  function getScrollbarWidth(viewport) {
    var scrollBarWidth;

    //append a div that has 100% width to get true width of viewport
    var el = $('<div></div>').css({
      'width': '100%'
    });
    viewport.append(el);

    //subtract true width from the viewport width which is inclusive
    //of scrollbar by default
    scrollBarWidth = viewport.width() - el.width();

    //remove our element from DOM
    el.remove();
    return scrollBarWidth;
  }

  function isInViewport(element, options) {
    var boundingRect = element.getBoundingClientRect();
    var top = boundingRect.top;
    var bottom = boundingRect.bottom;
    var left = boundingRect.left;
    var right = boundingRect.right;
    var settings = $.extend({
      'tolerance': 0,
      'viewport': window
    }, options);
    var isVisibleFlag = false;
    var $viewport = settings.viewport.get ? settings.viewport : $(settings.viewport);

    if (!$viewport.length) {
      console.warn('isInViewport: The viewport selector you have provided matches no element on page.');
      console.warn('isInViewport: Defaulting to viewport as window');
      $viewport = $(window);
    }

    var $viewportHeight = $viewport.height();
    var $viewportWidth = $viewport.width();
    var typeofViewport = $viewport.get(0).toString();

    //if the viewport is other than window recalculate the top,
    //bottom,left and right wrt the new viewport
    //the [object DOMWindow] check is for window object type in PhantomJS
    if (typeofViewport !== '[object Window]' && typeofViewport !== '[object DOMWindow]') {
      var $viewportOffset = $viewport.offset();

      //recalculate these relative to viewport
      top = top - $viewportOffset.top;
      bottom = bottom - $viewportOffset.top;
      left = left - $viewportOffset.left;
      right = left + $viewportWidth;

      //get the scrollbar width from cache or calculate it
      isInViewport.scrollBarWidth = isInViewport.scrollBarWidth || getScrollbarWidth($viewport);

      //remove the width of the scrollbar from the viewport width
      $viewportWidth -= isInViewport.scrollBarWidth;
    }

    //handle falsy, non-number and non-integer tolerance value
    //same as checking using isNaN and then setting to 0
    //bitwise operators deserve some love too you know
    settings.tolerance = ~~Math.round(parseFloat(settings.tolerance));

    if (settings.tolerance < 0)
      settings.tolerance = $viewportHeight + settings.tolerance; //viewport height - tol

    //the element is NOT in viewport iff it is completely out of 
    //viewport laterally or if it is completely out of the tolerance
    //region. Therefore, if it is partially in view then it is considered
    //to be in the viewport and hence true is returned

    //if the element is laterally outside the viewport
    if (Math.abs(left) >= $viewportWidth)
      return isVisibleFlag;

    //if the element is bound to some tolerance
    isVisibleFlag = settings.tolerance ? !! (top <= settings.tolerance && bottom >= settings.tolerance) : !! (bottom > 0 && top <= $viewportHeight);

    return isVisibleFlag;
  }

  $.extend($.expr[':'], {
    'in-viewport': function(currObj, index, meta) {
      if ( !! meta[3]) {
        var args = meta[3].split(',');

        //when user only gives viewport and no tolerance
        if (args.length === 1 && isNaN(args[0])) {
          args[1] = args[0];
          args[0] = undefined;
        }
        return isInViewport(currObj, {
          tolerance: args[0] ? args[0].trim() : undefined,
          viewport: args[1] ? args[1].trim() : undefined
        });
      }
      else
        return isInViewport(currObj);
    }
  });
})(jQuery);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\jqueryui\\jquery-ui.min.js":[function(require,module,exports){
/*! jQuery UI - v1.11.1 - 2014-08-13
* http://jqueryui.com
* Includes: core.js, widget.js, mouse.js, sortable.js
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */

(function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery)})(function(e){function t(t,s){var a,n,r,o=t.nodeName.toLowerCase();return"area"===o?(a=t.parentNode,n=a.name,t.href&&n&&"map"===a.nodeName.toLowerCase()?(r=e("img[usemap='#"+n+"']")[0],!!r&&i(r)):!1):(/input|select|textarea|button|object/.test(o)?!t.disabled:"a"===o?t.href||s:s)&&i(t)}function i(t){return e.expr.filters.visible(t)&&!e(t).parents().addBack().filter(function(){return"hidden"===e.css(this,"visibility")}).length}e.ui=e.ui||{},e.extend(e.ui,{version:"1.11.1",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({scrollParent:function(t){var i=this.css("position"),s="absolute"===i,a=t?/(auto|scroll|hidden)/:/(auto|scroll)/,n=this.parents().filter(function(){var t=e(this);return s&&"static"===t.css("position")?!1:a.test(t.css("overflow")+t.css("overflow-y")+t.css("overflow-x"))}).eq(0);return"fixed"!==i&&n.length?n:e(this[0].ownerDocument||document)},uniqueId:function(){var e=0;return function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++e)})}}(),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(i){return!!e.data(i,t)}}):function(t,i,s){return!!e.data(t,s[3])},focusable:function(i){return t(i,!isNaN(e.attr(i,"tabindex")))},tabbable:function(i){var s=e.attr(i,"tabindex"),a=isNaN(s);return(a||s>=0)&&t(i,!a)}}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(t,i){function s(t,i,s,n){return e.each(a,function(){i-=parseFloat(e.css(t,"padding"+this))||0,s&&(i-=parseFloat(e.css(t,"border"+this+"Width"))||0),n&&(i-=parseFloat(e.css(t,"margin"+this))||0)}),i}var a="Width"===i?["Left","Right"]:["Top","Bottom"],n=i.toLowerCase(),r={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+i]=function(t){return void 0===t?r["inner"+i].call(this):this.each(function(){e(this).css(n,s(this,t)+"px")})},e.fn["outer"+i]=function(t,a){return"number"!=typeof t?r["outer"+i].call(this,t):this.each(function(){e(this).css(n,s(this,t,!0,a)+"px")})}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(i){return arguments.length?t.call(this,e.camelCase(i)):t.call(this)}}(e.fn.removeData)),e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),e.fn.extend({focus:function(t){return function(i,s){return"number"==typeof i?this.each(function(){var t=this;setTimeout(function(){e(t).focus(),s&&s.call(t)},i)}):t.apply(this,arguments)}}(e.fn.focus),disableSelection:function(){var e="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.bind(e+".ui-disableSelection",function(e){e.preventDefault()})}}(),enableSelection:function(){return this.unbind(".ui-disableSelection")},zIndex:function(t){if(void 0!==t)return this.css("zIndex",t);if(this.length)for(var i,s,a=e(this[0]);a.length&&a[0]!==document;){if(i=a.css("position"),("absolute"===i||"relative"===i||"fixed"===i)&&(s=parseInt(a.css("zIndex"),10),!isNaN(s)&&0!==s))return s;a=a.parent()}return 0}}),e.ui.plugin={add:function(t,i,s){var a,n=e.ui[t].prototype;for(a in s)n.plugins[a]=n.plugins[a]||[],n.plugins[a].push([i,s[a]])},call:function(e,t,i,s){var a,n=e.plugins[t];if(n&&(s||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(a=0;n.length>a;a++)e.options[n[a][0]]&&n[a][1].apply(e.element,i)}};var s=0,a=Array.prototype.slice;e.cleanData=function(t){return function(i){var s,a,n;for(n=0;null!=(a=i[n]);n++)try{s=e._data(a,"events"),s&&s.remove&&e(a).triggerHandler("remove")}catch(r){}t(i)}}(e.cleanData),e.widget=function(t,i,s){var a,n,r,o,h={},l=t.split(".")[0];return t=t.split(".")[1],a=l+"-"+t,s||(s=i,i=e.Widget),e.expr[":"][a.toLowerCase()]=function(t){return!!e.data(t,a)},e[l]=e[l]||{},n=e[l][t],r=e[l][t]=function(e,t){return this._createWidget?(arguments.length&&this._createWidget(e,t),void 0):new r(e,t)},e.extend(r,n,{version:s.version,_proto:e.extend({},s),_childConstructors:[]}),o=new i,o.options=e.widget.extend({},o.options),e.each(s,function(t,s){return e.isFunction(s)?(h[t]=function(){var e=function(){return i.prototype[t].apply(this,arguments)},a=function(e){return i.prototype[t].apply(this,e)};return function(){var t,i=this._super,n=this._superApply;return this._super=e,this._superApply=a,t=s.apply(this,arguments),this._super=i,this._superApply=n,t}}(),void 0):(h[t]=s,void 0)}),r.prototype=e.widget.extend(o,{widgetEventPrefix:n?o.widgetEventPrefix||t:t},h,{constructor:r,namespace:l,widgetName:t,widgetFullName:a}),n?(e.each(n._childConstructors,function(t,i){var s=i.prototype;e.widget(s.namespace+"."+s.widgetName,r,i._proto)}),delete n._childConstructors):i._childConstructors.push(r),e.widget.bridge(t,r),r},e.widget.extend=function(t){for(var i,s,n=a.call(arguments,1),r=0,o=n.length;o>r;r++)for(i in n[r])s=n[r][i],n[r].hasOwnProperty(i)&&void 0!==s&&(t[i]=e.isPlainObject(s)?e.isPlainObject(t[i])?e.widget.extend({},t[i],s):e.widget.extend({},s):s);return t},e.widget.bridge=function(t,i){var s=i.prototype.widgetFullName||t;e.fn[t]=function(n){var r="string"==typeof n,o=a.call(arguments,1),h=this;return n=!r&&o.length?e.widget.extend.apply(null,[n].concat(o)):n,r?this.each(function(){var i,a=e.data(this,s);return"instance"===n?(h=a,!1):a?e.isFunction(a[n])&&"_"!==n.charAt(0)?(i=a[n].apply(a,o),i!==a&&void 0!==i?(h=i&&i.jquery?h.pushStack(i.get()):i,!1):void 0):e.error("no such method '"+n+"' for "+t+" widget instance"):e.error("cannot call methods on "+t+" prior to initialization; "+"attempted to call method '"+n+"'")}):this.each(function(){var t=e.data(this,s);t?(t.option(n||{}),t._init&&t._init()):e.data(this,s,new i(n,this))}),h}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(t,i){i=e(i||this.defaultElement||this)[0],this.element=e(i),this.uuid=s++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this.bindings=e(),this.hoverable=e(),this.focusable=e(),i!==this&&(e.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===i&&this.destroy()}}),this.document=e(i.style?i.ownerDocument:i.document||i),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(t,i){var s,a,n,r=t;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof t)if(r={},s=t.split("."),t=s.shift(),s.length){for(a=r[t]=e.widget.extend({},this.options[t]),n=0;s.length-1>n;n++)a[s[n]]=a[s[n]]||{},a=a[s[n]];if(t=s.pop(),1===arguments.length)return void 0===a[t]?null:a[t];a[t]=i}else{if(1===arguments.length)return void 0===this.options[t]?null:this.options[t];r[t]=i}return this._setOptions(r),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,"disabled"===e&&(this.widget().toggleClass(this.widgetFullName+"-disabled",!!t),t&&(this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus"))),this},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_on:function(t,i,s){var a,n=this;"boolean"!=typeof t&&(s=i,i=t,t=!1),s?(i=a=e(i),this.bindings=this.bindings.add(i)):(s=i,i=this.element,a=this.widget()),e.each(s,function(s,r){function o(){return t||n.options.disabled!==!0&&!e(this).hasClass("ui-state-disabled")?("string"==typeof r?n[r]:r).apply(n,arguments):void 0}"string"!=typeof r&&(o.guid=r.guid=r.guid||o.guid||e.guid++);var h=s.match(/^([\w:-]*)\s*(.*)$/),l=h[1]+n.eventNamespace,u=h[2];u?a.delegate(u,l,o):i.bind(l,o)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.unbind(t).undelegate(t)},_delay:function(e,t){function i(){return("string"==typeof e?s[e]:e).apply(s,arguments)}var s=this;return setTimeout(i,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,i,s){var a,n,r=this.options[t];if(s=s||{},i=e.Event(i),i.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),i.target=this.element[0],n=i.originalEvent)for(a in n)a in i||(i[a]=n[a]);return this.element.trigger(i,s),!(e.isFunction(r)&&r.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,i){e.Widget.prototype["_"+t]=function(s,a,n){"string"==typeof a&&(a={effect:a});var r,o=a?a===!0||"number"==typeof a?i:a.effect||i:t;a=a||{},"number"==typeof a&&(a={duration:a}),r=!e.isEmptyObject(a),a.complete=n,a.delay&&s.delay(a.delay),r&&e.effects&&e.effects.effect[o]?s[t](a):o!==t&&s[o]?s[o](a.duration,a.easing,n):s.queue(function(i){e(this)[t](),n&&n.call(s[0]),i()})}}),e.widget;var n=!1;e(document).mouseup(function(){n=!1}),e.widget("ui.mouse",{version:"1.11.1",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(i){return!0===e.data(i.target,t.widgetName+".preventClickEvent")?(e.removeData(i.target,t.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(t){if(!n){this._mouseStarted&&this._mouseUp(t),this._mouseDownEvent=t;var i=this,s=1===t.which,a="string"==typeof this.options.cancel&&t.target.nodeName?e(t.target).closest(this.options.cancel).length:!1;return s&&!a&&this._mouseCapture(t)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(t)!==!1,!this._mouseStarted)?(t.preventDefault(),!0):(!0===e.data(t.target,this.widgetName+".preventClickEvent")&&e.removeData(t.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return i._mouseMove(e)},this._mouseUpDelegate=function(e){return i._mouseUp(e)},this.document.bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),t.preventDefault(),n=!0,!0)):!0}},_mouseMove:function(t){return e.ui.ie&&(!document.documentMode||9>document.documentMode)&&!t.button?this._mouseUp(t):t.which?this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,t)!==!1,this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted):this._mouseUp(t)},_mouseUp:function(t){return this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),n=!1,!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),e.widget("ui.sortable",e.ui.mouse,{version:"1.11.1",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(e,t,i){return e>=t&&t+i>e},_isFloating:function(e){return/left|right/.test(e.css("float"))||/inline|table-cell/.test(e.css("display"))},_create:function(){var e=this.options;this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.floating=this.items.length?"x"===e.axis||this._isFloating(this.items[0].item):!1,this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(e,t){this._super(e,t),"handle"===e&&this._setHandleClassName()},_setHandleClassName:function(){this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle"),e.each(this.items,function(){(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item).addClass("ui-sortable-handle")})},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle"),this._mouseDestroy();for(var e=this.items.length-1;e>=0;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(t,i){var s=null,a=!1,n=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(t),e(t.target).parents().each(function(){return e.data(this,n.widgetName+"-item")===n?(s=e(this),!1):void 0}),e.data(t.target,n.widgetName+"-item")===n&&(s=e(t.target)),s?!this.options.handle||i||(e(this.options.handle,s).find("*").addBack().each(function(){this===t.target&&(a=!0)}),a)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(t,i,s){var a,n,r=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(t),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,r.cursorAt&&this._adjustOffsetFromHelper(r.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),r.containment&&this._setContainment(),r.cursor&&"auto"!==r.cursor&&(n=this.document.find("body"),this.storedCursor=n.css("cursor"),n.css("cursor",r.cursor),this.storedStylesheet=e("<style>*{ cursor: "+r.cursor+" !important; }</style>").appendTo(n)),r.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",r.opacity)),r.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",r.zIndex)),this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",t,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(a=this.containers.length-1;a>=0;a--)this.containers[a]._trigger("activate",t,this._uiHash(this));return e.ui.ddmanager&&(e.ui.ddmanager.current=this),e.ui.ddmanager&&!r.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(t),!0},_mouseDrag:function(t){var i,s,a,n,r=this.options,o=!1;for(this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-t.pageY<r.scrollSensitivity?this.scrollParent[0].scrollTop=o=this.scrollParent[0].scrollTop+r.scrollSpeed:t.pageY-this.overflowOffset.top<r.scrollSensitivity&&(this.scrollParent[0].scrollTop=o=this.scrollParent[0].scrollTop-r.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-t.pageX<r.scrollSensitivity?this.scrollParent[0].scrollLeft=o=this.scrollParent[0].scrollLeft+r.scrollSpeed:t.pageX-this.overflowOffset.left<r.scrollSensitivity&&(this.scrollParent[0].scrollLeft=o=this.scrollParent[0].scrollLeft-r.scrollSpeed)):(t.pageY-e(document).scrollTop()<r.scrollSensitivity?o=e(document).scrollTop(e(document).scrollTop()-r.scrollSpeed):e(window).height()-(t.pageY-e(document).scrollTop())<r.scrollSensitivity&&(o=e(document).scrollTop(e(document).scrollTop()+r.scrollSpeed)),t.pageX-e(document).scrollLeft()<r.scrollSensitivity?o=e(document).scrollLeft(e(document).scrollLeft()-r.scrollSpeed):e(window).width()-(t.pageX-e(document).scrollLeft())<r.scrollSensitivity&&(o=e(document).scrollLeft(e(document).scrollLeft()+r.scrollSpeed))),o!==!1&&e.ui.ddmanager&&!r.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],a=s.item[0],n=this._intersectsWithPointer(s),n&&s.instance===this.currentContainer&&a!==this.currentItem[0]&&this.placeholder[1===n?"next":"prev"]()[0]!==a&&!e.contains(this.placeholder[0],a)&&("semi-dynamic"===this.options.type?!e.contains(this.element[0],a):!0)){if(this.direction=1===n?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(t,s),this._trigger("change",t,this._uiHash());break}return this._contactContainers(t),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),this._trigger("sort",t,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(t,i){if(t){if(e.ui.ddmanager&&!this.options.dropBehaviour&&e.ui.ddmanager.drop(this,t),this.options.revert){var s=this,a=this.placeholder.offset(),n=this.options.axis,r={};n&&"x"!==n||(r.left=a.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollLeft)),n&&"y"!==n||(r.top=a.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,e(this.helper).animate(r,parseInt(this.options.revert,10)||500,function(){s._clear(t)})}else this._clear(t,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var t=this.containers.length-1;t>=0;t--)this.containers[t]._trigger("deactivate",null,this._uiHash(this)),this.containers[t].containerCache.over&&(this.containers[t]._trigger("out",null,this._uiHash(this)),this.containers[t].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),e.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?e(this.domPosition.prev).after(this.currentItem):e(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},e(i).each(function(){var i=(e(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[\-=_](.+)/);i&&s.push((t.key||i[1]+"[]")+"="+(t.key&&t.expression?i[1]:i[2]))}),!s.length&&t.key&&s.push(t.key+"="),s.join("&")},toArray:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},i.each(function(){s.push(e(t.item||this).attr(t.attribute||"id")||"")}),s},_intersectsWith:function(e){var t=this.positionAbs.left,i=t+this.helperProportions.width,s=this.positionAbs.top,a=s+this.helperProportions.height,n=e.left,r=n+e.width,o=e.top,h=o+e.height,l=this.offset.click.top,u=this.offset.click.left,d="x"===this.options.axis||s+l>o&&h>s+l,c="y"===this.options.axis||t+u>n&&r>t+u,p=d&&c;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?p:t+this.helperProportions.width/2>n&&r>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>o&&h>a-this.helperProportions.height/2},_intersectsWithPointer:function(e){var t="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top,e.height),i="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left,e.width),s=t&&i,a=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection();return s?this.floating?n&&"right"===n||"down"===a?2:1:a&&("down"===a?2:1):!1},_intersectsWithSides:function(e){var t=this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top+e.height/2,e.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left+e.width/2,e.width),s=this._getDragVerticalDirection(),a=this._getDragHorizontalDirection();return this.floating&&a?"right"===a&&i||"left"===a&&!i:s&&("down"===s&&t||"up"===s&&!t)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return 0!==e&&(e>0?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return 0!==e&&(e>0?"right":"left")},refresh:function(e){return this._refreshItems(e),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor===String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(t){function i(){o.push(this)}var s,a,n,r,o=[],h=[],l=this._connectWith();if(l&&t)for(s=l.length-1;s>=0;s--)for(n=e(l[s]),a=n.length-1;a>=0;a--)r=e.data(n[a],this.widgetFullName),r&&r!==this&&!r.options.disabled&&h.push([e.isFunction(r.options.items)?r.options.items.call(r.element):e(r.options.items,r.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),r]);for(h.push([e.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):e(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=h.length-1;s>=0;s--)h[s][0].each(i);return e(o)},_removeCurrentsFromItems:function(){var t=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=e.grep(this.items,function(e){for(var i=0;t.length>i;i++)if(t[i]===e.item[0])return!1;return!0})},_refreshItems:function(t){this.items=[],this.containers=[this];var i,s,a,n,r,o,h,l,u=this.items,d=[[e.isFunction(this.options.items)?this.options.items.call(this.element[0],t,{item:this.currentItem}):e(this.options.items,this.element),this]],c=this._connectWith();if(c&&this.ready)for(i=c.length-1;i>=0;i--)for(a=e(c[i]),s=a.length-1;s>=0;s--)n=e.data(a[s],this.widgetFullName),n&&n!==this&&!n.options.disabled&&(d.push([e.isFunction(n.options.items)?n.options.items.call(n.element[0],t,{item:this.currentItem}):e(n.options.items,n.element),n]),this.containers.push(n));for(i=d.length-1;i>=0;i--)for(r=d[i][1],o=d[i][0],s=0,l=o.length;l>s;s++)h=e(o[s]),h.data(this.widgetName+"-item",r),u.push({item:h,instance:r,width:0,height:0,left:0,top:0})},refreshPositions:function(t){this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,a,n;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(a=this.options.toleranceElement?e(this.options.toleranceElement,s.item):s.item,t||(s.width=a.outerWidth(),s.height=a.outerHeight()),n=a.offset(),s.left=n.left,s.top=n.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)n=this.containers[i].element.offset(),this.containers[i].containerCache.left=n.left,this.containers[i].containerCache.top=n.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(t){t=t||this;var i,s=t.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=t.currentItem[0].nodeName.toLowerCase(),a=e("<"+s+">",t.document[0]).addClass(i||t.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tr"===s?t.currentItem.children().each(function(){e("<td>&#160;</td>",t.document[0]).attr("colspan",e(this).attr("colspan")||1).appendTo(a)}):"img"===s&&a.attr("src",t.currentItem.attr("src")),i||a.css("visibility","hidden"),a},update:function(e,a){(!i||s.forcePlaceholderSize)&&(a.height()||a.height(t.currentItem.innerHeight()-parseInt(t.currentItem.css("paddingTop")||0,10)-parseInt(t.currentItem.css("paddingBottom")||0,10)),a.width()||a.width(t.currentItem.innerWidth()-parseInt(t.currentItem.css("paddingLeft")||0,10)-parseInt(t.currentItem.css("paddingRight")||0,10)))}}),t.placeholder=e(s.placeholder.element.call(t.element,t.currentItem)),t.currentItem.after(t.placeholder),s.placeholder.update(t,t.placeholder)},_contactContainers:function(t){var i,s,a,n,r,o,h,l,u,d,c=null,p=null;for(i=this.containers.length-1;i>=0;i--)if(!e.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(c&&e.contains(this.containers[i].element[0],c.element[0]))continue;c=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",t,this._uiHash(this)),this.containers[i].containerCache.over=0);if(c)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(a=1e4,n=null,u=c.floating||this._isFloating(this.currentItem),r=u?"left":"top",o=u?"width":"height",d=u?"clientX":"clientY",s=this.items.length-1;s>=0;s--)e.contains(this.containers[p].element[0],this.items[s].item[0])&&this.items[s].item[0]!==this.currentItem[0]&&(h=this.items[s].item.offset()[r],l=!1,t[d]-h>this.items[s][o]/2&&(l=!0),a>Math.abs(t[d]-h)&&(a=Math.abs(t[d]-h),n=this.items[s],this.direction=l?"up":"down"));if(!n&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return;n?this._rearrange(t,n,null,!0):this._rearrange(t,null,this.containers[p].element,!0),this._trigger("change",t,this._uiHash()),this.containers[p]._trigger("change",t,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(t){var i=this.options,s=e.isFunction(i.helper)?e(i.helper.apply(this.element[0],[t,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||e("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,i,s,a=this.options;"parent"===a.containment&&(a.containment=this.helper[0].parentNode),("document"===a.containment||"window"===a.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,e("document"===a.containment?document:window).width()-this.helperProportions.width-this.margins.left,(e("document"===a.containment?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(a.containment)||(t=e(a.containment)[0],i=e(a.containment).offset(),s="hidden"!==e(t).css("overflow"),this.containment=[i.left+(parseInt(e(t).css("borderLeftWidth"),10)||0)+(parseInt(e(t).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(e(t).css("borderTopWidth"),10)||0)+(parseInt(e(t).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(t.scrollWidth,t.offsetWidth):t.offsetWidth)-(parseInt(e(t).css("borderLeftWidth"),10)||0)-(parseInt(e(t).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(t.scrollHeight,t.offsetHeight):t.offsetHeight)-(parseInt(e(t).css("borderTopWidth"),10)||0)-(parseInt(e(t).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])
},_convertPositionTo:function(t,i){i||(i=this.position);var s="absolute"===t?1:-1,a="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,n=/(html|body)/i.test(a[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():n?0:a.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():n?0:a.scrollLeft())*s}},_generatePosition:function(t){var i,s,a=this.options,n=t.pageX,r=t.pageY,o="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=/(html|body)/i.test(o[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==document&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(t.pageX-this.offset.click.left<this.containment[0]&&(n=this.containment[0]+this.offset.click.left),t.pageY-this.offset.click.top<this.containment[1]&&(r=this.containment[1]+this.offset.click.top),t.pageX-this.offset.click.left>this.containment[2]&&(n=this.containment[2]+this.offset.click.left),t.pageY-this.offset.click.top>this.containment[3]&&(r=this.containment[3]+this.offset.click.top)),a.grid&&(i=this.originalPageY+Math.round((r-this.originalPageY)/a.grid[1])*a.grid[1],r=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-a.grid[1]:i+a.grid[1]:i,s=this.originalPageX+Math.round((n-this.originalPageX)/a.grid[0])*a.grid[0],n=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-a.grid[0]:s+a.grid[0]:s)),{top:r-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():h?0:o.scrollTop()),left:n-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():h?0:o.scrollLeft())}},_rearrange:function(e,t,i,s){i?i[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var a=this.counter;this._delay(function(){a===this.counter&&this.refreshPositions(!s)})},_clear:function(e,t){function i(e,t,i){return function(s){i._trigger(e,s,t._uiHash(t))}}this.reverting=!1;var s,a=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!t&&a.push(function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||t||a.push(function(e){this._trigger("update",e,this._uiHash())}),this!==this.currentContainer&&(t||(a.push(function(e){this._trigger("remove",e,this._uiHash())}),a.push(function(e){return function(t){e._trigger("receive",t,this._uiHash(this))}}.call(this,this.currentContainer)),a.push(function(e){return function(t){e._trigger("update",t,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)t||a.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(a.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,this.cancelHelperRemoval){if(!t){for(this._trigger("beforeStop",e,this._uiHash()),s=0;a.length>s;s++)a[s].call(this,e);this._trigger("stop",e,this._uiHash())}return this.fromOutside=!1,!1}if(t||this._trigger("beforeStop",e,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null,!t){for(s=0;a.length>s;s++)a[s].call(this,e);this._trigger("stop",e,this._uiHash())}return this.fromOutside=!1,!0},_trigger:function(){e.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(t){var i=t||this;return{helper:i.helper,placeholder:i.placeholder||e([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:t?t.element:null}}})});
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\jqueryui\\jqueryui.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./jquery-ui.min.js');
},{"./jquery-ui.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\jqueryui\\jquery-ui.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\lodash\\lodash.min.js":[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.3.0 (Custom Build) lodash.com/license | Underscore.js 1.7.0 underscorejs.org/LICENSE
 * Build: `lodash modern -o ./lodash.js`
 */
;(function(){function n(n,t){if(n!==t){var r=n===n,e=t===t;if(n>t||!r||typeof n=="undefined"&&e)return 1;if(n<t||!e||typeof t=="undefined"&&r)return-1}return 0}function t(n,t,r){if(t!==t)return h(n,r);r=(r||0)-1;for(var e=n.length;++r<e;)if(n[r]===t)return r;return-1}function r(n){return typeof n=="function"||false}function e(n,t){var r=n.length;for(n.sort(t);r--;)n[r]=n[r].c;return n}function u(n){return typeof n=="string"?n:null==n?"":n+""}function o(n){return n.charCodeAt(0)}function i(n,t){for(var r=-1,e=n.length;++r<e&&-1<t.indexOf(n.charAt(r)););return r
}function f(n,t){for(var r=n.length;r--&&-1<t.indexOf(n.charAt(r)););return r}function a(t,r){return n(t.a,r.a)||t.b-r.b}function c(t,r){for(var e=-1,u=t.a,o=r.a,i=u.length;++e<i;){var f=n(u[e],o[e]);if(f)return f}return t.b-r.b}function l(n){return Nt[n]}function s(n){return Ut[n]}function p(n){return"\\"+$t[n]}function h(n,t,r){var e=n.length;for(t=r?t||e:(t||0)-1;r?t--:++t<e;){var u=n[t];if(u!==u)return t}return-1}function _(n){return n&&typeof n=="object"||false}function g(n){return 160>=n&&9<=n&&13>=n||32==n||160==n||5760==n||6158==n||8192<=n&&(8202>=n||8232==n||8233==n||8239==n||8287==n||12288==n||65279==n)
}function v(n,t){for(var r=-1,e=n.length,u=-1,o=[];++r<e;)n[r]===t&&(n[r]=z,o[++u]=r);return o}function y(n){for(var t=-1,r=n.length;++t<r&&g(n.charCodeAt(t)););return t}function d(n){for(var t=n.length;t--&&g(n.charCodeAt(t)););return t}function m(n){return Ft[n]}function w(g){function Nt(n){if(_(n)&&!(Wo(n)||n instanceof Lt)){if(n instanceof Ft)return n;if(Fu.call(n,"__chain__")&&Fu.call(n,"__wrapped__"))return ge(n)}return new Ft(n)}function Ut(){}function Ft(n,t,r){this.__wrapped__=n,this.__actions__=r||[],this.__chain__=!!t
}function Lt(n){this.__wrapped__=n,this.__actions__=null,this.__dir__=1,this.__dropCount__=0,this.__filtered__=false,this.__iteratees__=null,this.__takeCount__=po,this.__views__=null}function $t(){this.__data__={}}function zt(n){var t=n?n.length:0;for(this.data={hash:ro(null),set:new Gu};t--;)this.push(n[t])}function Dt(n,t){var r=n.data;return(typeof t=="string"||He(t)?r.set.has(t):r.hash[t])?0:-1}function qt(n,t){var r=-1,e=n.length;for(t||(t=bu(e));++r<e;)t[r]=n[r];return t}function Pt(n,t){for(var r=-1,e=n.length;++r<e&&false!==t(n[r],r,n););return n
}function Kt(n,t){for(var r=-1,e=n.length;++r<e;)if(!t(n[r],r,n))return false;return true}function Vt(n,t){for(var r=-1,e=n.length,u=-1,o=[];++r<e;){var i=n[r];t(i,r,n)&&(o[++u]=i)}return o}function Yt(n,t){for(var r=-1,e=n.length,u=bu(e);++r<e;)u[r]=t(n[r],r,n);return u}function Zt(n){for(var t=-1,r=n.length,e=so;++t<r;){var u=n[t];u>e&&(e=u)}return e}function Gt(n,t,r,e){var u=-1,o=n.length;for(e&&o&&(r=n[++u]);++u<o;)r=t(r,n[u],u,n);return r}function Jt(n,t,r,e){var u=n.length;for(e&&u&&(r=n[--u]);u--;)r=t(r,n[u],u,n);
return r}function Xt(n,t){for(var r=-1,e=n.length;++r<e;)if(t(n[r],r,n))return true;return false}function Ht(n,t){return typeof n=="undefined"?t:n}function Qt(n,t,r,e){return typeof n!="undefined"&&Fu.call(e,r)?n:t}function nr(n,t,r){var e=$o(t);if(!r)return rr(t,n,e);for(var u=-1,o=e.length;++u<o;){var i=e[u],f=n[i],a=r(f,t[i],i,n,t);(a===a?a===f:f!==f)&&(typeof f!="undefined"||i in n)||(n[i]=a)}return n}function tr(n,t){for(var r=-1,e=n.length,u=fe(e),o=t.length,i=bu(o);++r<o;){var f=t[r];u?(f=parseFloat(f),i[r]=oe(f,e)?n[f]:b):i[r]=n[f]
}return i}function rr(n,t,r){r||(r=t,t={});for(var e=-1,u=r.length;++e<u;){var o=r[e];t[o]=n[o]}return t}function er(n,t,r){var e=typeof n;if("function"==e){if(e=typeof t!="undefined"){var e=Nt.support,u=!(e.funcNames?n.name:e.funcDecomp);if(!u){var o=Nu.call(n);e.funcNames||(u=!mt.test(o)),u||(u=Et.test(o)||Qe(n),xo(n,u))}e=u}n=e?Fr(n,t,r):n}else n=null==n?yu:"object"==e?Ar(n):typeof t=="undefined"?Er(n+""):jr(n+"",t);return n}function ur(n,t,r,e,u,o,i){var f;if(r&&(f=u?r(n,e,u):r(n)),typeof f!="undefined")return f;
if(!He(n))return n;if(e=Wo(n)){if(f=re(n),!t)return qt(n,f)}else{var a=$u.call(n),c=a==V;if(a!=Z&&a!=D&&(!c||u))return St[a]?ue(n,a,t):u?n:{};if(f=ee(c?{}:n),!t)return rr(n,f,$o(n))}for(o||(o=[]),i||(i=[]),u=o.length;u--;)if(o[u]==n)return i[u];return o.push(n),i.push(f),(e?Pt:vr)(n,function(e,u){f[u]=ur(e,t,r,u,n,o,i)}),f}function or(n,t,r,e){if(typeof n!="function")throw new Cu(B);return Ju(function(){n.apply(b,Or(r,e))},t)}function ir(n,r){var e=n?n.length:0,u=[];if(!e)return u;var o=-1,i=te(),f=i==t,a=f&&200<=r.length&&Ao(r),c=r.length;
a&&(i=Dt,f=false,r=a);n:for(;++o<e;)if(a=n[o],f&&a===a){for(var l=c;l--;)if(r[l]===a)continue n;u.push(a)}else 0>i(r,a)&&u.push(a);return u}function fr(n,t){var r=n?n.length:0;if(!fe(r))return vr(n,t);for(var e=-1,u=_e(n);++e<r&&false!==t(u[e],e,u););return n}function ar(n,t){var r=n?n.length:0;if(!fe(r))return yr(n,t);for(var e=_e(n);r--&&false!==t(e[r],r,e););return n}function cr(n,t){var r=true;return fr(n,function(n,e,u){return r=!!t(n,e,u)}),r}function lr(n,t){var r=[];return fr(n,function(n,e,u){t(n,e,u)&&r.push(n)
}),r}function sr(n,t,r,e){var u;return r(n,function(n,r,o){return t(n,r,o)?(u=e?r:n,false):void 0}),u}function pr(n,t,r,e){e=(e||0)-1;for(var u=n.length,o=-1,i=[];++e<u;){var f=n[e];if(_(f)&&fe(f.length)&&(Wo(f)||Ge(f))){t&&(f=pr(f,t,r));var a=-1,c=f.length;for(i.length+=c;++a<c;)i[++o]=f[a]}else r||(i[++o]=f)}return i}function hr(n,t,r){var e=-1,u=_e(n);r=r(n);for(var o=r.length;++e<o;){var i=r[e];if(false===t(u[i],i,u))break}return n}function _r(n,t,r){var e=_e(n);r=r(n);for(var u=r.length;u--;){var o=r[u];
if(false===t(e[o],o,e))break}return n}function gr(n,t){hr(n,t,iu)}function vr(n,t){return hr(n,t,$o)}function yr(n,t){return _r(n,t,$o)}function dr(n,t){for(var r=-1,e=t.length,u=-1,o=[];++r<e;){var i=t[r];Uo(n[i])&&(o[++u]=i)}return o}function mr(n,t,r){var e=-1,u=typeof t=="function",o=n?n.length:0,i=fe(o)?bu(o):[];return fr(n,function(n){var o=u?t:null!=n&&n[t];i[++e]=o?o.apply(n,r):b}),i}function wr(n,t,r,e,u,o){if(n===t)return 0!==n||1/n==1/t;var i=typeof n,f=typeof t;if("function"!=i&&"object"!=i&&"function"!=f&&"object"!=f||null==n||null==t)n=n!==n&&t!==t;
else n:{var i=wr,f=Wo(n),a=Wo(t),c=M,l=M;f||(c=$u.call(n),c==D?c=Z:c!=Z&&(f=eu(n))),a||(l=$u.call(t),l==D?l=Z:l!=Z&&eu(t));var s=c==Z,a=l==Z,l=c==l;if(!l||f||s)if(c=s&&Fu.call(n,"__wrapped__"),a=a&&Fu.call(t,"__wrapped__"),c||a)n=i(c?n.value():n,a?t.value():t,r,e,u,o);else if(l){for(u||(u=[]),o||(o=[]),c=u.length;c--;)if(u[c]==n){n=o[c]==t;break n}u.push(n),o.push(t),n=(f?Jr:Hr)(n,t,i,r,e,u,o),u.pop(),o.pop()}else n=false;else n=Xr(n,t,c)}return n}function br(n,t,r,e,u){var o=t.length;if(null==n)return!o;
for(var i=-1,f=!u;++i<o;)if(f&&e[i]?r[i]!==n[t[i]]:!Fu.call(n,t[i]))return false;for(i=-1;++i<o;){var a=t[i];if(f&&e[i])a=Fu.call(n,a);else{var c=n[a],l=r[i],a=u?u(c,l,a):b;typeof a=="undefined"&&(a=wr(l,c,u,true))}if(!a)return false}return true}function xr(n,t){var r=[];return fr(n,function(n,e,u){r.push(t(n,e,u))}),r}function Ar(n){var t=$o(n),r=t.length;if(1==r){var e=t[0],u=n[e];if(ae(u))return function(n){return null!=n&&n[e]===u&&Fu.call(n,e)}}for(var o=bu(r),i=bu(r);r--;)u=n[t[r]],o[r]=u,i[r]=ae(u);return function(n){return br(n,t,o,i)
}}function jr(n,t){return ae(t)?function(r){return null!=r&&r[n]===t}:function(r){return null!=r&&wr(t,r[n],null,true)}}function kr(n,t,r,e,u){if(!He(n))return n;var o=fe(t.length)&&(Wo(t)||eu(t));return(o?Pt:vr)(t,function(t,i,f){if(_(t)){e||(e=[]),u||(u=[]);n:{t=e;for(var a=u,c=t.length,l=f[i];c--;)if(t[c]==l){n[i]=a[c],i=void 0;break n}c=n[i],f=r?r(c,l,i,n,f):b;var s=typeof f=="undefined";s&&(f=l,fe(l.length)&&(Wo(l)||eu(l))?f=Wo(c)?c:c?qt(c):[]:Fo(l)||Ge(l)?f=Ge(c)?uu(c):Fo(c)?c:{}:s=false),t.push(l),a.push(f),s?n[i]=kr(f,l,r,t,a):(f===f?f!==c:c===c)&&(n[i]=f),i=void 0
}return i}a=n[i],f=r?r(a,t,i,n,f):b,(l=typeof f=="undefined")&&(f=t),!o&&typeof f=="undefined"||!l&&(f===f?f===a:a!==a)||(n[i]=f)}),n}function Er(n){return function(t){return null==t?b:t[n]}}function Rr(n,t){return n+Ku(lo()*(t-n+1))}function Ir(n,t,r,e,u){return u(n,function(n,u,o){r=e?(e=false,n):t(r,n,u,o)}),r}function Or(n,t,r){var e=-1,u=n.length;for(t=null==t?0:+t||0,0>t&&(t=-t>u?0:u+t),r=typeof r=="undefined"||r>u?u:+r||0,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0,r=bu(u);++e<u;)r[e]=n[e+t];return r}function Cr(n,t){var r;
return fr(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}function Tr(n,r){var e=-1,u=te(),o=n.length,i=u==t,f=i&&200<=o,a=f&&Ao(),c=[];a?(u=Dt,i=false):(f=false,a=r?[]:c);n:for(;++e<o;){var l=n[e],s=r?r(l,e,n):l;if(i&&l===l){for(var p=a.length;p--;)if(a[p]===s)continue n;r&&a.push(s),c.push(l)}else 0>u(a,s)&&((r||f)&&a.push(s),c.push(l))}return c}function Sr(n,t){for(var r=-1,e=t.length,u=bu(e);++r<e;)u[r]=n[t[r]];return u}function Wr(n,t){var r=n;r instanceof Lt&&(r=r.value());for(var e=-1,u=t.length;++e<u;){var r=[r],o=t[e];
Yu.apply(r,o.args),r=o.func.apply(o.thisArg,r)}return r}function Nr(n,t,r){var e=0,u=n?n.length:e;if(typeof t=="number"&&t===t&&u<=go){for(;e<u;){var o=e+u>>>1,i=n[o];(r?i<=t:i<t)?e=o+1:u=o}return u}return Ur(n,t,yu,r)}function Ur(n,t,r,e){t=r(t);for(var u=0,o=n?n.length:0,i=t!==t,f=typeof t=="undefined";u<o;){var a=Ku((u+o)/2),c=r(n[a]),l=c===c;(i?l||e:f?l&&(e||typeof c!="undefined"):e?c<=t:c<t)?u=a+1:o=a}return io(o,_o)}function Fr(n,t,r){if(typeof n!="function")return yu;if(typeof t=="undefined")return n;
switch(r){case 1:return function(r){return n.call(t,r)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,o){return n.call(t,r,e,u,o)};case 5:return function(r,e,u,o,i){return n.call(t,r,e,u,o,i)}}return function(){return n.apply(t,arguments)}}function Lr(n){return Mu.call(n,0)}function $r(n,t,r){for(var e=r.length,u=-1,o=oo(n.length-e,0),i=-1,f=t.length,a=bu(o+f);++i<f;)a[i]=t[i];for(;++u<e;)a[r[u]]=n[u];for(;o--;)a[i++]=n[u++];return a}function Br(n,t,r){for(var e=-1,u=r.length,o=-1,i=oo(n.length-u,0),f=-1,a=t.length,c=bu(i+a);++o<i;)c[o]=n[o];
for(i=o;++f<a;)c[i+f]=t[f];for(;++e<u;)c[i+r[e]]=n[o++];return c}function zr(n,t){return function(r,e,u){var o=t?t():{};if(e=ne(e,u,3),Wo(r)){u=-1;for(var i=r.length;++u<i;){var f=r[u];n(o,f,e(f,u,r),r)}}else fr(r,function(t,r,u){n(o,t,e(t,r,u),u)});return o}}function Dr(n){return function(){var t=arguments.length,r=arguments[0];if(2>t||null==r)return r;if(3<t&&ie(arguments[1],arguments[2],arguments[3])&&(t=2),3<t&&"function"==typeof arguments[t-2])var e=Fr(arguments[--t-1],arguments[t--],5);else 2<t&&"function"==typeof arguments[t-1]&&(e=arguments[--t]);
for(var u=0;++u<t;){var o=arguments[u];o&&n(r,o,e)}return r}}function Mr(n,t){function r(){return(this instanceof r?e:n).apply(t,arguments)}var e=Pr(n);return r}function qr(n){return function(t){var r=-1;t=hu(au(t));for(var e=t.length,u="";++r<e;)u=n(u,t[r],r);return u}}function Pr(n){return function(){var t=bo(n.prototype),r=n.apply(t,arguments);return He(r)?r:t}}function Kr(n,t){return function(r,e,u){u&&ie(r,e,u)&&(e=null);var i=ne(),f=null==e;if(i===er&&f||(f=false,e=i(e,u,3)),f){if(e=Wo(r),e||!ru(r))return n(e?r:he(r));
e=o}return Qr(r,e,t)}}function Vr(n,t,r,e,u,o,i,f,a,c){function l(){for(var w=arguments.length,x=w,k=bu(w);x--;)k[x]=arguments[x];if(e&&(k=$r(k,e,u)),o&&(k=Br(k,o,i)),_||y){var x=l.placeholder,E=v(k,x),w=w-E.length;if(w<c){var R=f?qt(f):null,w=oo(c-w,0),C=_?E:null,E=_?null:E,T=_?k:null,k=_?null:k;return t|=_?I:O,t&=~(_?O:I),g||(t&=~(A|j)),k=Vr(n,t,r,T,C,k,E,R,a,w),k.placeholder=x,k}}if(x=p?r:this,h&&(n=x[m]),f)for(R=k.length,w=io(f.length,R),C=qt(k);w--;)E=f[w],k[w]=oe(E,R)?C[E]:b;return s&&a<k.length&&(k.length=a),(this instanceof l?d||Pr(n):n).apply(x,k)
}var s=t&T,p=t&A,h=t&j,_=t&E,g=t&k,y=t&R,d=!h&&Pr(n),m=n;return l}function Yr(n,t,r){return n=n.length,t=+t,n<t&&eo(t)?(t-=n,r=null==r?" ":r+"",su(r,qu(t/r.length)).slice(0,t)):""}function Zr(n,t,r,e){function u(){for(var t=-1,f=arguments.length,a=-1,c=e.length,l=bu(f+c);++a<c;)l[a]=e[a];for(;f--;)l[a++]=arguments[++t];return(this instanceof u?i:n).apply(o?r:this,l)}var o=t&A,i=Pr(n);return u}function Gr(n,t,r,e,u,o,i,f){var a=t&j;if(!a&&typeof n!="function")throw new Cu(B);var c=e?e.length:0;if(c||(t&=~(I|O),e=u=null),c-=u?u.length:0,t&O){var l=e,s=u;
e=u=null}var p=!a&&jo(n);if(r=[n,t,r,e,u,l,s,o,i,f],p&&true!==p){e=r[1],t=p[1],f=e|t,o=T|C,u=A|j,i=o|u|k|R;var l=e&T&&!(t&T),s=e&C&&!(t&C),h=(s?r:p)[7],_=(l?r:p)[8];o=f>=o&&f<=i&&(e<C||(s||l)&&h.length<=_),(!(e>=C&&t>u||e>u&&t>=C)||o)&&(t&A&&(r[2]=p[2],f|=e&A?0:k),(e=p[3])&&(u=r[3],r[3]=u?$r(u,e,p[4]):qt(e),r[4]=u?v(r[3],z):qt(p[4])),(e=p[5])&&(u=r[5],r[5]=u?Br(u,e,p[6]):qt(e),r[6]=u?v(r[5],z):qt(p[6])),(e=p[7])&&(r[7]=qt(e)),t&T&&(r[8]=null==r[8]?p[8]:io(r[8],p[8])),null==r[9]&&(r[9]=p[9]),r[0]=p[0],r[1]=f),t=r[1],f=r[9]
}return r[9]=null==f?a?0:n.length:oo(f-c,0)||0,(p?xo:ko)(t==A?Mr(r[0],r[2]):t!=I&&t!=(A|I)||r[4].length?Vr.apply(b,r):Zr.apply(b,r),r)}function Jr(n,t,r,e,u,o,i){var f=-1,a=n.length,c=t.length,l=true;if(a!=c&&(!u||c<=a))return false;for(;l&&++f<a;){var s=n[f],p=t[f],l=b;if(e&&(l=u?e(p,s,f):e(s,p,f)),typeof l=="undefined")if(u)for(var h=c;h--&&(p=t[h],!(l=s&&s===p||r(s,p,e,u,o,i))););else l=s&&s===p||r(s,p,e,u,o,i)}return!!l}function Xr(n,t,r){switch(r){case q:case P:return+n==+t;case K:return n.name==t.name&&n.message==t.message;
case Y:return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case G:case J:return n==t+""}return false}function Hr(n,t,r,e,u,o,i){var f=$o(n),a=f.length,c=$o(t).length;if(a!=c&&!u)return false;for(var l,c=-1;++c<a;){var s=f[c],p=Fu.call(t,s);if(p){var h=n[s],_=t[s],p=b;e&&(p=u?e(_,h,s):e(h,_,s)),typeof p=="undefined"&&(p=h&&h===_||r(h,_,e,u,o,i))}if(!p)return false;l||(l="constructor"==s)}return l||(r=n.constructor,e=t.constructor,!(r!=e&&"constructor"in n&&"constructor"in t)||typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)?true:false
}function Qr(n,t,r){var e=r?po:so,u=e,o=u;return fr(n,function(n,i,f){i=t(n,i,f),((r?i<u:i>u)||i===e&&i===o)&&(u=i,o=n)}),o}function ne(n,t,r){var e=Nt.callback||gu,e=e===gu?er:e;return r?e(n,t,r):e}function te(n,r,e){var u=Nt.indexOf||we,u=u===we?t:u;return n?u(n,r,e):u}function re(n){var t=n.length,r=new n.constructor(t);return t&&"string"==typeof n[0]&&Fu.call(n,"index")&&(r.index=n.index,r.input=n.input),r}function ee(n){return n=n.constructor,typeof n=="function"&&n instanceof n||(n=Ru),new n
}function ue(n,t,r){var e=n.constructor;switch(t){case X:return Lr(n);case q:case P:return new e(+n);case H:case Q:case nt:case tt:case rt:case et:case ut:case ot:case it:return t=n.buffer,new e(r?Lr(t):t,n.byteOffset,n.length);case Y:case J:return new e(n);case G:var u=new e(n.source,dt.exec(n));u.lastIndex=n.lastIndex}return u}function oe(n,t){return n=+n,t=null==t?yo:t,-1<n&&0==n%1&&n<t}function ie(n,t,r){if(!He(r))return false;var e=typeof t;return"number"==e?(e=r.length,e=fe(e)&&oe(t,e)):e="string"==e&&t in r,t=r[t],e&&(n===n?n===t:t!==t)
}function fe(n){return typeof n=="number"&&-1<n&&0==n%1&&n<=yo}function ae(n){return n===n&&(0===n?0<1/n:!He(n))}function ce(n,t){n=_e(n);for(var r=-1,e=t.length,u={};++r<e;){var o=t[r];o in n&&(u[o]=n[o])}return u}function le(n,t){var r={};return gr(n,function(n,e,u){t(n,e,u)&&(r[e]=n)}),r}function se(n){var t;if(!_(n)||$u.call(n)!=Z||!(Fu.call(n,"constructor")||(t=n.constructor,typeof t!="function"||t instanceof t)))return false;var r;return gr(n,function(n,t){r=t}),typeof r=="undefined"||Fu.call(n,r)
}function pe(n){for(var t=iu(n),r=t.length,e=r&&n.length,u=Nt.support,u=e&&fe(e)&&(Wo(n)||u.nonEnumArgs&&Ge(n)),o=-1,i=[];++o<r;){var f=t[o];(u&&oe(f,e)||Fu.call(n,f))&&i.push(f)}return i}function he(n){return null==n?[]:fe(n.length)?He(n)?n:Ru(n):fu(n)}function _e(n){return He(n)?n:Ru(n)}function ge(n){return n instanceof Lt?n.clone():new Ft(n.__wrapped__,n.__chain__,qt(n.__actions__))}function ve(n,t,r){return n&&n.length?((r?ie(n,t,r):null==t)&&(t=1),Or(n,0>t?0:t)):[]}function ye(n,t,r){var e=n?n.length:0;
return e?((r?ie(n,t,r):null==t)&&(t=1),t=e-(+t||0),Or(n,0,0>t?0:t)):[]}function de(n,t,r){var e=-1,u=n?n.length:0;for(t=ne(t,r,3);++e<u;)if(t(n[e],e,n))return e;return-1}function me(n){return n?n[0]:b}function we(n,r,e){var u=n?n.length:0;if(!u)return-1;if(typeof e=="number")e=0>e?oo(u+e,0):e||0;else if(e)return e=Nr(n,r),n=n[e],(r===r?r===n:n!==n)?e:-1;return t(n,r,e)}function be(n){return ve(n,1)}function xe(n,r,e,u){if(!n||!n.length)return[];null!=r&&typeof r!="boolean"&&(u=e,e=ie(n,r,u)?null:r,r=false);
var o=ne();if((o!==er||null!=e)&&(e=o(e,u,3)),r&&te()==t){r=e;var i;e=-1,u=n.length;for(var o=-1,f=[];++e<u;){var a=n[e],c=r?r(a,e,n):a;e&&i===c||(i=c,f[++o]=a)}n=f}else n=Tr(n,e);return n}function Ae(n){for(var t=-1,r=(n&&n.length&&Zt(Yt(n,Uu)))>>>0,e=bu(r);++t<r;)e[t]=Yt(n,Er(t));return e}function je(n,t){var r=-1,e=n?n.length:0,u={};for(!e||t||Wo(n[0])||(t=[]);++r<e;){var o=n[r];t?u[o]=t[r]:o&&(u[o[0]]=o[1])}return u}function ke(n){return n=Nt(n),n.__chain__=true,n}function Ee(n,t,r){return t.call(r,n)
}function Re(n,t,r){var e=Wo(n)?Kt:cr;return(typeof t!="function"||typeof r!="undefined")&&(t=ne(t,r,3)),e(n,t)}function Ie(n,t,r){var e=Wo(n)?Vt:lr;return t=ne(t,r,3),e(n,t)}function Oe(n,t,r){return Wo(n)?(t=de(n,t,r),-1<t?n[t]:b):(t=ne(t,r,3),sr(n,t,fr))}function Ce(n,t,r){return typeof t=="function"&&typeof r=="undefined"&&Wo(n)?Pt(n,t):fr(n,Fr(t,r,3))}function Te(n,t,r){if(typeof t=="function"&&typeof r=="undefined"&&Wo(n))for(r=n.length;r--&&false!==t(n[r],r,n););else n=ar(n,Fr(t,r,3));return n
}function Se(n,t,r){var e=n?n.length:0;return fe(e)||(n=fu(n),e=n.length),e?(r=typeof r=="number"?0>r?oo(e+r,0):r||0:0,typeof n=="string"||!Wo(n)&&ru(n)?r<e&&-1<n.indexOf(t,r):-1<te(n,t,r)):false}function We(n,t,r){var e=Wo(n)?Yt:xr;return t=ne(t,r,3),e(n,t)}function Ne(n,t,r,e){return(Wo(n)?Gt:Ir)(n,ne(t,e,4),r,3>arguments.length,fr)}function Ue(n,t,r,e){return(Wo(n)?Jt:Ir)(n,ne(t,e,4),r,3>arguments.length,ar)}function Fe(n,t,r){return(r?ie(n,t,r):null==t)?(n=he(n),t=n.length,0<t?n[Rr(0,t-1)]:b):(n=Le(n),n.length=io(0>t?0:+t||0,n.length),n)
}function Le(n){n=he(n);for(var t=-1,r=n.length,e=bu(r);++t<r;){var u=Rr(0,t);t!=u&&(e[t]=e[u]),e[u]=n[t]}return e}function $e(n,t,r){var e=Wo(n)?Xt:Cr;return(typeof t!="function"||typeof r!="undefined")&&(t=ne(t,r,3)),e(n,t)}function Be(n,t){var r;if(typeof t!="function"){if(typeof n!="function")throw new Cu(B);var e=n;n=t,t=e}return function(){return 0<--n?r=t.apply(this,arguments):t=null,r}}function ze(n,t){var r=A;if(2<arguments.length)var e=Or(arguments,2),u=v(e,ze.placeholder),r=r|I;return Gr(n,r,t,e,u)
}function De(n,t){var r=A|j;if(2<arguments.length)var e=Or(arguments,2),u=v(e,De.placeholder),r=r|I;return Gr(t,r,n,e,u)}function Me(n,t,r){return r&&ie(n,t,r)&&(t=null),n=Gr(n,E,null,null,null,null,null,t),n.placeholder=Me.placeholder,n}function qe(n,t,r){return r&&ie(n,t,r)&&(t=null),n=Gr(n,R,null,null,null,null,null,t),n.placeholder=qe.placeholder,n}function Pe(n,t,r){function e(){var r=t-(So()-c);0>=r||r>t?(f&&Pu(f),r=p,f=s=p=b,r&&(h=So(),a=n.apply(l,i),s||f||(i=l=null))):s=Ju(e,r)}function u(){s&&Pu(s),f=s=p=b,(g||_!==t)&&(h=So(),a=n.apply(l,i),s||f||(i=l=null))
}function o(){if(i=arguments,c=So(),l=this,p=g&&(s||!v),false===_)var r=v&&!s;else{f||v||(h=c);var o=_-(c-h),y=0>=o||o>_;y?(f&&(f=Pu(f)),h=c,a=n.apply(l,i)):f||(f=Ju(u,o))}return y&&s?s=Pu(s):s||t===_||(s=Ju(e,t)),r&&(y=true,a=n.apply(l,i)),!y||s||f||(i=l=null),a}var i,f,a,c,l,s,p,h=0,_=false,g=true;if(typeof n!="function")throw new Cu(B);if(t=0>t?0:t,true===r)var v=true,g=false;else He(r)&&(v=r.leading,_="maxWait"in r&&oo(+r.maxWait||0,t),g="trailing"in r?r.trailing:g);return o.cancel=function(){s&&Pu(s),f&&Pu(f),f=s=p=b
},o}function Ke(){var n=arguments,t=n.length-1;if(0>t)return function(n){return n};if(!Kt(n,r))throw new Cu(B);return function(){for(var r=t,e=n[r].apply(this,arguments);r--;)e=n[r].call(this,e);return e}}function Ve(n,t){function r(){var e=r.cache,u=t?t.apply(this,arguments):arguments[0];if(e.has(u))return e.get(u);var o=n.apply(this,arguments);return e.set(u,o),o}if(typeof n!="function"||t&&typeof t!="function")throw new Cu(B);return r.cache=new Ve.Cache,r}function Ye(n){var t=Or(arguments,1),r=v(t,Ye.placeholder);
return Gr(n,I,null,t,r)}function Ze(n){var t=Or(arguments,1),r=v(t,Ze.placeholder);return Gr(n,O,null,t,r)}function Ge(n){return fe(_(n)?n.length:b)&&$u.call(n)==D||false}function Je(n){return n&&1===n.nodeType&&_(n)&&-1<$u.call(n).indexOf("Element")||false}function Xe(n){return _(n)&&typeof n.message=="string"&&$u.call(n)==K||false}function He(n){var t=typeof n;return"function"==t||n&&"object"==t||false}function Qe(n){return null==n?false:$u.call(n)==V?zu.test(Nu.call(n)):_(n)&&bt.test(n)||false}function nu(n){return typeof n=="number"||_(n)&&$u.call(n)==Y||false
}function tu(n){return _(n)&&$u.call(n)==G||false}function ru(n){return typeof n=="string"||_(n)&&$u.call(n)==J||false}function eu(n){return _(n)&&fe(n.length)&&Tt[$u.call(n)]||false}function uu(n){return rr(n,iu(n))}function ou(n){return dr(n,iu(n))}function iu(n){if(null==n)return[];He(n)||(n=Ru(n));for(var t=n.length,t=t&&fe(t)&&(Wo(n)||wo.nonEnumArgs&&Ge(n))&&t||0,r=n.constructor,e=-1,r=typeof r=="function"&&r.prototype===n,u=bu(t),o=0<t;++e<t;)u[e]=e+"";for(var i in n)o&&oe(i,t)||"constructor"==i&&(r||!Fu.call(n,i))||u.push(i);
return u}function fu(n){return Sr(n,$o(n))}function au(n){return(n=u(n))&&n.replace(xt,l)}function cu(n){return(n=u(n))&&kt.test(n)?n.replace(jt,"\\$&"):n}function lu(n,t,r){return r&&ie(n,t,r)&&(t=0),co(n,t)}function su(n,t){var r="";if(n=u(n),t=+t,1>t||!n||!eo(t))return r;do t%2&&(r+=n),t=Ku(t/2),n+=n;while(t);return r}function pu(n,t,r){var e=n;return(n=u(n))?(r?ie(e,t,r):null==t)?n.slice(y(n),d(n)+1):(t+="",n.slice(i(n,t),f(n,t)+1)):n}function hu(n,t,r){return r&&ie(n,t,r)&&(t=null),n=u(n),n.match(t||It)||[]
}function _u(){var n=arguments.length,t=arguments[0];try{for(var r=bu(n?n-1:0);0<--n;)r[n-1]=arguments[n];return t.apply(b,r)}catch(e){return Xe(e)?e:new Au(e)}}function gu(n,t,r){return r&&ie(n,t,r)&&(t=null),_(n)?du(n):er(n,t)}function vu(n){return function(){return n}}function yu(n){return n}function du(n){return Ar(ur(n,true))}function mu(n,t,r){if(null==r){var e=He(t),u=e&&$o(t);((u=u&&u.length&&dr(t,u))?u.length:e)||(u=false,r=t,t=n,n=this)}u||(u=dr(t,$o(t)));var o=true,e=-1,i=Uo(n),f=u.length;false===r?o=false:He(r)&&"chain"in r&&(o=r.chain);
for(;++e<f;){r=u[e];var a=t[r];n[r]=a,i&&(n.prototype[r]=function(t){return function(){var r=this.__chain__;if(o||r){var e=n(this.__wrapped__);return(e.__actions__=qt(this.__actions__)).push({func:t,args:arguments,thisArg:n}),e.__chain__=r,e}return r=[this.value()],Yu.apply(r,arguments),t.apply(n,r)}}(a))}return n}function wu(){}g=g?Mt.defaults(Bt.Object(),g,Mt.pick(Bt,Ct)):Bt;var bu=g.Array,xu=g.Date,Au=g.Error,ju=g.Function,ku=g.Math,Eu=g.Number,Ru=g.Object,Iu=g.RegExp,Ou=g.String,Cu=g.TypeError,Tu=bu.prototype,Su=Ru.prototype,Wu=(Wu=g.window)&&Wu.document,Nu=ju.prototype.toString,Uu=Er("length"),Fu=Su.hasOwnProperty,Lu=0,$u=Su.toString,Bu=g._,zu=Iu("^"+cu($u).replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Du=Qe(Du=g.ArrayBuffer)&&Du,Mu=Qe(Mu=Du&&new Du(0).slice)&&Mu,qu=ku.ceil,Pu=g.clearTimeout,Ku=ku.floor,Vu=Qe(Vu=Ru.getPrototypeOf)&&Vu,Yu=Tu.push,Zu=Su.propertyIsEnumerable,Gu=Qe(Gu=g.Set)&&Gu,Ju=g.setTimeout,Xu=Tu.splice,Hu=Qe(Hu=g.Uint8Array)&&Hu,Qu=Qe(Qu=g.WeakMap)&&Qu,no=function(){try{var n=Qe(n=g.Float64Array)&&n,t=new n(new Du(10),0,1)&&n
}catch(r){}return t}(),to=Qe(to=bu.isArray)&&to,ro=Qe(ro=Ru.create)&&ro,eo=g.isFinite,uo=Qe(uo=Ru.keys)&&uo,oo=ku.max,io=ku.min,fo=Qe(fo=xu.now)&&fo,ao=Qe(ao=Eu.isFinite)&&ao,co=g.parseInt,lo=ku.random,so=Eu.NEGATIVE_INFINITY,po=Eu.POSITIVE_INFINITY,ho=ku.pow(2,32)-1,_o=ho-1,go=ho>>>1,vo=no?no.BYTES_PER_ELEMENT:0,yo=ku.pow(2,53)-1,mo=Qu&&new Qu,wo=Nt.support={};!function(n){wo.funcDecomp=!Qe(g.WinRTError)&&Et.test(w),wo.funcNames=typeof ju.name=="string";try{wo.dom=11===Wu.createDocumentFragment().nodeType
}catch(t){wo.dom=false}try{wo.nonEnumArgs=!Zu.call(arguments,1)}catch(r){wo.nonEnumArgs=true}}(0,0),Nt.templateSettings={escape:_t,evaluate:gt,interpolate:vt,variable:"",imports:{_:Nt}};var bo=function(){function n(){}return function(t){if(He(t)){n.prototype=t;var r=new n;n.prototype=null}return r||g.Object()}}(),xo=mo?function(n,t){return mo.set(n,t),n}:yu;Mu||(Lr=Du&&Hu?function(n){var t=n.byteLength,r=no?Ku(t/vo):0,e=r*vo,u=new Du(t);if(r){var o=new no(u,0,r);o.set(new no(n,0,r))}return t!=e&&(o=new Hu(u,e),o.set(new Hu(n,e))),u
}:vu(null));var Ao=ro&&Gu?function(n){return new zt(n)}:vu(null),jo=mo?function(n){return mo.get(n)}:wu,ko=function(){var n=0,t=0;return function(r,e){var u=So(),o=U-(u-t);if(t=u,0<o){if(++n>=N)return r}else n=0;return xo(r,e)}}(),Eo=zr(function(n,t,r){Fu.call(n,r)?++n[r]:n[r]=1}),Ro=zr(function(n,t,r){Fu.call(n,r)?n[r].push(t):n[r]=[t]}),Io=zr(function(n,t,r){n[r]=t}),Oo=Kr(Zt),Co=Kr(function(n){for(var t=-1,r=n.length,e=po;++t<r;){var u=n[t];u<e&&(e=u)}return e},true),To=zr(function(n,t,r){n[r?0:1].push(t)
},function(){return[[],[]]}),So=fo||function(){return(new xu).getTime()},Wo=to||function(n){return _(n)&&fe(n.length)&&$u.call(n)==M||false};wo.dom||(Je=function(n){return n&&1===n.nodeType&&_(n)&&!Fo(n)||false});var No=ao||function(n){return typeof n=="number"&&eo(n)},Uo=r(/x/)||Hu&&!r(Hu)?function(n){return $u.call(n)==V}:r,Fo=Vu?function(n){if(!n||$u.call(n)!=Z)return false;var t=n.valueOf,r=Qe(t)&&(r=Vu(t))&&Vu(r);return r?n==r||Vu(n)==r:se(n)}:se,Lo=Dr(nr),$o=uo?function(n){if(n)var t=n.constructor,r=n.length;
return typeof t=="function"&&t.prototype===n||typeof n!="function"&&r&&fe(r)?pe(n):He(n)?uo(n):[]}:pe,Bo=Dr(kr),zo=qr(function(n,t,r){return t=t.toLowerCase(),n+(r?t.charAt(0).toUpperCase()+t.slice(1):t)}),Do=qr(function(n,t,r){return n+(r?"-":"")+t.toLowerCase()});8!=co(Ot+"08")&&(lu=function(n,t,r){return(r?ie(n,t,r):null==t)?t=0:t&&(t=+t),n=pu(n),co(n,t||(wt.test(n)?16:10))});var Mo=qr(function(n,t,r){return n+(r?"_":"")+t.toLowerCase()}),qo=qr(function(n,t,r){return n+(r?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))
});return Nt.prototype=Ut.prototype,Ft.prototype=bo(Ut.prototype),Ft.prototype.constructor=Ft,Lt.prototype=bo(Ut.prototype),Lt.prototype.constructor=Lt,$t.prototype["delete"]=function(n){return this.has(n)&&delete this.__data__[n]},$t.prototype.get=function(n){return"__proto__"==n?b:this.__data__[n]},$t.prototype.has=function(n){return"__proto__"!=n&&Fu.call(this.__data__,n)},$t.prototype.set=function(n,t){return"__proto__"!=n&&(this.__data__[n]=t),this},zt.prototype.push=function(n){var t=this.data;
typeof n=="string"||He(n)?t.set.add(n):t.hash[n]=true},Ve.Cache=$t,Nt.after=function(n,t){if(typeof t!="function"){if(typeof n!="function")throw new Cu(B);var r=n;n=t,t=r}return n=eo(n=+n)?n:0,function(){return 1>--n?t.apply(this,arguments):void 0}},Nt.ary=function(n,t,r){return r&&ie(n,t,r)&&(t=null),t=n&&null==t?n.length:oo(+t||0,0),Gr(n,T,null,null,null,null,t)},Nt.assign=Lo,Nt.at=function(n){return fe(n?n.length:0)&&(n=he(n)),tr(n,pr(arguments,false,false,1))},Nt.before=Be,Nt.bind=ze,Nt.bindAll=function(n){for(var t=n,r=1<arguments.length?pr(arguments,false,false,1):ou(n),e=-1,u=r.length;++e<u;){var o=r[e];
t[o]=Gr(t[o],A,t)}return t},Nt.bindKey=De,Nt.callback=gu,Nt.chain=ke,Nt.chunk=function(n,t,r){t=(r?ie(n,t,r):null==t)?1:oo(+t||1,1),r=0;for(var e=n?n.length:0,u=-1,o=bu(qu(e/t));r<e;)o[++u]=Or(n,r,r+=t);return o},Nt.compact=function(n){for(var t=-1,r=n?n.length:0,e=-1,u=[];++t<r;){var o=n[t];o&&(u[++e]=o)}return u},Nt.constant=vu,Nt.countBy=Eo,Nt.create=function(n,t,r){var e=bo(n);return r&&ie(n,t,r)&&(t=null),t?rr(t,e,$o(t)):e},Nt.curry=Me,Nt.curryRight=qe,Nt.debounce=Pe,Nt.defaults=function(n){if(null==n)return n;
var t=qt(arguments);return t.push(Ht),Lo.apply(b,t)},Nt.defer=function(n){return or(n,1,arguments,1)},Nt.delay=function(n,t){return or(n,t,arguments,2)},Nt.difference=function(){for(var n=-1,t=arguments.length;++n<t;){var r=arguments[n];if(Wo(r)||Ge(r))break}return ir(r,pr(arguments,false,true,++n))},Nt.drop=ve,Nt.dropRight=ye,Nt.dropRightWhile=function(n,t,r){var e=n?n.length:0;if(!e)return[];for(t=ne(t,r,3);e--&&t(n[e],e,n););return Or(n,0,e+1)},Nt.dropWhile=function(n,t,r){var e=n?n.length:0;if(!e)return[];
var u=-1;for(t=ne(t,r,3);++u<e&&t(n[u],u,n););return Or(n,u)},Nt.fill=function(n,t,r,e){var u=n?n.length:0;if(!u)return[];for(r&&typeof r!="number"&&ie(n,t,r)&&(r=0,e=u),u=n.length,r=null==r?0:+r||0,0>r&&(r=-r>u?0:u+r),e=typeof e=="undefined"||e>u?u:+e||0,0>e&&(e+=u),u=r>e?0:e>>>0,r>>>=0;r<u;)n[r++]=t;return n},Nt.filter=Ie,Nt.flatten=function(n,t,r){var e=n?n.length:0;return r&&ie(n,t,r)&&(t=false),e?pr(n,t):[]},Nt.flattenDeep=function(n){return n&&n.length?pr(n,true):[]},Nt.flow=function(){var n=arguments,t=n.length;
if(!t)return function(n){return n};if(!Kt(n,r))throw new Cu(B);return function(){for(var r=0,e=n[r].apply(this,arguments);++r<t;)e=n[r].call(this,e);return e}},Nt.flowRight=Ke,Nt.forEach=Ce,Nt.forEachRight=Te,Nt.forIn=function(n,t,r){return(typeof t!="function"||typeof r!="undefined")&&(t=Fr(t,r,3)),hr(n,t,iu)},Nt.forInRight=function(n,t,r){return t=Fr(t,r,3),_r(n,t,iu)},Nt.forOwn=function(n,t,r){return(typeof t!="function"||typeof r!="undefined")&&(t=Fr(t,r,3)),vr(n,t)},Nt.forOwnRight=function(n,t,r){return t=Fr(t,r,3),_r(n,t,$o)
},Nt.functions=ou,Nt.groupBy=Ro,Nt.indexBy=Io,Nt.initial=function(n){return ye(n,1)},Nt.intersection=function(){for(var n=[],r=-1,e=arguments.length,u=[],o=te(),i=o==t;++r<e;){var f=arguments[r];(Wo(f)||Ge(f))&&(n.push(f),u.push(i&&120<=f.length&&Ao(r&&f)))}var e=n.length,i=n[0],a=-1,c=i?i.length:0,l=[],s=u[0];n:for(;++a<c;)if(f=i[a],0>(s?Dt(s,f):o(l,f))){for(r=e;--r;){var p=u[r];if(0>(p?Dt(p,f):o(n[r],f)))continue n}s&&s.push(f),l.push(f)}return l},Nt.invert=function(n,t,r){r&&ie(n,t,r)&&(t=null),r=-1;
for(var e=$o(n),u=e.length,o={};++r<u;){var i=e[r],f=n[i];t?Fu.call(o,f)?o[f].push(i):o[f]=[i]:o[f]=i}return o},Nt.invoke=function(n,t){return mr(n,t,Or(arguments,2))},Nt.keys=$o,Nt.keysIn=iu,Nt.map=We,Nt.mapValues=function(n,t,r){var e={};return t=ne(t,r,3),vr(n,function(n,r,u){e[r]=t(n,r,u)}),e},Nt.matches=du,Nt.matchesProperty=function(n,t){return jr(n+"",ur(t,true))},Nt.memoize=Ve,Nt.merge=Bo,Nt.mixin=mu,Nt.negate=function(n){if(typeof n!="function")throw new Cu(B);return function(){return!n.apply(this,arguments)
}},Nt.omit=function(n,t,r){if(null==n)return{};if(typeof t!="function"){var e=Yt(pr(arguments,false,false,1),Ou);return ce(n,ir(iu(n),e))}return t=Fr(t,r,3),le(n,function(n,r,e){return!t(n,r,e)})},Nt.once=function(n){return Be(n,2)},Nt.pairs=function(n){for(var t=-1,r=$o(n),e=r.length,u=bu(e);++t<e;){var o=r[t];u[t]=[o,n[o]]}return u},Nt.partial=Ye,Nt.partialRight=Ze,Nt.partition=To,Nt.pick=function(n,t,r){return null==n?{}:typeof t=="function"?le(n,Fr(t,r,3)):ce(n,pr(arguments,false,false,1))},Nt.pluck=function(n,t){return We(n,Er(t))
},Nt.property=function(n){return Er(n+"")},Nt.propertyOf=function(n){return function(t){return null==n?b:n[t]}},Nt.pull=function(){var n=arguments[0];if(!n||!n.length)return n;for(var t=0,r=te(),e=arguments.length;++t<e;)for(var u=0,o=arguments[t];-1<(u=r(n,o,u));)Xu.call(n,u,1);return n},Nt.pullAt=function(t){var r=t||[],e=pr(arguments,false,false,1),u=e.length,o=tr(r,e);for(e.sort(n);u--;){var i=parseFloat(e[u]);if(i!=f&&oe(i)){var f=i;Xu.call(r,i,1)}}return o},Nt.range=function(n,t,r){r&&ie(n,t,r)&&(t=r=null),n=+n||0,r=null==r?1:+r||0,null==t?(t=n,n=0):t=+t||0;
var e=-1;t=oo(qu((t-n)/(r||1)),0);for(var u=bu(t);++e<t;)u[e]=n,n+=r;return u},Nt.rearg=function(n){var t=pr(arguments,false,false,1);return Gr(n,C,null,null,null,t)},Nt.reject=function(n,t,r){var e=Wo(n)?Vt:lr;return t=ne(t,r,3),e(n,function(n,r,e){return!t(n,r,e)})},Nt.remove=function(n,t,r){var e=-1,u=n?n.length:0,o=[];for(t=ne(t,r,3);++e<u;)r=n[e],t(r,e,n)&&(o.push(r),Xu.call(n,e--,1),u--);return o},Nt.rest=be,Nt.shuffle=Le,Nt.slice=function(n,t,r){var e=n?n.length:0;return e?(r&&typeof r!="number"&&ie(n,t,r)&&(t=0,r=e),Or(n,t,r)):[]
},Nt.sortBy=function(n,t,r){var u=-1,o=n?n.length:0,i=fe(o)?bu(o):[];return r&&ie(n,t,r)&&(t=null),t=ne(t,r,3),fr(n,function(n,r,e){i[++u]={a:t(n,r,e),b:u,c:n}}),e(i,a)},Nt.sortByAll=function(n){var t=arguments;3<t.length&&ie(t[1],t[2],t[3])&&(t=[n,t[1]]);var r=-1,u=n?n.length:0,o=pr(t,false,false,1),i=fe(u)?bu(u):[];return fr(n,function(n){for(var t=o.length,e=bu(t);t--;)e[t]=null==n?b:n[o[t]];i[++r]={a:e,b:r,c:n}}),e(i,c)},Nt.spread=function(n){if(typeof n!="function")throw new Cu(B);return function(t){return n.apply(this,t)
}},Nt.take=function(n,t,r){return n&&n.length?((r?ie(n,t,r):null==t)&&(t=1),Or(n,0,0>t?0:t)):[]},Nt.takeRight=function(n,t,r){var e=n?n.length:0;return e?((r?ie(n,t,r):null==t)&&(t=1),t=e-(+t||0),Or(n,0>t?0:t)):[]},Nt.takeRightWhile=function(n,t,r){var e=n?n.length:0;if(!e)return[];for(t=ne(t,r,3);e--&&t(n[e],e,n););return Or(n,e+1)},Nt.takeWhile=function(n,t,r){var e=n?n.length:0;if(!e)return[];var u=-1;for(t=ne(t,r,3);++u<e&&t(n[u],u,n););return Or(n,0,u)},Nt.tap=function(n,t,r){return t.call(r,n),n
},Nt.throttle=function(n,t,r){var e=true,u=true;if(typeof n!="function")throw new Cu(B);return false===r?e=false:He(r)&&(e="leading"in r?!!r.leading:e,u="trailing"in r?!!r.trailing:u),Wt.leading=e,Wt.maxWait=+t,Wt.trailing=u,Pe(n,t,Wt)},Nt.thru=Ee,Nt.times=function(n,t,r){if(n=+n,1>n||!eo(n))return[];var e=-1,u=bu(io(n,ho));for(t=Fr(t,r,1);++e<n;)e<ho?u[e]=t(e):t(e);return u},Nt.toArray=function(n){var t=n?n.length:0;return fe(t)?t?qt(n):[]:fu(n)},Nt.toPlainObject=uu,Nt.transform=function(n,t,r,e){var u=Wo(n)||eu(n);
return t=ne(t,e,4),null==r&&(u||He(n)?(e=n.constructor,r=u?Wo(n)?new e:[]:bo(Uo(e)&&e.prototype)):r={}),(u?Pt:vr)(n,function(n,e,u){return t(r,n,e,u)}),r},Nt.union=function(){return Tr(pr(arguments,false,true))},Nt.uniq=xe,Nt.unzip=Ae,Nt.values=fu,Nt.valuesIn=function(n){return Sr(n,iu(n))},Nt.where=function(n,t){return Ie(n,Ar(t))},Nt.without=function(n){return ir(n,Or(arguments,1))},Nt.wrap=function(n,t){return t=null==t?yu:t,Gr(t,I,null,[n],[])},Nt.xor=function(){for(var n=-1,t=arguments.length;++n<t;){var r=arguments[n];
if(Wo(r)||Ge(r))var e=e?ir(e,r).concat(ir(r,e)):r}return e?Tr(e):[]},Nt.zip=function(){for(var n=arguments.length,t=bu(n);n--;)t[n]=arguments[n];return Ae(t)},Nt.zipObject=je,Nt.backflow=Ke,Nt.collect=We,Nt.compose=Ke,Nt.each=Ce,Nt.eachRight=Te,Nt.extend=Lo,Nt.iteratee=gu,Nt.methods=ou,Nt.object=je,Nt.select=Ie,Nt.tail=be,Nt.unique=xe,mu(Nt,Nt),Nt.attempt=_u,Nt.camelCase=zo,Nt.capitalize=function(n){return(n=u(n))&&n.charAt(0).toUpperCase()+n.slice(1)},Nt.clone=function(n,t,r,e){return t&&typeof t!="boolean"&&ie(n,t,r)?t=false:typeof t=="function"&&(e=r,r=t,t=false),r=typeof r=="function"&&Fr(r,e,1),ur(n,t,r)
},Nt.cloneDeep=function(n,t,r){return t=typeof t=="function"&&Fr(t,r,1),ur(n,true,t)},Nt.deburr=au,Nt.endsWith=function(n,t,r){n=u(n),t+="";var e=n.length;return r=(typeof r=="undefined"?e:io(0>r?0:+r||0,e))-t.length,0<=r&&n.indexOf(t,r)==r},Nt.escape=function(n){return(n=u(n))&&ht.test(n)?n.replace(st,s):n},Nt.escapeRegExp=cu,Nt.every=Re,Nt.find=Oe,Nt.findIndex=de,Nt.findKey=function(n,t,r){return t=ne(t,r,3),sr(n,t,vr,true)},Nt.findLast=function(n,t,r){return t=ne(t,r,3),sr(n,t,ar)},Nt.findLastIndex=function(n,t,r){var e=n?n.length:0;
for(t=ne(t,r,3);e--;)if(t(n[e],e,n))return e;return-1},Nt.findLastKey=function(n,t,r){return t=ne(t,r,3),sr(n,t,yr,true)},Nt.findWhere=function(n,t){return Oe(n,Ar(t))},Nt.first=me,Nt.has=function(n,t){return n?Fu.call(n,t):false},Nt.identity=yu,Nt.includes=Se,Nt.indexOf=we,Nt.inRange=function(n,t,r){return t=+t||0,"undefined"===typeof r?(r=t,t=0):r=+r||0,n>=t&&n<r},Nt.isArguments=Ge,Nt.isArray=Wo,Nt.isBoolean=function(n){return true===n||false===n||_(n)&&$u.call(n)==q||false},Nt.isDate=function(n){return _(n)&&$u.call(n)==P||false
},Nt.isElement=Je,Nt.isEmpty=function(n){if(null==n)return true;var t=n.length;return fe(t)&&(Wo(n)||ru(n)||Ge(n)||_(n)&&Uo(n.splice))?!t:!$o(n).length},Nt.isEqual=function(n,t,r,e){return r=typeof r=="function"&&Fr(r,e,3),!r&&ae(n)&&ae(t)?n===t:(e=r?r(n,t):b,typeof e=="undefined"?wr(n,t,r):!!e)},Nt.isError=Xe,Nt.isFinite=No,Nt.isFunction=Uo,Nt.isMatch=function(n,t,r,e){var u=$o(t),o=u.length;if(r=typeof r=="function"&&Fr(r,e,3),!r&&1==o){var i=u[0];if(e=t[i],ae(e))return null!=n&&e===n[i]&&Fu.call(n,i)
}for(var i=bu(o),f=bu(o);o--;)e=i[o]=t[u[o]],f[o]=ae(e);return br(n,u,i,f,r)},Nt.isNaN=function(n){return nu(n)&&n!=+n},Nt.isNative=Qe,Nt.isNull=function(n){return null===n},Nt.isNumber=nu,Nt.isObject=He,Nt.isPlainObject=Fo,Nt.isRegExp=tu,Nt.isString=ru,Nt.isTypedArray=eu,Nt.isUndefined=function(n){return typeof n=="undefined"},Nt.kebabCase=Do,Nt.last=function(n){var t=n?n.length:0;return t?n[t-1]:b},Nt.lastIndexOf=function(n,t,r){var e=n?n.length:0;if(!e)return-1;var u=e;if(typeof r=="number")u=(0>r?oo(e+r,0):io(r||0,e-1))+1;
else if(r)return u=Nr(n,t,true)-1,n=n[u],(t===t?t===n:n!==n)?u:-1;if(t!==t)return h(n,u,true);for(;u--;)if(n[u]===t)return u;return-1},Nt.max=Oo,Nt.min=Co,Nt.noConflict=function(){return g._=Bu,this},Nt.noop=wu,Nt.now=So,Nt.pad=function(n,t,r){n=u(n),t=+t;var e=n.length;return e<t&&eo(t)?(e=(t-e)/2,t=Ku(e),e=qu(e),r=Yr("",e,r),r.slice(0,t)+n+r):n},Nt.padLeft=function(n,t,r){return(n=u(n))&&Yr(n,t,r)+n},Nt.padRight=function(n,t,r){return(n=u(n))&&n+Yr(n,t,r)},Nt.parseInt=lu,Nt.random=function(n,t,r){r&&ie(n,t,r)&&(t=r=null);
var e=null==n,u=null==t;return null==r&&(u&&typeof n=="boolean"?(r=n,n=1):typeof t=="boolean"&&(r=t,u=true)),e&&u&&(t=1,u=false),n=+n||0,u?(t=n,n=0):t=+t||0,r||n%1||t%1?(r=lo(),io(n+r*(t-n+parseFloat("1e-"+((r+"").length-1))),t)):Rr(n,t)},Nt.reduce=Ne,Nt.reduceRight=Ue,Nt.repeat=su,Nt.result=function(n,t,r){return t=null==n?b:n[t],typeof t=="undefined"&&(t=r),Uo(t)?t.call(n):t},Nt.runInContext=w,Nt.size=function(n){var t=n?n.length:0;return fe(t)?t:$o(n).length},Nt.snakeCase=Mo,Nt.some=$e,Nt.sortedIndex=function(n,t,r,e){var u=ne(r);
return u===er&&null==r?Nr(n,t):Ur(n,t,u(r,e,1))},Nt.sortedLastIndex=function(n,t,r,e){var u=ne(r);return u===er&&null==r?Nr(n,t,true):Ur(n,t,u(r,e,1),true)},Nt.startCase=qo,Nt.startsWith=function(n,t,r){return n=u(n),r=null==r?0:io(0>r?0:+r||0,n.length),n.lastIndexOf(t,r)==r},Nt.template=function(n,t,r){var e=Nt.templateSettings;r&&ie(n,t,r)&&(t=r=null),n=u(n),t=nr(nr({},r||t),e,Qt),r=nr(nr({},t.imports),e.imports,Qt);var o,i,f=$o(r),a=Sr(r,f),c=0;r=t.interpolate||At;var l="__p+='";r=Iu((t.escape||At).source+"|"+r.source+"|"+(r===vt?yt:At).source+"|"+(t.evaluate||At).source+"|$","g");
var s="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";if(n.replace(r,function(t,r,e,u,f,a){return e||(e=u),l+=n.slice(c,a).replace(Rt,p),r&&(o=true,l+="'+__e("+r+")+'"),f&&(i=true,l+="';"+f+";\n__p+='"),e&&(l+="'+((__t=("+e+"))==null?'':__t)+'"),c=a+t.length,t}),l+="';",(t=t.variable)||(l="with(obj){"+l+"}"),l=(i?l.replace(ft,""):l).replace(at,"$1").replace(ct,"$1;"),l="function("+(t||"obj")+"){"+(t?"":"obj||(obj={});")+"var __t,__p=''"+(o?",__e=_.escape":"")+(i?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+l+"return __p}",t=_u(function(){return ju(f,s+"return "+l).apply(b,a)
}),t.source=l,Xe(t))throw t;return t},Nt.trim=pu,Nt.trimLeft=function(n,t,r){var e=n;return(n=u(n))?n.slice((r?ie(e,t,r):null==t)?y(n):i(n,t+"")):n},Nt.trimRight=function(n,t,r){var e=n;return(n=u(n))?(r?ie(e,t,r):null==t)?n.slice(0,d(n)+1):n.slice(0,f(n,t+"")+1):n},Nt.trunc=function(n,t,r){r&&ie(n,t,r)&&(t=null);var e=S;if(r=W,null!=t)if(He(t)){var o="separator"in t?t.separator:o,e="length"in t?+t.length||0:e;r="omission"in t?u(t.omission):r}else e=+t||0;if(n=u(n),e>=n.length)return n;if(e-=r.length,1>e)return r;
if(t=n.slice(0,e),null==o)return t+r;if(tu(o)){if(n.slice(e).search(o)){var i,f=n.slice(0,e);for(o.global||(o=Iu(o.source,(dt.exec(o)||"")+"g")),o.lastIndex=0;n=o.exec(f);)i=n.index;t=t.slice(0,null==i?e:i)}}else n.indexOf(o,e)!=e&&(o=t.lastIndexOf(o),-1<o&&(t=t.slice(0,o)));return t+r},Nt.unescape=function(n){return(n=u(n))&&pt.test(n)?n.replace(lt,m):n},Nt.uniqueId=function(n){var t=++Lu;return u(n)+t},Nt.words=hu,Nt.all=Re,Nt.any=$e,Nt.contains=Se,Nt.detect=Oe,Nt.foldl=Ne,Nt.foldr=Ue,Nt.head=me,Nt.include=Se,Nt.inject=Ne,mu(Nt,function(){var n={};
return vr(Nt,function(t,r){Nt.prototype[r]||(n[r]=t)}),n}(),false),Nt.sample=Fe,Nt.prototype.sample=function(n){return this.__chain__||null!=n?this.thru(function(t){return Fe(t,n)}):Fe(this.value())},Nt.VERSION=x,Pt("bind bindKey curry curryRight partial partialRight".split(" "),function(n){Nt[n].placeholder=Nt}),Pt(["filter","map","takeWhile"],function(n,t){var r=t==F,e=t==$;Lt.prototype[n]=function(n,u){var o=this.clone(),i=o.__filtered__,f=o.__iteratees__||(o.__iteratees__=[]);return o.__filtered__=i||r||e&&0>o.__dir__,f.push({iteratee:ne(n,u,3),type:t}),o
}}),Pt(["drop","take"],function(n,t){var r="__"+n+"Count__",e=n+"While";Lt.prototype[n]=function(e){e=null==e?1:oo(Ku(e)||0,0);var u=this.clone();if(u.__filtered__){var o=u[r];u[r]=t?io(o,e):o+e}else(u.__views__||(u.__views__=[])).push({size:e,type:n+(0>u.__dir__?"Right":"")});return u},Lt.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()},Lt.prototype[n+"RightWhile"]=function(n,t){return this.reverse()[e](n,t).reverse()}}),Pt(["first","last"],function(n,t){var r="take"+(t?"Right":"");
Lt.prototype[n]=function(){return this[r](1).value()[0]}}),Pt(["initial","rest"],function(n,t){var r="drop"+(t?"":"Right");Lt.prototype[n]=function(){return this[r](1)}}),Pt(["pluck","where"],function(n,t){var r=t?"filter":"map",e=t?Ar:Er;Lt.prototype[n]=function(n){return this[r](e(n))}}),Lt.prototype.compact=function(){return this.filter(yu)},Lt.prototype.dropWhile=function(n,t){var r;return n=ne(n,t,3),this.filter(function(t,e,u){return r||(r=!n(t,e,u))})},Lt.prototype.reject=function(n,t){return n=ne(n,t,3),this.filter(function(t,r,e){return!n(t,r,e)
})},Lt.prototype.slice=function(n,t){n=null==n?0:+n||0;var r=0>n?this.takeRight(-n):this.drop(n);return typeof t!="undefined"&&(t=+t||0,r=0>t?r.dropRight(-t):r.take(t-n)),r},Lt.prototype.toArray=function(){return this.drop(0)},vr(Lt.prototype,function(n,t){var r=Nt[t],e=/^(?:first|last)$/.test(t);Nt.prototype[t]=function(){function t(n){return n=[n],Yu.apply(n,o),r.apply(Nt,n)}var u=this.__wrapped__,o=arguments,i=this.__chain__,f=!!this.__actions__.length,a=u instanceof Lt,c=a&&!f;return e&&!i?c?n.call(u):r.call(Nt,this.value()):a||Wo(u)?(u=n.apply(c?u:new Lt(this),o),e||!f&&!u.__actions__||(u.__actions__||(u.__actions__=[])).push({func:Ee,args:[t],thisArg:Nt}),new Ft(u,i)):this.thru(t)
}}),Pt("concat join pop push shift sort splice unshift".split(" "),function(n){var t=Tu[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:join|pop|shift)$/.test(n);Nt.prototype[n]=function(){var n=arguments;return e&&!this.__chain__?t.apply(this.value(),n):this[r](function(r){return t.apply(r,n)})}}),Lt.prototype.clone=function(){var n=this.__actions__,t=this.__iteratees__,r=this.__views__,e=new Lt(this.__wrapped__);return e.__actions__=n?qt(n):null,e.__dir__=this.__dir__,e.__dropCount__=this.__dropCount__,e.__filtered__=this.__filtered__,e.__iteratees__=t?qt(t):null,e.__takeCount__=this.__takeCount__,e.__views__=r?qt(r):null,e
},Lt.prototype.reverse=function(){if(this.__filtered__){var n=new Lt(this);n.__dir__=-1,n.__filtered__=true}else n=this.clone(),n.__dir__*=-1;return n},Lt.prototype.value=function(){var n=this.__wrapped__.value();if(!Wo(n))return Wr(n,this.__actions__);var t,r=this.__dir__,e=0>r;t=n.length;for(var u=this.__views__,o=0,i=-1,f=u?u.length:0;++i<f;){var a=u[i],c=a.size;switch(a.type){case"drop":o+=c;break;case"dropRight":t-=c;break;case"take":t=io(t,o+c);break;case"takeRight":o=oo(o,t-c)}}t={start:o,end:t},i=t.start,f=t.end,t=f-i,u=this.__dropCount__,o=io(t,this.__takeCount__),e=e?f:i-1,f=(i=this.__iteratees__)?i.length:0,a=0,c=[];
n:for(;t--&&a<o;){for(var e=e+r,l=-1,s=n[e];++l<f;){var p=i[l],h=p.iteratee(s,e,n),p=p.type;if(p==L)s=h;else if(!h){if(p==F)continue n;break n}}u?u--:c[a++]=s}return c},Nt.prototype.chain=function(){return ke(this)},Nt.prototype.commit=function(){return new Ft(this.value(),this.__chain__)},Nt.prototype.plant=function(n){for(var t,r=this;r instanceof Ut;){var e=ge(r);t?u.__wrapped__=e:t=e;var u=e,r=r.__wrapped__}return u.__wrapped__=n,t},Nt.prototype.reverse=function(){var n=this.__wrapped__;return n instanceof Lt?(this.__actions__.length&&(n=new Lt(this)),new Ft(n.reverse(),this.__chain__)):this.thru(function(n){return n.reverse()
})},Nt.prototype.toString=function(){return this.value()+""},Nt.prototype.run=Nt.prototype.toJSON=Nt.prototype.valueOf=Nt.prototype.value=function(){return Wr(this.__wrapped__,this.__actions__)},Nt.prototype.collect=Nt.prototype.map,Nt.prototype.head=Nt.prototype.first,Nt.prototype.select=Nt.prototype.filter,Nt.prototype.tail=Nt.prototype.rest,Nt}var b,x="3.3.0",A=1,j=2,k=4,E=8,R=16,I=32,O=64,C=128,T=256,S=30,W="...",N=150,U=16,F=0,L=1,$=2,B="Expected a function",z="__lodash_placeholder__",D="[object Arguments]",M="[object Array]",q="[object Boolean]",P="[object Date]",K="[object Error]",V="[object Function]",Y="[object Number]",Z="[object Object]",G="[object RegExp]",J="[object String]",X="[object ArrayBuffer]",H="[object Float32Array]",Q="[object Float64Array]",nt="[object Int8Array]",tt="[object Int16Array]",rt="[object Int32Array]",et="[object Uint8Array]",ut="[object Uint8ClampedArray]",ot="[object Uint16Array]",it="[object Uint32Array]",ft=/\b__p\+='';/g,at=/\b(__p\+=)''\+/g,ct=/(__e\(.*?\)|\b__t\))\+'';/g,lt=/&(?:amp|lt|gt|quot|#39|#96);/g,st=/[&<>"'`]/g,pt=RegExp(lt.source),ht=RegExp(st.source),_t=/<%-([\s\S]+?)%>/g,gt=/<%([\s\S]+?)%>/g,vt=/<%=([\s\S]+?)%>/g,yt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dt=/\w*$/,mt=/^\s*function[ \n\r\t]+\w/,wt=/^0[xX]/,bt=/^\[object .+?Constructor\]$/,xt=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,At=/($^)/,jt=/[.*+?^${}()|[\]\/\\]/g,kt=RegExp(jt.source),Et=/\bthis\b/,Rt=/['\n\r\u2028\u2029\\]/g,It=RegExp("[A-Z\\xc0-\\xd6\\xd8-\\xde]{2,}(?=[A-Z\\xc0-\\xd6\\xd8-\\xde][a-z\\xdf-\\xf6\\xf8-\\xff]+)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+|[A-Z\\xc0-\\xd6\\xd8-\\xde]+|[0-9]+","g"),Ot=" \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000",Ct="Array ArrayBuffer Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Math Number Object RegExp Set String _ clearTimeout document isFinite parseInt setTimeout TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap window WinRTError".split(" "),Tt={};
Tt[H]=Tt[Q]=Tt[nt]=Tt[tt]=Tt[rt]=Tt[et]=Tt[ut]=Tt[ot]=Tt[it]=true,Tt[D]=Tt[M]=Tt[X]=Tt[q]=Tt[P]=Tt[K]=Tt[V]=Tt["[object Map]"]=Tt[Y]=Tt[Z]=Tt[G]=Tt["[object Set]"]=Tt[J]=Tt["[object WeakMap]"]=false;var St={};St[D]=St[M]=St[X]=St[q]=St[P]=St[H]=St[Q]=St[nt]=St[tt]=St[rt]=St[Y]=St[Z]=St[G]=St[J]=St[et]=St[ut]=St[ot]=St[it]=true,St[K]=St[V]=St["[object Map]"]=St["[object Set]"]=St["[object WeakMap]"]=false;var Wt={leading:false,maxWait:0,trailing:false},Nt={"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xdd":"Y","\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss"},Ut={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},Ft={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},Lt={"function":true,object:true},$t={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Bt=Lt[typeof window]&&window!==(this&&this.window)?window:this,zt=Lt[typeof exports]&&exports&&!exports.nodeType&&exports,Lt=Lt[typeof module]&&module&&!module.nodeType&&module,Dt=zt&&Lt&&typeof global=="object"&&global;
!Dt||Dt.global!==Dt&&Dt.window!==Dt&&Dt.self!==Dt||(Bt=Dt);var Dt=Lt&&Lt.exports===zt&&zt,Mt=w();typeof define=="function"&&typeof define.amd=="object"&&define.amd?(Bt._=Mt, define(function(){return Mt})):zt&&Lt?Dt?(Lt.exports=Mt)._=Mt:zt._=Mt:Bt._=Mt}).call(this);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\lodash\\lodash.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./lodash.min.js');
},{"./lodash.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\lodash\\lodash.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\moment\\moment.min.js":[function(require,module,exports){
(function (global){
//! moment.js
//! version : 2.8.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function(a){function b(a,b,c){switch(arguments.length){case 2:return null!=a?a:b;case 3:return null!=a?a:null!=b?b:c;default:throw new Error("Implement me")}}function c(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function d(a){rb.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+a)}function e(a,b){var c=!0;return l(function(){return c&&(d(a),c=!1),b.apply(this,arguments)},b)}function f(a,b){nc[a]||(d(b),nc[a]=!0)}function g(a,b){return function(c){return o(a.call(this,c),b)}}function h(a,b){return function(c){return this.localeData().ordinal(a.call(this,c),b)}}function i(){}function j(a,b){b!==!1&&E(a),m(this,a),this._d=new Date(+a._d)}function k(a){var b=x(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=rb.localeData(),this._bubble()}function l(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return b.hasOwnProperty("toString")&&(a.toString=b.toString),b.hasOwnProperty("valueOf")&&(a.valueOf=b.valueOf),a}function m(a,b){var c,d,e;if("undefined"!=typeof b._isAMomentObject&&(a._isAMomentObject=b._isAMomentObject),"undefined"!=typeof b._i&&(a._i=b._i),"undefined"!=typeof b._f&&(a._f=b._f),"undefined"!=typeof b._l&&(a._l=b._l),"undefined"!=typeof b._strict&&(a._strict=b._strict),"undefined"!=typeof b._tzm&&(a._tzm=b._tzm),"undefined"!=typeof b._isUTC&&(a._isUTC=b._isUTC),"undefined"!=typeof b._offset&&(a._offset=b._offset),"undefined"!=typeof b._pf&&(a._pf=b._pf),"undefined"!=typeof b._locale&&(a._locale=b._locale),Fb.length>0)for(c in Fb)d=Fb[c],e=b[d],"undefined"!=typeof e&&(a[d]=e);return a}function n(a){return 0>a?Math.ceil(a):Math.floor(a)}function o(a,b,c){for(var d=""+Math.abs(a),e=a>=0;d.length<b;)d="0"+d;return(e?c?"+":"":"-")+d}function p(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function q(a,b){var c;return b=J(b,a),a.isBefore(b)?c=p(a,b):(c=p(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function r(a,b){return function(c,d){var e,g;return null===d||isNaN(+d)||(f(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),g=c,c=d,d=g),c="string"==typeof c?+c:c,e=rb.duration(c,d),s(this,e,a),this}}function s(a,b,c,d){var e=b._milliseconds,f=b._days,g=b._months;d=null==d?!0:d,e&&a._d.setTime(+a._d+e*c),f&&lb(a,"Date",kb(a,"Date")+f*c),g&&jb(a,kb(a,"Month")+g*c),d&&rb.updateOffset(a,f||g)}function t(a){return"[object Array]"===Object.prototype.toString.call(a)}function u(a){return"[object Date]"===Object.prototype.toString.call(a)||a instanceof Date}function v(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&z(a[d])!==z(b[d]))&&g++;return g+f}function w(a){if(a){var b=a.toLowerCase().replace(/(.)s$/,"$1");a=gc[a]||hc[b]||b}return a}function x(a){var b,c,d={};for(c in a)a.hasOwnProperty(c)&&(b=w(c),b&&(d[b]=a[c]));return d}function y(b){var c,d;if(0===b.indexOf("week"))c=7,d="day";else{if(0!==b.indexOf("month"))return;c=12,d="month"}rb[b]=function(e,f){var g,h,i=rb._locale[b],j=[];if("number"==typeof e&&(f=e,e=a),h=function(a){var b=rb().utc().set(d,a);return i.call(rb._locale,b,e||"")},null!=f)return h(f);for(g=0;c>g;g++)j.push(h(g));return j}}function z(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=b>=0?Math.floor(b):Math.ceil(b)),c}function A(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function B(a,b,c){return fb(rb([a,11,31+b-c]),b,c).week}function C(a){return D(a)?366:365}function D(a){return a%4===0&&a%100!==0||a%400===0}function E(a){var b;a._a&&-2===a._pf.overflow&&(b=a._a[yb]<0||a._a[yb]>11?yb:a._a[zb]<1||a._a[zb]>A(a._a[xb],a._a[yb])?zb:a._a[Ab]<0||a._a[Ab]>23?Ab:a._a[Bb]<0||a._a[Bb]>59?Bb:a._a[Cb]<0||a._a[Cb]>59?Cb:a._a[Db]<0||a._a[Db]>999?Db:-1,a._pf._overflowDayOfYear&&(xb>b||b>zb)&&(b=zb),a._pf.overflow=b)}function F(a){return null==a._isValid&&(a._isValid=!isNaN(a._d.getTime())&&a._pf.overflow<0&&!a._pf.empty&&!a._pf.invalidMonth&&!a._pf.nullInput&&!a._pf.invalidFormat&&!a._pf.userInvalidated,a._strict&&(a._isValid=a._isValid&&0===a._pf.charsLeftOver&&0===a._pf.unusedTokens.length)),a._isValid}function G(a){return a?a.toLowerCase().replace("_","-"):a}function H(a){for(var b,c,d,e,f=0;f<a.length;){for(e=G(a[f]).split("-"),b=e.length,c=G(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=I(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&v(e,c,!0)>=b-1)break;b--}f++}return null}function I(a){var b=null;if(!Eb[a]&&Gb)try{b=rb.locale(),require("./locale/"+a),rb.locale(b)}catch(c){}return Eb[a]}function J(a,b){return b._isUTC?rb(a).zone(b._offset||0):rb(a).local()}function K(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function L(a){var b,c,d=a.match(Kb);for(b=0,c=d.length;c>b;b++)d[b]=mc[d[b]]?mc[d[b]]:K(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function M(a,b){return a.isValid()?(b=N(b,a.localeData()),ic[b]||(ic[b]=L(b)),ic[b](a)):a.localeData().invalidDate()}function N(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Lb.lastIndex=0;d>=0&&Lb.test(a);)a=a.replace(Lb,c),Lb.lastIndex=0,d-=1;return a}function O(a,b){var c,d=b._strict;switch(a){case"Q":return Wb;case"DDDD":return Yb;case"YYYY":case"GGGG":case"gggg":return d?Zb:Ob;case"Y":case"G":case"g":return _b;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return d?$b:Pb;case"S":if(d)return Wb;case"SS":if(d)return Xb;case"SSS":if(d)return Yb;case"DDD":return Nb;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return Rb;case"a":case"A":return b._locale._meridiemParse;case"X":return Ub;case"Z":case"ZZ":return Sb;case"T":return Tb;case"SSSS":return Qb;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return d?Xb:Mb;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return Mb;case"Do":return Vb;default:return c=new RegExp(X(W(a.replace("\\","")),"i"))}}function P(a){a=a||"";var b=a.match(Sb)||[],c=b[b.length-1]||[],d=(c+"").match(ec)||["-",0,0],e=+(60*d[1])+z(d[2]);return"+"===d[0]?-e:e}function Q(a,b,c){var d,e=c._a;switch(a){case"Q":null!=b&&(e[yb]=3*(z(b)-1));break;case"M":case"MM":null!=b&&(e[yb]=z(b)-1);break;case"MMM":case"MMMM":d=c._locale.monthsParse(b),null!=d?e[yb]=d:c._pf.invalidMonth=b;break;case"D":case"DD":null!=b&&(e[zb]=z(b));break;case"Do":null!=b&&(e[zb]=z(parseInt(b,10)));break;case"DDD":case"DDDD":null!=b&&(c._dayOfYear=z(b));break;case"YY":e[xb]=rb.parseTwoDigitYear(b);break;case"YYYY":case"YYYYY":case"YYYYYY":e[xb]=z(b);break;case"a":case"A":c._isPm=c._locale.isPM(b);break;case"H":case"HH":case"h":case"hh":e[Ab]=z(b);break;case"m":case"mm":e[Bb]=z(b);break;case"s":case"ss":e[Cb]=z(b);break;case"S":case"SS":case"SSS":case"SSSS":e[Db]=z(1e3*("0."+b));break;case"X":c._d=new Date(1e3*parseFloat(b));break;case"Z":case"ZZ":c._useUTC=!0,c._tzm=P(b);break;case"dd":case"ddd":case"dddd":d=c._locale.weekdaysParse(b),null!=d?(c._w=c._w||{},c._w.d=d):c._pf.invalidWeekday=b;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":a=a.substr(0,1);case"gggg":case"GGGG":case"GGGGG":a=a.substr(0,2),b&&(c._w=c._w||{},c._w[a]=z(b));break;case"gg":case"GG":c._w=c._w||{},c._w[a]=rb.parseTwoDigitYear(b)}}function R(a){var c,d,e,f,g,h,i;c=a._w,null!=c.GG||null!=c.W||null!=c.E?(g=1,h=4,d=b(c.GG,a._a[xb],fb(rb(),1,4).year),e=b(c.W,1),f=b(c.E,1)):(g=a._locale._week.dow,h=a._locale._week.doy,d=b(c.gg,a._a[xb],fb(rb(),g,h).year),e=b(c.w,1),null!=c.d?(f=c.d,g>f&&++e):f=null!=c.e?c.e+g:g),i=gb(d,e,f,h,g),a._a[xb]=i.year,a._dayOfYear=i.dayOfYear}function S(a){var c,d,e,f,g=[];if(!a._d){for(e=U(a),a._w&&null==a._a[zb]&&null==a._a[yb]&&R(a),a._dayOfYear&&(f=b(a._a[xb],e[xb]),a._dayOfYear>C(f)&&(a._pf._overflowDayOfYear=!0),d=bb(f,0,a._dayOfYear),a._a[yb]=d.getUTCMonth(),a._a[zb]=d.getUTCDate()),c=0;3>c&&null==a._a[c];++c)a._a[c]=g[c]=e[c];for(;7>c;c++)a._a[c]=g[c]=null==a._a[c]?2===c?1:0:a._a[c];a._d=(a._useUTC?bb:ab).apply(null,g),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()+a._tzm)}}function T(a){var b;a._d||(b=x(a._i),a._a=[b.year,b.month,b.day,b.hour,b.minute,b.second,b.millisecond],S(a))}function U(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function V(a){if(a._f===rb.ISO_8601)return void Z(a);a._a=[],a._pf.empty=!0;var b,c,d,e,f,g=""+a._i,h=g.length,i=0;for(d=N(a._f,a._locale).match(Kb)||[],b=0;b<d.length;b++)e=d[b],c=(g.match(O(e,a))||[])[0],c&&(f=g.substr(0,g.indexOf(c)),f.length>0&&a._pf.unusedInput.push(f),g=g.slice(g.indexOf(c)+c.length),i+=c.length),mc[e]?(c?a._pf.empty=!1:a._pf.unusedTokens.push(e),Q(e,c,a)):a._strict&&!c&&a._pf.unusedTokens.push(e);a._pf.charsLeftOver=h-i,g.length>0&&a._pf.unusedInput.push(g),a._isPm&&a._a[Ab]<12&&(a._a[Ab]+=12),a._isPm===!1&&12===a._a[Ab]&&(a._a[Ab]=0),S(a),E(a)}function W(a){return a.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e})}function X(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function Y(a){var b,d,e,f,g;if(0===a._f.length)return a._pf.invalidFormat=!0,void(a._d=new Date(0/0));for(f=0;f<a._f.length;f++)g=0,b=m({},a),b._pf=c(),b._f=a._f[f],V(b),F(b)&&(g+=b._pf.charsLeftOver,g+=10*b._pf.unusedTokens.length,b._pf.score=g,(null==e||e>g)&&(e=g,d=b));l(a,d||b)}function Z(a){var b,c,d=a._i,e=ac.exec(d);if(e){for(a._pf.iso=!0,b=0,c=cc.length;c>b;b++)if(cc[b][1].exec(d)){a._f=cc[b][0]+(e[6]||" ");break}for(b=0,c=dc.length;c>b;b++)if(dc[b][1].exec(d)){a._f+=dc[b][0];break}d.match(Sb)&&(a._f+="Z"),V(a)}else a._isValid=!1}function $(a){Z(a),a._isValid===!1&&(delete a._isValid,rb.createFromInputFallback(a))}function _(b){var c,d=b._i;d===a?b._d=new Date:u(d)?b._d=new Date(+d):null!==(c=Hb.exec(d))?b._d=new Date(+c[1]):"string"==typeof d?$(b):t(d)?(b._a=d.slice(0),S(b)):"object"==typeof d?T(b):"number"==typeof d?b._d=new Date(d):rb.createFromInputFallback(b)}function ab(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970>a&&h.setFullYear(a),h}function bb(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970>a&&b.setUTCFullYear(a),b}function cb(a,b){if("string"==typeof a)if(isNaN(a)){if(a=b.weekdaysParse(a),"number"!=typeof a)return null}else a=parseInt(a,10);return a}function db(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function eb(a,b,c){var d=rb.duration(a).abs(),e=wb(d.as("s")),f=wb(d.as("m")),g=wb(d.as("h")),h=wb(d.as("d")),i=wb(d.as("M")),j=wb(d.as("y")),k=e<jc.s&&["s",e]||1===f&&["m"]||f<jc.m&&["mm",f]||1===g&&["h"]||g<jc.h&&["hh",g]||1===h&&["d"]||h<jc.d&&["dd",h]||1===i&&["M"]||i<jc.M&&["MM",i]||1===j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,db.apply({},k)}function fb(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=rb(a).add(f,"d"),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function gb(a,b,c,d,e){var f,g,h=bb(a,0,1).getUTCDay();return h=0===h?7:h,c=null!=c?c:e,f=e-h+(h>d?7:0)-(e>h?7:0),g=7*(b-1)+(c-e)+f+1,{year:g>0?a:a-1,dayOfYear:g>0?g:C(a-1)+g}}function hb(b){var c=b._i,d=b._f;return b._locale=b._locale||rb.localeData(b._l),null===c||d===a&&""===c?rb.invalid({nullInput:!0}):("string"==typeof c&&(b._i=c=b._locale.preparse(c)),rb.isMoment(c)?new j(c,!0):(d?t(d)?Y(b):V(b):_(b),new j(b)))}function ib(a,b){var c,d;if(1===b.length&&t(b[0])&&(b=b[0]),!b.length)return rb();for(c=b[0],d=1;d<b.length;++d)b[d][a](c)&&(c=b[d]);return c}function jb(a,b){var c;return"string"==typeof b&&(b=a.localeData().monthsParse(b),"number"!=typeof b)?a:(c=Math.min(a.date(),A(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a)}function kb(a,b){return a._d["get"+(a._isUTC?"UTC":"")+b]()}function lb(a,b,c){return"Month"===b?jb(a,c):a._d["set"+(a._isUTC?"UTC":"")+b](c)}function mb(a,b){return function(c){return null!=c?(lb(this,a,c),rb.updateOffset(this,b),this):kb(this,a)}}function nb(a){return 400*a/146097}function ob(a){return 146097*a/400}function pb(a){rb.duration.fn[a]=function(){return this._data[a]}}function qb(a){"undefined"==typeof ender&&(sb=vb.moment,vb.moment=a?e("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",rb):rb)}for(var rb,sb,tb,ub="2.8.1",vb="undefined"!=typeof global?global:this,wb=Math.round,xb=0,yb=1,zb=2,Ab=3,Bb=4,Cb=5,Db=6,Eb={},Fb=[],Gb="undefined"!=typeof module&&module.exports,Hb=/^\/?Date\((\-?\d+)/i,Ib=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Jb=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,Kb=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,Lb=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,Mb=/\d\d?/,Nb=/\d{1,3}/,Ob=/\d{1,4}/,Pb=/[+\-]?\d{1,6}/,Qb=/\d+/,Rb=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Sb=/Z|[\+\-]\d\d:?\d\d/gi,Tb=/T/i,Ub=/[\+\-]?\d+(\.\d{1,3})?/,Vb=/\d{1,2}/,Wb=/\d/,Xb=/\d\d/,Yb=/\d{3}/,Zb=/\d{4}/,$b=/[+-]?\d{6}/,_b=/[+-]?\d+/,ac=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,bc="YYYY-MM-DDTHH:mm:ssZ",cc=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],dc=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],ec=/([\+\-]|\d\d)/gi,fc=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),gc={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},hc={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},ic={},jc={s:45,m:45,h:22,d:26,M:11},kc="DDD w W M D d".split(" "),lc="M D H h m s w W".split(" "),mc={M:function(){return this.month()+1},MMM:function(a){return this.localeData().monthsShort(this,a)},MMMM:function(a){return this.localeData().months(this,a)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(a){return this.localeData().weekdaysMin(this,a)},ddd:function(a){return this.localeData().weekdaysShort(this,a)},dddd:function(a){return this.localeData().weekdays(this,a)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return o(this.year()%100,2)},YYYY:function(){return o(this.year(),4)},YYYYY:function(){return o(this.year(),5)},YYYYYY:function(){var a=this.year(),b=a>=0?"+":"-";return b+o(Math.abs(a),6)},gg:function(){return o(this.weekYear()%100,2)},gggg:function(){return o(this.weekYear(),4)},ggggg:function(){return o(this.weekYear(),5)},GG:function(){return o(this.isoWeekYear()%100,2)},GGGG:function(){return o(this.isoWeekYear(),4)},GGGGG:function(){return o(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return z(this.milliseconds()/100)},SS:function(){return o(z(this.milliseconds()/10),2)},SSS:function(){return o(this.milliseconds(),3)},SSSS:function(){return o(this.milliseconds(),3)},Z:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+o(z(a/60),2)+":"+o(z(a)%60,2)},ZZ:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+o(z(a/60),2)+o(z(a)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},X:function(){return this.unix()},Q:function(){return this.quarter()}},nc={},oc=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"];kc.length;)tb=kc.pop(),mc[tb+"o"]=h(mc[tb],tb);for(;lc.length;)tb=lc.pop(),mc[tb+tb]=g(mc[tb],2);mc.DDDD=g(mc.DDD,3),l(i.prototype,{set:function(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(a){return this._months[a.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(a){return this._monthsShort[a.month()]},monthsParse:function(a){var b,c,d;for(this._monthsParse||(this._monthsParse=[]),b=0;12>b;b++)if(this._monthsParse[b]||(c=rb.utc([2e3,b]),d="^"+this.months(c,"")+"|^"+this.monthsShort(c,""),this._monthsParse[b]=new RegExp(d.replace(".",""),"i")),this._monthsParse[b].test(a))return b},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(a){return this._weekdays[a.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(a){return this._weekdaysShort[a.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(a){return this._weekdaysMin[a.day()]},weekdaysParse:function(a){var b,c,d;for(this._weekdaysParse||(this._weekdaysParse=[]),b=0;7>b;b++)if(this._weekdaysParse[b]||(c=rb([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b},_longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(a){var b=this._longDateFormat[a];return!b&&this._longDateFormat[a.toUpperCase()]&&(b=this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a]=b),b},isPM:function(a){return"p"===(a+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(a,b){var c=this._calendar[a];return"function"==typeof c?c.apply(b):c},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)},pastFuture:function(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)},ordinal:function(a){return this._ordinal.replace("%d",a)},_ordinal:"%d",preparse:function(a){return a},postformat:function(a){return a},week:function(a){return fb(a,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),rb=function(b,d,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._i=b,g._f=d,g._l=e,g._strict=f,g._isUTC=!1,g._pf=c(),hb(g)},rb.suppressDeprecationWarnings=!1,rb.createFromInputFallback=e("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i)}),rb.min=function(){var a=[].slice.call(arguments,0);return ib("isBefore",a)},rb.max=function(){var a=[].slice.call(arguments,0);return ib("isAfter",a)},rb.utc=function(b,d,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._useUTC=!0,g._isUTC=!0,g._l=e,g._i=b,g._f=d,g._strict=f,g._pf=c(),hb(g).utc()},rb.unix=function(a){return rb(1e3*a)},rb.duration=function(a,b){var c,d,e,f,g=a,h=null;return rb.isDuration(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=Ib.exec(a))?(c="-"===h[1]?-1:1,g={y:0,d:z(h[zb])*c,h:z(h[Ab])*c,m:z(h[Bb])*c,s:z(h[Cb])*c,ms:z(h[Db])*c}):(h=Jb.exec(a))?(c="-"===h[1]?-1:1,e=function(a){var b=a&&parseFloat(a.replace(",","."));return(isNaN(b)?0:b)*c},g={y:e(h[2]),M:e(h[3]),d:e(h[4]),h:e(h[5]),m:e(h[6]),s:e(h[7]),w:e(h[8])}):"object"==typeof g&&("from"in g||"to"in g)&&(f=q(rb(g.from),rb(g.to)),g={},g.ms=f.milliseconds,g.M=f.months),d=new k(g),rb.isDuration(a)&&a.hasOwnProperty("_locale")&&(d._locale=a._locale),d},rb.version=ub,rb.defaultFormat=bc,rb.ISO_8601=function(){},rb.momentProperties=Fb,rb.updateOffset=function(){},rb.relativeTimeThreshold=function(b,c){return jc[b]===a?!1:c===a?jc[b]:(jc[b]=c,!0)},rb.lang=e("moment.lang is deprecated. Use moment.locale instead.",function(a,b){return rb.locale(a,b)}),rb.locale=function(a,b){var c;return a&&(c="undefined"!=typeof b?rb.defineLocale(a,b):rb.localeData(a),c&&(rb.duration._locale=rb._locale=c)),rb._locale._abbr},rb.defineLocale=function(a,b){return null!==b?(b.abbr=a,Eb[a]||(Eb[a]=new i),Eb[a].set(b),rb.locale(a),Eb[a]):(delete Eb[a],null)},rb.langData=e("moment.langData is deprecated. Use moment.localeData instead.",function(a){return rb.localeData(a)}),rb.localeData=function(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return rb._locale;if(!t(a)){if(b=I(a))return b;a=[a]}return H(a)},rb.isMoment=function(a){return a instanceof j||null!=a&&a.hasOwnProperty("_isAMomentObject")},rb.isDuration=function(a){return a instanceof k};for(tb=oc.length-1;tb>=0;--tb)y(oc[tb]);rb.normalizeUnits=function(a){return w(a)},rb.invalid=function(a){var b=rb.utc(0/0);return null!=a?l(b._pf,a):b._pf.userInvalidated=!0,b},rb.parseZone=function(){return rb.apply(null,arguments).parseZone()},rb.parseTwoDigitYear=function(a){return z(a)+(z(a)>68?1900:2e3)},l(rb.fn=j.prototype,{clone:function(){return rb(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var a=rb(this).utc();return 0<a.year()&&a.year()<=9999?M(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):M(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var a=this;return[a.year(),a.month(),a.date(),a.hours(),a.minutes(),a.seconds(),a.milliseconds()]},isValid:function(){return F(this)},isDSTShifted:function(){return this._a?this.isValid()&&v(this._a,(this._isUTC?rb.utc(this._a):rb(this._a)).toArray())>0:!1},parsingFlags:function(){return l({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(a){return this.zone(0,a)},local:function(a){return this._isUTC&&(this.zone(0,a),this._isUTC=!1,a&&this.add(this._d.getTimezoneOffset(),"m")),this},format:function(a){var b=M(this,a||rb.defaultFormat);return this.localeData().postformat(b)},add:r(1,"add"),subtract:r(-1,"subtract"),diff:function(a,b,c){var d,e,f=J(a,this),g=6e4*(this.zone()-f.zone());return b=w(b),"year"===b||"month"===b?(d=432e5*(this.daysInMonth()+f.daysInMonth()),e=12*(this.year()-f.year())+(this.month()-f.month()),e+=(this-rb(this).startOf("month")-(f-rb(f).startOf("month")))/d,e-=6e4*(this.zone()-rb(this).startOf("month").zone()-(f.zone()-rb(f).startOf("month").zone()))/d,"year"===b&&(e/=12)):(d=this-f,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-g)/864e5:"week"===b?(d-g)/6048e5:d),c?e:n(e)},from:function(a,b){return rb.duration({to:this,from:a}).locale(this.locale()).humanize(!b)},fromNow:function(a){return this.from(rb(),a)},calendar:function(a){var b=a||rb(),c=J(b,this).startOf("day"),d=this.diff(c,"days",!0),e=-6>d?"sameElse":-1>d?"lastWeek":0>d?"lastDay":1>d?"sameDay":2>d?"nextDay":7>d?"nextWeek":"sameElse";return this.format(this.localeData().calendar(e,this))},isLeapYear:function(){return D(this.year())},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=cb(a,this.localeData()),this.add(a-b,"d")):b},month:mb("Month",!0),startOf:function(a){switch(a=w(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a?this.weekday(0):"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(a){return a=w(a),this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")},isAfter:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)>+rb(a).startOf(b)},isBefore:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)<+rb(a).startOf(b)},isSame:function(a,b){return b=b||"ms",+this.clone().startOf(b)===+J(a,this).startOf(b)},min:e("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(a){return a=rb.apply(null,arguments),this>a?this:a}),max:e("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(a){return a=rb.apply(null,arguments),a>this?this:a}),zone:function(a,b){var c,d=this._offset||0;return null==a?this._isUTC?d:this._d.getTimezoneOffset():("string"==typeof a&&(a=P(a)),Math.abs(a)<16&&(a=60*a),!this._isUTC&&b&&(c=this._d.getTimezoneOffset()),this._offset=a,this._isUTC=!0,null!=c&&this.subtract(c,"m"),d!==a&&(!b||this._changeInProgress?s(this,rb.duration(d-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,rb.updateOffset(this,!0),this._changeInProgress=null)),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.zone(this._tzm):"string"==typeof this._i&&this.zone(this._i),this},hasAlignedHourOffset:function(a){return a=a?rb(a).zone():0,(this.zone()-a)%60===0},daysInMonth:function(){return A(this.year(),this.month())},dayOfYear:function(a){var b=wb((rb(this).startOf("day")-rb(this).startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")},quarter:function(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)},weekYear:function(a){var b=fb(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,"y")},isoWeekYear:function(a){var b=fb(this,1,4).year;return null==a?b:this.add(a-b,"y")},week:function(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")},isoWeek:function(a){var b=fb(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")},weekday:function(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")},isoWeekday:function(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)},isoWeeksInYear:function(){return B(this.year(),1,4)},weeksInYear:function(){var a=this.localeData()._week;return B(this.year(),a.dow,a.doy)},get:function(a){return a=w(a),this[a]()},set:function(a,b){return a=w(a),"function"==typeof this[a]&&this[a](b),this},locale:function(b){return b===a?this._locale._abbr:(this._locale=rb.localeData(b),this)},lang:e("moment().lang() is deprecated. Use moment().localeData() instead.",function(b){return b===a?this.localeData():(this._locale=rb.localeData(b),this)}),localeData:function(){return this._locale}}),rb.fn.millisecond=rb.fn.milliseconds=mb("Milliseconds",!1),rb.fn.second=rb.fn.seconds=mb("Seconds",!1),rb.fn.minute=rb.fn.minutes=mb("Minutes",!1),rb.fn.hour=rb.fn.hours=mb("Hours",!0),rb.fn.date=mb("Date",!0),rb.fn.dates=e("dates accessor is deprecated. Use date instead.",mb("Date",!0)),rb.fn.year=mb("FullYear",!0),rb.fn.years=e("years accessor is deprecated. Use year instead.",mb("FullYear",!0)),rb.fn.days=rb.fn.day,rb.fn.months=rb.fn.month,rb.fn.weeks=rb.fn.week,rb.fn.isoWeeks=rb.fn.isoWeek,rb.fn.quarters=rb.fn.quarter,rb.fn.toJSON=rb.fn.toISOString,l(rb.duration.fn=k.prototype,{_bubble:function(){var a,b,c,d=this._milliseconds,e=this._days,f=this._months,g=this._data,h=0;g.milliseconds=d%1e3,a=n(d/1e3),g.seconds=a%60,b=n(a/60),g.minutes=b%60,c=n(b/60),g.hours=c%24,e+=n(c/24),h=n(nb(e)),e-=n(ob(h)),f+=n(e/30),e%=30,h+=n(f/12),f%=12,g.days=e,g.months=f,g.years=h},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return n(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*z(this._months/12)},humanize:function(a){var b=eb(this,!a,this.localeData());return a&&(b=this.localeData().pastFuture(+this,b)),this.localeData().postformat(b)},add:function(a,b){var c=rb.duration(a,b);return this._milliseconds+=c._milliseconds,this._days+=c._days,this._months+=c._months,this._bubble(),this},subtract:function(a,b){var c=rb.duration(a,b);return this._milliseconds-=c._milliseconds,this._days-=c._days,this._months-=c._months,this._bubble(),this},get:function(a){return a=w(a),this[a.toLowerCase()+"s"]()},as:function(a){var b,c;if(a=w(a),b=this._days+this._milliseconds/864e5,"month"===a||"year"===a)return c=this._months+12*nb(b),"month"===a?c:c/12;switch(b+=ob(this._months/12),a){case"week":return b/7;case"day":return b;case"hour":return 24*b;case"minute":return 24*b*60;case"second":return 24*b*60*60;case"millisecond":return 24*b*60*60*1e3;default:throw new Error("Unknown unit "+a)}},lang:rb.fn.lang,locale:rb.fn.locale,toIsoString:e("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var a=Math.abs(this.years()),b=Math.abs(this.months()),c=Math.abs(this.days()),d=Math.abs(this.hours()),e=Math.abs(this.minutes()),f=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(a?a+"Y":"")+(b?b+"M":"")+(c?c+"D":"")+(d||e||f?"T":"")+(d?d+"H":"")+(e?e+"M":"")+(f?f+"S":""):"P0D"},localeData:function(){return this._locale}});for(tb in fc)fc.hasOwnProperty(tb)&&pb(tb.toLowerCase());rb.duration.fn.asMilliseconds=function(){return this.as("ms")},rb.duration.fn.asSeconds=function(){return this.as("s")},rb.duration.fn.asMinutes=function(){return this.as("m")},rb.duration.fn.asHours=function(){return this.as("h")},rb.duration.fn.asDays=function(){return this.as("d")},rb.duration.fn.asWeeks=function(){return this.as("weeks")},rb.duration.fn.asMonths=function(){return this.as("M")},rb.duration.fn.asYears=function(){return this.as("y")},rb.locale("en",{ordinal:function(a){var b=a%10,c=1===z(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),Gb?module.exports=rb:"function"==typeof define&&define.amd?(define("moment",function(a,b,c){return c.config&&c.config()&&c.config().noGlobal===!0&&(vb.moment=sb),rb}),qb(!0)):qb()}).call(this);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\moment\\moment.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./moment.min.js');
},{"./moment.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\moment\\moment.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\pace\\pace.min.js":[function(require,module,exports){
/*! pace 0.5.5 */
(function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W=[].slice,X={}.hasOwnProperty,Y=function(a,b){function c(){this.constructor=a}for(var d in b)X.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},Z=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};for(t={catchupTime:500,initialRate:.03,minTime:500,ghostTime:500,maxProgressPerFrame:10,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:"body",elements:{checkInterval:100,selectors:["body"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:["GET"],trackWebSockets:!0,ignoreURLs:[]}},B=function(){var a;return null!=(a="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance.now():void 0)?a:+new Date},D=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,s=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==D&&(D=function(a){return setTimeout(a,50)},s=function(a){return clearTimeout(a)}),F=function(a){var b,c;return b=B(),(c=function(){var d;return d=B()-b,d>=33?(b=B(),a(d,function(){return D(c)})):setTimeout(c,33-d)})()},E=function(){var a,b,c;return c=arguments[0],b=arguments[1],a=3<=arguments.length?W.call(arguments,2):[],"function"==typeof c[b]?c[b].apply(c,a):c[b]},u=function(){var a,b,c,d,e,f,g;for(b=arguments[0],d=2<=arguments.length?W.call(arguments,1):[],f=0,g=d.length;g>f;f++)if(c=d[f])for(a in c)X.call(c,a)&&(e=c[a],null!=b[a]&&"object"==typeof b[a]&&null!=e&&"object"==typeof e?u(b[a],e):b[a]=e);return b},p=function(a){var b,c,d,e,f;for(c=b=0,e=0,f=a.length;f>e;e++)d=a[e],c+=Math.abs(d),b++;return c/b},w=function(a,b){var c,d,e;if(null==a&&(a="options"),null==b&&(b=!0),e=document.querySelector("[data-pace-"+a+"]")){if(c=e.getAttribute("data-pace-"+a),!b)return c;try{return JSON.parse(c)}catch(f){return d=f,"undefined"!=typeof console&&null!==console?console.error("Error parsing inline pace options",d):void 0}}},g=function(){function a(){}return a.prototype.on=function(a,b,c,d){var e;return null==d&&(d=!1),null==this.bindings&&(this.bindings={}),null==(e=this.bindings)[a]&&(e[a]=[]),this.bindings[a].push({handler:b,ctx:c,once:d})},a.prototype.once=function(a,b,c){return this.on(a,b,c,!0)},a.prototype.off=function(a,b){var c,d,e;if(null!=(null!=(d=this.bindings)?d[a]:void 0)){if(null==b)return delete this.bindings[a];for(c=0,e=[];c<this.bindings[a].length;)e.push(this.bindings[a][c].handler===b?this.bindings[a].splice(c,1):c++);return e}},a.prototype.trigger=function(){var a,b,c,d,e,f,g,h,i;if(c=arguments[0],a=2<=arguments.length?W.call(arguments,1):[],null!=(g=this.bindings)?g[c]:void 0){for(e=0,i=[];e<this.bindings[c].length;)h=this.bindings[c][e],d=h.handler,b=h.ctx,f=h.once,d.apply(null!=b?b:this,a),i.push(f?this.bindings[c].splice(e,1):e++);return i}},a}(),null==window.Pace&&(window.Pace={}),u(Pace,g.prototype),C=Pace.options=u({},t,window.paceOptions,w()),T=["ajax","document","eventLag","elements"],P=0,R=T.length;R>P;P++)J=T[P],C[J]===!0&&(C[J]=t[J]);i=function(a){function b(){return U=b.__super__.constructor.apply(this,arguments)}return Y(b,a),b}(Error),b=function(){function a(){this.progress=0}return a.prototype.getElement=function(){var a;if(null==this.el){if(a=document.querySelector(C.target),!a)throw new i;this.el=document.createElement("div"),this.el.className="pace pace-active",document.body.className=document.body.className.replace(/pace-done/g,""),document.body.className+=" pace-running",this.el.innerHTML='<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>',null!=a.firstChild?a.insertBefore(this.el,a.firstChild):a.appendChild(this.el)}return this.el},a.prototype.finish=function(){var a;return a=this.getElement(),a.className=a.className.replace("pace-active",""),a.className+=" pace-inactive",document.body.className=document.body.className.replace("pace-running",""),document.body.className+=" pace-done"},a.prototype.update=function(a){return this.progress=a,this.render()},a.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(a){i=a}return this.el=void 0},a.prototype.render=function(){var a,b;return null==document.querySelector(C.target)?!1:(a=this.getElement(),a.children[0].style.width=""+this.progress+"%",(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(a.children[0].setAttribute("data-progress-text",""+(0|this.progress)+"%"),this.progress>=100?b="99":(b=this.progress<10?"0":"",b+=0|this.progress),a.children[0].setAttribute("data-progress",""+b)),this.lastRenderedProgress=this.progress)},a.prototype.done=function(){return this.progress>=100},a}(),h=function(){function a(){this.bindings={}}return a.prototype.trigger=function(a,b){var c,d,e,f,g;if(null!=this.bindings[a]){for(f=this.bindings[a],g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(c.call(this,b));return g}},a.prototype.on=function(a,b){var c;return null==(c=this.bindings)[a]&&(c[a]=[]),this.bindings[a].push(b)},a}(),O=window.XMLHttpRequest,N=window.XDomainRequest,M=window.WebSocket,v=function(a,b){var c,d,e,f;f=[];for(d in b.prototype)try{e=b.prototype[d],f.push(null==a[d]&&"function"!=typeof e?a[d]=e:void 0)}catch(g){c=g}return f},z=[],Pace.ignore=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?W.call(arguments,1):[],z.unshift("ignore"),c=b.apply(null,a),z.shift(),c},Pace.track=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?W.call(arguments,1):[],z.unshift("track"),c=b.apply(null,a),z.shift(),c},I=function(a){var b;if(null==a&&(a="GET"),"track"===z[0])return"force";if(!z.length&&C.ajax){if("socket"===a&&C.ajax.trackWebSockets)return!0;if(b=a.toUpperCase(),Z.call(C.ajax.trackMethods,b)>=0)return!0}return!1},j=function(a){function b(){var a,c=this;b.__super__.constructor.apply(this,arguments),a=function(a){var b;return b=a.open,a.open=function(d,e){return I(d)&&c.trigger("request",{type:d,url:e,request:a}),b.apply(a,arguments)}},window.XMLHttpRequest=function(b){var c;return c=new O(b),a(c),c},v(window.XMLHttpRequest,O),null!=N&&(window.XDomainRequest=function(){var b;return b=new N,a(b),b},v(window.XDomainRequest,N)),null!=M&&C.ajax.trackWebSockets&&(window.WebSocket=function(a,b){var d;return d=null!=b?new M(a,b):new M(a),I("socket")&&c.trigger("request",{type:"socket",url:a,protocols:b,request:d}),d},v(window.WebSocket,M))}return Y(b,a),b}(h),Q=null,x=function(){return null==Q&&(Q=new j),Q},H=function(a){var b,c,d,e;for(e=C.ajax.ignoreURLs,c=0,d=e.length;d>c;c++)if(b=e[c],"string"==typeof b){if(-1!==a.indexOf(b))return!0}else if(b.test(a))return!0;return!1},x().on("request",function(b){var c,d,e,f,g;return f=b.type,e=b.request,g=b.url,H(g)?void 0:Pace.running||C.restartOnRequestAfter===!1&&"force"!==I(f)?void 0:(d=arguments,c=C.restartOnRequestAfter||0,"boolean"==typeof c&&(c=0),setTimeout(function(){var b,c,g,h,i,j;if(b="socket"===f?e.readyState<2:0<(h=e.readyState)&&4>h){for(Pace.restart(),i=Pace.sources,j=[],c=0,g=i.length;g>c;c++){if(J=i[c],J instanceof a){J.watch.apply(J,d);break}j.push(void 0)}return j}},c))}),a=function(){function a(){var a=this;this.elements=[],x().on("request",function(){return a.watch.apply(a,arguments)})}return a.prototype.watch=function(a){var b,c,d,e;return d=a.type,b=a.request,e=a.url,H(e)?void 0:(c="socket"===d?new m(b):new n(b),this.elements.push(c))},a}(),n=function(){function a(a){var b,c,d,e,f,g,h=this;if(this.progress=0,null!=window.ProgressEvent)for(c=null,a.addEventListener("progress",function(a){return h.progress=a.lengthComputable?100*a.loaded/a.total:h.progress+(100-h.progress)/2}),g=["load","abort","timeout","error"],d=0,e=g.length;e>d;d++)b=g[d],a.addEventListener(b,function(){return h.progress=100});else f=a.onreadystatechange,a.onreadystatechange=function(){var b;return 0===(b=a.readyState)||4===b?h.progress=100:3===a.readyState&&(h.progress=50),"function"==typeof f?f.apply(null,arguments):void 0}}return a}(),m=function(){function a(a){var b,c,d,e,f=this;for(this.progress=0,e=["error","open"],c=0,d=e.length;d>c;c++)b=e[c],a.addEventListener(b,function(){return f.progress=100})}return a}(),d=function(){function a(a){var b,c,d,f;for(null==a&&(a={}),this.elements=[],null==a.selectors&&(a.selectors=[]),f=a.selectors,c=0,d=f.length;d>c;c++)b=f[c],this.elements.push(new e(b))}return a}(),e=function(){function a(a){this.selector=a,this.progress=0,this.check()}return a.prototype.check=function(){var a=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return a.check()},C.elements.checkInterval)},a.prototype.done=function(){return this.progress=100},a}(),c=function(){function a(){var a,b,c=this;this.progress=null!=(b=this.states[document.readyState])?b:100,a=document.onreadystatechange,document.onreadystatechange=function(){return null!=c.states[document.readyState]&&(c.progress=c.states[document.readyState]),"function"==typeof a?a.apply(null,arguments):void 0}}return a.prototype.states={loading:0,interactive:50,complete:100},a}(),f=function(){function a(){var a,b,c,d,e,f=this;this.progress=0,a=0,e=[],d=0,c=B(),b=setInterval(function(){var g;return g=B()-c-50,c=B(),e.push(g),e.length>C.eventLag.sampleCount&&e.shift(),a=p(e),++d>=C.eventLag.minSamples&&a<C.eventLag.lagThreshold?(f.progress=100,clearInterval(b)):f.progress=100*(3/(a+3))},50)}return a}(),l=function(){function a(a){this.source=a,this.last=this.sinceLastUpdate=0,this.rate=C.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=E(this.source,"progress"))}return a.prototype.tick=function(a,b){var c;return null==b&&(b=E(this.source,"progress")),b>=100&&(this.done=!0),b===this.last?this.sinceLastUpdate+=a:(this.sinceLastUpdate&&(this.rate=(b-this.last)/this.sinceLastUpdate),this.catchup=(b-this.progress)/C.catchupTime,this.sinceLastUpdate=0,this.last=b),b>this.progress&&(this.progress+=this.catchup*a),c=1-Math.pow(this.progress/100,C.easeFactor),this.progress+=c*this.rate*a,this.progress=Math.min(this.lastProgress+C.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},a}(),K=null,G=null,q=null,L=null,o=null,r=null,Pace.running=!1,y=function(){return C.restartOnPushState?Pace.restart():void 0},null!=window.history.pushState&&(S=window.history.pushState,window.history.pushState=function(){return y(),S.apply(window.history,arguments)}),null!=window.history.replaceState&&(V=window.history.replaceState,window.history.replaceState=function(){return y(),V.apply(window.history,arguments)}),k={ajax:a,elements:d,document:c,eventLag:f},(A=function(){var a,c,d,e,f,g,h,i;for(Pace.sources=K=[],g=["ajax","elements","document","eventLag"],c=0,e=g.length;e>c;c++)a=g[c],C[a]!==!1&&K.push(new k[a](C[a]));for(i=null!=(h=C.extraSources)?h:[],d=0,f=i.length;f>d;d++)J=i[d],K.push(new J(C));return Pace.bar=q=new b,G=[],L=new l})(),Pace.stop=function(){return Pace.trigger("stop"),Pace.running=!1,q.destroy(),r=!0,null!=o&&("function"==typeof s&&s(o),o=null),A()},Pace.restart=function(){return Pace.trigger("restart"),Pace.stop(),Pace.start()},Pace.go=function(){var a;return Pace.running=!0,q.render(),a=B(),r=!1,o=F(function(b,c){var d,e,f,g,h,i,j,k,m,n,o,p,s,t,u,v;for(k=100-q.progress,e=o=0,f=!0,i=p=0,t=K.length;t>p;i=++p)for(J=K[i],n=null!=G[i]?G[i]:G[i]=[],h=null!=(v=J.elements)?v:[J],j=s=0,u=h.length;u>s;j=++s)g=h[j],m=null!=n[j]?n[j]:n[j]=new l(g),f&=m.done,m.done||(e++,o+=m.tick(b));return d=o/e,q.update(L.tick(b,d)),q.done()||f||r?(q.update(100),Pace.trigger("done"),setTimeout(function(){return q.finish(),Pace.running=!1,Pace.trigger("hide")},Math.max(C.ghostTime,Math.max(C.minTime-(B()-a),0)))):c()})},Pace.start=function(a){u(C,a),Pace.running=!0;try{q.render()}catch(b){i=b}return document.querySelector(".pace")?(Pace.trigger("start"),Pace.go()):setTimeout(Pace.start,50)},"function"==typeof define&&define.amd?define(function(){return Pace}):"object"==typeof exports?module.exports=Pace:C.startOnPageLoad&&Pace.start()}).call(this);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\pace\\pace.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./pace.min.js');
},{"./pace.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\pace\\pace.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\pnotify\\pnotify.custom.min.js":[function(require,module,exports){
/*
PNotify 2.0.1 sciactive.com/pnotify/
(C) 2014 Hunter Perrin
license GPL/LGPL/MPL
*/
(function(c){"function"===typeof define&&define.amd?define("pnotify",["jquery"],c):c(jQuery)})(function(c){var p={dir1:"down",dir2:"left",push:"bottom",spacing1:25,spacing2:25,context:c("body")},f,g,h=c(window),m=function(){g=c("body");PNotify.prototype.options.stack.context=g;h=c(window);h.bind("resize",function(){f&&clearTimeout(f);f=setTimeout(function(){PNotify.positionAll(!0)},10)})};PNotify=function(b){this.parseOptions(b);this.init()};c.extend(PNotify.prototype,{version:"2.0.1",options:{title:!1,
title_escape:!1,text:!1,text_escape:!1,styling:"bootstrap3",addclass:"",cornerclass:"",auto_display:!0,width:"300px",min_height:"16px",type:"notice",icon:!0,opacity:1,animation:"fade",animate_speed:"slow",position_animate_speed:500,shadow:!0,hide:!0,delay:8E3,mouse_reset:!0,remove:!0,insert_brs:!0,destroy:!0,stack:p},modules:{},runModules:function(b,a){var c,e;for(e in this.modules)if(c="object"===typeof a&&e in a?a[e]:a,"function"===typeof this.modules[e][b])this.modules[e][b](this,"object"===typeof this.options[e]?
this.options[e]:{},c)},state:"initializing",timer:null,styles:null,elem:null,container:null,title_container:null,text_container:null,animating:!1,timerHide:!1,init:function(){var b=this;this.modules={};c.extend(!0,this.modules,PNotify.prototype.modules);this.styles="object"===typeof this.options.styling?this.options.styling:PNotify.styling[this.options.styling];this.elem=c("<div />",{"class":"ui-pnotify "+this.options.addclass,css:{display:"none"},mouseenter:function(a){if(b.options.mouse_reset&&
"out"===b.animating){if(!b.timerHide)return;b.cancelRemove()}b.options.hide&&b.options.mouse_reset&&b.cancelRemove()},mouseleave:function(a){b.options.hide&&b.options.mouse_reset&&b.queueRemove();PNotify.positionAll()}});this.container=c("<div />",{"class":this.styles.container+" ui-pnotify-container "+("error"===this.options.type?this.styles.error:"info"===this.options.type?this.styles.info:"success"===this.options.type?this.styles.success:this.styles.notice)}).appendTo(this.elem);""!==this.options.cornerclass&&
this.container.removeClass("ui-corner-all").addClass(this.options.cornerclass);this.options.shadow&&this.container.addClass("ui-pnotify-shadow");!1!==this.options.icon&&c("<div />",{"class":"ui-pnotify-icon"}).append(c("<span />",{"class":!0===this.options.icon?"error"===this.options.type?this.styles.error_icon:"info"===this.options.type?this.styles.info_icon:"success"===this.options.type?this.styles.success_icon:this.styles.notice_icon:this.options.icon})).prependTo(this.container);this.title_container=
c("<h4 />",{"class":"ui-pnotify-title"}).appendTo(this.container);!1===this.options.title?this.title_container.hide():this.options.title_escape?this.title_container.text(this.options.title):this.title_container.html(this.options.title);this.text_container=c("<div />",{"class":"ui-pnotify-text"}).appendTo(this.container);!1===this.options.text?this.text_container.hide():this.options.text_escape?this.text_container.text(this.options.text):this.text_container.html(this.options.insert_brs?String(this.options.text).replace(/\n/g,
"<br />"):this.options.text);"string"===typeof this.options.width&&this.elem.css("width",this.options.width);"string"===typeof this.options.min_height&&this.container.css("min-height",this.options.min_height);PNotify.notices="top"===this.options.stack.push?c.merge([this],PNotify.notices):c.merge(PNotify.notices,[this]);"top"===this.options.stack.push&&this.queuePosition(!1,1);this.options.stack.animation=!1;this.runModules("init");this.options.auto_display&&this.open();return this},update:function(b){var a=
this.options;this.parseOptions(a,b);this.options.cornerclass!==a.cornerclass&&this.container.removeClass("ui-corner-all "+a.cornerclass).addClass(this.options.cornerclass);this.options.shadow!==a.shadow&&(this.options.shadow?this.container.addClass("ui-pnotify-shadow"):this.container.removeClass("ui-pnotify-shadow"));!1===this.options.addclass?this.elem.removeClass(a.addclass):this.options.addclass!==a.addclass&&this.elem.removeClass(a.addclass).addClass(this.options.addclass);!1===this.options.title?
this.title_container.slideUp("fast"):this.options.title!==a.title&&(this.options.title_escape?this.title_container.text(this.options.title):this.title_container.html(this.options.title),!1===a.title&&this.title_container.slideDown(200));!1===this.options.text?this.text_container.slideUp("fast"):this.options.text!==a.text&&(this.options.text_escape?this.text_container.text(this.options.text):this.text_container.html(this.options.insert_brs?String(this.options.text).replace(/\n/g,"<br />"):this.options.text),
!1===a.text&&this.text_container.slideDown(200));this.options.type!==a.type&&this.container.removeClass(this.styles.error+" "+this.styles.notice+" "+this.styles.success+" "+this.styles.info).addClass("error"===this.options.type?this.styles.error:"info"===this.options.type?this.styles.info:"success"===this.options.type?this.styles.success:this.styles.notice);if(this.options.icon!==a.icon||!0===this.options.icon&&this.options.type!==a.type)this.container.find("div.ui-pnotify-icon").remove(),!1!==this.options.icon&&
c("<div />",{"class":"ui-pnotify-icon"}).append(c("<span />",{"class":!0===this.options.icon?"error"===this.options.type?this.styles.error_icon:"info"===this.options.type?this.styles.info_icon:"success"===this.options.type?this.styles.success_icon:this.styles.notice_icon:this.options.icon})).prependTo(this.container);this.options.width!==a.width&&this.elem.animate({width:this.options.width});this.options.min_height!==a.min_height&&this.container.animate({minHeight:this.options.min_height});this.options.opacity!==
a.opacity&&this.elem.fadeTo(this.options.animate_speed,this.options.opacity);this.options.hide?a.hide||this.queueRemove():this.cancelRemove();this.queuePosition(!0);this.runModules("update",a);return this},open:function(){this.state="opening";this.runModules("beforeOpen");var b=this;this.elem.parent().length||this.elem.appendTo(this.options.stack.context?this.options.stack.context:g);"top"!==this.options.stack.push&&this.position(!0);"fade"===this.options.animation||"fade"===this.options.animation.effect_in?
this.elem.show().fadeTo(0,0).hide():1!==this.options.opacity&&this.elem.show().fadeTo(0,this.options.opacity).hide();this.animateIn(function(){b.queuePosition(!0);b.options.hide&&b.queueRemove();b.state="open";b.runModules("afterOpen")});return this},remove:function(b){this.state="closing";this.timerHide=!!b;this.runModules("beforeClose");var a=this;this.timer&&(window.clearTimeout(this.timer),this.timer=null);this.animateOut(function(){a.state="closed";a.runModules("afterClose");a.queuePosition(!0);
a.options.remove&&a.elem.detach();a.runModules("beforeDestroy");if(a.options.destroy&&null!==PNotify.notices){var b=c.inArray(a,PNotify.notices);-1!==b&&PNotify.notices.splice(b,1)}a.runModules("afterDestroy")});return this},get:function(){return this.elem},parseOptions:function(b,a){this.options=c.extend(!0,{},PNotify.prototype.options);this.options.stack=PNotify.prototype.options.stack;var n=[b,a],e,f;for(f in n){e=n[f];if("undefined"==typeof e)break;if("object"!==typeof e)this.options.text=e;else for(var d in e)this.modules[d]?
c.extend(!0,this.options[d],e[d]):this.options[d]=e[d]}},animateIn:function(b){this.animating="in";var a;a="undefined"!==typeof this.options.animation.effect_in?this.options.animation.effect_in:this.options.animation;"none"===a?(this.elem.show(),b()):"show"===a?this.elem.show(this.options.animate_speed,b):"fade"===a?this.elem.show().fadeTo(this.options.animate_speed,this.options.opacity,b):"slide"===a?this.elem.slideDown(this.options.animate_speed,b):"function"===typeof a?a("in",b,this.elem):this.elem.show(a,
"object"===typeof this.options.animation.options_in?this.options.animation.options_in:{},this.options.animate_speed,b);this.elem.parent().hasClass("ui-effects-wrapper")&&this.elem.parent().css({position:"fixed",overflow:"visible"});"slide"!==a&&this.elem.css("overflow","visible");this.container.css("overflow","hidden")},animateOut:function(b){this.animating="out";var a;a="undefined"!==typeof this.options.animation.effect_out?this.options.animation.effect_out:this.options.animation;"none"===a?(this.elem.hide(),
b()):"show"===a?this.elem.hide(this.options.animate_speed,b):"fade"===a?this.elem.fadeOut(this.options.animate_speed,b):"slide"===a?this.elem.slideUp(this.options.animate_speed,b):"function"===typeof a?a("out",b,this.elem):this.elem.hide(a,"object"===typeof this.options.animation.options_out?this.options.animation.options_out:{},this.options.animate_speed,b);this.elem.parent().hasClass("ui-effects-wrapper")&&this.elem.parent().css({position:"fixed",overflow:"visible"});"slide"!==a&&this.elem.css("overflow",
"visible");this.container.css("overflow","hidden")},position:function(b){var a=this.options.stack,c=this.elem;c.parent().hasClass("ui-effects-wrapper")&&(c=this.elem.css({left:"0",top:"0",right:"0",bottom:"0"}).parent());"undefined"===typeof a.context&&(a.context=g);if(a){"number"!==typeof a.nextpos1&&(a.nextpos1=a.firstpos1);"number"!==typeof a.nextpos2&&(a.nextpos2=a.firstpos2);"number"!==typeof a.addpos2&&(a.addpos2=0);var e="none"===c.css("display");if(!e||b){var f,d={},k;switch(a.dir1){case "down":k=
"top";break;case "up":k="bottom";break;case "left":k="right";break;case "right":k="left"}b=parseInt(c.css(k).replace(/(?:\..*|[^0-9.])/g,""));isNaN(b)&&(b=0);"undefined"!==typeof a.firstpos1||e||(a.firstpos1=b,a.nextpos1=a.firstpos1);var l;switch(a.dir2){case "down":l="top";break;case "up":l="bottom";break;case "left":l="right";break;case "right":l="left"}f=parseInt(c.css(l).replace(/(?:\..*|[^0-9.])/g,""));isNaN(f)&&(f=0);"undefined"!==typeof a.firstpos2||e||(a.firstpos2=f,a.nextpos2=a.firstpos2);
if("down"===a.dir1&&a.nextpos1+c.height()>(a.context.is(g)?h.height():a.context.prop("scrollHeight"))||"up"===a.dir1&&a.nextpos1+c.height()>(a.context.is(g)?h.height():a.context.prop("scrollHeight"))||"left"===a.dir1&&a.nextpos1+c.width()>(a.context.is(g)?h.width():a.context.prop("scrollWidth"))||"right"===a.dir1&&a.nextpos1+c.width()>(a.context.is(g)?h.width():a.context.prop("scrollWidth")))a.nextpos1=a.firstpos1,a.nextpos2+=a.addpos2+("undefined"===typeof a.spacing2?25:a.spacing2),a.addpos2=0;if(a.animation&&
a.nextpos2<f)switch(a.dir2){case "down":d.top=a.nextpos2+"px";break;case "up":d.bottom=a.nextpos2+"px";break;case "left":d.right=a.nextpos2+"px";break;case "right":d.left=a.nextpos2+"px"}else"number"===typeof a.nextpos2&&c.css(l,a.nextpos2+"px");switch(a.dir2){case "down":case "up":c.outerHeight(!0)>a.addpos2&&(a.addpos2=c.height());break;case "left":case "right":c.outerWidth(!0)>a.addpos2&&(a.addpos2=c.width())}if("number"===typeof a.nextpos1)if(a.animation&&(b>a.nextpos1||d.top||d.bottom||d.right||
d.left))switch(a.dir1){case "down":d.top=a.nextpos1+"px";break;case "up":d.bottom=a.nextpos1+"px";break;case "left":d.right=a.nextpos1+"px";break;case "right":d.left=a.nextpos1+"px"}else c.css(k,a.nextpos1+"px");(d.top||d.bottom||d.right||d.left)&&c.animate(d,{duration:this.options.position_animate_speed,queue:!1});switch(a.dir1){case "down":case "up":a.nextpos1+=c.height()+("undefined"===typeof a.spacing1?25:a.spacing1);break;case "left":case "right":a.nextpos1+=c.width()+("undefined"===typeof a.spacing1?
25:a.spacing1)}}return this}},queuePosition:function(b,a){f&&clearTimeout(f);a||(a=10);f=setTimeout(function(){PNotify.positionAll(b)},a);return this},cancelRemove:function(){this.timer&&window.clearTimeout(this.timer);"closing"===this.state&&(this.elem.stop(!0),this.state="open",this.animating="in",this.elem.css("height","auto").animate({width:this.options.width,opacity:this.options.opacity},"fast"));return this},queueRemove:function(){var b=this;this.cancelRemove();this.timer=window.setTimeout(function(){b.remove(!0)},
isNaN(this.options.delay)?0:this.options.delay);return this}});c.extend(PNotify,{notices:[],removeAll:function(){c.each(PNotify.notices,function(){this.remove&&this.remove()})},positionAll:function(b){f&&clearTimeout(f);f=null;c.each(PNotify.notices,function(){var a=this.options.stack;a&&(a.nextpos1=a.firstpos1,a.nextpos2=a.firstpos2,a.addpos2=0,a.animation=b)});c.each(PNotify.notices,function(){this.position()})},styling:{jqueryui:{container:"ui-widget ui-widget-content ui-corner-all",notice:"ui-state-highlight",
notice_icon:"ui-icon ui-icon-info",info:"",info_icon:"ui-icon ui-icon-info",success:"ui-state-default",success_icon:"ui-icon ui-icon-circle-check",error:"ui-state-error",error_icon:"ui-icon ui-icon-alert"},bootstrap2:{container:"alert",notice:"",notice_icon:"icon-exclamation-sign",info:"alert-info",info_icon:"icon-info-sign",success:"alert-success",success_icon:"icon-ok-sign",error:"alert-error",error_icon:"icon-warning-sign"},bootstrap3:{container:"alert",notice:"alert-warning",notice_icon:"glyphicon glyphicon-exclamation-sign",
info:"alert-info",info_icon:"glyphicon glyphicon-info-sign",success:"alert-success",success_icon:"glyphicon glyphicon-ok-sign",error:"alert-danger",error_icon:"glyphicon glyphicon-warning-sign"}}});PNotify.styling.fontawesome=c.extend({},PNotify.styling.bootstrap3);c.extend(PNotify.styling.fontawesome,{notice_icon:"fa fa-exclamation-circle",info_icon:"fa fa-info",success_icon:"fa fa-check",error_icon:"fa fa-warning"});document.body?m():c(m);return PNotify});
(function(c){"function"===typeof define&&define.amd?define("pnotify.buttons",["jquery","pnotify"],c):c(jQuery,PNotify)})(function(c,e){e.prototype.options.buttons={closer:!0,closer_hover:!0,sticker:!0,sticker_hover:!0,labels:{close:"Close",stick:"Stick"}};e.prototype.modules.buttons={myOptions:null,closer:null,sticker:null,init:function(a,b){var d=this;this.myOptions=b;a.elem.on({mouseenter:function(b){!d.myOptions.sticker||a.options.nonblock&&a.options.nonblock.nonblock||d.sticker.trigger("pnotify_icon").css("visibility",
"visible");!d.myOptions.closer||a.options.nonblock&&a.options.nonblock.nonblock||d.closer.css("visibility","visible")},mouseleave:function(a){d.myOptions.sticker_hover&&d.sticker.css("visibility","hidden");d.myOptions.closer_hover&&d.closer.css("visibility","hidden")}});this.sticker=c("<div />",{"class":"ui-pnotify-sticker",css:{cursor:"pointer",visibility:b.sticker_hover?"hidden":"visible"},click:function(){a.options.hide=!a.options.hide;a.options.hide?a.queueRemove():a.cancelRemove();c(this).trigger("pnotify_icon")}}).bind("pnotify_icon",
function(){c(this).children().removeClass(a.styles.pin_up+" "+a.styles.pin_down).addClass(a.options.hide?a.styles.pin_up:a.styles.pin_down)}).append(c("<span />",{"class":a.styles.pin_up,title:b.labels.stick})).prependTo(a.container);(!b.sticker||a.options.nonblock&&a.options.nonblock.nonblock)&&this.sticker.css("display","none");this.closer=c("<div />",{"class":"ui-pnotify-closer",css:{cursor:"pointer",visibility:b.closer_hover?"hidden":"visible"},click:function(){a.remove(!1);d.sticker.css("visibility",
"hidden");d.closer.css("visibility","hidden")}}).append(c("<span />",{"class":a.styles.closer,title:b.labels.close})).prependTo(a.container);(!b.closer||a.options.nonblock&&a.options.nonblock.nonblock)&&this.closer.css("display","none")},update:function(a,b){this.myOptions=b;!b.closer||a.options.nonblock&&a.options.nonblock.nonblock?this.closer.css("display","none"):b.closer&&this.closer.css("display","block");!b.sticker||a.options.nonblock&&a.options.nonblock.nonblock?this.sticker.css("display",
"none"):b.sticker&&this.sticker.css("display","block");this.sticker.trigger("pnotify_icon");b.sticker_hover?this.sticker.css("visibility","hidden"):a.options.nonblock&&a.options.nonblock.nonblock||this.sticker.css("visibility","visible");b.closer_hover?this.closer.css("visibility","hidden"):a.options.nonblock&&a.options.nonblock.nonblock||this.closer.css("visibility","visible")}};c.extend(e.styling.jqueryui,{closer:"ui-icon ui-icon-close",pin_up:"ui-icon ui-icon-pin-w",pin_down:"ui-icon ui-icon-pin-s"});
c.extend(e.styling.bootstrap2,{closer:"icon-remove",pin_up:"icon-pause",pin_down:"icon-play"});c.extend(e.styling.bootstrap3,{closer:"glyphicon glyphicon-remove",pin_up:"glyphicon glyphicon-pause",pin_down:"glyphicon glyphicon-play"});c.extend(e.styling.fontawesome,{closer:"fa fa-times",pin_up:"fa fa-pause",pin_down:"fa fa-play"})});
(function(b){"function"===typeof define&&define.amd?define("pnotify.callbacks",["jquery","pnotify"],b):b(jQuery,PNotify)})(function(b,a){var c=a.prototype.init,d=a.prototype.open,e=a.prototype.remove;a.prototype.init=function(){this.options.before_init&&this.options.before_init(this.options);c.apply(this,arguments);this.options.after_init&&this.options.after_init(this)};a.prototype.open=function(){var a;this.options.before_open&&(a=this.options.before_open(this));!1!==a&&(d.apply(this,arguments),
this.options.after_open&&this.options.after_open(this))};a.prototype.remove=function(a){var b;this.options.before_close&&(b=this.options.before_close(this,a));!1!==b&&(e.apply(this,arguments),this.options.after_close&&this.options.after_close(this,a))}});
(function(d){"function"===typeof define&&define.amd?define("pnotify.reference",["jquery","pnotify"],d):d(jQuery,PNotify)})(function(d,c){c.prototype.options.reference={putThing:!1,labels:{text:"Spin Around"}};c.prototype.modules.reference={thingElem:null,init:function(b,a){var c=this;a.putThing&&(this.thingElem=d('<button style="float:right;" class="btn btn-default" type="button" disabled><i class="'+b.styles.athing+'" />&nbsp;'+a.labels.text+"</button>").appendTo(b.container),b.container.append('<div style="clear: right; line-height: 0;" />'),
b.elem.on({mouseenter:function(b){c.thingElem.prop("disabled",!1)},mouseleave:function(b){c.thingElem.prop("disabled",!0)}}),this.thingElem.on("click",function(){var a=0,c=setInterval(function(){a+=10;360==a&&(a=0,clearInterval(c));b.elem.css({"-moz-transform":"rotate("+a+"deg)","-webkit-transform":"rotate("+a+"deg)","-o-transform":"rotate("+a+"deg)","-ms-transform":"rotate("+a+"deg)",filter:"progid:DXImageTransform.Microsoft.BasicImage(rotation="+a/360*4+")"})},20)}))},update:function(b,a,c){a.putThing&&
this.thingElem?this.thingElem.show():!a.putThing&&this.thingElem&&this.thingElem.hide();this.thingElem&&this.thingElem.find("i").attr("class",b.styles.athing)},beforeOpen:function(b,a){},afterOpen:function(b,a){},beforeClose:function(b,a){},afterClose:function(b,a){},beforeDestroy:function(b,a){},afterDestroy:function(b,a){}};d.extend(c.styling.jqueryui,{athing:"ui-icon ui-icon-refresh"});d.extend(c.styling.bootstrap2,{athing:"icon-refresh"});d.extend(c.styling.bootstrap3,{athing:"glyphicon glyphicon-refresh"});
d.extend(c.styling.fontawesome,{athing:"fa fa-refresh"})});

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\pnotify\\pnotify.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./pnotify.custom.min.js');
},{"./pnotify.custom.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\pnotify\\pnotify.custom.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\qtip\\jquery.qtip.min.js":[function(require,module,exports){
/* qTip2 v2.2.1 | Plugins: tips viewport imagemap svg | Styles: core basic css3 | qtip2.com | Licensed MIT | Mon Sep 08 2014 13:36:26 */

!function(a,b,c){!function(a){"use strict";"function"==typeof define&&define.amd?define(["jquery"],a):jQuery&&!jQuery.fn.qtip&&a(jQuery)}(function(d){"use strict";function e(a,b,c,e){this.id=c,this.target=a,this.tooltip=D,this.elements={target:a},this._id=Q+"-"+c,this.timers={img:{}},this.options=b,this.plugins={},this.cache={event:{},target:d(),disabled:C,attr:e,onTooltip:C,lastClass:""},this.rendered=this.destroyed=this.disabled=this.waiting=this.hiddenDuringWait=this.positioning=this.triggering=C}function f(a){return a===D||"object"!==d.type(a)}function g(a){return!(d.isFunction(a)||a&&a.attr||a.length||"object"===d.type(a)&&(a.jquery||a.then))}function h(a){var b,c,e,h;return f(a)?C:(f(a.metadata)&&(a.metadata={type:a.metadata}),"content"in a&&(b=a.content,f(b)||b.jquery||b.done?b=a.content={text:c=g(b)?C:b}:c=b.text,"ajax"in b&&(e=b.ajax,h=e&&e.once!==C,delete b.ajax,b.text=function(a,b){var f=c||d(this).attr(b.options.content.attr)||"Loading...",g=d.ajax(d.extend({},e,{context:b})).then(e.success,D,e.error).then(function(a){return a&&h&&b.set("content.text",a),a},function(a,c,d){b.destroyed||0===a.status||b.set("content.text",c+": "+d)});return h?f:(b.set("content.text",f),g)}),"title"in b&&(d.isPlainObject(b.title)&&(b.button=b.title.button,b.title=b.title.text),g(b.title||C)&&(b.title=C))),"position"in a&&f(a.position)&&(a.position={my:a.position,at:a.position}),"show"in a&&f(a.show)&&(a.show=a.show.jquery?{target:a.show}:a.show===B?{ready:B}:{event:a.show}),"hide"in a&&f(a.hide)&&(a.hide=a.hide.jquery?{target:a.hide}:{event:a.hide}),"style"in a&&f(a.style)&&(a.style={classes:a.style}),d.each(P,function(){this.sanitize&&this.sanitize(a)}),a)}function i(a,b){for(var c,d=0,e=a,f=b.split(".");e=e[f[d++]];)d<f.length&&(c=e);return[c||a,f.pop()]}function j(a,b){var c,d,e;for(c in this.checks)for(d in this.checks[c])(e=new RegExp(d,"i").exec(a))&&(b.push(e),("builtin"===c||this.plugins[c])&&this.checks[c][d].apply(this.plugins[c]||this,b))}function k(a){return T.concat("").join(a?"-"+a+" ":" ")}function l(a,b){return b>0?setTimeout(d.proxy(a,this),b):void a.call(this)}function m(a){this.tooltip.hasClass($)||(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this.timers.show=l.call(this,function(){this.toggle(B,a)},this.options.show.delay))}function n(a){if(!this.tooltip.hasClass($)&&!this.destroyed){var b=d(a.relatedTarget),c=b.closest(U)[0]===this.tooltip[0],e=b[0]===this.options.show.target[0];if(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this!==b[0]&&"mouse"===this.options.position.target&&c||this.options.hide.fixed&&/mouse(out|leave|move)/.test(a.type)&&(c||e))try{a.preventDefault(),a.stopImmediatePropagation()}catch(f){}else this.timers.hide=l.call(this,function(){this.toggle(C,a)},this.options.hide.delay,this)}}function o(a){!this.tooltip.hasClass($)&&this.options.hide.inactive&&(clearTimeout(this.timers.inactive),this.timers.inactive=l.call(this,function(){this.hide(a)},this.options.hide.inactive))}function p(a){this.rendered&&this.tooltip[0].offsetWidth>0&&this.reposition(a)}function q(a,c,e){d(b.body).delegate(a,(c.split?c:c.join("."+Q+" "))+"."+Q,function(){var a=w.api[d.attr(this,S)];a&&!a.disabled&&e.apply(a,arguments)})}function r(a,c,f){var g,i,j,k,l,m=d(b.body),n=a[0]===b?m:a,o=a.metadata?a.metadata(f.metadata):D,p="html5"===f.metadata.type&&o?o[f.metadata.name]:D,q=a.data(f.metadata.name||"qtipopts");try{q="string"==typeof q?d.parseJSON(q):q}catch(r){}if(k=d.extend(B,{},w.defaults,f,"object"==typeof q?h(q):D,h(p||o)),i=k.position,k.id=c,"boolean"==typeof k.content.text){if(j=a.attr(k.content.attr),k.content.attr===C||!j)return C;k.content.text=j}if(i.container.length||(i.container=m),i.target===C&&(i.target=n),k.show.target===C&&(k.show.target=n),k.show.solo===B&&(k.show.solo=i.container.closest("body")),k.hide.target===C&&(k.hide.target=n),k.position.viewport===B&&(k.position.viewport=i.container),i.container=i.container.eq(0),i.at=new y(i.at,B),i.my=new y(i.my),a.data(Q))if(k.overwrite)a.qtip("destroy",!0);else if(k.overwrite===C)return C;return a.attr(R,c),k.suppress&&(l=a.attr("title"))&&a.removeAttr("title").attr(ab,l).attr("title",""),g=new e(a,k,c,!!j),a.data(Q,g),g}function s(a){return a.charAt(0).toUpperCase()+a.slice(1)}function t(a,b){var d,e,f=b.charAt(0).toUpperCase()+b.slice(1),g=(b+" "+pb.join(f+" ")+f).split(" "),h=0;if(ob[b])return a.css(ob[b]);for(;d=g[h++];)if((e=a.css(d))!==c)return ob[b]=d,e}function u(a,b){return Math.ceil(parseFloat(t(a,b)))}function v(a,b){this._ns="tip",this.options=b,this.offset=b.offset,this.size=[b.width,b.height],this.init(this.qtip=a)}var w,x,y,z,A,B=!0,C=!1,D=null,E="x",F="y",G="width",H="height",I="top",J="left",K="bottom",L="right",M="center",N="flipinvert",O="shift",P={},Q="qtip",R="data-hasqtip",S="data-qtip-id",T=["ui-widget","ui-tooltip"],U="."+Q,V="click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "),W=Q+"-fixed",X=Q+"-default",Y=Q+"-focus",Z=Q+"-hover",$=Q+"-disabled",_="_replacedByqTip",ab="oldtitle",bb={ie:function(){for(var a=4,c=b.createElement("div");(c.innerHTML="<!--[if gt IE "+a+"]><i></i><![endif]-->")&&c.getElementsByTagName("i")[0];a+=1);return a>4?a:0/0}(),iOS:parseFloat((""+(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))||C};x=e.prototype,x._when=function(a){return d.when.apply(d,a)},x.render=function(a){if(this.rendered||this.destroyed)return this;var b,c=this,e=this.options,f=this.cache,g=this.elements,h=e.content.text,i=e.content.title,j=e.content.button,k=e.position,l=("."+this._id+" ",[]);return d.attr(this.target[0],"aria-describedby",this._id),f.posClass=this._createPosClass((this.position={my:k.my,at:k.at}).my),this.tooltip=g.tooltip=b=d("<div/>",{id:this._id,"class":[Q,X,e.style.classes,f.posClass].join(" "),width:e.style.width||"",height:e.style.height||"",tracking:"mouse"===k.target&&k.adjust.mouse,role:"alert","aria-live":"polite","aria-atomic":C,"aria-describedby":this._id+"-content","aria-hidden":B}).toggleClass($,this.disabled).attr(S,this.id).data(Q,this).appendTo(k.container).append(g.content=d("<div />",{"class":Q+"-content",id:this._id+"-content","aria-atomic":B})),this.rendered=-1,this.positioning=B,i&&(this._createTitle(),d.isFunction(i)||l.push(this._updateTitle(i,C))),j&&this._createButton(),d.isFunction(h)||l.push(this._updateContent(h,C)),this.rendered=B,this._setWidget(),d.each(P,function(a){var b;"render"===this.initialize&&(b=this(c))&&(c.plugins[a]=b)}),this._unassignEvents(),this._assignEvents(),this._when(l).then(function(){c._trigger("render"),c.positioning=C,c.hiddenDuringWait||!e.show.ready&&!a||c.toggle(B,f.event,C),c.hiddenDuringWait=C}),w.api[this.id]=this,this},x.destroy=function(a){function b(){if(!this.destroyed){this.destroyed=B;var a,b=this.target,c=b.attr(ab);this.rendered&&this.tooltip.stop(1,0).find("*").remove().end().remove(),d.each(this.plugins,function(){this.destroy&&this.destroy()});for(a in this.timers)clearTimeout(this.timers[a]);b.removeData(Q).removeAttr(S).removeAttr(R).removeAttr("aria-describedby"),this.options.suppress&&c&&b.attr("title",c).removeAttr(ab),this._unassignEvents(),this.options=this.elements=this.cache=this.timers=this.plugins=this.mouse=D,delete w.api[this.id]}}return this.destroyed?this.target:(a===B&&"hide"!==this.triggering||!this.rendered?b.call(this):(this.tooltip.one("tooltiphidden",d.proxy(b,this)),!this.triggering&&this.hide()),this.target)},z=x.checks={builtin:{"^id$":function(a,b,c,e){var f=c===B?w.nextid:c,g=Q+"-"+f;f!==C&&f.length>0&&!d("#"+g).length?(this._id=g,this.rendered&&(this.tooltip[0].id=this._id,this.elements.content[0].id=this._id+"-content",this.elements.title[0].id=this._id+"-title")):a[b]=e},"^prerender":function(a,b,c){c&&!this.rendered&&this.render(this.options.show.ready)},"^content.text$":function(a,b,c){this._updateContent(c)},"^content.attr$":function(a,b,c,d){this.options.content.text===this.target.attr(d)&&this._updateContent(this.target.attr(c))},"^content.title$":function(a,b,c){return c?(c&&!this.elements.title&&this._createTitle(),void this._updateTitle(c)):this._removeTitle()},"^content.button$":function(a,b,c){this._updateButton(c)},"^content.title.(text|button)$":function(a,b,c){this.set("content."+b,c)},"^position.(my|at)$":function(a,b,c){"string"==typeof c&&(this.position[b]=a[b]=new y(c,"at"===b))},"^position.container$":function(a,b,c){this.rendered&&this.tooltip.appendTo(c)},"^show.ready$":function(a,b,c){c&&(!this.rendered&&this.render(B)||this.toggle(B))},"^style.classes$":function(a,b,c,d){this.rendered&&this.tooltip.removeClass(d).addClass(c)},"^style.(width|height)":function(a,b,c){this.rendered&&this.tooltip.css(b,c)},"^style.widget|content.title":function(){this.rendered&&this._setWidget()},"^style.def":function(a,b,c){this.rendered&&this.tooltip.toggleClass(X,!!c)},"^events.(render|show|move|hide|focus|blur)$":function(a,b,c){this.rendered&&this.tooltip[(d.isFunction(c)?"":"un")+"bind"]("tooltip"+b,c)},"^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)":function(){if(this.rendered){var a=this.options.position;this.tooltip.attr("tracking","mouse"===a.target&&a.adjust.mouse),this._unassignEvents(),this._assignEvents()}}}},x.get=function(a){if(this.destroyed)return this;var b=i(this.options,a.toLowerCase()),c=b[0][b[1]];return c.precedance?c.string():c};var cb=/^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i,db=/^prerender|show\.ready/i;x.set=function(a,b){if(this.destroyed)return this;{var c,e=this.rendered,f=C,g=this.options;this.checks}return"string"==typeof a?(c=a,a={},a[c]=b):a=d.extend({},a),d.each(a,function(b,c){if(e&&db.test(b))return void delete a[b];var h,j=i(g,b.toLowerCase());h=j[0][j[1]],j[0][j[1]]=c&&c.nodeType?d(c):c,f=cb.test(b)||f,a[b]=[j[0],j[1],c,h]}),h(g),this.positioning=B,d.each(a,d.proxy(j,this)),this.positioning=C,this.rendered&&this.tooltip[0].offsetWidth>0&&f&&this.reposition("mouse"===g.position.target?D:this.cache.event),this},x._update=function(a,b){var c=this,e=this.cache;return this.rendered&&a?(d.isFunction(a)&&(a=a.call(this.elements.target,e.event,this)||""),d.isFunction(a.then)?(e.waiting=B,a.then(function(a){return e.waiting=C,c._update(a,b)},D,function(a){return c._update(a,b)})):a===C||!a&&""!==a?C:(a.jquery&&a.length>0?b.empty().append(a.css({display:"block",visibility:"visible"})):b.html(a),this._waitForContent(b).then(function(a){c.rendered&&c.tooltip[0].offsetWidth>0&&c.reposition(e.event,!a.length)}))):C},x._waitForContent=function(a){var b=this.cache;return b.waiting=B,(d.fn.imagesLoaded?a.imagesLoaded():d.Deferred().resolve([])).done(function(){b.waiting=C}).promise()},x._updateContent=function(a,b){this._update(a,this.elements.content,b)},x._updateTitle=function(a,b){this._update(a,this.elements.title,b)===C&&this._removeTitle(C)},x._createTitle=function(){var a=this.elements,b=this._id+"-title";a.titlebar&&this._removeTitle(),a.titlebar=d("<div />",{"class":Q+"-titlebar "+(this.options.style.widget?k("header"):"")}).append(a.title=d("<div />",{id:b,"class":Q+"-title","aria-atomic":B})).insertBefore(a.content).delegate(".qtip-close","mousedown keydown mouseup keyup mouseout",function(a){d(this).toggleClass("ui-state-active ui-state-focus","down"===a.type.substr(-4))}).delegate(".qtip-close","mouseover mouseout",function(a){d(this).toggleClass("ui-state-hover","mouseover"===a.type)}),this.options.content.button&&this._createButton()},x._removeTitle=function(a){var b=this.elements;b.title&&(b.titlebar.remove(),b.titlebar=b.title=b.button=D,a!==C&&this.reposition())},x._createPosClass=function(a){return Q+"-pos-"+(a||this.options.position.my).abbrev()},x.reposition=function(c,e){if(!this.rendered||this.positioning||this.destroyed)return this;this.positioning=B;var f,g,h,i,j=this.cache,k=this.tooltip,l=this.options.position,m=l.target,n=l.my,o=l.at,p=l.viewport,q=l.container,r=l.adjust,s=r.method.split(" "),t=k.outerWidth(C),u=k.outerHeight(C),v=0,w=0,x=k.css("position"),y={left:0,top:0},z=k[0].offsetWidth>0,A=c&&"scroll"===c.type,D=d(a),E=q[0].ownerDocument,F=this.mouse;if(d.isArray(m)&&2===m.length)o={x:J,y:I},y={left:m[0],top:m[1]};else if("mouse"===m)o={x:J,y:I},(!r.mouse||this.options.hide.distance)&&j.origin&&j.origin.pageX?c=j.origin:!c||c&&("resize"===c.type||"scroll"===c.type)?c=j.event:F&&F.pageX&&(c=F),"static"!==x&&(y=q.offset()),E.body.offsetWidth!==(a.innerWidth||E.documentElement.clientWidth)&&(g=d(b.body).offset()),y={left:c.pageX-y.left+(g&&g.left||0),top:c.pageY-y.top+(g&&g.top||0)},r.mouse&&A&&F&&(y.left-=(F.scrollX||0)-D.scrollLeft(),y.top-=(F.scrollY||0)-D.scrollTop());else{if("event"===m?c&&c.target&&"scroll"!==c.type&&"resize"!==c.type?j.target=d(c.target):c.target||(j.target=this.elements.target):"event"!==m&&(j.target=d(m.jquery?m:this.elements.target)),m=j.target,m=d(m).eq(0),0===m.length)return this;m[0]===b||m[0]===a?(v=bb.iOS?a.innerWidth:m.width(),w=bb.iOS?a.innerHeight:m.height(),m[0]===a&&(y={top:(p||m).scrollTop(),left:(p||m).scrollLeft()})):P.imagemap&&m.is("area")?f=P.imagemap(this,m,o,P.viewport?s:C):P.svg&&m&&m[0].ownerSVGElement?f=P.svg(this,m,o,P.viewport?s:C):(v=m.outerWidth(C),w=m.outerHeight(C),y=m.offset()),f&&(v=f.width,w=f.height,g=f.offset,y=f.position),y=this.reposition.offset(m,y,q),(bb.iOS>3.1&&bb.iOS<4.1||bb.iOS>=4.3&&bb.iOS<4.33||!bb.iOS&&"fixed"===x)&&(y.left-=D.scrollLeft(),y.top-=D.scrollTop()),(!f||f&&f.adjustable!==C)&&(y.left+=o.x===L?v:o.x===M?v/2:0,y.top+=o.y===K?w:o.y===M?w/2:0)}return y.left+=r.x+(n.x===L?-t:n.x===M?-t/2:0),y.top+=r.y+(n.y===K?-u:n.y===M?-u/2:0),P.viewport?(h=y.adjusted=P.viewport(this,y,l,v,w,t,u),g&&h.left&&(y.left+=g.left),g&&h.top&&(y.top+=g.top),h.my&&(this.position.my=h.my)):y.adjusted={left:0,top:0},j.posClass!==(i=this._createPosClass(this.position.my))&&k.removeClass(j.posClass).addClass(j.posClass=i),this._trigger("move",[y,p.elem||p],c)?(delete y.adjusted,e===C||!z||isNaN(y.left)||isNaN(y.top)||"mouse"===m||!d.isFunction(l.effect)?k.css(y):d.isFunction(l.effect)&&(l.effect.call(k,this,d.extend({},y)),k.queue(function(a){d(this).css({opacity:"",height:""}),bb.ie&&this.style.removeAttribute("filter"),a()})),this.positioning=C,this):this},x.reposition.offset=function(a,c,e){function f(a,b){c.left+=b*a.scrollLeft(),c.top+=b*a.scrollTop()}if(!e[0])return c;var g,h,i,j,k=d(a[0].ownerDocument),l=!!bb.ie&&"CSS1Compat"!==b.compatMode,m=e[0];do"static"!==(h=d.css(m,"position"))&&("fixed"===h?(i=m.getBoundingClientRect(),f(k,-1)):(i=d(m).position(),i.left+=parseFloat(d.css(m,"borderLeftWidth"))||0,i.top+=parseFloat(d.css(m,"borderTopWidth"))||0),c.left-=i.left+(parseFloat(d.css(m,"marginLeft"))||0),c.top-=i.top+(parseFloat(d.css(m,"marginTop"))||0),g||"hidden"===(j=d.css(m,"overflow"))||"visible"===j||(g=d(m)));while(m=m.offsetParent);return g&&(g[0]!==k[0]||l)&&f(g,1),c};var eb=(y=x.reposition.Corner=function(a,b){a=(""+a).replace(/([A-Z])/," $1").replace(/middle/gi,M).toLowerCase(),this.x=(a.match(/left|right/i)||a.match(/center/)||["inherit"])[0].toLowerCase(),this.y=(a.match(/top|bottom|center/i)||["inherit"])[0].toLowerCase(),this.forceY=!!b;var c=a.charAt(0);this.precedance="t"===c||"b"===c?F:E}).prototype;eb.invert=function(a,b){this[a]=this[a]===J?L:this[a]===L?J:b||this[a]},eb.string=function(a){var b=this.x,c=this.y,d=b!==c?"center"===b||"center"!==c&&(this.precedance===F||this.forceY)?[c,b]:[b,c]:[b];return a!==!1?d.join(" "):d},eb.abbrev=function(){var a=this.string(!1);return a[0].charAt(0)+(a[1]&&a[1].charAt(0)||"")},eb.clone=function(){return new y(this.string(),this.forceY)},x.toggle=function(a,c){var e=this.cache,f=this.options,g=this.tooltip;if(c){if(/over|enter/.test(c.type)&&e.event&&/out|leave/.test(e.event.type)&&f.show.target.add(c.target).length===f.show.target.length&&g.has(c.relatedTarget).length)return this;e.event=d.event.fix(c)}if(this.waiting&&!a&&(this.hiddenDuringWait=B),!this.rendered)return a?this.render(1):this;if(this.destroyed||this.disabled)return this;var h,i,j,k=a?"show":"hide",l=this.options[k],m=(this.options[a?"hide":"show"],this.options.position),n=this.options.content,o=this.tooltip.css("width"),p=this.tooltip.is(":visible"),q=a||1===l.target.length,r=!c||l.target.length<2||e.target[0]===c.target;return(typeof a).search("boolean|number")&&(a=!p),h=!g.is(":animated")&&p===a&&r,i=h?D:!!this._trigger(k,[90]),this.destroyed?this:(i!==C&&a&&this.focus(c),!i||h?this:(d.attr(g[0],"aria-hidden",!a),a?(this.mouse&&(e.origin=d.event.fix(this.mouse)),d.isFunction(n.text)&&this._updateContent(n.text,C),d.isFunction(n.title)&&this._updateTitle(n.title,C),!A&&"mouse"===m.target&&m.adjust.mouse&&(d(b).bind("mousemove."+Q,this._storeMouse),A=B),o||g.css("width",g.outerWidth(C)),this.reposition(c,arguments[2]),o||g.css("width",""),l.solo&&("string"==typeof l.solo?d(l.solo):d(U,l.solo)).not(g).not(l.target).qtip("hide",d.Event("tooltipsolo"))):(clearTimeout(this.timers.show),delete e.origin,A&&!d(U+'[tracking="true"]:visible',l.solo).not(g).length&&(d(b).unbind("mousemove."+Q),A=C),this.blur(c)),j=d.proxy(function(){a?(bb.ie&&g[0].style.removeAttribute("filter"),g.css("overflow",""),"string"==typeof l.autofocus&&d(this.options.show.autofocus,g).focus(),this.options.show.target.trigger("qtip-"+this.id+"-inactive")):g.css({display:"",visibility:"",opacity:"",left:"",top:""}),this._trigger(a?"visible":"hidden")},this),l.effect===C||q===C?(g[k](),j()):d.isFunction(l.effect)?(g.stop(1,1),l.effect.call(g,this),g.queue("fx",function(a){j(),a()})):g.fadeTo(90,a?1:0,j),a&&l.target.trigger("qtip-"+this.id+"-inactive"),this))},x.show=function(a){return this.toggle(B,a)},x.hide=function(a){return this.toggle(C,a)},x.focus=function(a){if(!this.rendered||this.destroyed)return this;var b=d(U),c=this.tooltip,e=parseInt(c[0].style.zIndex,10),f=w.zindex+b.length;return c.hasClass(Y)||this._trigger("focus",[f],a)&&(e!==f&&(b.each(function(){this.style.zIndex>e&&(this.style.zIndex=this.style.zIndex-1)}),b.filter("."+Y).qtip("blur",a)),c.addClass(Y)[0].style.zIndex=f),this},x.blur=function(a){return!this.rendered||this.destroyed?this:(this.tooltip.removeClass(Y),this._trigger("blur",[this.tooltip.css("zIndex")],a),this)},x.disable=function(a){return this.destroyed?this:("toggle"===a?a=!(this.rendered?this.tooltip.hasClass($):this.disabled):"boolean"!=typeof a&&(a=B),this.rendered&&this.tooltip.toggleClass($,a).attr("aria-disabled",a),this.disabled=!!a,this)},x.enable=function(){return this.disable(C)},x._createButton=function(){var a=this,b=this.elements,c=b.tooltip,e=this.options.content.button,f="string"==typeof e,g=f?e:"Close tooltip";b.button&&b.button.remove(),b.button=e.jquery?e:d("<a />",{"class":"qtip-close "+(this.options.style.widget?"":Q+"-icon"),title:g,"aria-label":g}).prepend(d("<span />",{"class":"ui-icon ui-icon-close",html:"&times;"})),b.button.appendTo(b.titlebar||c).attr("role","button").click(function(b){return c.hasClass($)||a.hide(b),C})},x._updateButton=function(a){if(!this.rendered)return C;var b=this.elements.button;a?this._createButton():b.remove()},x._setWidget=function(){var a=this.options.style.widget,b=this.elements,c=b.tooltip,d=c.hasClass($);c.removeClass($),$=a?"ui-state-disabled":"qtip-disabled",c.toggleClass($,d),c.toggleClass("ui-helper-reset "+k(),a).toggleClass(X,this.options.style.def&&!a),b.content&&b.content.toggleClass(k("content"),a),b.titlebar&&b.titlebar.toggleClass(k("header"),a),b.button&&b.button.toggleClass(Q+"-icon",!a)},x._storeMouse=function(a){return(this.mouse=d.event.fix(a)).type="mousemove",this},x._bind=function(a,b,c,e,f){if(a&&c&&b.length){var g="."+this._id+(e?"-"+e:"");return d(a).bind((b.split?b:b.join(g+" "))+g,d.proxy(c,f||this)),this}},x._unbind=function(a,b){return a&&d(a).unbind("."+this._id+(b?"-"+b:"")),this},x._trigger=function(a,b,c){var e=d.Event("tooltip"+a);return e.originalEvent=c&&d.extend({},c)||this.cache.event||D,this.triggering=a,this.tooltip.trigger(e,[this].concat(b||[])),this.triggering=C,!e.isDefaultPrevented()},x._bindEvents=function(a,b,c,e,f,g){var h=c.filter(e).add(e.filter(c)),i=[];h.length&&(d.each(b,function(b,c){var e=d.inArray(c,a);e>-1&&i.push(a.splice(e,1)[0])}),i.length&&(this._bind(h,i,function(a){var b=this.rendered?this.tooltip[0].offsetWidth>0:!1;(b?g:f).call(this,a)}),c=c.not(h),e=e.not(h))),this._bind(c,a,f),this._bind(e,b,g)},x._assignInitialEvents=function(a){function b(a){return this.disabled||this.destroyed?C:(this.cache.event=a&&d.event.fix(a),this.cache.target=a&&d(a.target),clearTimeout(this.timers.show),void(this.timers.show=l.call(this,function(){this.render("object"==typeof a||c.show.ready)},c.prerender?0:c.show.delay)))}var c=this.options,e=c.show.target,f=c.hide.target,g=c.show.event?d.trim(""+c.show.event).split(" "):[],h=c.hide.event?d.trim(""+c.hide.event).split(" "):[];this._bind(this.elements.target,["remove","removeqtip"],function(){this.destroy(!0)},"destroy"),/mouse(over|enter)/i.test(c.show.event)&&!/mouse(out|leave)/i.test(c.hide.event)&&h.push("mouseleave"),this._bind(e,"mousemove",function(a){this._storeMouse(a),this.cache.onTarget=B}),this._bindEvents(g,h,e,f,b,function(){return this.timers?void clearTimeout(this.timers.show):C}),(c.show.ready||c.prerender)&&b.call(this,a)},x._assignEvents=function(){var c=this,e=this.options,f=e.position,g=this.tooltip,h=e.show.target,i=e.hide.target,j=f.container,k=f.viewport,l=d(b),q=(d(b.body),d(a)),r=e.show.event?d.trim(""+e.show.event).split(" "):[],s=e.hide.event?d.trim(""+e.hide.event).split(" "):[];d.each(e.events,function(a,b){c._bind(g,"toggle"===a?["tooltipshow","tooltiphide"]:["tooltip"+a],b,null,g)}),/mouse(out|leave)/i.test(e.hide.event)&&"window"===e.hide.leave&&this._bind(l,["mouseout","blur"],function(a){/select|option/.test(a.target.nodeName)||a.relatedTarget||this.hide(a)}),e.hide.fixed?i=i.add(g.addClass(W)):/mouse(over|enter)/i.test(e.show.event)&&this._bind(i,"mouseleave",function(){clearTimeout(this.timers.show)}),(""+e.hide.event).indexOf("unfocus")>-1&&this._bind(j.closest("html"),["mousedown","touchstart"],function(a){var b=d(a.target),c=this.rendered&&!this.tooltip.hasClass($)&&this.tooltip[0].offsetWidth>0,e=b.parents(U).filter(this.tooltip[0]).length>0;b[0]===this.target[0]||b[0]===this.tooltip[0]||e||this.target.has(b[0]).length||!c||this.hide(a)}),"number"==typeof e.hide.inactive&&(this._bind(h,"qtip-"+this.id+"-inactive",o,"inactive"),this._bind(i.add(g),w.inactiveEvents,o)),this._bindEvents(r,s,h,i,m,n),this._bind(h.add(g),"mousemove",function(a){if("number"==typeof e.hide.distance){var b=this.cache.origin||{},c=this.options.hide.distance,d=Math.abs;(d(a.pageX-b.pageX)>=c||d(a.pageY-b.pageY)>=c)&&this.hide(a)}this._storeMouse(a)}),"mouse"===f.target&&f.adjust.mouse&&(e.hide.event&&this._bind(h,["mouseenter","mouseleave"],function(a){return this.cache?void(this.cache.onTarget="mouseenter"===a.type):C}),this._bind(l,"mousemove",function(a){this.rendered&&this.cache.onTarget&&!this.tooltip.hasClass($)&&this.tooltip[0].offsetWidth>0&&this.reposition(a)})),(f.adjust.resize||k.length)&&this._bind(d.event.special.resize?k:q,"resize",p),f.adjust.scroll&&this._bind(q.add(f.container),"scroll",p)},x._unassignEvents=function(){var c=this.options,e=c.show.target,f=c.hide.target,g=d.grep([this.elements.target[0],this.rendered&&this.tooltip[0],c.position.container[0],c.position.viewport[0],c.position.container.closest("html")[0],a,b],function(a){return"object"==typeof a});e&&e.toArray&&(g=g.concat(e.toArray())),f&&f.toArray&&(g=g.concat(f.toArray())),this._unbind(g)._unbind(g,"destroy")._unbind(g,"inactive")},d(function(){q(U,["mouseenter","mouseleave"],function(a){var b="mouseenter"===a.type,c=d(a.currentTarget),e=d(a.relatedTarget||a.target),f=this.options;b?(this.focus(a),c.hasClass(W)&&!c.hasClass($)&&clearTimeout(this.timers.hide)):"mouse"===f.position.target&&f.position.adjust.mouse&&f.hide.event&&f.show.target&&!e.closest(f.show.target[0]).length&&this.hide(a),c.toggleClass(Z,b)}),q("["+S+"]",V,o)}),w=d.fn.qtip=function(a,b,e){var f=(""+a).toLowerCase(),g=D,i=d.makeArray(arguments).slice(1),j=i[i.length-1],k=this[0]?d.data(this[0],Q):D;return!arguments.length&&k||"api"===f?k:"string"==typeof a?(this.each(function(){var a=d.data(this,Q);if(!a)return B;if(j&&j.timeStamp&&(a.cache.event=j),!b||"option"!==f&&"options"!==f)a[f]&&a[f].apply(a,i);else{if(e===c&&!d.isPlainObject(b))return g=a.get(b),C;a.set(b,e)}}),g!==D?g:this):"object"!=typeof a&&arguments.length?void 0:(k=h(d.extend(B,{},a)),this.each(function(a){var b,c;return c=d.isArray(k.id)?k.id[a]:k.id,c=!c||c===C||c.length<1||w.api[c]?w.nextid++:c,b=r(d(this),c,k),b===C?B:(w.api[c]=b,d.each(P,function(){"initialize"===this.initialize&&this(b)}),void b._assignInitialEvents(j))}))},d.qtip=e,w.api={},d.each({attr:function(a,b){if(this.length){var c=this[0],e="title",f=d.data(c,"qtip");if(a===e&&f&&"object"==typeof f&&f.options.suppress)return arguments.length<2?d.attr(c,ab):(f&&f.options.content.attr===e&&f.cache.attr&&f.set("content.text",b),this.attr(ab,b))}return d.fn["attr"+_].apply(this,arguments)},clone:function(a){var b=(d([]),d.fn["clone"+_].apply(this,arguments));return a||b.filter("["+ab+"]").attr("title",function(){return d.attr(this,ab)}).removeAttr(ab),b}},function(a,b){if(!b||d.fn[a+_])return B;var c=d.fn[a+_]=d.fn[a];d.fn[a]=function(){return b.apply(this,arguments)||c.apply(this,arguments)}}),d.ui||(d["cleanData"+_]=d.cleanData,d.cleanData=function(a){for(var b,c=0;(b=d(a[c])).length;c++)if(b.attr(R))try{b.triggerHandler("removeqtip")}catch(e){}d["cleanData"+_].apply(this,arguments)}),w.version="2.2.1",w.nextid=0,w.inactiveEvents=V,w.zindex=15e3,w.defaults={prerender:C,id:C,overwrite:B,suppress:B,content:{text:B,attr:"title",title:C,button:C},position:{my:"top left",at:"bottom right",target:C,container:C,viewport:C,adjust:{x:0,y:0,mouse:B,scroll:B,resize:B,method:"flipinvert flipinvert"},effect:function(a,b){d(this).animate(b,{duration:200,queue:C})}},show:{target:C,event:"mouseenter",effect:B,delay:90,solo:C,ready:C,autofocus:C},hide:{target:C,event:"mouseleave",effect:B,delay:0,fixed:C,inactive:C,leave:"window",distance:C},style:{classes:"",widget:C,width:C,height:C,def:B},events:{render:D,move:D,show:D,hide:D,toggle:D,visible:D,hidden:D,focus:D,blur:D}};var fb,gb="margin",hb="border",ib="color",jb="background-color",kb="transparent",lb=" !important",mb=!!b.createElement("canvas").getContext,nb=/rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i,ob={},pb=["Webkit","O","Moz","ms"];if(mb)var qb=a.devicePixelRatio||1,rb=function(){var a=b.createElement("canvas").getContext("2d");return a.backingStorePixelRatio||a.webkitBackingStorePixelRatio||a.mozBackingStorePixelRatio||a.msBackingStorePixelRatio||a.oBackingStorePixelRatio||1}(),sb=qb/rb;else var tb=function(a,b,c){return"<qtipvml:"+a+' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" '+(b||"")+' style="behavior: url(#default#VML); '+(c||"")+'" />'};d.extend(v.prototype,{init:function(a){var b,c;c=this.element=a.elements.tip=d("<div />",{"class":Q+"-tip"}).prependTo(a.tooltip),mb?(b=d("<canvas />").appendTo(this.element)[0].getContext("2d"),b.lineJoin="miter",b.miterLimit=1e5,b.save()):(b=tb("shape",'coordorigin="0,0"',"position:absolute;"),this.element.html(b+b),a._bind(d("*",c).add(c),["click","mousedown"],function(a){a.stopPropagation()},this._ns)),a._bind(a.tooltip,"tooltipmove",this.reposition,this._ns,this),this.create()},_swapDimensions:function(){this.size[0]=this.options.height,this.size[1]=this.options.width},_resetDimensions:function(){this.size[0]=this.options.width,this.size[1]=this.options.height},_useTitle:function(a){var b=this.qtip.elements.titlebar;return b&&(a.y===I||a.y===M&&this.element.position().top+this.size[1]/2+this.options.offset<b.outerHeight(B))},_parseCorner:function(a){var b=this.qtip.options.position.my;return a===C||b===C?a=C:a===B?a=new y(b.string()):a.string||(a=new y(a),a.fixed=B),a},_parseWidth:function(a,b,c){var d=this.qtip.elements,e=hb+s(b)+"Width";return(c?u(c,e):u(d.content,e)||u(this._useTitle(a)&&d.titlebar||d.content,e)||u(d.tooltip,e))||0},_parseRadius:function(a){var b=this.qtip.elements,c=hb+s(a.y)+s(a.x)+"Radius";return bb.ie<9?0:u(this._useTitle(a)&&b.titlebar||b.content,c)||u(b.tooltip,c)||0},_invalidColour:function(a,b,c){var d=a.css(b);return!d||c&&d===a.css(c)||nb.test(d)?C:d},_parseColours:function(a){var b=this.qtip.elements,c=this.element.css("cssText",""),e=hb+s(a[a.precedance])+s(ib),f=this._useTitle(a)&&b.titlebar||b.content,g=this._invalidColour,h=[];return h[0]=g(c,jb)||g(f,jb)||g(b.content,jb)||g(b.tooltip,jb)||c.css(jb),h[1]=g(c,e,ib)||g(f,e,ib)||g(b.content,e,ib)||g(b.tooltip,e,ib)||b.tooltip.css(e),d("*",c).add(c).css("cssText",jb+":"+kb+lb+";"+hb+":0"+lb+";"),h},_calculateSize:function(a){var b,c,d,e=a.precedance===F,f=this.options.width,g=this.options.height,h="c"===a.abbrev(),i=(e?f:g)*(h?.5:1),j=Math.pow,k=Math.round,l=Math.sqrt(j(i,2)+j(g,2)),m=[this.border/i*l,this.border/g*l];return m[2]=Math.sqrt(j(m[0],2)-j(this.border,2)),m[3]=Math.sqrt(j(m[1],2)-j(this.border,2)),b=l+m[2]+m[3]+(h?0:m[0]),c=b/l,d=[k(c*f),k(c*g)],e?d:d.reverse()},_calculateTip:function(a,b,c){c=c||1,b=b||this.size;var d=b[0]*c,e=b[1]*c,f=Math.ceil(d/2),g=Math.ceil(e/2),h={br:[0,0,d,e,d,0],bl:[0,0,d,0,0,e],tr:[0,e,d,0,d,e],tl:[0,0,0,e,d,e],tc:[0,e,f,0,d,e],bc:[0,0,d,0,f,e],rc:[0,0,d,g,0,e],lc:[d,0,d,e,0,g]};return h.lt=h.br,h.rt=h.bl,h.lb=h.tr,h.rb=h.tl,h[a.abbrev()]},_drawCoords:function(a,b){a.beginPath(),a.moveTo(b[0],b[1]),a.lineTo(b[2],b[3]),a.lineTo(b[4],b[5]),a.closePath()},create:function(){var a=this.corner=(mb||bb.ie)&&this._parseCorner(this.options.corner);return(this.enabled=!!this.corner&&"c"!==this.corner.abbrev())&&(this.qtip.cache.corner=a.clone(),this.update()),this.element.toggle(this.enabled),this.corner},update:function(b,c){if(!this.enabled)return this;var e,f,g,h,i,j,k,l,m=this.qtip.elements,n=this.element,o=n.children(),p=this.options,q=this.size,r=p.mimic,s=Math.round;b||(b=this.qtip.cache.corner||this.corner),r===C?r=b:(r=new y(r),r.precedance=b.precedance,"inherit"===r.x?r.x=b.x:"inherit"===r.y?r.y=b.y:r.x===r.y&&(r[b.precedance]=b[b.precedance])),f=r.precedance,b.precedance===E?this._swapDimensions():this._resetDimensions(),e=this.color=this._parseColours(b),e[1]!==kb?(l=this.border=this._parseWidth(b,b[b.precedance]),p.border&&1>l&&!nb.test(e[1])&&(e[0]=e[1]),this.border=l=p.border!==B?p.border:l):this.border=l=0,k=this.size=this._calculateSize(b),n.css({width:k[0],height:k[1],lineHeight:k[1]+"px"}),j=b.precedance===F?[s(r.x===J?l:r.x===L?k[0]-q[0]-l:(k[0]-q[0])/2),s(r.y===I?k[1]-q[1]:0)]:[s(r.x===J?k[0]-q[0]:0),s(r.y===I?l:r.y===K?k[1]-q[1]-l:(k[1]-q[1])/2)],mb?(g=o[0].getContext("2d"),g.restore(),g.save(),g.clearRect(0,0,6e3,6e3),h=this._calculateTip(r,q,sb),i=this._calculateTip(r,this.size,sb),o.attr(G,k[0]*sb).attr(H,k[1]*sb),o.css(G,k[0]).css(H,k[1]),this._drawCoords(g,i),g.fillStyle=e[1],g.fill(),g.translate(j[0]*sb,j[1]*sb),this._drawCoords(g,h),g.fillStyle=e[0],g.fill()):(h=this._calculateTip(r),h="m"+h[0]+","+h[1]+" l"+h[2]+","+h[3]+" "+h[4]+","+h[5]+" xe",j[2]=l&&/^(r|b)/i.test(b.string())?8===bb.ie?2:1:0,o.css({coordsize:k[0]+l+" "+(k[1]+l),antialias:""+(r.string().indexOf(M)>-1),left:j[0]-j[2]*Number(f===E),top:j[1]-j[2]*Number(f===F),width:k[0]+l,height:k[1]+l}).each(function(a){var b=d(this);b[b.prop?"prop":"attr"]({coordsize:k[0]+l+" "+(k[1]+l),path:h,fillcolor:e[0],filled:!!a,stroked:!a}).toggle(!(!l&&!a)),!a&&b.html(tb("stroke",'weight="'+2*l+'px" color="'+e[1]+'" miterlimit="1000" joinstyle="miter"'))})),a.opera&&setTimeout(function(){m.tip.css({display:"inline-block",visibility:"visible"})},1),c!==C&&this.calculate(b,k)},calculate:function(a,b){if(!this.enabled)return C;var c,e,f=this,g=this.qtip.elements,h=this.element,i=this.options.offset,j=(g.tooltip.hasClass("ui-widget"),{});return a=a||this.corner,c=a.precedance,b=b||this._calculateSize(a),e=[a.x,a.y],c===E&&e.reverse(),d.each(e,function(d,e){var h,k,l;e===M?(h=c===F?J:I,j[h]="50%",j[gb+"-"+h]=-Math.round(b[c===F?0:1]/2)+i):(h=f._parseWidth(a,e,g.tooltip),k=f._parseWidth(a,e,g.content),l=f._parseRadius(a),j[e]=Math.max(-f.border,d?k:i+(l>h?l:-h)))
}),j[a[c]]-=b[c===E?0:1],h.css({margin:"",top:"",bottom:"",left:"",right:""}).css(j),j},reposition:function(a,b,d){function e(a,b,c,d,e){a===O&&j.precedance===b&&k[d]&&j[c]!==M?j.precedance=j.precedance===E?F:E:a!==O&&k[d]&&(j[b]=j[b]===M?k[d]>0?d:e:j[b]===d?e:d)}function f(a,b,e){j[a]===M?p[gb+"-"+b]=o[a]=g[gb+"-"+b]-k[b]:(h=g[e]!==c?[k[b],-g[b]]:[-k[b],g[b]],(o[a]=Math.max(h[0],h[1]))>h[0]&&(d[b]-=k[b],o[b]=C),p[g[e]!==c?e:b]=o[a])}if(this.enabled){var g,h,i=b.cache,j=this.corner.clone(),k=d.adjusted,l=b.options.position.adjust.method.split(" "),m=l[0],n=l[1]||l[0],o={left:C,top:C,x:0,y:0},p={};this.corner.fixed!==B&&(e(m,E,F,J,L),e(n,F,E,I,K),(j.string()!==i.corner.string()||i.cornerTop!==k.top||i.cornerLeft!==k.left)&&this.update(j,C)),g=this.calculate(j),g.right!==c&&(g.left=-g.right),g.bottom!==c&&(g.top=-g.bottom),g.user=this.offset,(o.left=m===O&&!!k.left)&&f(E,J,L),(o.top=n===O&&!!k.top)&&f(F,I,K),this.element.css(p).toggle(!(o.x&&o.y||j.x===M&&o.y||j.y===M&&o.x)),d.left-=g.left.charAt?g.user:m!==O||o.top||!o.left&&!o.top?g.left+this.border:0,d.top-=g.top.charAt?g.user:n!==O||o.left||!o.left&&!o.top?g.top+this.border:0,i.cornerLeft=k.left,i.cornerTop=k.top,i.corner=j.clone()}},destroy:function(){this.qtip._unbind(this.qtip.tooltip,this._ns),this.qtip.elements.tip&&this.qtip.elements.tip.find("*").remove().end().remove()}}),fb=P.tip=function(a){return new v(a,a.options.style.tip)},fb.initialize="render",fb.sanitize=function(a){if(a.style&&"tip"in a.style){var b=a.style.tip;"object"!=typeof b&&(b=a.style.tip={corner:b}),/string|boolean/i.test(typeof b.corner)||(b.corner=B)}},z.tip={"^position.my|style.tip.(corner|mimic|border)$":function(){this.create(),this.qtip.reposition()},"^style.tip.(height|width)$":function(a){this.size=[a.width,a.height],this.update(),this.qtip.reposition()},"^content.title|style.(classes|widget)$":function(){this.update()}},d.extend(B,w.defaults,{style:{tip:{corner:B,mimic:C,width:6,height:6,border:B,offset:0}}}),P.viewport=function(c,d,e,f,g,h,i){function j(a,b,c,e,f,g,h,i,j){var k=d[f],s=u[a],t=v[a],w=c===O,x=s===f?j:s===g?-j:-j/2,y=t===f?i:t===g?-i:-i/2,z=q[f]+r[f]-(n?0:m[f]),A=z-k,B=k+j-(h===G?o:p)-z,C=x-(u.precedance===a||s===u[b]?y:0)-(t===M?i/2:0);return w?(C=(s===f?1:-1)*x,d[f]+=A>0?A:B>0?-B:0,d[f]=Math.max(-m[f]+r[f],k-C,Math.min(Math.max(-m[f]+r[f]+(h===G?o:p),k+C),d[f],"center"===s?k-x:1e9))):(e*=c===N?2:0,A>0&&(s!==f||B>0)?(d[f]-=C+e,l.invert(a,f)):B>0&&(s!==g||A>0)&&(d[f]-=(s===M?-C:C)+e,l.invert(a,g)),d[f]<q&&-d[f]>B&&(d[f]=k,l=u.clone())),d[f]-k}var k,l,m,n,o,p,q,r,s=e.target,t=c.elements.tooltip,u=e.my,v=e.at,w=e.adjust,x=w.method.split(" "),y=x[0],z=x[1]||x[0],A=e.viewport,B=e.container,D=(c.cache,{left:0,top:0});return A.jquery&&s[0]!==a&&s[0]!==b.body&&"none"!==w.method?(m=B.offset()||D,n="static"===B.css("position"),k="fixed"===t.css("position"),o=A[0]===a?A.width():A.outerWidth(C),p=A[0]===a?A.height():A.outerHeight(C),q={left:k?0:A.scrollLeft(),top:k?0:A.scrollTop()},r=A.offset()||D,("shift"!==y||"shift"!==z)&&(l=u.clone()),D={left:"none"!==y?j(E,F,y,w.x,J,L,G,f,h):0,top:"none"!==z?j(F,E,z,w.y,I,K,H,g,i):0,my:l}):D},P.polys={polygon:function(a,b){var c,d,e,f={width:0,height:0,position:{top:1e10,right:0,bottom:0,left:1e10},adjustable:C},g=0,h=[],i=1,j=1,k=0,l=0;for(g=a.length;g--;)c=[parseInt(a[--g],10),parseInt(a[g+1],10)],c[0]>f.position.right&&(f.position.right=c[0]),c[0]<f.position.left&&(f.position.left=c[0]),c[1]>f.position.bottom&&(f.position.bottom=c[1]),c[1]<f.position.top&&(f.position.top=c[1]),h.push(c);if(d=f.width=Math.abs(f.position.right-f.position.left),e=f.height=Math.abs(f.position.bottom-f.position.top),"c"===b.abbrev())f.position={left:f.position.left+f.width/2,top:f.position.top+f.height/2};else{for(;d>0&&e>0&&i>0&&j>0;)for(d=Math.floor(d/2),e=Math.floor(e/2),b.x===J?i=d:b.x===L?i=f.width-d:i+=Math.floor(d/2),b.y===I?j=e:b.y===K?j=f.height-e:j+=Math.floor(e/2),g=h.length;g--&&!(h.length<2);)k=h[g][0]-f.position.left,l=h[g][1]-f.position.top,(b.x===J&&k>=i||b.x===L&&i>=k||b.x===M&&(i>k||k>f.width-i)||b.y===I&&l>=j||b.y===K&&j>=l||b.y===M&&(j>l||l>f.height-j))&&h.splice(g,1);f.position={left:h[0][0],top:h[0][1]}}return f},rect:function(a,b,c,d){return{width:Math.abs(c-a),height:Math.abs(d-b),position:{left:Math.min(a,c),top:Math.min(b,d)}}},_angles:{tc:1.5,tr:7/4,tl:5/4,bc:.5,br:.25,bl:.75,rc:2,lc:1,c:0},ellipse:function(a,b,c,d,e){var f=P.polys._angles[e.abbrev()],g=0===f?0:c*Math.cos(f*Math.PI),h=d*Math.sin(f*Math.PI);return{width:2*c-Math.abs(g),height:2*d-Math.abs(h),position:{left:a+g,top:b+h},adjustable:C}},circle:function(a,b,c,d){return P.polys.ellipse(a,b,c,c,d)}},P.imagemap=function(a,b,c){b.jquery||(b=d(b));var e,f,g,h,i,j=(b.attr("shape")||"rect").toLowerCase().replace("poly","polygon"),k=d('img[usemap="#'+b.parent("map").attr("name")+'"]'),l=d.trim(b.attr("coords")),m=l.replace(/,$/,"").split(",");if(!k.length)return C;if("polygon"===j)h=P.polys.polygon(m,c);else{if(!P.polys[j])return C;for(g=-1,i=m.length,f=[];++g<i;)f.push(parseInt(m[g],10));h=P.polys[j].apply(this,f.concat(c))}return e=k.offset(),e.left+=Math.ceil((k.outerWidth(C)-k.width())/2),e.top+=Math.ceil((k.outerHeight(C)-k.height())/2),h.position.left+=e.left,h.position.top+=e.top,h},P.svg=function(a,c,e){for(var f,g,h,i,j,k,l,m,n,o=(d(b),c[0]),p=d(o.ownerSVGElement),q=o.ownerDocument,r=(parseInt(c.css("stroke-width"),10)||0)/2;!o.getBBox;)o=o.parentNode;if(!o.getBBox||!o.parentNode)return C;switch(o.nodeName){case"ellipse":case"circle":m=P.polys.ellipse(o.cx.baseVal.value,o.cy.baseVal.value,(o.rx||o.r).baseVal.value+r,(o.ry||o.r).baseVal.value+r,e);break;case"line":case"polygon":case"polyline":for(l=o.points||[{x:o.x1.baseVal.value,y:o.y1.baseVal.value},{x:o.x2.baseVal.value,y:o.y2.baseVal.value}],m=[],k=-1,i=l.numberOfItems||l.length;++k<i;)j=l.getItem?l.getItem(k):l[k],m.push.apply(m,[j.x,j.y]);m=P.polys.polygon(m,e);break;default:m=o.getBBox(),m={width:m.width,height:m.height,position:{left:m.x,top:m.y}}}return n=m.position,p=p[0],p.createSVGPoint&&(g=o.getScreenCTM(),l=p.createSVGPoint(),l.x=n.left,l.y=n.top,h=l.matrixTransform(g),n.left=h.x,n.top=h.y),q!==b&&"mouse"!==a.position.target&&(f=d((q.defaultView||q.parentWindow).frameElement).offset(),f&&(n.left+=f.left,n.top+=f.top)),q=d(q),n.left+=q.scrollLeft(),n.top+=q.scrollTop(),m}})}(window,document);
//# sourceMappingURL=jquery.qtip.min.js.map
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\qtip\\qtip.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./jquery.qtip.min.js');
},{"./jquery.qtip.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\qtip\\jquery.qtip.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\ramda\\ramda.min.js":[function(require,module,exports){
/*! ramda 2014-11-19 */
!function(n){"object"==typeof exports?module.exports=n(this):"function"==typeof define&&define.amd?define(n):this.R=n(this)}(function(){"use strict";function n(){return new TypeError("Function called with no arguments")}function r(t,e,u){switch(arguments.length){case 0:throw n();case 1:return r(t,0,t.length);case 2:return r(t,e,t.length);default:for(var i=Math.max(0,u-e),o=new Array(i),a=-1;++a<i;)o[a]=t[e+a];return o}}function t(n,r){n=n||[],r=r||[];var t,e=n.length,u=r.length,i=new Array(e+u);for(t=-1;++t<e;)i[t]=n[t];for(t=-1;++t<u;)i[e+t]=r[t];return i}function e(r){return function(t,e){switch(arguments.length){case 0:throw n();case 1:return function(n){return r(t,n)};default:return r(t,e)}}}function u(r){return function(t,u,i){switch(arguments.length){case 0:throw n();case 1:return e(function(n,e){return r(t,n,e)});case 2:return function(n){return r(t,u,n)};default:return r(t,u,i)}}}function i(n,r){return null!=r&&!$(r)&&"function"==typeof r[n]}function o(n,r){return function(t,e,u){var i=arguments.length,o=arguments[i-1],a=o&&!$(o)&&"function"==typeof o[n];switch(arguments.length){case 0:return r();case 1:return a?o[n]():r(t);case 2:return a?o[n](t):r(t,e);case 3:return a?o[n](t,e):r(t,e,u)}}}function a(n,r){for(var t=-1,e=r.length;++t<e;)n(r[t]);return r}function c(n,r,t){switch(n&&Z.call(n)){case"[object Object]":return f(n,{},r,t);case"[object Array]":return f(n,[],r,t);case"[object Function]":return n;case"[object Date]":return new Date(n);default:return n}}function f(n,r,t,e){for(var u=t.length,i=-1;++i<u;)if(n===t[i])return e[i];t.push(n),e.push(r);for(var o in n)r[o]=c(n[o],t,e);return r}function s(n,r){return t([n],r)}function l(n,r){return t(r,[n])}function h(n,r){return function(){return n.call(this,r.apply(this,arguments))}}function p(n,r){return function(){var t=this,e=r.apply(this,arguments);return g(e)?e.then(function(r){return n.call(t,r)}):n.call(this,e)}}function g(n){return null!=n&&n===Object(n)&&n.then&&"function"==typeof n.then}function v(r){return function(){switch(arguments.length){case 0:throw n();case 1:return arguments[0];default:for(var t=arguments.length-1,e=arguments[t],u=e.length;t--;)e=r(arguments[t],e);return rr(u,e)}}}function m(n){return function(t){var e=r(arguments,1);return rr(Math.max(0,t.length-e.length),function(){return t.apply(this,n(e,arguments))})}}function y(n,r){for(var t=-1,e=r.length,u=new Array(e);++t<e;)u[t]=n(r[t]);return u}function d(n,r){for(var t=-1,e=r.length,u=[];++t<e;)n(r[t])&&u.push(r[t]);return u}function w(n,r){for(var t=-1,e=r.length,u=[];++t<e;)n(r[t],t,r)&&u.push(r[t]);return u}function b(n,r){for(var t=-1;++t<r.length;)if(!n(r[t]))return!1;return!0}function x(n,r){for(var t=-1;++t<r.length;)if(n(r[t]))return!0;return!1}function j(n,r,t){var e=0,u=n.length;for("number"==typeof t&&(e=0>t?Math.max(0,u+t):t);u>e;){if(n[e]===r)return e;++e}return-1}function O(n,r,t){var e=n.length;for("number"==typeof t&&(e=0>t?e+t+1:Math.min(e,t+1));--e>=0;)if(n[e]===r)return e;return-1}function k(n,r){return j(r,n)>=0}function A(n,r,t){for(var e=-1,u=t.length;++e<u;)if(n(r,t[e]))return!0;return!1}function I(n){return function r(t){for(var e,u,i,o=[],a=-1,c=t.length;++a<c;)if(G(t[a]))for(e=n?r(t[a]):t[a],u=-1,i=e.length;++u<i;)o.push(e[u]);else o.push(t[a]);return o}}function P(n){return function(r){return y(function(n){return[n,r[n]]},n(r))}}function E(n,r){for(var t,e={},u=Ur(r),i=u.length,o=-1;++o<i;)t=u[o],n(r[t],t,r)&&(e[t]=r[t]);return e}function M(n,r){var t={};return a(function(n){t[n]=r[n]},n),t}function W(n,r){for(var t=Fr(r),e=-1,u=t.length;++e<u;)n[t[e]]=r[t[e]];return n}function N(n,r,t){if(n===t)return!0;if(null==t)return!1;r.fn=r.fn||[],r.obj=r.obj||[];for(var e,u,i=-1,o=r.fn.length,a=-1,c=r.obj.length;++i<o;){if(e=r.fn[i],u=n[e],!(e in t))return!1;if(!u(t[e],t))return!1}for(;++a<c;)if(e=r.obj[a],n[e]!==t[e])return!1;return!0}function S(n){return function(t){var e=function(){var r=arguments;return n(function(n){return n.apply(null,r)},t)};return arguments.length>1?e.apply(null,r(arguments,1)):rr(Jr(Wr("length",t)),e)}}function T(n,r){return n+r}function C(n,r){return n*r}function L(n,r){return r>n}function q(n,r){return n>r}function B(r,t){return function(e){if(0===arguments.length)throw n();for(var u,i=-1,o=t;++i<e.length;)u=+e[i],r(u,o)&&(o=u);return o}}function R(n){return function(r,t){if(t&&t.length>0){for(var e,u=0,i=t[u],o=r(i);++u<t.length;)e=r(t[u]),n(e,o)&&(o=e,i=t[u]);return i}}}function z(n,r){var t,e=-1,u=n.length;if(null!=r){for(t=r;null!=t&&++e<u;)t=t[n[e]];return t}}function F(n,r){return y(function(r){return{key:n(r),val:r}},r)}function U(n){return function(r){return d(function(n){return"function"==typeof r[n]},n(r))}}var _,D={version:"0.8.0"},Z=Object.prototype.toString,$=Array.isArray||function(n){return null!=n&&n.length>=0&&"[object Array]"===Z.call(n)},G=D.isArrayLike=function(n){return $(n)?!0:n?"object"!=typeof n?!1:n instanceof String?!1:1===n.nodeType?!!n.length:0===n.length?!0:n.length>0?n.hasOwnProperty(0)&&n.hasOwnProperty(n.length-1):!1:!1};try{Object.defineProperty(D,"__",{writable:!1,value:_})}catch(H){D.__=_}var J=D.op=function(r){var t=r.length;if(2!==t)throw new Error("Expected binary function.");return function e(t,u){switch(arguments.length){case 0:throw n();case 1:return t===_?nr(V(e)):Y(vr(r,t));default:return t===_?Y(mr(r,u)):r(t,u)}}},K=D.curryN=function(r,e){return function u(i){return rr(Math.max(r-(i&&i.length||0),0),function(){if(0===arguments.length)throw n();var o=t(i,arguments);return o.length>=r?e.apply(this,o):u(o)})}([])},Q=D.curry=function(n){return K(n.length,n)},V=D.flip=function(e){return function(u,i){switch(arguments.length){case 0:throw n();case 1:return function(n){return e.apply(this,[n,u].concat(r(arguments,1)))};default:return e.apply(this,t([i,u],r(arguments,2)))}}},X=D.nAry=function(n,r){switch(n){case 0:return function(){return r.call(this)};case 1:return function(n){return r.call(this,n)};case 2:return function(n,t){return r.call(this,n,t)};case 3:return function(n,t,e){return r.call(this,n,t,e)};case 4:return function(n,t,e,u){return r.call(this,n,t,e,u)};case 5:return function(n,t,e,u,i){return r.call(this,n,t,e,u,i)};case 6:return function(n,t,e,u,i,o){return r.call(this,n,t,e,u,i,o)};case 7:return function(n,t,e,u,i,o,a){return r.call(this,n,t,e,u,i,o,a)};case 8:return function(n,t,e,u,i,o,a,c){return r.call(this,n,t,e,u,i,o,a,c)};case 9:return function(n,t,e,u,i,o,a,c,f){return r.call(this,n,t,e,u,i,o,a,c,f)};case 10:return function(n,t,e,u,i,o,a,c,f,s){return r.call(this,n,t,e,u,i,o,a,c,f,s)};default:return r}},Y=D.unary=function(n){return X(1,n)},nr=D.binary=function(n){return X(2,n)},rr=D.arity=function(n,r){switch(n){case 0:return function(){return r.apply(this,arguments)};case 1:return function(n){return r.apply(this,arguments)};case 2:return function(n,t){return r.apply(this,arguments)};case 3:return function(n,t,e){return r.apply(this,arguments)};case 4:return function(n,t,e,u){return r.apply(this,arguments)};case 5:return function(n,t,e,u,i){return r.apply(this,arguments)};case 6:return function(n,t,e,u,i,o){return r.apply(this,arguments)};case 7:return function(n,t,e,u,i,o,a){return r.apply(this,arguments)};case 8:return function(n,t,e,u,i,o,a,c){return r.apply(this,arguments)};case 9:return function(n,t,e,u,i,o,a,c,f){return r.apply(this,arguments)};case 10:return function(n,t,e,u,i,o,a,c,f,s){return r.apply(this,arguments)};default:return r}},tr=D.invokerN=function(n,t){var e=r(arguments,2),u=n-e.length;return K(u+1,function(){var n=arguments[u],i=e.concat(r(arguments,0,u));return n[t].apply(n,i)})},er=D.useWith=function(n){var t=r(arguments,1),e=t.length;return Q(rr(e,function(){for(var u=[],i=-1;++i<e;)u.push(t[i](arguments[i]));return n.apply(this,u.concat(r(arguments,e)))}))};D.forEach=e(a),D.forEach.idx=e(function(n,r){for(var t=-1,e=r.length;++t<e;)n(r[t],t,r);return r});var ur=D.clone=function(n){return r(n)};D.cloneDeep=function(n){return c(n,[],[])};var ir=D.isEmpty=function(n){return null==n||0===n.length},or=D.prepend=e(s);D.cons=or,D.prependTo=V(s);var ar=D.nth=e(function(n,r){return 0>n?r[r.length+n]:r[n]}),cr=D.head=ar(0);D.car=cr,D.last=ar(-1);var fr=D.tail=o("tail",function(n){return r(n,1)});D.cdr=fr;var sr=D.append=e(l);D.push=sr,D.appendTo=V(l),D.concat=e(function(n,r){if($(r))return t(n,r);if(i("concat",n))return n.concat(r);throw new TypeError("can't concat "+typeof n)});var lr=D.identity=function(n){return n};D.I=lr,D.argN=function(n){return function(){return arguments[n]}};var hr=D.times=e(function(n,r){for(var t=new Array(r),e=-1;++e<r;)t[e]=n(e);return t});D.repeatN=e(function(n,r){return hr(zr(n),r)}),D.apply=e(function(n,r){return n.apply(this,r)}),D.unapply=function(t){if(0===arguments.length)throw n();return function(){return t(r(arguments))}};var pr=D.compose=v(h),gr=D.pCompose=v(p);D.pipe=function(){return pr.apply(this,Cr(arguments))},D.pPipe=function(){return gr.apply(this,Cr(arguments))};var vr=D.lPartial=m(t),mr=D.rPartial=m(V(t));D.memoize=function(n){if(!n.length)return yr(n);var t={};return function(){if(arguments.length){var e=wr(function(n,r){return n[r]||(n[r]={})},t,r(arguments,0,arguments.length-1)),u=arguments[arguments.length-1];return e[u]||(e[u]=n.apply(this,arguments))}}};var yr=D.once=function(n){var r,t=!1;return function(){return t?r:(t=!0,r=n.apply(this,arguments))}};D.wrap=function(n,r){return rr(n.length,function(){return r.apply(this,t([n],arguments))})};var dr=D.constructN=e(function(n,r){var t=function(){var n,t,e=function(){};return e.prototype=r.prototype,n=new e,t=r.apply(n,arguments),Object(t)===t?t:n};return n>1?Q(X(n,t)):t});D.construct=function(n){return dr(n.length,n)},D.converge=function(n){var t=r(arguments,1);return function(){var r=arguments;return n.apply(this,y(function(n){return n.apply(this,r)},t))}};var wr=D.reduce=u(function(n,r,t){for(var e=-1,u=t.length;++e<u;)r=n(r,t[e]);return r});D.foldl=wr,D.reduce.idx=u(function(n,r,t){for(var e=-1,u=t.length;++e<u;)r=n(r,t[e],e,t);return r}),D.foldl.idx=wr.idx;var br=D.reduceRight=u(o("reduceRight",function(n,r,t){for(var e=t.length;e--;)r=n(r,t[e]);return r}));D.foldr=br,D.reduceRight.idx=u(function(n,r,t){for(var e=t.length;e--;)r=n(r,t[e],e,t);return r}),D.foldr.idx=br.idx,D.unfoldr=e(function(n,r){for(var t=n(r),e=[];t&&t.length;)e.push(t[0]),t=n(t[1]);return e});var xr=D.map=e(o("map",y));D.map.idx=e(function(n,r){for(var t=-1,e=r.length,u=new Array(e);++t<e;)u[t]=n(r[t],t,r);return u}),D.mapObj=e(function(n,r){return wr(function(t,e){return t[e]=n(r[e]),t},{},Fr(r))}),D.mapObj.idx=e(function(n,r){return wr(function(t,e){return t[e]=n(r[e],e,r),t},{},Fr(r))}),D.scanl=u(function(n,r,t){var e=0,u=t.length+1,i=new Array(u);for(i[e]=r;++e<u;)r=n(r,t[e-1]),i[e]=r;return i});var jr=D.liftN=e(function(t,e){var u=K(t,e);if(0===arguments.length)throw n();return K(t,function(){return wr(Or,y(u,arguments[0]),r(arguments,1))})});D.lift=function(r){if(0===arguments.length)throw n();return jr(r.length,r)};var Or=D.ap=e(function(n,r){return i("ap",n)?n.ap(r):wr(function(n,e){return t(n,y(e,r))},[],n)});D.of=function(n,r){return i("of",r)?r.of(n):[n]},D.empty=function(n){return i("empty",n)?n.empty():[]},D.chain=e(o("chain",function(n,r){return Nr(y(n,r))}));var kr=D.commuteMap=u(function(n,r,t){function e(r,t){return Or(xr(sr,n(t)),r)}return wr(e,r([]),t)});D.commute=kr(xr(lr));var Ar=D.size=function(n){return n.length};D.length=Ar,D.filter=e(o("filter",d)),D.filter.idx=e(w);var Ir=function(n,r){return d($r(n),r)};D.reject=e(Ir),D.reject.idx=e(function(n,r){return w($r(n),r)}),D.takeWhile=e(o("takeWhile",function(n,t){for(var e=-1,u=t.length;++e<u&&n(t[e]););return r(t,0,e)})),D.take=e(o("take",function(n,t){return r(t,0,Math.min(n,t.length))})),D.skipUntil=e(function(n,t){for(var e=-1,u=t.length;++e<u&&!n(t[e]););return r(t,e)}),D.skip=e(o("skip",function(n,t){return n<t.length?r(t,n):[]})),D.find=e(function(n,r){for(var t=-1,e=r.length;++t<e;)if(n(r[t]))return r[t]}),D.findIndex=e(function(n,r){for(var t=-1,e=r.length;++t<e;)if(n(r[t]))return t;return-1}),D.findLast=e(function(n,r){for(var t=r.length;t--;)if(n(r[t]))return r[t]}),D.findLastIndex=e(function(n,r){for(var t=r.length;t--;)if(n(r[t]))return t;return-1}),D.every=e(b),D.some=e(x),D.indexOf=e(function(n,r){return j(r,n)}),D.indexOf.from=u(function(n,r,t){return j(t,n,r)}),D.lastIndexOf=e(function(n,r){return O(r,n)}),D.lastIndexOf.from=u(function(n,r,t){return O(t,n,r)}),D.contains=e(k);var Pr=D.containsWith=u(A),Er=D.uniq=function(n){for(var r,t=-1,e=n.length,u=[];++t<e;)r=n[t],k(r,u)||u.push(r);return u};D.isSet=function(n){for(var r=n.length,t=-1;++t<r;)if(j(n,n[t],t+1)>=0)return!1;return!0};var Mr=D.uniqWith=e(function(n,r){for(var t,e=-1,u=r.length,i=[];++e<u;)t=r[e],A(n,t,i)||i.push(t);return i}),Wr=D.pluck=e(function(n,r){return y(Br(n),r)});D.flatten=I(!0);var Nr=D.unnest=I(!1);D.zipWith=u(function(n,r,t){for(var e=[],u=-1,i=Math.min(r.length,t.length);++u<i;)e[u]=n(r[u],t[u]);return e}),D.zip=e(function(n,r){for(var t=[],e=-1,u=Math.min(n.length,r.length);++e<u;)t[e]=[n[e],r[e]];return t}),D.zipObj=e(function(n,r){for(var t=-1,e=n.length,u={};++t<e;)u[n[t]]=r[t];return u});var Sr=D.fromPairs=function(n){for(var r=-1,t=n.length,e={};++r<t;)$(n[r])&&n[r].length&&(e[n[r][0]]=n[r][1]);return e},Tr=D.createMapEntry=e(function(n,r){var t={};return t[n]=r,t});D.lens=e(function(n,r){var t=function(r){return n(r)};return t.set=r,t.map=function(t,e){return r(t(n(e)),e)},t}),D.xprod=e(function(n,r){if(ir(n)||ir(r))return[];for(var t,e=-1,u=n.length,i=r.length,o=[];++e<u;)for(t=-1;++t<i;)o.push([n[e],r[t]]);return o});var Cr=D.reverse=function(n){for(var r=-1,t=n.length,e=t,u=new Array(t);++r<t;)u[--e]=n[r];return u};D.range=e(function(n,r){if(n>=r)return[];for(var t=0,e=new Array(Math.floor(r)-Math.ceil(n));r>n;)e[t++]=n++;return e}),D.join=tr(1,"join"),D.slice=tr(2,"slice"),D.slice.from=e(function(n,r){return r.slice(n,r.length)}),D.remove=u(function(n,e,u){return t(r(u,0,Math.min(n,u.length)),r(u,Math.min(u.length,n+e)))}),D.insert=u(function(n,e,u){return n=n<u.length&&n>=0?n:u.length,t(l(e,r(u,0,n)),r(u,n))}),D.insert.all=u(function(n,e,u){return n=n<u.length&&n>=0?n:u.length,t(t(r(u,0,n),e),r(u,n))});var Lr=D.comparator=function(n){return function(r,t){return n(r,t)?-1:n(t,r)?1:0}};D.sort=e(function(n,r){return ur(r).sort(n)});var qr=D.groupBy=e(function(n,r){return wr(function(r,t){var e=n(t);return r[e]=l(t,r[e]||(r[e]=[])),r},{},r)});D.partition=e(function(n,r){return wr(function(r,t){return r[n(t)?0:1].push(t),r},[[],[]],r)}),D.tap=e(function(n,r){return n(r),r}),D.eq=e(function(n,r){return n===r});var Br=D.prop=function(r,t){switch(arguments.length){case 0:throw n();case 1:return function(n){return n[r]}}return t[r]};D.get=Br,D.propOf=V(Br),D.props=e(function(n,r){for(var t=n.length,e=new Array(t),u=-1;++u<t;)e[u]=r[n[u]];return e});var Rr=Object.prototype.hasOwnProperty;D.propOr=u(function(n,r,t){return Rr.call(t,n)?t[n]:r}),D.has=e(function(n,r){return Rr.call(r,n)}),D.hasIn=e(function(n,r){return n in r}),D.func=function(t,e){switch(arguments.length){case 0:throw n();case 1:return function(n){return n[t].apply(n,r(arguments,1))};default:return e[t].apply(e,r(arguments,2))}};var zr=D.always=function(n){return function(){return n}};D.bind=e(function(n,r){return function(){return n.apply(r,arguments)}});var Fr=D.keys=function(){var n=!{toString:null}.propertyIsEnumerable("toString"),r=["constructor","valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];return function(t){if(Object(t)!==t)return[];if(Object.keys)return Object.keys(t);var e,u,i=[];for(e in t)Rr.call(t,e)&&i.push(e);if(n)for(u=r.length;u--;)e=r[u],Rr.call(t,e)&&!k(e,i)&&i.push(e);return i}}(),Ur=D.keysIn=function(n){var r,t=[];for(r in n)t.push(r);return t};D.toPairs=P(Fr),D.toPairsIn=P(Ur),D.values=function(n){for(var r=Fr(n),t=r.length,e=new Array(t),u=-1;++u<t;)e[u]=n[r[u]];return e},D.valuesIn=function(n){var r,t=[];for(r in n)t.push(n[r]);return t},D.pick=e(function(n,r){return E(function(r,t){return k(t,n)},r)}),D.omit=e(function(n,r){return E(function(r,t){return!k(t,n)},r)}),D.pickBy=e(E);var _r=D.pickAll=e(M);D.mixin=e(function(n,r){return W(W({},n),r)}),D.cloneObj=function(n){return W({},n)},D.eqProps=u(function(n,r,t){return r[n]===t[n]}),D.where=function(r,t){var e=qr(function(n){return"function"==typeof r[n]?"fn":"obj"},Fr(r));switch(arguments.length){case 0:throw n();case 1:return function(n){return N(r,e,n)}}return N(r,e,t)};var Dr=D.assoc=u(function(n,r,t){return W(Sr(y(function(n){return[n,t[n]]},Ur(t))),Tr(n,r))});D.assocPath=function(){var t=function(n,e,u){if(1===n.length)return Dr(n[0],e,u);var i=u[n[0]];return Dr(n[0],t(r(n,1),e,Zr(Object,i)?i:{}),u)};return function(r,u,i){var o=arguments.length;if(0===o)throw n();var a=Qr(".",r),c=e(function(n,r){return t(a,n,r)});switch(o){case 1:return c;case 2:return c(u);default:return c(u,i)}}}(),D.installTo=function(n){return W(n,D)};var Zr=D.is=e(function(n,r){return null!=r&&r.constructor===n||r instanceof n});D.type=function(n){return null===n?"Null":void 0===n?"Undefined":Z.call(n).slice(8,-1)},D.alwaysZero=zr(0),D.alwaysFalse=zr(!1),D.alwaysTrue=zr(!0),D.and=e(function(n,r){return function(){return n.apply(this,arguments)&&r.apply(this,arguments)}}),D.or=e(function(n,r){return function(){return n.apply(this,arguments)||r.apply(this,arguments)}});var $r=D.not=function(n){return function(){return!n.apply(this,arguments)}};D.allPredicates=S(b),D.anyPredicates=S(x);var Gr=D.ifElse=u(function(n,r,t){return function(){return n.apply(this,arguments)?r.apply(this,arguments):t.apply(this,arguments)}});D["if"]=Gr,D.cond=function(){var n=arguments;return function(){for(var r=-1;++r<n.length;)if(n[r][0].apply(this,arguments))return n[r][1].apply(this,arguments)}},D.add=e(T),D.multiply=e(C),D.subtract=J(function(n,r){return n-r}),D.divide=J(function(n,r){return n/r}),D.modulo=J(function(n,r){return n%r});var Hr=Number.isInteger||function(n){return n<<0===n};D.mathMod=J(function(n,r){return Hr(n)?!Hr(r)||1>r?0/0:(n%r+r)%r:0/0}),D.sum=wr(T,0),D.product=wr(C,1),D.lt=J(L),D.lte=J(function(n,r){return r>=n}),D.gt=J(q),D.gte=J(function(n,r){return n>=r});var Jr=D.max=B(q,-1/0);D.maxBy=e(R(q)),D.min=B(L,1/0),D.minBy=e(R(L));var Kr=D.substring=tr(2,"substring");D.substringFrom=V(Kr)(void 0),D.substringTo=Kr(0),D.charAt=tr(1,"charAt"),D.charCodeAt=tr(1,"charCodeAt"),D.match=tr(1,"match"),D.replace=u(function(n,r,t){return t.replace(n,r)}),D.strIndexOf=e(function(n,r){return r.indexOf(n)}),D.strLastIndexOf=e(function(n,r){return r.lastIndexOf(n)}),D.toUpperCase=tr(0,"toUpperCase"),D.toLowerCase=tr(0,"toLowerCase"),D.trim=function(){var n="	\n\f\r   ᠎             　\u2028\u2029﻿",r="​",t="function"==typeof String.prototype.trim;return t&&!n.trim()&&r.trim()?function(n){return n.trim()}:function(r){var t=new RegExp("^["+n+"]["+n+"]*"),e=new RegExp("["+n+"]["+n+"]*$");return r.replace(t,"").replace(e,"")}}();var Qr=D.split=tr(1,"split"),Vr=D.pathOn=u(function(n,r,t){return z(r.split(n),t)});D.path=Vr("."),D.pathEq=u(function(n,r,t){return z(n.split("."),t)===r}),D.project=er(y,_r,lr),D.propEq=u(function(n,r,t){return t[n]===r}),D.union=pr(Er,t),D.unionWith=u(function(n,r,e){return Mr(n,t(r,e))}),D.difference=e(function(n,r){for(var t=[],e=-1,u=n.length;++e<u;)k(n[e],r)||k(n[e],t)||t.push(n[e]);return t}),D.differenceWith=u(function(n,r,t){for(var e=[],u=-1,i=r.length,o=Pr(n);++u<i;)o(r[u],t)||o(r[u],e)||e.push(r[u]);return e}),D.intersection=e(function(n,r){return Er(d(V(k)(n),r))}),D.intersectionWith=u(function(n,r,t){for(var e=[],u=-1;++u<r.length;)A(n,r[u],t)&&(e[e.length]=r[u]);return Mr(n,e)});var Xr=Lr(function(n,r){return n.key<r.key});return D.sortBy=e(function(n,r){return Wr("val",F(n,r).sort(Xr))}),D.countBy=e(function(n,r){return wr(function(n,r){return n[r.key]=(n[r.key]||0)+1,n},{},F(n,r))}),D.functions=U(Fr),D.functionsIn=U(Ur),D});
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\ramda\\ramda.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./ramda.min.js');
},{"./ramda.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\ramda\\ramda.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\select2\\select2.min.js":[function(require,module,exports){
/*
Copyright 2014 Igor Vaynberg

Version: 3.4.8 Timestamp: Thu May  1 09:50:32 EDT 2014

This software is licensed under the Apache License, Version 2.0 (the "Apache License") or the GNU
General Public License version 2 (the "GPL License"). You may choose either license to govern your
use of this software only upon the condition that you accept all of the terms of either the Apache
License or the GPL License.

You may obtain a copy of the Apache License and the GPL License at:

http://www.apache.org/licenses/LICENSE-2.0
http://www.gnu.org/licenses/gpl-2.0.html

Unless required by applicable law or agreed to in writing, software distributed under the Apache License
or the GPL Licesnse is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the Apache License and the GPL License for the specific language governing
permissions and limitations under the Apache License and the GPL License.
*/
!function(a){"undefined"==typeof a.fn.each2&&a.extend(a.fn,{each2:function(b){for(var c=a([0]),d=-1,e=this.length;++d<e&&(c.context=c[0]=this[d])&&b.call(c[0],d,c)!==!1;);return this}})}(jQuery),function(a,b){"use strict";function n(b){var c=a(document.createTextNode(""));b.before(c),c.before(b),c.remove()}function o(a){function b(a){return m[a]||a}return a.replace(/[^\u0000-\u007E]/g,b)}function p(a,b){for(var c=0,d=b.length;d>c;c+=1)if(r(a,b[c]))return c;return-1}function q(){var b=a(l);b.appendTo("body");var c={width:b.width()-b[0].clientWidth,height:b.height()-b[0].clientHeight};return b.remove(),c}function r(a,c){return a===c?!0:a===b||c===b?!1:null===a||null===c?!1:a.constructor===String?a+""==c+"":c.constructor===String?c+""==a+"":!1}function s(b,c){var d,e,f;if(null===b||b.length<1)return[];for(d=b.split(c),e=0,f=d.length;f>e;e+=1)d[e]=a.trim(d[e]);return d}function t(a){return a.outerWidth(!1)-a.width()}function u(c){var d="keyup-change-value";c.on("keydown",function(){a.data(c,d)===b&&a.data(c,d,c.val())}),c.on("keyup",function(){var e=a.data(c,d);e!==b&&c.val()!==e&&(a.removeData(c,d),c.trigger("keyup-change"))})}function v(c){c.on("mousemove",function(c){var d=i;(d===b||d.x!==c.pageX||d.y!==c.pageY)&&a(c.target).trigger("mousemove-filtered",c)})}function w(a,c,d){d=d||b;var e;return function(){var b=arguments;window.clearTimeout(e),e=window.setTimeout(function(){c.apply(d,b)},a)}}function x(a,b){var c=w(a,function(a){b.trigger("scroll-debounced",a)});b.on("scroll",function(a){p(a.target,b.get())>=0&&c(a)})}function y(a){a[0]!==document.activeElement&&window.setTimeout(function(){var d,b=a[0],c=a.val().length;a.focus();var e=b.offsetWidth>0||b.offsetHeight>0;e&&b===document.activeElement&&(b.setSelectionRange?b.setSelectionRange(c,c):b.createTextRange&&(d=b.createTextRange(),d.collapse(!1),d.select()))},0)}function z(b){b=a(b)[0];var c=0,d=0;if("selectionStart"in b)c=b.selectionStart,d=b.selectionEnd-c;else if("selection"in document){b.focus();var e=document.selection.createRange();d=document.selection.createRange().text.length,e.moveStart("character",-b.value.length),c=e.text.length-d}return{offset:c,length:d}}function A(a){a.preventDefault(),a.stopPropagation()}function B(a){a.preventDefault(),a.stopImmediatePropagation()}function C(b){if(!h){var c=b[0].currentStyle||window.getComputedStyle(b[0],null);h=a(document.createElement("div")).css({position:"absolute",left:"-10000px",top:"-10000px",display:"none",fontSize:c.fontSize,fontFamily:c.fontFamily,fontStyle:c.fontStyle,fontWeight:c.fontWeight,letterSpacing:c.letterSpacing,textTransform:c.textTransform,whiteSpace:"nowrap"}),h.attr("class","select2-sizer"),a("body").append(h)}return h.text(b.val()),h.width()}function D(b,c,d){var e,g,f=[];e=b.attr("class"),e&&(e=""+e,a(e.split(" ")).each2(function(){0===this.indexOf("select2-")&&f.push(this)})),e=c.attr("class"),e&&(e=""+e,a(e.split(" ")).each2(function(){0!==this.indexOf("select2-")&&(g=d(this),g&&f.push(g))})),b.attr("class",f.join(" "))}function E(a,b,c,d){var e=o(a.toUpperCase()).indexOf(o(b.toUpperCase())),f=b.length;return 0>e?(c.push(d(a)),void 0):(c.push(d(a.substring(0,e))),c.push("<span class='select2-match'>"),c.push(d(a.substring(e,e+f))),c.push("</span>"),c.push(d(a.substring(e+f,a.length))),void 0)}function F(a){var b={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return String(a).replace(/[&<>"'\/\\]/g,function(a){return b[a]})}function G(c){var d,e=null,f=c.quietMillis||100,g=c.url,h=this;return function(i){window.clearTimeout(d),d=window.setTimeout(function(){var d=c.data,f=g,j=c.transport||a.fn.select2.ajaxDefaults.transport,k={type:c.type||"GET",cache:c.cache||!1,jsonpCallback:c.jsonpCallback||b,dataType:c.dataType||"json"},l=a.extend({},a.fn.select2.ajaxDefaults.params,k);d=d?d.call(h,i.term,i.page,i.context):null,f="function"==typeof f?f.call(h,i.term,i.page,i.context):f,e&&"function"==typeof e.abort&&e.abort(),c.params&&(a.isFunction(c.params)?a.extend(l,c.params.call(h)):a.extend(l,c.params)),a.extend(l,{url:f,dataType:c.dataType,data:d,success:function(a){var b=c.results(a,i.page);i.callback(b)}}),e=j.call(h,l)},f)}}function H(b){var d,e,c=b,f=function(a){return""+a.text};a.isArray(c)&&(e=c,c={results:e}),a.isFunction(c)===!1&&(e=c,c=function(){return e});var g=c();return g.text&&(f=g.text,a.isFunction(f)||(d=g.text,f=function(a){return a[d]})),function(b){var g,d=b.term,e={results:[]};return""===d?(b.callback(c()),void 0):(g=function(c,e){var h,i;if(c=c[0],c.children){h={};for(i in c)c.hasOwnProperty(i)&&(h[i]=c[i]);h.children=[],a(c.children).each2(function(a,b){g(b,h.children)}),(h.children.length||b.matcher(d,f(h),c))&&e.push(h)}else b.matcher(d,f(c),c)&&e.push(c)},a(c().results).each2(function(a,b){g(b,e.results)}),b.callback(e),void 0)}}function I(c){var d=a.isFunction(c);return function(e){var f=e.term,g={results:[]},h=d?c(e):c;a.isArray(h)&&(a(h).each(function(){var a=this.text!==b,c=a?this.text:this;(""===f||e.matcher(f,c))&&g.results.push(a?this:{id:this,text:this})}),e.callback(g))}}function J(b,c){if(a.isFunction(b))return!0;if(!b)return!1;if("string"==typeof b)return!0;throw new Error(c+" must be a string, function, or falsy value")}function K(b){if(a.isFunction(b)){var c=Array.prototype.slice.call(arguments,1);return b.apply(null,c)}return b}function L(b){var c=0;return a.each(b,function(a,b){b.children?c+=L(b.children):c++}),c}function M(a,c,d,e){var h,i,j,k,l,f=a,g=!1;if(!e.createSearchChoice||!e.tokenSeparators||e.tokenSeparators.length<1)return b;for(;;){for(i=-1,j=0,k=e.tokenSeparators.length;k>j&&(l=e.tokenSeparators[j],i=a.indexOf(l),!(i>=0));j++);if(0>i)break;if(h=a.substring(0,i),a=a.substring(i+l.length),h.length>0&&(h=e.createSearchChoice.call(this,h,c),h!==b&&null!==h&&e.id(h)!==b&&null!==e.id(h))){for(g=!1,j=0,k=c.length;k>j;j++)if(r(e.id(h),e.id(c[j]))){g=!0;break}g||d(h)}}return f!==a?a:void 0}function N(){var a=this;Array.prototype.forEach.call(arguments,function(b){a[b].remove(),a[b]=null})}function O(b,c){var d=function(){};return d.prototype=new b,d.prototype.constructor=d,d.prototype.parent=b.prototype,d.prototype=a.extend(d.prototype,c),d}if(window.Select2===b){var c,d,e,f,g,h,j,k,i={x:0,y:0},c={TAB:9,ENTER:13,ESC:27,SPACE:32,LEFT:37,UP:38,RIGHT:39,DOWN:40,SHIFT:16,CTRL:17,ALT:18,PAGE_UP:33,PAGE_DOWN:34,HOME:36,END:35,BACKSPACE:8,DELETE:46,isArrow:function(a){switch(a=a.which?a.which:a){case c.LEFT:case c.RIGHT:case c.UP:case c.DOWN:return!0}return!1},isControl:function(a){var b=a.which;switch(b){case c.SHIFT:case c.CTRL:case c.ALT:return!0}return a.metaKey?!0:!1},isFunctionKey:function(a){return a=a.which?a.which:a,a>=112&&123>=a}},l="<div class='select2-measure-scrollbar'></div>",m={"\u24b6":"A","\uff21":"A","\xc0":"A","\xc1":"A","\xc2":"A","\u1ea6":"A","\u1ea4":"A","\u1eaa":"A","\u1ea8":"A","\xc3":"A","\u0100":"A","\u0102":"A","\u1eb0":"A","\u1eae":"A","\u1eb4":"A","\u1eb2":"A","\u0226":"A","\u01e0":"A","\xc4":"A","\u01de":"A","\u1ea2":"A","\xc5":"A","\u01fa":"A","\u01cd":"A","\u0200":"A","\u0202":"A","\u1ea0":"A","\u1eac":"A","\u1eb6":"A","\u1e00":"A","\u0104":"A","\u023a":"A","\u2c6f":"A","\ua732":"AA","\xc6":"AE","\u01fc":"AE","\u01e2":"AE","\ua734":"AO","\ua736":"AU","\ua738":"AV","\ua73a":"AV","\ua73c":"AY","\u24b7":"B","\uff22":"B","\u1e02":"B","\u1e04":"B","\u1e06":"B","\u0243":"B","\u0182":"B","\u0181":"B","\u24b8":"C","\uff23":"C","\u0106":"C","\u0108":"C","\u010a":"C","\u010c":"C","\xc7":"C","\u1e08":"C","\u0187":"C","\u023b":"C","\ua73e":"C","\u24b9":"D","\uff24":"D","\u1e0a":"D","\u010e":"D","\u1e0c":"D","\u1e10":"D","\u1e12":"D","\u1e0e":"D","\u0110":"D","\u018b":"D","\u018a":"D","\u0189":"D","\ua779":"D","\u01f1":"DZ","\u01c4":"DZ","\u01f2":"Dz","\u01c5":"Dz","\u24ba":"E","\uff25":"E","\xc8":"E","\xc9":"E","\xca":"E","\u1ec0":"E","\u1ebe":"E","\u1ec4":"E","\u1ec2":"E","\u1ebc":"E","\u0112":"E","\u1e14":"E","\u1e16":"E","\u0114":"E","\u0116":"E","\xcb":"E","\u1eba":"E","\u011a":"E","\u0204":"E","\u0206":"E","\u1eb8":"E","\u1ec6":"E","\u0228":"E","\u1e1c":"E","\u0118":"E","\u1e18":"E","\u1e1a":"E","\u0190":"E","\u018e":"E","\u24bb":"F","\uff26":"F","\u1e1e":"F","\u0191":"F","\ua77b":"F","\u24bc":"G","\uff27":"G","\u01f4":"G","\u011c":"G","\u1e20":"G","\u011e":"G","\u0120":"G","\u01e6":"G","\u0122":"G","\u01e4":"G","\u0193":"G","\ua7a0":"G","\ua77d":"G","\ua77e":"G","\u24bd":"H","\uff28":"H","\u0124":"H","\u1e22":"H","\u1e26":"H","\u021e":"H","\u1e24":"H","\u1e28":"H","\u1e2a":"H","\u0126":"H","\u2c67":"H","\u2c75":"H","\ua78d":"H","\u24be":"I","\uff29":"I","\xcc":"I","\xcd":"I","\xce":"I","\u0128":"I","\u012a":"I","\u012c":"I","\u0130":"I","\xcf":"I","\u1e2e":"I","\u1ec8":"I","\u01cf":"I","\u0208":"I","\u020a":"I","\u1eca":"I","\u012e":"I","\u1e2c":"I","\u0197":"I","\u24bf":"J","\uff2a":"J","\u0134":"J","\u0248":"J","\u24c0":"K","\uff2b":"K","\u1e30":"K","\u01e8":"K","\u1e32":"K","\u0136":"K","\u1e34":"K","\u0198":"K","\u2c69":"K","\ua740":"K","\ua742":"K","\ua744":"K","\ua7a2":"K","\u24c1":"L","\uff2c":"L","\u013f":"L","\u0139":"L","\u013d":"L","\u1e36":"L","\u1e38":"L","\u013b":"L","\u1e3c":"L","\u1e3a":"L","\u0141":"L","\u023d":"L","\u2c62":"L","\u2c60":"L","\ua748":"L","\ua746":"L","\ua780":"L","\u01c7":"LJ","\u01c8":"Lj","\u24c2":"M","\uff2d":"M","\u1e3e":"M","\u1e40":"M","\u1e42":"M","\u2c6e":"M","\u019c":"M","\u24c3":"N","\uff2e":"N","\u01f8":"N","\u0143":"N","\xd1":"N","\u1e44":"N","\u0147":"N","\u1e46":"N","\u0145":"N","\u1e4a":"N","\u1e48":"N","\u0220":"N","\u019d":"N","\ua790":"N","\ua7a4":"N","\u01ca":"NJ","\u01cb":"Nj","\u24c4":"O","\uff2f":"O","\xd2":"O","\xd3":"O","\xd4":"O","\u1ed2":"O","\u1ed0":"O","\u1ed6":"O","\u1ed4":"O","\xd5":"O","\u1e4c":"O","\u022c":"O","\u1e4e":"O","\u014c":"O","\u1e50":"O","\u1e52":"O","\u014e":"O","\u022e":"O","\u0230":"O","\xd6":"O","\u022a":"O","\u1ece":"O","\u0150":"O","\u01d1":"O","\u020c":"O","\u020e":"O","\u01a0":"O","\u1edc":"O","\u1eda":"O","\u1ee0":"O","\u1ede":"O","\u1ee2":"O","\u1ecc":"O","\u1ed8":"O","\u01ea":"O","\u01ec":"O","\xd8":"O","\u01fe":"O","\u0186":"O","\u019f":"O","\ua74a":"O","\ua74c":"O","\u01a2":"OI","\ua74e":"OO","\u0222":"OU","\u24c5":"P","\uff30":"P","\u1e54":"P","\u1e56":"P","\u01a4":"P","\u2c63":"P","\ua750":"P","\ua752":"P","\ua754":"P","\u24c6":"Q","\uff31":"Q","\ua756":"Q","\ua758":"Q","\u024a":"Q","\u24c7":"R","\uff32":"R","\u0154":"R","\u1e58":"R","\u0158":"R","\u0210":"R","\u0212":"R","\u1e5a":"R","\u1e5c":"R","\u0156":"R","\u1e5e":"R","\u024c":"R","\u2c64":"R","\ua75a":"R","\ua7a6":"R","\ua782":"R","\u24c8":"S","\uff33":"S","\u1e9e":"S","\u015a":"S","\u1e64":"S","\u015c":"S","\u1e60":"S","\u0160":"S","\u1e66":"S","\u1e62":"S","\u1e68":"S","\u0218":"S","\u015e":"S","\u2c7e":"S","\ua7a8":"S","\ua784":"S","\u24c9":"T","\uff34":"T","\u1e6a":"T","\u0164":"T","\u1e6c":"T","\u021a":"T","\u0162":"T","\u1e70":"T","\u1e6e":"T","\u0166":"T","\u01ac":"T","\u01ae":"T","\u023e":"T","\ua786":"T","\ua728":"TZ","\u24ca":"U","\uff35":"U","\xd9":"U","\xda":"U","\xdb":"U","\u0168":"U","\u1e78":"U","\u016a":"U","\u1e7a":"U","\u016c":"U","\xdc":"U","\u01db":"U","\u01d7":"U","\u01d5":"U","\u01d9":"U","\u1ee6":"U","\u016e":"U","\u0170":"U","\u01d3":"U","\u0214":"U","\u0216":"U","\u01af":"U","\u1eea":"U","\u1ee8":"U","\u1eee":"U","\u1eec":"U","\u1ef0":"U","\u1ee4":"U","\u1e72":"U","\u0172":"U","\u1e76":"U","\u1e74":"U","\u0244":"U","\u24cb":"V","\uff36":"V","\u1e7c":"V","\u1e7e":"V","\u01b2":"V","\ua75e":"V","\u0245":"V","\ua760":"VY","\u24cc":"W","\uff37":"W","\u1e80":"W","\u1e82":"W","\u0174":"W","\u1e86":"W","\u1e84":"W","\u1e88":"W","\u2c72":"W","\u24cd":"X","\uff38":"X","\u1e8a":"X","\u1e8c":"X","\u24ce":"Y","\uff39":"Y","\u1ef2":"Y","\xdd":"Y","\u0176":"Y","\u1ef8":"Y","\u0232":"Y","\u1e8e":"Y","\u0178":"Y","\u1ef6":"Y","\u1ef4":"Y","\u01b3":"Y","\u024e":"Y","\u1efe":"Y","\u24cf":"Z","\uff3a":"Z","\u0179":"Z","\u1e90":"Z","\u017b":"Z","\u017d":"Z","\u1e92":"Z","\u1e94":"Z","\u01b5":"Z","\u0224":"Z","\u2c7f":"Z","\u2c6b":"Z","\ua762":"Z","\u24d0":"a","\uff41":"a","\u1e9a":"a","\xe0":"a","\xe1":"a","\xe2":"a","\u1ea7":"a","\u1ea5":"a","\u1eab":"a","\u1ea9":"a","\xe3":"a","\u0101":"a","\u0103":"a","\u1eb1":"a","\u1eaf":"a","\u1eb5":"a","\u1eb3":"a","\u0227":"a","\u01e1":"a","\xe4":"a","\u01df":"a","\u1ea3":"a","\xe5":"a","\u01fb":"a","\u01ce":"a","\u0201":"a","\u0203":"a","\u1ea1":"a","\u1ead":"a","\u1eb7":"a","\u1e01":"a","\u0105":"a","\u2c65":"a","\u0250":"a","\ua733":"aa","\xe6":"ae","\u01fd":"ae","\u01e3":"ae","\ua735":"ao","\ua737":"au","\ua739":"av","\ua73b":"av","\ua73d":"ay","\u24d1":"b","\uff42":"b","\u1e03":"b","\u1e05":"b","\u1e07":"b","\u0180":"b","\u0183":"b","\u0253":"b","\u24d2":"c","\uff43":"c","\u0107":"c","\u0109":"c","\u010b":"c","\u010d":"c","\xe7":"c","\u1e09":"c","\u0188":"c","\u023c":"c","\ua73f":"c","\u2184":"c","\u24d3":"d","\uff44":"d","\u1e0b":"d","\u010f":"d","\u1e0d":"d","\u1e11":"d","\u1e13":"d","\u1e0f":"d","\u0111":"d","\u018c":"d","\u0256":"d","\u0257":"d","\ua77a":"d","\u01f3":"dz","\u01c6":"dz","\u24d4":"e","\uff45":"e","\xe8":"e","\xe9":"e","\xea":"e","\u1ec1":"e","\u1ebf":"e","\u1ec5":"e","\u1ec3":"e","\u1ebd":"e","\u0113":"e","\u1e15":"e","\u1e17":"e","\u0115":"e","\u0117":"e","\xeb":"e","\u1ebb":"e","\u011b":"e","\u0205":"e","\u0207":"e","\u1eb9":"e","\u1ec7":"e","\u0229":"e","\u1e1d":"e","\u0119":"e","\u1e19":"e","\u1e1b":"e","\u0247":"e","\u025b":"e","\u01dd":"e","\u24d5":"f","\uff46":"f","\u1e1f":"f","\u0192":"f","\ua77c":"f","\u24d6":"g","\uff47":"g","\u01f5":"g","\u011d":"g","\u1e21":"g","\u011f":"g","\u0121":"g","\u01e7":"g","\u0123":"g","\u01e5":"g","\u0260":"g","\ua7a1":"g","\u1d79":"g","\ua77f":"g","\u24d7":"h","\uff48":"h","\u0125":"h","\u1e23":"h","\u1e27":"h","\u021f":"h","\u1e25":"h","\u1e29":"h","\u1e2b":"h","\u1e96":"h","\u0127":"h","\u2c68":"h","\u2c76":"h","\u0265":"h","\u0195":"hv","\u24d8":"i","\uff49":"i","\xec":"i","\xed":"i","\xee":"i","\u0129":"i","\u012b":"i","\u012d":"i","\xef":"i","\u1e2f":"i","\u1ec9":"i","\u01d0":"i","\u0209":"i","\u020b":"i","\u1ecb":"i","\u012f":"i","\u1e2d":"i","\u0268":"i","\u0131":"i","\u24d9":"j","\uff4a":"j","\u0135":"j","\u01f0":"j","\u0249":"j","\u24da":"k","\uff4b":"k","\u1e31":"k","\u01e9":"k","\u1e33":"k","\u0137":"k","\u1e35":"k","\u0199":"k","\u2c6a":"k","\ua741":"k","\ua743":"k","\ua745":"k","\ua7a3":"k","\u24db":"l","\uff4c":"l","\u0140":"l","\u013a":"l","\u013e":"l","\u1e37":"l","\u1e39":"l","\u013c":"l","\u1e3d":"l","\u1e3b":"l","\u017f":"l","\u0142":"l","\u019a":"l","\u026b":"l","\u2c61":"l","\ua749":"l","\ua781":"l","\ua747":"l","\u01c9":"lj","\u24dc":"m","\uff4d":"m","\u1e3f":"m","\u1e41":"m","\u1e43":"m","\u0271":"m","\u026f":"m","\u24dd":"n","\uff4e":"n","\u01f9":"n","\u0144":"n","\xf1":"n","\u1e45":"n","\u0148":"n","\u1e47":"n","\u0146":"n","\u1e4b":"n","\u1e49":"n","\u019e":"n","\u0272":"n","\u0149":"n","\ua791":"n","\ua7a5":"n","\u01cc":"nj","\u24de":"o","\uff4f":"o","\xf2":"o","\xf3":"o","\xf4":"o","\u1ed3":"o","\u1ed1":"o","\u1ed7":"o","\u1ed5":"o","\xf5":"o","\u1e4d":"o","\u022d":"o","\u1e4f":"o","\u014d":"o","\u1e51":"o","\u1e53":"o","\u014f":"o","\u022f":"o","\u0231":"o","\xf6":"o","\u022b":"o","\u1ecf":"o","\u0151":"o","\u01d2":"o","\u020d":"o","\u020f":"o","\u01a1":"o","\u1edd":"o","\u1edb":"o","\u1ee1":"o","\u1edf":"o","\u1ee3":"o","\u1ecd":"o","\u1ed9":"o","\u01eb":"o","\u01ed":"o","\xf8":"o","\u01ff":"o","\u0254":"o","\ua74b":"o","\ua74d":"o","\u0275":"o","\u01a3":"oi","\u0223":"ou","\ua74f":"oo","\u24df":"p","\uff50":"p","\u1e55":"p","\u1e57":"p","\u01a5":"p","\u1d7d":"p","\ua751":"p","\ua753":"p","\ua755":"p","\u24e0":"q","\uff51":"q","\u024b":"q","\ua757":"q","\ua759":"q","\u24e1":"r","\uff52":"r","\u0155":"r","\u1e59":"r","\u0159":"r","\u0211":"r","\u0213":"r","\u1e5b":"r","\u1e5d":"r","\u0157":"r","\u1e5f":"r","\u024d":"r","\u027d":"r","\ua75b":"r","\ua7a7":"r","\ua783":"r","\u24e2":"s","\uff53":"s","\xdf":"s","\u015b":"s","\u1e65":"s","\u015d":"s","\u1e61":"s","\u0161":"s","\u1e67":"s","\u1e63":"s","\u1e69":"s","\u0219":"s","\u015f":"s","\u023f":"s","\ua7a9":"s","\ua785":"s","\u1e9b":"s","\u24e3":"t","\uff54":"t","\u1e6b":"t","\u1e97":"t","\u0165":"t","\u1e6d":"t","\u021b":"t","\u0163":"t","\u1e71":"t","\u1e6f":"t","\u0167":"t","\u01ad":"t","\u0288":"t","\u2c66":"t","\ua787":"t","\ua729":"tz","\u24e4":"u","\uff55":"u","\xf9":"u","\xfa":"u","\xfb":"u","\u0169":"u","\u1e79":"u","\u016b":"u","\u1e7b":"u","\u016d":"u","\xfc":"u","\u01dc":"u","\u01d8":"u","\u01d6":"u","\u01da":"u","\u1ee7":"u","\u016f":"u","\u0171":"u","\u01d4":"u","\u0215":"u","\u0217":"u","\u01b0":"u","\u1eeb":"u","\u1ee9":"u","\u1eef":"u","\u1eed":"u","\u1ef1":"u","\u1ee5":"u","\u1e73":"u","\u0173":"u","\u1e77":"u","\u1e75":"u","\u0289":"u","\u24e5":"v","\uff56":"v","\u1e7d":"v","\u1e7f":"v","\u028b":"v","\ua75f":"v","\u028c":"v","\ua761":"vy","\u24e6":"w","\uff57":"w","\u1e81":"w","\u1e83":"w","\u0175":"w","\u1e87":"w","\u1e85":"w","\u1e98":"w","\u1e89":"w","\u2c73":"w","\u24e7":"x","\uff58":"x","\u1e8b":"x","\u1e8d":"x","\u24e8":"y","\uff59":"y","\u1ef3":"y","\xfd":"y","\u0177":"y","\u1ef9":"y","\u0233":"y","\u1e8f":"y","\xff":"y","\u1ef7":"y","\u1e99":"y","\u1ef5":"y","\u01b4":"y","\u024f":"y","\u1eff":"y","\u24e9":"z","\uff5a":"z","\u017a":"z","\u1e91":"z","\u017c":"z","\u017e":"z","\u1e93":"z","\u1e95":"z","\u01b6":"z","\u0225":"z","\u0240":"z","\u2c6c":"z","\ua763":"z"};j=a(document),g=function(){var a=1;return function(){return a++}}(),j.on("mousemove",function(a){i.x=a.pageX,i.y=a.pageY}),d=O(Object,{bind:function(a){var b=this;return function(){a.apply(b,arguments)}},init:function(c){var d,e,f=".select2-results";this.opts=c=this.prepareOpts(c),this.id=c.id,c.element.data("select2")!==b&&null!==c.element.data("select2")&&c.element.data("select2").destroy(),this.container=this.createContainer(),this.liveRegion=a("<span>",{role:"status","aria-live":"polite"}).addClass("select2-hidden-accessible").appendTo(document.body),this.containerId="s2id_"+(c.element.attr("id")||"autogen"+g()),this.containerEventName=this.containerId.replace(/([.])/g,"_").replace(/([;&,\-\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g,"\\$1"),this.container.attr("id",this.containerId),this.container.attr("title",c.element.attr("title")),this.body=a("body"),D(this.container,this.opts.element,this.opts.adaptContainerCssClass),this.container.attr("style",c.element.attr("style")),this.container.css(K(c.containerCss)),this.container.addClass(K(c.containerCssClass)),this.elementTabIndex=this.opts.element.attr("tabindex"),this.opts.element.data("select2",this).attr("tabindex","-1").before(this.container).on("click.select2",A),this.container.data("select2",this),this.dropdown=this.container.find(".select2-drop"),D(this.dropdown,this.opts.element,this.opts.adaptDropdownCssClass),this.dropdown.addClass(K(c.dropdownCssClass)),this.dropdown.data("select2",this),this.dropdown.on("click",A),this.results=d=this.container.find(f),this.search=e=this.container.find("input.select2-input"),this.queryCount=0,this.resultsPage=0,this.context=null,this.initContainer(),this.container.on("click",A),v(this.results),this.dropdown.on("mousemove-filtered",f,this.bind(this.highlightUnderEvent)),this.dropdown.on("touchstart touchmove touchend",f,this.bind(function(a){this._touchEvent=!0,this.highlightUnderEvent(a)})),this.dropdown.on("touchmove",f,this.bind(this.touchMoved)),this.dropdown.on("touchstart touchend",f,this.bind(this.clearTouchMoved)),this.dropdown.on("click",this.bind(function(){this._touchEvent&&(this._touchEvent=!1,this.selectHighlighted())})),x(80,this.results),this.dropdown.on("scroll-debounced",f,this.bind(this.loadMoreIfNeeded)),a(this.container).on("change",".select2-input",function(a){a.stopPropagation()}),a(this.dropdown).on("change",".select2-input",function(a){a.stopPropagation()}),a.fn.mousewheel&&d.mousewheel(function(a,b,c,e){var f=d.scrollTop();e>0&&0>=f-e?(d.scrollTop(0),A(a)):0>e&&d.get(0).scrollHeight-d.scrollTop()+e<=d.height()&&(d.scrollTop(d.get(0).scrollHeight-d.height()),A(a))}),u(e),e.on("keyup-change input paste",this.bind(this.updateResults)),e.on("focus",function(){e.addClass("select2-focused")}),e.on("blur",function(){e.removeClass("select2-focused")}),this.dropdown.on("mouseup",f,this.bind(function(b){a(b.target).closest(".select2-result-selectable").length>0&&(this.highlightUnderEvent(b),this.selectHighlighted(b))})),this.dropdown.on("click mouseup mousedown touchstart touchend focusin",function(a){a.stopPropagation()}),this.nextSearchTerm=b,a.isFunction(this.opts.initSelection)&&(this.initSelection(),this.monitorSource()),null!==c.maximumInputLength&&this.search.attr("maxlength",c.maximumInputLength);var h=c.element.prop("disabled");h===b&&(h=!1),this.enable(!h);var i=c.element.prop("readonly");i===b&&(i=!1),this.readonly(i),k=k||q(),this.autofocus=c.element.prop("autofocus"),c.element.prop("autofocus",!1),this.autofocus&&this.focus(),this.search.attr("placeholder",c.searchInputPlaceholder)},destroy:function(){var a=this.opts.element,c=a.data("select2");this.close(),this.propertyObserver&&(this.propertyObserver.disconnect(),this.propertyObserver=null),c!==b&&(c.container.remove(),c.liveRegion.remove(),c.dropdown.remove(),a.removeClass("select2-offscreen").removeData("select2").off(".select2").prop("autofocus",this.autofocus||!1),this.elementTabIndex?a.attr({tabindex:this.elementTabIndex}):a.removeAttr("tabindex"),a.show()),N.call(this,"container","liveRegion","dropdown","results","search")},optionToData:function(a){return a.is("option")?{id:a.prop("value"),text:a.text(),element:a.get(),css:a.attr("class"),disabled:a.prop("disabled"),locked:r(a.attr("locked"),"locked")||r(a.data("locked"),!0)}:a.is("optgroup")?{text:a.attr("label"),children:[],element:a.get(),css:a.attr("class")}:void 0},prepareOpts:function(c){var d,e,f,h,i=this;if(d=c.element,"select"===d.get(0).tagName.toLowerCase()&&(this.select=e=c.element),e&&a.each(["id","multiple","ajax","query","createSearchChoice","initSelection","data","tags"],function(){if(this in c)throw new Error("Option '"+this+"' is not allowed for Select2 when attached to a <select> element.")}),c=a.extend({},{populateResults:function(d,e,f){var h,j=this.opts.id,k=this.liveRegion;h=function(d,e,l){var m,n,o,p,q,r,s,t,u,v;for(d=c.sortResults(d,e,f),m=0,n=d.length;n>m;m+=1)o=d[m],q=o.disabled===!0,p=!q&&j(o)!==b,r=o.children&&o.children.length>0,s=a("<li></li>"),s.addClass("select2-results-dept-"+l),s.addClass("select2-result"),s.addClass(p?"select2-result-selectable":"select2-result-unselectable"),q&&s.addClass("select2-disabled"),r&&s.addClass("select2-result-with-children"),s.addClass(i.opts.formatResultCssClass(o)),s.attr("role","presentation"),t=a(document.createElement("div")),t.addClass("select2-result-label"),t.attr("id","select2-result-label-"+g()),t.attr("role","option"),v=c.formatResult(o,t,f,i.opts.escapeMarkup),v!==b&&(t.html(v),s.append(t)),r&&(u=a("<ul></ul>"),u.addClass("select2-result-sub"),h(o.children,u,l+1),s.append(u)),s.data("select2-data",o),e.append(s);k.text(c.formatMatches(d.length))},h(e,d,0)}},a.fn.select2.defaults,c),"function"!=typeof c.id&&(f=c.id,c.id=function(a){return a[f]}),a.isArray(c.element.data("select2Tags"))){if("tags"in c)throw"tags specified as both an attribute 'data-select2-tags' and in options of Select2 "+c.element.attr("id");c.tags=c.element.data("select2Tags")}if(e?(c.query=this.bind(function(a){var f,g,h,c={results:[],more:!1},e=a.term;h=function(b,c){var d;b.is("option")?a.matcher(e,b.text(),b)&&c.push(i.optionToData(b)):b.is("optgroup")&&(d=i.optionToData(b),b.children().each2(function(a,b){h(b,d.children)}),d.children.length>0&&c.push(d))},f=d.children(),this.getPlaceholder()!==b&&f.length>0&&(g=this.getPlaceholderOption(),g&&(f=f.not(g))),f.each2(function(a,b){h(b,c.results)}),a.callback(c)}),c.id=function(a){return a.id}):"query"in c||("ajax"in c?(h=c.element.data("ajax-url"),h&&h.length>0&&(c.ajax.url=h),c.query=G.call(c.element,c.ajax)):"data"in c?c.query=H(c.data):"tags"in c&&(c.query=I(c.tags),c.createSearchChoice===b&&(c.createSearchChoice=function(b){return{id:a.trim(b),text:a.trim(b)}}),c.initSelection===b&&(c.initSelection=function(b,d){var e=[];a(s(b.val(),c.separator)).each(function(){var b={id:this,text:this},d=c.tags;a.isFunction(d)&&(d=d()),a(d).each(function(){return r(this.id,b.id)?(b=this,!1):void 0}),e.push(b)}),d(e)}))),"function"!=typeof c.query)throw"query function not defined for Select2 "+c.element.attr("id");if("top"===c.createSearchChoicePosition)c.createSearchChoicePosition=function(a,b){a.unshift(b)};else if("bottom"===c.createSearchChoicePosition)c.createSearchChoicePosition=function(a,b){a.push(b)};else if("function"!=typeof c.createSearchChoicePosition)throw"invalid createSearchChoicePosition option must be 'top', 'bottom' or a custom function";return c},monitorSource:function(){var c,d,a=this.opts.element;a.on("change.select2",this.bind(function(){this.opts.element.data("select2-change-triggered")!==!0&&this.initSelection()})),c=this.bind(function(){var c=a.prop("disabled");c===b&&(c=!1),this.enable(!c);var d=a.prop("readonly");d===b&&(d=!1),this.readonly(d),D(this.container,this.opts.element,this.opts.adaptContainerCssClass),this.container.addClass(K(this.opts.containerCssClass)),D(this.dropdown,this.opts.element,this.opts.adaptDropdownCssClass),this.dropdown.addClass(K(this.opts.dropdownCssClass))}),a.length&&a[0].attachEvent&&a.each(function(){this.attachEvent("onpropertychange",c)}),d=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,d!==b&&(this.propertyObserver&&(delete this.propertyObserver,this.propertyObserver=null),this.propertyObserver=new d(function(a){a.forEach(c)}),this.propertyObserver.observe(a.get(0),{attributes:!0,subtree:!1}))},triggerSelect:function(b){var c=a.Event("select2-selecting",{val:this.id(b),object:b});return this.opts.element.trigger(c),!c.isDefaultPrevented()},triggerChange:function(b){b=b||{},b=a.extend({},b,{type:"change",val:this.val()}),this.opts.element.data("select2-change-triggered",!0),this.opts.element.trigger(b),this.opts.element.data("select2-change-triggered",!1),this.opts.element.click(),this.opts.blurOnChange&&this.opts.element.blur()},isInterfaceEnabled:function(){return this.enabledInterface===!0},enableInterface:function(){var a=this._enabled&&!this._readonly,b=!a;return a===this.enabledInterface?!1:(this.container.toggleClass("select2-container-disabled",b),this.close(),this.enabledInterface=a,!0)},enable:function(a){a===b&&(a=!0),this._enabled!==a&&(this._enabled=a,this.opts.element.prop("disabled",!a),this.enableInterface())},disable:function(){this.enable(!1)},readonly:function(a){a===b&&(a=!1),this._readonly!==a&&(this._readonly=a,this.opts.element.prop("readonly",a),this.enableInterface())},opened:function(){return (this.container) ? this.container.hasClass("select2-dropdown-open") : false},positionDropdown:function(){var t,u,v,w,x,b=this.dropdown,c=this.container.offset(),d=this.container.outerHeight(!1),e=this.container.outerWidth(!1),f=b.outerHeight(!1),g=a(window),h=g.width(),i=g.height(),j=g.scrollLeft()+h,l=g.scrollTop()+i,m=c.top+d,n=c.left,o=l>=m+f,p=c.top-f>=g.scrollTop(),q=b.outerWidth(!1),r=j>=n+q,s=b.hasClass("select2-drop-above");s?(u=!0,!p&&o&&(v=!0,u=!1)):(u=!1,!o&&p&&(v=!0,u=!0)),v&&(b.hide(),c=this.container.offset(),d=this.container.outerHeight(!1),e=this.container.outerWidth(!1),f=b.outerHeight(!1),j=g.scrollLeft()+h,l=g.scrollTop()+i,m=c.top+d,n=c.left,q=b.outerWidth(!1),r=j>=n+q,b.show(),this.focusSearch()),this.opts.dropdownAutoWidth?(x=a(".select2-results",b)[0],b.addClass("select2-drop-auto-width"),b.css("width",""),q=b.outerWidth(!1)+(x.scrollHeight===x.clientHeight?0:k.width),q>e?e=q:q=e,f=b.outerHeight(!1),r=j>=n+q):this.container.removeClass("select2-drop-auto-width"),"static"!==this.body.css("position")&&(t=this.body.offset(),m-=t.top,n-=t.left),r||(n=c.left+this.container.outerWidth(!1)-q),w={left:n,width:e},u?(w.top=c.top-f,w.bottom="auto",this.container.addClass("select2-drop-above"),b.addClass("select2-drop-above")):(w.top=m,w.bottom="auto",this.container.removeClass("select2-drop-above"),b.removeClass("select2-drop-above")),w=a.extend(w,K(this.opts.dropdownCss)),b.css(w)},shouldOpen:function(){var b;return this.opened()?!1:this._enabled===!1||this._readonly===!0?!1:(b=a.Event("select2-opening"),this.opts.element.trigger(b),!b.isDefaultPrevented())},clearDropdownAlignmentPreference:function(){this.container.removeClass("select2-drop-above"),this.dropdown.removeClass("select2-drop-above")},open:function(){return this.shouldOpen()?(this.opening(),!0):!1},opening:function(){var f,b=this.containerEventName,c="scroll."+b,d="resize."+b,e="orientationchange."+b;this.container.addClass("select2-dropdown-open").addClass("select2-container-active"),this.clearDropdownAlignmentPreference(),this.dropdown[0]!==this.body.children().last()[0]&&this.dropdown.detach().appendTo(this.body),f=a("#select2-drop-mask"),0==f.length&&(f=a(document.createElement("div")),f.attr("id","select2-drop-mask").attr("class","select2-drop-mask"),f.hide(),f.appendTo(this.body),f.on("mousedown touchstart click",function(b){n(f);var d,c=a("#select2-drop");c.length>0&&(d=c.data("select2"),d.opts.selectOnBlur&&d.selectHighlighted({noFocus:!0}),d.close(),b.preventDefault(),b.stopPropagation())})),this.dropdown.prev()[0]!==f[0]&&this.dropdown.before(f),a("#select2-drop").removeAttr("id"),this.dropdown.attr("id","select2-drop"),f.show(),this.positionDropdown(),this.dropdown.show(),this.positionDropdown(),this.dropdown.addClass("select2-drop-active");var g=this;this.container.parents().add(window).each(function(){a(this).on(d+" "+c+" "+e,function(){g.opened()&&g.positionDropdown()})})},close:function(){if(this.opened()){var b=this.containerEventName,c="scroll."+b,d="resize."+b,e="orientationchange."+b;this.container.parents().add(window).each(function(){a(this).off(c).off(d).off(e)}),this.clearDropdownAlignmentPreference(),a("#select2-drop-mask").hide(),this.dropdown.removeAttr("id"),this.dropdown.hide(),this.container.removeClass("select2-dropdown-open").removeClass("select2-container-active"),this.results.empty(),this.clearSearch(),this.search.removeClass("select2-active"),this.opts.element.trigger(a.Event("select2-close"))}},externalSearch:function(a){this.open(),this.search.val(a),this.updateResults(!1)},clearSearch:function(){},getMaximumSelectionSize:function(){return K(this.opts.maximumSelectionSize)},ensureHighlightVisible:function(){var c,d,e,f,g,h,i,b=this.results;if(d=this.highlight(),!(0>d)){if(0==d)return b.scrollTop(0),void 0;c=this.findHighlightableChoices().find(".select2-result-label"),e=a(c[d]),f=e.offset().top+e.outerHeight(!0),d===c.length-1&&(i=b.find("li.select2-more-results"),i.length>0&&(f=i.offset().top+i.outerHeight(!0))),g=b.offset().top+b.outerHeight(!0),f>g&&b.scrollTop(b.scrollTop()+(f-g)),h=e.offset().top-b.offset().top,0>h&&"none"!=e.css("display")&&b.scrollTop(b.scrollTop()+h)}},findHighlightableChoices:function(){return this.results.find(".select2-result-selectable:not(.select2-disabled):not(.select2-selected)")},moveHighlight:function(b){for(var c=this.findHighlightableChoices(),d=this.highlight();d>-1&&d<c.length;){d+=b;var e=a(c[d]);if(e.hasClass("select2-result-selectable")&&!e.hasClass("select2-disabled")&&!e.hasClass("select2-selected")){this.highlight(d);break}}},highlight:function(b){var d,e,c=this.findHighlightableChoices();return 0===arguments.length?p(c.filter(".select2-highlighted")[0],c.get()):(b>=c.length&&(b=c.length-1),0>b&&(b=0),this.removeHighlight(),d=a(c[b]),d.addClass("select2-highlighted"),this.search.attr("aria-activedescendant",d.find(".select2-result-label").attr("id")),this.ensureHighlightVisible(),this.liveRegion.text(d.text()),e=d.data("select2-data"),e&&this.opts.element.trigger({type:"select2-highlight",val:this.id(e),choice:e}),void 0)},removeHighlight:function(){this.results.find(".select2-highlighted").removeClass("select2-highlighted")},touchMoved:function(){this._touchMoved=!0},clearTouchMoved:function(){this._touchMoved=!1},countSelectableResults:function(){return this.findHighlightableChoices().length
},highlightUnderEvent:function(b){var c=a(b.target).closest(".select2-result-selectable");if(c.length>0&&!c.is(".select2-highlighted")){var d=this.findHighlightableChoices();this.highlight(d.index(c))}else 0==c.length&&this.removeHighlight()},loadMoreIfNeeded:function(){var c,a=this.results,b=a.find("li.select2-more-results"),d=this.resultsPage+1,e=this,f=this.search.val(),g=this.context;0!==b.length&&(c=b.offset().top-a.offset().top-a.height(),c<=this.opts.loadMorePadding&&(b.addClass("select2-active"),this.opts.query({element:this.opts.element,term:f,page:d,context:g,matcher:this.opts.matcher,callback:this.bind(function(c){e.opened()&&(e.opts.populateResults.call(this,a,c.results,{term:f,page:d,context:g}),e.postprocessResults(c,!1,!1),c.more===!0?(b.detach().appendTo(a).text(K(e.opts.formatLoadMore,d+1)),window.setTimeout(function(){e.loadMoreIfNeeded()},10)):b.remove(),e.positionDropdown(),e.resultsPage=d,e.context=c.context,this.opts.element.trigger({type:"select2-loaded",items:c}))})})))},tokenize:function(){},updateResults:function(c){function m(){d.removeClass("select2-active"),h.positionDropdown(),e.find(".select2-no-results,.select2-selection-limit,.select2-searching").length?h.liveRegion.text(e.text()):h.liveRegion.text(h.opts.formatMatches(e.find(".select2-result-selectable").length))}function n(a){e.html(a),m()}var g,i,l,d=this.search,e=this.results,f=this.opts,h=this,j=d.val(),k=a.data(this.container,"select2-last-term");if((c===!0||!k||!r(j,k))&&(a.data(this.container,"select2-last-term",j),c===!0||this.showSearchInput!==!1&&this.opened())){l=++this.queryCount;var o=this.getMaximumSelectionSize();if(o>=1&&(g=this.data(),a.isArray(g)&&g.length>=o&&J(f.formatSelectionTooBig,"formatSelectionTooBig")))return n("<li class='select2-selection-limit'>"+K(f.formatSelectionTooBig,o)+"</li>"),void 0;if(d.val().length<f.minimumInputLength)return J(f.formatInputTooShort,"formatInputTooShort")?n("<li class='select2-no-results'>"+K(f.formatInputTooShort,d.val(),f.minimumInputLength)+"</li>"):n(""),c&&this.showSearch&&this.showSearch(!0),void 0;if(f.maximumInputLength&&d.val().length>f.maximumInputLength)return J(f.formatInputTooLong,"formatInputTooLong")?n("<li class='select2-no-results'>"+K(f.formatInputTooLong,d.val(),f.maximumInputLength)+"</li>"):n(""),void 0;f.formatSearching&&0===this.findHighlightableChoices().length&&n("<li class='select2-searching'>"+K(f.formatSearching)+"</li>"),d.addClass("select2-active"),this.removeHighlight(),i=this.tokenize(),i!=b&&null!=i&&d.val(i),this.resultsPage=1,f.query({element:f.element,term:d.val(),page:this.resultsPage,context:null,matcher:f.matcher,callback:this.bind(function(g){var i;if(l==this.queryCount){if(!this.opened())return this.search.removeClass("select2-active"),void 0;if(this.context=g.context===b?null:g.context,this.opts.createSearchChoice&&""!==d.val()&&(i=this.opts.createSearchChoice.call(h,d.val(),g.results),i!==b&&null!==i&&h.id(i)!==b&&null!==h.id(i)&&0===a(g.results).filter(function(){return r(h.id(this),h.id(i))}).length&&this.opts.createSearchChoicePosition(g.results,i)),0===g.results.length&&J(f.formatNoMatches,"formatNoMatches"))return n("<li class='select2-no-results'>"+K(f.formatNoMatches,d.val())+"</li>"),void 0;e.empty(),h.opts.populateResults.call(this,e,g.results,{term:d.val(),page:this.resultsPage,context:null}),g.more===!0&&J(f.formatLoadMore,"formatLoadMore")&&(e.append("<li class='select2-more-results'>"+h.opts.escapeMarkup(K(f.formatLoadMore,this.resultsPage))+"</li>"),window.setTimeout(function(){h.loadMoreIfNeeded()},10)),this.postprocessResults(g,c),m(),this.opts.element.trigger({type:"select2-loaded",items:g})}})})}},cancel:function(){this.close()},blur:function(){this.opts.selectOnBlur&&this.selectHighlighted({noFocus:!0}),this.close(),this.container.removeClass("select2-container-active"),this.search[0]===document.activeElement&&this.search.blur(),this.clearSearch(),this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus")},focusSearch:function(){y(this.search)},selectHighlighted:function(a){if(this._touchMoved)return this.clearTouchMoved(),void 0;var b=this.highlight(),c=this.results.find(".select2-highlighted"),d=c.closest(".select2-result").data("select2-data");d?(this.highlight(b),this.onSelect(d,a)):a&&a.noFocus&&this.close()},getPlaceholder:function(){var a;return this.opts.element.attr("placeholder")||this.opts.element.attr("data-placeholder")||this.opts.element.data("placeholder")||this.opts.placeholder||((a=this.getPlaceholderOption())!==b?a.text():b)},getPlaceholderOption:function(){if(this.select){var c=this.select.children("option").first();if(this.opts.placeholderOption!==b)return"first"===this.opts.placeholderOption&&c||"function"==typeof this.opts.placeholderOption&&this.opts.placeholderOption(this.select);if(""===a.trim(c.text())&&""===c.val())return c}},initContainerWidth:function(){function c(){var c,d,e,f,g,h;if("off"===this.opts.width)return null;if("element"===this.opts.width)return 0===this.opts.element.outerWidth(!1)?"auto":this.opts.element.outerWidth(!1)+"px";if("copy"===this.opts.width||"resolve"===this.opts.width){if(c=this.opts.element.attr("style"),c!==b)for(d=c.split(";"),f=0,g=d.length;g>f;f+=1)if(h=d[f].replace(/\s/g,""),e=h.match(/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i),null!==e&&e.length>=1)return e[1];return"resolve"===this.opts.width?(c=this.opts.element.css("width"),c.indexOf("%")>0?c:0===this.opts.element.outerWidth(!1)?"auto":this.opts.element.outerWidth(!1)+"px"):null}return a.isFunction(this.opts.width)?this.opts.width():this.opts.width}var d=c.call(this);null!==d&&this.container.css("width",d)}}),e=O(d,{createContainer:function(){var b=a(document.createElement("div")).attr({"class":"select2-container"}).html(["<a href='javascript:void(0)' class='select2-choice' tabindex='-1'>","   <span class='select2-chosen'>&#160;</span><abbr class='select2-search-choice-close'></abbr>","   <span class='select2-arrow' role='presentation'><b role='presentation'></b></span>","</a>","<label for='' class='select2-offscreen'></label>","<input class='select2-focusser select2-offscreen' type='text' aria-haspopup='true' role='button' />","<div class='select2-drop select2-display-none'>","   <div class='select2-search'>","       <label for='' class='select2-offscreen'></label>","       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input' role='combobox' aria-expanded='true'","       aria-autocomplete='list' />","   </div>","   <ul class='select2-results' role='listbox'>","   </ul>","</div>"].join(""));return b},enableInterface:function(){this.parent.enableInterface.apply(this,arguments)&&this.focusser.prop("disabled",!this.isInterfaceEnabled())},opening:function(){var c,d,e;this.opts.minimumResultsForSearch>=0&&this.showSearch(!0),this.parent.opening.apply(this,arguments),this.showSearchInput!==!1&&this.search.val(this.focusser.val()),this.opts.shouldFocusInput(this)&&(this.search.focus(),c=this.search.get(0),c.createTextRange?(d=c.createTextRange(),d.collapse(!1),d.select()):c.setSelectionRange&&(e=this.search.val().length,c.setSelectionRange(e,e))),""===this.search.val()&&this.nextSearchTerm!=b&&(this.search.val(this.nextSearchTerm),this.search.select()),this.focusser.prop("disabled",!0).val(""),this.updateResults(!0),this.opts.element.trigger(a.Event("select2-open"))},close:function(){this.opened()&&(this.parent.close.apply(this,arguments),this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus())},focus:function(){this.opened()?this.close():(this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus())},isFocused:function(){return this.container.hasClass("select2-container-active")},cancel:function(){this.parent.cancel.apply(this,arguments),this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus()},destroy:function(){a("label[for='"+this.focusser.attr("id")+"']").attr("for",this.opts.element.attr("id")),this.parent.destroy.apply(this,arguments),N.call(this,"selection","focusser")},initContainer:function(){var b,h,d=this.container,e=this.dropdown,f=g();this.opts.minimumResultsForSearch<0?this.showSearch(!1):this.showSearch(!0),this.selection=b=d.find(".select2-choice"),this.focusser=d.find(".select2-focusser"),b.find(".select2-chosen").attr("id","select2-chosen-"+f),this.focusser.attr("aria-labelledby","select2-chosen-"+f),this.results.attr("id","select2-results-"+f),this.search.attr("aria-owns","select2-results-"+f),this.focusser.attr("id","s2id_autogen"+f),h=a("label[for='"+this.opts.element.attr("id")+"']"),this.focusser.prev().text(h.text()).attr("for",this.focusser.attr("id"));var i=this.opts.element.attr("title");this.opts.element.attr("title",i||h.text()),this.focusser.attr("tabindex",this.elementTabIndex),this.search.attr("id",this.focusser.attr("id")+"_search"),this.search.prev().text(a("label[for='"+this.focusser.attr("id")+"']").text()).attr("for",this.search.attr("id")),this.search.on("keydown",this.bind(function(a){if(this.isInterfaceEnabled()){if(a.which===c.PAGE_UP||a.which===c.PAGE_DOWN)return A(a),void 0;switch(a.which){case c.UP:case c.DOWN:return this.moveHighlight(a.which===c.UP?-1:1),A(a),void 0;case c.ENTER:return this.selectHighlighted(),A(a),void 0;case c.TAB:return this.selectHighlighted({noFocus:!0}),void 0;case c.ESC:return this.cancel(a),A(a),void 0}}})),this.search.on("blur",this.bind(function(){document.activeElement===this.body.get(0)&&window.setTimeout(this.bind(function(){this.opened()&&this.search.focus()}),0)})),this.focusser.on("keydown",this.bind(function(a){if(this.isInterfaceEnabled()&&a.which!==c.TAB&&!c.isControl(a)&&!c.isFunctionKey(a)&&a.which!==c.ESC){if(this.opts.openOnEnter===!1&&a.which===c.ENTER)return A(a),void 0;if(a.which==c.DOWN||a.which==c.UP||a.which==c.ENTER&&this.opts.openOnEnter){if(a.altKey||a.ctrlKey||a.shiftKey||a.metaKey)return;return this.open(),A(a),void 0}return a.which==c.DELETE||a.which==c.BACKSPACE?(this.opts.allowClear&&this.clear(),A(a),void 0):void 0}})),u(this.focusser),this.focusser.on("keyup-change input",this.bind(function(a){if(this.opts.minimumResultsForSearch>=0){if(a.stopPropagation(),this.opened())return;this.open()}})),b.on("mousedown touchstart","abbr",this.bind(function(a){this.isInterfaceEnabled()&&(this.clear(),B(a),this.close(),this.selection.focus())})),b.on("mousedown touchstart",this.bind(function(c){n(b),this.container.hasClass("select2-container-active")||this.opts.element.trigger(a.Event("select2-focus")),this.opened()?this.close():this.isInterfaceEnabled()&&this.open(),A(c)})),e.on("mousedown touchstart",this.bind(function(){this.opts.shouldFocusInput(this)&&this.search.focus()})),b.on("focus",this.bind(function(a){A(a)})),this.focusser.on("focus",this.bind(function(){this.container.hasClass("select2-container-active")||this.opts.element.trigger(a.Event("select2-focus")),this.container.addClass("select2-container-active")})).on("blur",this.bind(function(){this.opened()||(this.container.removeClass("select2-container-active"),this.opts.element.trigger(a.Event("select2-blur")))})),this.search.on("focus",this.bind(function(){this.container.hasClass("select2-container-active")||this.opts.element.trigger(a.Event("select2-focus")),this.container.addClass("select2-container-active")})),this.initContainerWidth(),this.opts.element.addClass("select2-offscreen"),this.setPlaceholder()},clear:function(b){var c=this.selection.data("select2-data");if(c){var d=a.Event("select2-clearing");if(this.opts.element.trigger(d),d.isDefaultPrevented())return;var e=this.getPlaceholderOption();this.opts.element.val(e?e.val():""),this.selection.find(".select2-chosen").empty(),this.selection.removeData("select2-data"),this.setPlaceholder(),b!==!1&&(this.opts.element.trigger({type:"select2-removed",val:this.id(c),choice:c}),this.triggerChange({removed:c}))}},initSelection:function(){if(this.isPlaceholderOptionSelected())this.updateSelection(null),this.close(),this.setPlaceholder();else{var c=this;this.opts.initSelection.call(null,this.opts.element,function(a){a!==b&&null!==a&&(c.updateSelection(a),c.close(),c.setPlaceholder(),c.nextSearchTerm=c.opts.nextSearchTerm(a,c.search.val()))})}},isPlaceholderOptionSelected:function(){var a;return this.getPlaceholder()===b?!1:(a=this.getPlaceholderOption())!==b&&a.prop("selected")||""===this.opts.element.val()||this.opts.element.val()===b||null===this.opts.element.val()},prepareOpts:function(){var b=this.parent.prepareOpts.apply(this,arguments),c=this;return"select"===b.element.get(0).tagName.toLowerCase()?b.initSelection=function(a,b){var d=a.find("option").filter(function(){return this.selected&&!this.disabled});b(c.optionToData(d))}:"data"in b&&(b.initSelection=b.initSelection||function(c,d){var e=c.val(),f=null;b.query({matcher:function(a,c,d){var g=r(e,b.id(d));return g&&(f=d),g},callback:a.isFunction(d)?function(){d(f)}:a.noop})}),b},getPlaceholder:function(){return this.select&&this.getPlaceholderOption()===b?b:this.parent.getPlaceholder.apply(this,arguments)},setPlaceholder:function(){var a=this.getPlaceholder();if(this.isPlaceholderOptionSelected()&&a!==b){if(this.select&&this.getPlaceholderOption()===b)return;this.selection.find(".select2-chosen").html(this.opts.escapeMarkup(a)),this.selection.addClass("select2-default"),this.container.removeClass("select2-allowclear")}},postprocessResults:function(a,b,c){var d=0,e=this;if(this.findHighlightableChoices().each2(function(a,b){return r(e.id(b.data("select2-data")),e.opts.element.val())?(d=a,!1):void 0}),c!==!1&&(b===!0&&d>=0?this.highlight(d):this.highlight(0)),b===!0){var g=this.opts.minimumResultsForSearch;g>=0&&this.showSearch(L(a.results)>=g)}},showSearch:function(b){this.showSearchInput!==b&&(this.showSearchInput=b,this.dropdown.find(".select2-search").toggleClass("select2-search-hidden",!b),this.dropdown.find(".select2-search").toggleClass("select2-offscreen",!b),a(this.dropdown,this.container).toggleClass("select2-with-searchbox",b))},onSelect:function(a,b){if(this.triggerSelect(a)){var c=this.opts.element.val(),d=this.data();this.opts.element.val(this.id(a)),this.updateSelection(a),this.opts.element.trigger({type:"select2-selected",val:this.id(a),choice:a}),this.nextSearchTerm=this.opts.nextSearchTerm(a,this.search.val()),this.close(),b&&b.noFocus||!this.opts.shouldFocusInput(this)||this.focusser.focus(),r(c,this.id(a))||this.triggerChange({added:a,removed:d})}},updateSelection:function(a){var d,e,c=this.selection.find(".select2-chosen");this.selection.data("select2-data",a),c.empty(),null!==a&&(d=this.opts.formatSelection(a,c,this.opts.escapeMarkup)),d!==b&&c.append(d),e=this.opts.formatSelectionCssClass(a,c),e!==b&&c.addClass(e),this.selection.removeClass("select2-default"),this.opts.allowClear&&this.getPlaceholder()!==b&&this.container.addClass("select2-allowclear")},val:function(){var a,c=!1,d=null,e=this,f=this.data();if(0===arguments.length)return this.opts.element.val();if(a=arguments[0],arguments.length>1&&(c=arguments[1]),this.select)this.select.val(a).find("option").filter(function(){return this.selected}).each2(function(a,b){return d=e.optionToData(b),!1}),this.updateSelection(d),this.setPlaceholder(),c&&this.triggerChange({added:d,removed:f});else{if(!a&&0!==a)return this.clear(c),void 0;if(this.opts.initSelection===b)throw new Error("cannot call val() if initSelection() is not defined");this.opts.element.val(a),this.opts.initSelection(this.opts.element,function(a){e.opts.element.val(a?e.id(a):""),e.updateSelection(a),e.setPlaceholder(),c&&e.triggerChange({added:a,removed:f})})}},clearSearch:function(){this.search.val(""),this.focusser.val("")},data:function(a){var c,d=!1;return 0===arguments.length?(c=this.selection.data("select2-data"),c==b&&(c=null),c):(arguments.length>1&&(d=arguments[1]),a?(c=this.data(),this.opts.element.val(a?this.id(a):""),this.updateSelection(a),d&&this.triggerChange({added:a,removed:c})):this.clear(d),void 0)}}),f=O(d,{createContainer:function(){var b=a(document.createElement("div")).attr({"class":"select2-container select2-container-multi"}).html(["<ul class='select2-choices'>","  <li class='select2-search-field'>","    <label for='' class='select2-offscreen'></label>","    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>","  </li>","</ul>","<div class='select2-drop select2-drop-multi select2-display-none'>","   <ul class='select2-results'>","   </ul>","</div>"].join(""));return b},prepareOpts:function(){var b=this.parent.prepareOpts.apply(this,arguments),c=this;return"select"===b.element.get(0).tagName.toLowerCase()?b.initSelection=function(a,b){var d=[];a.find("option").filter(function(){return this.selected&&!this.disabled}).each2(function(a,b){d.push(c.optionToData(b))}),b(d)}:"data"in b&&(b.initSelection=b.initSelection||function(c,d){var e=s(c.val(),b.separator),f=[];b.query({matcher:function(c,d,g){var h=a.grep(e,function(a){return r(a,b.id(g))}).length;return h&&f.push(g),h},callback:a.isFunction(d)?function(){for(var a=[],c=0;c<e.length;c++)for(var g=e[c],h=0;h<f.length;h++){var i=f[h];if(r(g,b.id(i))){a.push(i),f.splice(h,1);break}}d(a)}:a.noop})}),b},selectChoice:function(a){var b=this.container.find(".select2-search-choice-focus");b.length&&a&&a[0]==b[0]||(b.length&&this.opts.element.trigger("choice-deselected",b),b.removeClass("select2-search-choice-focus"),a&&a.length&&(this.close(),a.addClass("select2-search-choice-focus"),this.opts.element.trigger("choice-selected",a)))},destroy:function(){a("label[for='"+this.search.attr("id")+"']").attr("for",this.opts.element.attr("id")),this.parent.destroy.apply(this,arguments),N.call(this,"searchContainer","selection")},initContainer:function(){var d,b=".select2-choices";this.searchContainer=this.container.find(".select2-search-field"),this.selection=d=this.container.find(b);var e=this;this.selection.on("click",".select2-search-choice:not(.select2-locked)",function(){e.search[0].focus(),e.selectChoice(a(this))}),this.search.attr("id","s2id_autogen"+g()),this.search.prev().text(a("label[for='"+this.opts.element.attr("id")+"']").text()).attr("for",this.search.attr("id")),this.search.on("input paste",this.bind(function(){this.isInterfaceEnabled()&&(this.opened()||this.open())})),this.search.attr("tabindex",this.elementTabIndex),this.keydowns=0,this.search.on("keydown",this.bind(function(a){if(this.isInterfaceEnabled()){++this.keydowns;var b=d.find(".select2-search-choice-focus"),e=b.prev(".select2-search-choice:not(.select2-locked)"),f=b.next(".select2-search-choice:not(.select2-locked)"),g=z(this.search);if(b.length&&(a.which==c.LEFT||a.which==c.RIGHT||a.which==c.BACKSPACE||a.which==c.DELETE||a.which==c.ENTER)){var h=b;return a.which==c.LEFT&&e.length?h=e:a.which==c.RIGHT?h=f.length?f:null:a.which===c.BACKSPACE?this.unselect(b.first())&&(this.search.width(10),h=e.length?e:f):a.which==c.DELETE?this.unselect(b.first())&&(this.search.width(10),h=f.length?f:null):a.which==c.ENTER&&(h=null),this.selectChoice(h),A(a),h&&h.length||this.open(),void 0}if((a.which===c.BACKSPACE&&1==this.keydowns||a.which==c.LEFT)&&0==g.offset&&!g.length)return this.selectChoice(d.find(".select2-search-choice:not(.select2-locked)").last()),A(a),void 0;if(this.selectChoice(null),this.opened())switch(a.which){case c.UP:case c.DOWN:return this.moveHighlight(a.which===c.UP?-1:1),A(a),void 0;case c.ENTER:return this.selectHighlighted(),A(a),void 0;case c.TAB:return this.selectHighlighted({noFocus:!0}),this.close(),void 0;case c.ESC:return this.cancel(a),A(a),void 0}if(a.which!==c.TAB&&!c.isControl(a)&&!c.isFunctionKey(a)&&a.which!==c.BACKSPACE&&a.which!==c.ESC){if(a.which===c.ENTER){if(this.opts.openOnEnter===!1)return;if(a.altKey||a.ctrlKey||a.shiftKey||a.metaKey)return}this.open(),(a.which===c.PAGE_UP||a.which===c.PAGE_DOWN)&&A(a),a.which===c.ENTER&&A(a)}}})),this.search.on("keyup",this.bind(function(){this.keydowns=0,this.resizeSearch()})),this.search.on("blur",this.bind(function(b){this.container.removeClass("select2-container-active"),this.search.removeClass("select2-focused"),this.selectChoice(null),this.opened()||this.clearSearch(),b.stopImmediatePropagation(),this.opts.element.trigger(a.Event("select2-blur"))})),this.container.on("click",b,this.bind(function(b){this.isInterfaceEnabled()&&(a(b.target).closest(".select2-search-choice").length>0||(this.selectChoice(null),this.clearPlaceholder(),this.container.hasClass("select2-container-active")||this.opts.element.trigger(a.Event("select2-focus")),this.open(),this.focusSearch(),b.preventDefault()))})),this.container.on("focus",b,this.bind(function(){this.isInterfaceEnabled()&&(this.container.hasClass("select2-container-active")||this.opts.element.trigger(a.Event("select2-focus")),this.container.addClass("select2-container-active"),this.dropdown.addClass("select2-drop-active"),this.clearPlaceholder())})),this.initContainerWidth(),this.opts.element.addClass("select2-offscreen"),this.clearSearch()},enableInterface:function(){this.parent.enableInterface.apply(this,arguments)&&this.search.prop("disabled",!this.isInterfaceEnabled())},initSelection:function(){if(""===this.opts.element.val()&&""===this.opts.element.text()&&(this.updateSelection([]),this.close(),this.clearSearch()),this.select||""!==this.opts.element.val()){var c=this;this.opts.initSelection.call(null,this.opts.element,function(a){a!==b&&null!==a&&(c.updateSelection(a),c.close(),c.clearSearch())})}},clearSearch:function(){var a=this.getPlaceholder(),c=this.getMaxSearchWidth();a!==b&&0===this.getVal().length&&this.search.hasClass("select2-focused")===!1?(this.search.val(a).addClass("select2-default"),this.search.width(c>0?c:this.container.css("width"))):this.search.val("").width(10)},clearPlaceholder:function(){this.search.hasClass("select2-default")&&this.search.val("").removeClass("select2-default")},opening:function(){this.clearPlaceholder(),this.resizeSearch(),this.parent.opening.apply(this,arguments),this.focusSearch(),""===this.search.val()&&this.nextSearchTerm!=b&&(this.search.val(this.nextSearchTerm),this.search.select()),this.updateResults(!0),this.opts.shouldFocusInput(this)&&this.search.focus(),this.opts.element.trigger(a.Event("select2-open"))},close:function(){this.opened()&&this.parent.close.apply(this,arguments)},focus:function(){this.close(),this.search.focus()},isFocused:function(){return this.search.hasClass("select2-focused")},updateSelection:function(b){var c=[],d=[],e=this;a(b).each(function(){p(e.id(this),c)<0&&(c.push(e.id(this)),d.push(this))}),b=d,this.selection.find(".select2-search-choice").remove(),a(b).each(function(){e.addSelectedChoice(this)}),e.postprocessResults()},tokenize:function(){var a=this.search.val();a=this.opts.tokenizer.call(this,a,this.data(),this.bind(this.onSelect),this.opts),null!=a&&a!=b&&(this.search.val(a),a.length>0&&this.open())},onSelect:function(a,c){this.triggerSelect(a)&&(this.addSelectedChoice(a),this.opts.element.trigger({type:"selected",val:this.id(a),choice:a}),this.nextSearchTerm=this.opts.nextSearchTerm(a,this.search.val()),this.clearSearch(),this.updateResults(),(this.select||!this.opts.closeOnSelect)&&this.postprocessResults(a,!1,this.opts.closeOnSelect===!0),this.opts.closeOnSelect?(this.close(),this.search.width(10)):this.countSelectableResults()>0?(this.search.width(10),this.resizeSearch(),this.getMaximumSelectionSize()>0&&this.val().length>=this.getMaximumSelectionSize()?this.updateResults(!0):this.nextSearchTerm!=b&&(this.search.val(this.nextSearchTerm),this.updateResults(),this.search.select()),this.positionDropdown()):(this.close(),this.search.width(10)),this.triggerChange({added:a}),c&&c.noFocus||this.focusSearch())},cancel:function(){this.close(),this.focusSearch()},addSelectedChoice:function(c){var j,k,d=!c.locked,e=a("<li class='select2-search-choice'>    <div></div>    <a href='#' class='select2-search-choice-close' tabindex='-1'></a></li>"),f=a("<li class='select2-search-choice select2-locked'><div></div></li>"),g=d?e:f,h=this.id(c),i=this.getVal();j=this.opts.formatSelection(c,g.find("div"),this.opts.escapeMarkup),j!=b&&g.find("div").replaceWith("<div>"+j+"</div>"),k=this.opts.formatSelectionCssClass(c,g.find("div")),k!=b&&g.addClass(k),d&&g.find(".select2-search-choice-close").on("mousedown",A).on("click dblclick",this.bind(function(b){this.isInterfaceEnabled()&&(this.unselect(a(b.target)),this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus"),A(b),this.close(),this.focusSearch())})).on("focus",this.bind(function(){this.isInterfaceEnabled()&&(this.container.addClass("select2-container-active"),this.dropdown.addClass("select2-drop-active"))})),g.data("select2-data",c),g.insertBefore(this.searchContainer),i.push(h),this.setVal(i)},unselect:function(b){var d,e,c=this.getVal();if(b=b.closest(".select2-search-choice"),0===b.length)throw"Invalid argument: "+b+". Must be .select2-search-choice";if(d=b.data("select2-data")){var f=a.Event("select2-removing");if(f.val=this.id(d),f.choice=d,this.opts.element.trigger(f),f.isDefaultPrevented())return!1;for(;(e=p(this.id(d),c))>=0;)c.splice(e,1),this.setVal(c),this.select&&this.postprocessResults();return b.remove(),this.opts.element.trigger({type:"select2-removed",val:this.id(d),choice:d}),this.triggerChange({removed:d}),!0}},postprocessResults:function(a,b,c){var d=this.getVal(),e=this.results.find(".select2-result"),f=this.results.find(".select2-result-with-children"),g=this;e.each2(function(a,b){var c=g.id(b.data("select2-data"));p(c,d)>=0&&(b.addClass("select2-selected"),b.find(".select2-result-selectable").addClass("select2-selected"))}),f.each2(function(a,b){b.is(".select2-result-selectable")||0!==b.find(".select2-result-selectable:not(.select2-selected)").length||b.addClass("select2-selected")}),-1==this.highlight()&&c!==!1&&g.highlight(0),!this.opts.createSearchChoice&&!e.filter(".select2-result:not(.select2-selected)").length>0&&(!a||a&&!a.more&&0===this.results.find(".select2-no-results").length)&&J(g.opts.formatNoMatches,"formatNoMatches")&&this.results.append("<li class='select2-no-results'>"+K(g.opts.formatNoMatches,g.search.val())+"</li>")},getMaxSearchWidth:function(){return this.selection.width()-t(this.search)},resizeSearch:function(){var a,b,c,d,e,f=t(this.search);a=C(this.search)+10,b=this.search.offset().left,c=this.selection.width(),d=this.selection.offset().left,e=c-(b-d)-f,a>e&&(e=c-f),40>e&&(e=c-f),0>=e&&(e=a),this.search.width(Math.floor(e))},getVal:function(){var a;return this.select?(a=this.select.val(),null===a?[]:a):(a=this.opts.element.val(),s(a,this.opts.separator))},setVal:function(b){var c;this.select?this.select.val(b):(c=[],a(b).each(function(){p(this,c)<0&&c.push(this)}),this.opts.element.val(0===c.length?"":c.join(this.opts.separator)))},buildChangeDetails:function(a,b){for(var b=b.slice(0),a=a.slice(0),c=0;c<b.length;c++)for(var d=0;d<a.length;d++)r(this.opts.id(b[c]),this.opts.id(a[d]))&&(b.splice(c,1),c>0&&c--,a.splice(d,1),d--);return{added:b,removed:a}},val:function(c,d){var e,f=this;if(0===arguments.length)return this.getVal();if(e=this.data(),e.length||(e=[]),!c&&0!==c)return this.opts.element.val(""),this.updateSelection([]),this.clearSearch(),d&&this.triggerChange({added:this.data(),removed:e}),void 0;if(this.setVal(c),this.select)this.opts.initSelection(this.select,this.bind(this.updateSelection)),d&&this.triggerChange(this.buildChangeDetails(e,this.data()));else{if(this.opts.initSelection===b)throw new Error("val() cannot be called if initSelection() is not defined");this.opts.initSelection(this.opts.element,function(b){var c=a.map(b,f.id);f.setVal(c),f.updateSelection(b),f.clearSearch(),d&&f.triggerChange(f.buildChangeDetails(e,f.data()))})}this.clearSearch()},onSortStart:function(){if(this.select)throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");this.search.width(0),this.searchContainer.hide()},onSortEnd:function(){var b=[],c=this;this.searchContainer.show(),this.searchContainer.appendTo(this.searchContainer.parent()),this.resizeSearch(),this.selection.find(".select2-search-choice").each(function(){b.push(c.opts.id(a(this).data("select2-data")))}),this.setVal(b),this.triggerChange()},data:function(b,c){var e,f,d=this;return 0===arguments.length?this.selection.children(".select2-search-choice").map(function(){return a(this).data("select2-data")}).get():(f=this.data(),b||(b=[]),e=a.map(b,function(a){return d.opts.id(a)}),this.setVal(e),this.updateSelection(b),this.clearSearch(),c&&this.triggerChange(this.buildChangeDetails(f,this.data())),void 0)}}),a.fn.select2=function(){var d,e,f,g,h,c=Array.prototype.slice.call(arguments,0),i=["val","destroy","opened","open","close","focus","isFocused","container","dropdown","onSortStart","onSortEnd","enable","disable","readonly","positionDropdown","data","search"],j=["opened","isFocused","container","dropdown"],k=["val","data"],l={search:"externalSearch"};return this.each(function(){if(0===c.length||"object"==typeof c[0])d=0===c.length?{}:a.extend({},c[0]),d.element=a(this),"select"===d.element.get(0).tagName.toLowerCase()?h=d.element.prop("multiple"):(h=d.multiple||!1,"tags"in d&&(d.multiple=h=!0)),e=h?new window.Select2["class"].multi:new window.Select2["class"].single,e.init(d);else{if("string"!=typeof c[0])throw"Invalid arguments to select2 plugin: "+c;if(p(c[0],i)<0)throw"Unknown method: "+c[0];if(g=b,e=a(this).data("select2"),e===b)return;if(f=c[0],"container"===f?g=e.container:"dropdown"===f?g=e.dropdown:(l[f]&&(f=l[f]),g=e[f].apply(e,c.slice(1))),p(c[0],j)>=0||p(c[0],k)>=0&&1==c.length)return!1}}),g===b?this:g},a.fn.select2.defaults={width:"copy",loadMorePadding:0,closeOnSelect:!0,openOnEnter:!0,containerCss:{},dropdownCss:{},containerCssClass:"",dropdownCssClass:"",formatResult:function(a,b,c,d){var e=[];return E(a.text,c.term,e,d),e.join("")},formatSelection:function(a,c,d){return a?d(a.text):b},sortResults:function(a){return a},formatResultCssClass:function(a){return a.css},formatSelectionCssClass:function(){return b},formatMatches:function(a){return a+" results are available, use up and down arrow keys to navigate."},formatNoMatches:function(){return"No matches found"},formatInputTooShort:function(a,b){var c=b-a.length;return"Please enter "+c+" or more character"+(1==c?"":"s")},formatInputTooLong:function(a,b){var c=a.length-b;return"Please delete "+c+" character"+(1==c?"":"s")},formatSelectionTooBig:function(a){return"You can only select "+a+" item"+(1==a?"":"s")},formatLoadMore:function(){return"Loading more results\u2026"},formatSearching:function(){return"Searching\u2026"},minimumResultsForSearch:0,minimumInputLength:0,maximumInputLength:null,maximumSelectionSize:0,id:function(a){return a==b?null:a.id},matcher:function(a,b){return o(""+b).toUpperCase().indexOf(o(""+a).toUpperCase())>=0},separator:",",tokenSeparators:[],tokenizer:M,escapeMarkup:F,blurOnChange:!1,selectOnBlur:!1,adaptContainerCssClass:function(a){return a},adaptDropdownCssClass:function(){return null},nextSearchTerm:function(){return b},searchInputPlaceholder:"",createSearchChoicePosition:"top",shouldFocusInput:function(a){var b="ontouchstart"in window||navigator.msMaxTouchPoints>0;return b?a.opts.minimumResultsForSearch<0?!1:!0:!0}},a.fn.select2.ajaxDefaults={transport:a.ajax,params:{type:"GET",cache:!1,dataType:"json"}},window.Select2={query:{ajax:G,local:H,tags:I},util:{debounce:w,markMatch:E,escapeMarkup:F,stripDiacritics:o},"class":{"abstract":d,single:e,multi:f}}}}(jQuery);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\select2\\select2.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./select2.min.js');
},{"./select2.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\select2\\select2.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\smartadmin\\notification\\SmartNotification.min.js":[function(require,module,exports){
/*! SmartAdmin - v1.4.1 - 2014-06-22 */
function SmartUnLoading() {
    $(".divMessageBox").fadeOut(300, function() {
        $(this).remove()
    }), $(".LoadingBoxContainer").fadeOut(300, function() {
        $(this).remove()
    })
}

function getInternetExplorerVersion() {
    var a = -1;
    if ("Microsoft Internet Explorer" == navigator.appName) {
        var b = navigator.userAgent,
            c = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})");
        null != c.exec(b) && (a = parseFloat(RegExp.$1))
    }
    return a
}

function checkVersion() {
    var a = "You're not using Windows Internet Explorer.",
        b = getInternetExplorerVersion();
    b > -1 && (a = b >= 8 ? "You're using a recent copy of Windows Internet Explorer." : "You should upgrade your copy of Windows Internet Explorer."), alert(a)
}

function isIE8orlower() {
    var a = "0",
        b = getInternetExplorerVersion();
    return b > -1 && (a = b >= 9 ? 0 : 1), a
}
$.sound_path = "sound/", $.sound_on = !0, jQuery(document).ready(function() {
    $("body").append("<div id='divSmallBoxes'></div>"), $("body").append("<div id='divMiniIcons'></div><div id='divbigBoxes'></div>")
});
var ExistMsg = 0,
    SmartMSGboxCount = 0,
    PrevTop = 0;
$.SmartMessageBox = function(a, b) {
    var c, d;
    a = $.extend({
        title: "",
        content: "",
        NormalButton: void 0,
        ActiveButton: void 0,
        buttons: void 0,
        input: void 0,
        inputValue: void 0,
        placeholder: "",
        options: void 0
    }, a);
    var e = 0;
    if (e = 1, 0 == isIE8orlower()) {
        var f = document.createElement("audio");
        f.setAttribute("src", $.sound_path + "messagebox.mp3"), $.get(), f.addEventListener("load", function() {
            f.play()
        }, !0), $.sound_on && (f.pause(), f.play())
    }
    SmartMSGboxCount += 1, 0 == ExistMsg && (ExistMsg = 1, c = "<div class='divMessageBox animated fadeIn fast' id='MsgBoxBack'></div>", $("body").append(c), 1 == isIE8orlower() && $("#MsgBoxBack").addClass("MessageIE"));
    var g = "",
        h = 0;
    if (void 0 != a.input) switch (h = 1, a.input = a.input.toLowerCase(), a.input) {
        case "text":
            a.inputValue = "string" === $.type(a.inputValue) ? a.inputValue.replace(/'/g, "&#x27;") : a.inputValue, g = "<input class='form-control' type='" + a.input + "' id='txt" + SmartMSGboxCount + "' placeholder='" + a.placeholder + "' value='" + a.inputValue + "'/><br/><br/>";
            break;
        case "password":
            g = "<input class='form-control' type='" + a.input + "' id='txt" + SmartMSGboxCount + "' placeholder='" + a.placeholder + "'/><br/><br/>";
            break;
        case "select":
            if (void 0 == a.options) alert("For this type of input, the options parameter is required.");
            else {
                g = "<select class='form-control' id='txt" + SmartMSGboxCount + "'>";
                for (var i = 0; i <= a.options.length - 1; i++) "[" == a.options[i] ? j = "" : "]" == a.options[i] ? (k += 1, j = "<option>" + j + "</option>", g += j) : j += a.options[i];
                g += "</select>"
            }
            break;
        default:
            alert("That type of input is not handled yet")
    }
    d = "<div class='MessageBoxContainer animated fadeIn fast' id='Msg" + SmartMSGboxCount + "'>", d += "<div class='MessageBoxMiddle'>", d += "<span class='MsgTitle'>" + a.title + "</span class='MsgTitle'>", d += "<p class='pText'>" + a.content + "</p>", d += g, d += "<div class='MessageBoxButtonSection'>", void 0 == a.buttons && (a.buttons = "[Accept]"), a.buttons = $.trim(a.buttons), a.buttons = a.buttons.split("");
    var j = "",
        k = 0;
    void 0 == a.NormalButton && (a.NormalButton = "#232323"), void 0 == a.ActiveButton && (a.ActiveButton = "#ed145b");
    for (var i = 0; i <= a.buttons.length - 1; i++) "[" == a.buttons[i] ? j = "" : "]" == a.buttons[i] ? (k += 1, j = "<button id='bot" + k + "-Msg" + SmartMSGboxCount + "' class='btn btn-default btn-sm botTempo' data-id=" + j + "> " + j + "</button>", d += j) : j += a.buttons[i];
    d += "</div>", d += "</div>", d += "</div>", SmartMSGboxCount > 1 && ($(".MessageBoxContainer").hide(), $(".MessageBoxContainer").css("z-index", 99999)), $(".divMessageBox").append(d), 1 == h && $("#txt" + SmartMSGboxCount).focus(), $(".botTempo").hover(function() {
        $(this).attr("id")
    }, function() {
        $(this).attr("id")
    }), $(".botTempo").click(function() {
        var a = $(this).attr("id"),
            c = a.substr(a.indexOf("-") + 1),
            d = $.trim($(this).text());
        if (1 == h) {
            if ("function" == typeof b) {
                var e = c.replace("Msg", ""),
                    f = $("#txt" + e).val();
                b && b(d, f)
            }
        } else "function" == typeof b && b && b(d);
        $("#" + c).addClass("animated fadeOut fast"), SmartMSGboxCount -= 1, 0 == SmartMSGboxCount && $("#MsgBoxBack").removeClass("fadeIn").addClass("fadeOut").delay(300).queue(function() {
            ExistMsg = 0, $(this).remove()
        })
    })
    $('.botTempo[data-id="Yes"]').focus();
    $('.botTempo[data-id="Dismiss"]').focus();
};
var BigBoxes = 0;
$.bigBox = function(a, b) {
    var c;
    if (a = $.extend({
        title: "",
        content: "",
        icon: void 0,
        number: void 0,
        color: void 0,
        sound: $.sound_on,
        sound_file: "bigbox",
        timeout: void 0,
        colortime: 1500,
        colors: void 0
    }, a), 1 == a.sound && 0 == isIE8orlower()) {
        var d = document.createElement("audio");
        navigator.userAgent.match("Firefox/") ? d.setAttribute("src", $.sound_path + a.sound_file + ".ogg") : d.setAttribute("src", $.sound_path + a.sound_file + ".mp3"), $.get(), d.addEventListener("load", function() {
            d.play()
        }, !0), $.sound_on && (d.pause(), d.play())
    }
    BigBoxes += 1, c = "<div id='bigBox" + BigBoxes + "' class='bigBox animated fadeIn fast'><div id='bigBoxColor" + BigBoxes + "'><i class='botClose fa fa-times' id='botClose" + BigBoxes + "'></i>", c += "<span>" + a.title + "</span>", c += "<p>" + a.content + "</p>", c += "<div class='bigboxicon'>", void 0 == a.icon && (a.icon = "fa fa-cloud"), c += "<i class='" + a.icon + "'></i>", c += "</div>", c += "<div class='bigboxnumber'>", void 0 != a.number && (c += a.number), c += "</div></div>", c += "</div>", $("#divbigBoxes").append(c), void 0 == a.color && (a.color = "#004d60"), $("#bigBox" + BigBoxes).css("background-color", a.color), $("#divMiniIcons").append("<div id='miniIcon" + BigBoxes + "' class='cajita animated fadeIn' style='background-color: " + a.color + ";'><i class='" + a.icon + "'/></i></div>"), $("#miniIcon" + BigBoxes).bind("click", function() {
        var a = $(this).attr("id"),
            b = a.replace("miniIcon", "bigBox"),
            c = a.replace("miniIcon", "bigBoxColor");
        $(".cajita").each(function() {
            var a = $(this).attr("id"),
                b = a.replace("miniIcon", "bigBox");
            $("#" + b).css("z-index", 9998)
        }), $("#" + b).css("z-index", 9999), $("#" + c).removeClass("animated fadeIn").delay(1).queue(function() {
            $(this).show(), $(this).addClass("animated fadeIn"), $(this).clearQueue()
        })
    });
    var e, f = $("#botClose" + BigBoxes),
        g = $("#bigBox" + BigBoxes),
        h = $("#miniIcon" + BigBoxes);
    if (void 0 != a.colors && a.colors.length > 0 && (f.attr("colorcount", "0"), e = setInterval(function() {
        var b = f.attr("colorcount");
        f.animate({
            backgroundColor: a.colors[b].color
        }), g.animate({
            backgroundColor: a.colors[b].color
        }), h.animate({
            backgroundColor: a.colors[b].color
        }), b < a.colors.length - 1 ? f.attr("colorcount", 1 * b + 1) : f.attr("colorcount", 0)
    }, a.colortime)), f.bind("click", function() {
        clearInterval(e), "function" == typeof b && b && b();
        var a = $(this).attr("id"),
            c = a.replace("botClose", "bigBox"),
            d = a.replace("botClose", "miniIcon");
        $("#" + c).removeClass("fadeIn fast"), $("#" + c).addClass("fadeOut fast").delay(300).queue(function() {
            $(this).clearQueue(), $(this).remove()
        }), $("#" + d).removeClass("fadeIn fast"), $("#" + d).addClass("fadeOut fast").delay(300).queue(function() {
            $(this).clearQueue(), $(this).remove()
        })
    }), void 0 != a.timeout) {
        var i = BigBoxes;
        setTimeout(function() {
            clearInterval(e), $("#bigBox" + i).removeClass("fadeIn fast"), $("#bigBox" + i).addClass("fadeOut fast").delay(300).queue(function() {
                $(this).clearQueue(), $(this).remove()
            }), $("#miniIcon" + i).removeClass("fadeIn fast"), $("#miniIcon" + i).addClass("fadeOut fast").delay(300).queue(function() {
                $(this).clearQueue(), $(this).remove()
            })
        }, a.timeout)
    }
};
var SmallBoxes = 0,
    SmallCount = 0,
    SmallBoxesAnchos = 0;
$.smallBox = function(a, b) {
    var c;
    if (a = $.extend({
        title: "",
        content: "",
        icon: void 0,
        iconSmall: void 0,
        sound: $.sound_on,
        sound_file: "smallbox",
        color: void 0,
        timeout: void 0,
        colortime: 1500,
        colors: void 0
    }, a), 1 == a.sound && 0 == isIE8orlower()) {
        var d = document.createElement("audio");
        navigator.userAgent.match("Firefox/") ? d.setAttribute("src", $.sound_path + a.sound_file + ".ogg") : d.setAttribute("src", $.sound_path + a.sound_file + ".mp3"), $.get(), d.addEventListener("load", function() {
            d.play()
        }, !0), $.sound_on && (d.pause(), d.play())
    }
    SmallBoxes += 1, c = "";
    var e = "",
        f = "smallbox" + SmallBoxes;
    if (e = void 0 == a.iconSmall ? "<div class='miniIcono'></div>" : "<div class='miniIcono'><i class='miniPic " + a.iconSmall + "'></i></div>", c = void 0 == a.icon ? "<div id='smallbox" + SmallBoxes + "' class='SmallBox animated fadeInRight fast'><div class='textoFull'><span>" + a.title + "</span><p>" + a.content + "</p></div>" + e + "</div>" : "<div id='smallbox" + SmallBoxes + "' class='SmallBox animated fadeInRight fast'><div class='foto'><i class='" + a.icon + "'></i></div><div class='textoFoto'><span>" + a.title + "</span><p>" + a.content + "</p></div>" + e + "</div>", 1 == SmallBoxes) $("#divSmallBoxes").append(c), SmallBoxesAnchos = $("#smallbox" + SmallBoxes).height() + 40;
    else {
        var g = $(".SmallBox").size();
        0 == g ? ($("#divSmallBoxes").append(c), SmallBoxesAnchos = $("#smallbox" + SmallBoxes).height() + 40) : ($("#divSmallBoxes").append(c), $("#smallbox" + SmallBoxes).css("top", SmallBoxesAnchos), SmallBoxesAnchos = SmallBoxesAnchos + $("#smallbox" + SmallBoxes).height() + 20, $(".SmallBox").each(function(a) {
            0 == a ? ($(this).css("top", 20), heightPrev = $(this).height() + 40, SmallBoxesAnchos = $(this).height() + 40) : ($(this).css("top", heightPrev), heightPrev = heightPrev + $(this).height() + 20, SmallBoxesAnchos = SmallBoxesAnchos + $(this).height() + 20)
        }))
    }
    var h = $("#smallbox" + SmallBoxes);
    void 0 == a.color ? h.css("background-color", "#004d60") : h.css("background-color", a.color);
    var i;
    void 0 != a.colors && a.colors.length > 0 && (h.attr("colorcount", "0"), i = setInterval(function() {
        var b = h.attr("colorcount");
        h.animate({
            backgroundColor: a.colors[b].color
        }), b < a.colors.length - 1 ? h.attr("colorcount", 1 * b + 1) : h.attr("colorcount", 0)
    }, a.colortime)), void 0 != a.timeout && setTimeout(function() {
        clearInterval(i); {
            var a = $(this).height() + 20;
            $("#" + f).css("top")
        }
        0 != $("#" + f + ":hover").length ? $("#" + f).on("mouseleave", function() {
            SmallBoxesAnchos -= a, $("#" + f).remove(), "function" == typeof b && b && b();
            var c = 0;
            $(".SmallBox").each(function(a) {
                0 == a ? ($(this).animate({
                    top: 20
                }, 300), c = $(this).height() + 40, SmallBoxesAnchos = $(this).height() + 40) : ($(this).animate({
                    top: c
                }, 350), c = c + $(this).height() + 20, SmallBoxesAnchos = SmallBoxesAnchos + $(this).height() + 20)
            })
        }) : (clearInterval(i), SmallBoxesAnchos -= a, "function" == typeof b && b && b(), $("#" + f).removeClass().addClass("SmallBox").animate({
            opacity: 0
        }, 300, function() {
            $(this).remove();
            var a = 0;
            $(".SmallBox").each(function(b) {
                0 == b ? ($(this).animate({
                    top: 20
                }, 300), a = $(this).height() + 40, SmallBoxesAnchos = $(this).height() + 40) : ($(this).animate({
                    top: a
                }), a = a + $(this).height() + 20, SmallBoxesAnchos = SmallBoxesAnchos + $(this).height() + 20)
            })
        }))
    }, a.timeout), $("#smallbox" + SmallBoxes).bind("click", function() {
        clearInterval(i), "function" == typeof b && b && b(); {
            var a = $(this).height() + 20;
            $(this).attr("id"), $(this).css("top")
        }
        SmallBoxesAnchos -= a, $(this).removeClass().addClass("SmallBox").animate({
            opacity: 0
        }, 300, function() {
            $(this).remove();
            var a = 0;
            $(".SmallBox").each(function(b) {
                0 == b ? ($(this).animate({
                    top: 20
                }, 300), a = $(this).height() + 40, SmallBoxesAnchos = $(this).height() + 40) : ($(this).animate({
                    top: a
                }, 350), a = a + $(this).height() + 20, SmallBoxesAnchos = SmallBoxesAnchos + $(this).height() + 20)
            })
        })
    })
};
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\smartadmin\\notification\\notifications.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./SmartNotification.min.js');
},{"./SmartNotification.min.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\smartadmin\\notification\\SmartNotification.min.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\stickykit\\jquery.sticky-kit.js":[function(require,module,exports){
/*
 Sticky-kit v1.0.4 | WTFPL | Leaf Corcoran 2014 | http://leafo.net
*/
(function(){var b,m;b=this.jQuery || $;m=b(window);b.fn.stick_in_parent=function(e){var u,n,f,s,B,l,C;null==e&&(e={});s=e.sticky_class;u=e.inner_scrolling;f=e.parent;n=e.offset_top;null==n&&(n=0);null==f&&(f=void 0);null==u&&(u=!0);null==s&&(s="is_stuck");B=function(a,e,l,v,y,p,t){var q,z,k,w,c,d,A,x,g,h;if(!a.data("sticky_kit")){a.data("sticky_kit",!0);d=a.parent();null!=f&&(d=d.closest(f));if(!d.length)throw"failed to find stick parent";q=k=!1;g=b("<div />");g.css("position",a.css("position"));A=function(){var c,
b;c=parseInt(d.css("border-top-width"),10);b=parseInt(d.css("padding-top"),10);e=parseInt(d.css("padding-bottom"),10);l=d.offset().top+c+b;v=d.height();c=k?(k=!1,q=!1,a.insertAfter(g).css({position:"",top:"",width:"",bottom:""}),g.detach(),!0):void 0;y=a.offset().top-parseInt(a.css("margin-top"),10)-n;p=a.outerHeight(!0);t=a.css("float");g.css({width:a.outerWidth(!0),height:p,display:a.css("display"),"vertical-align":a.css("vertical-align"),"float":t});if(c)return h()};A();if(p!==v)return w=void 0,
c=n,h=function(){var b,h,r,f;r=m.scrollTop();null!=w&&(h=r-w);w=r;k?(f=r+p+c>v+l,q&&!f&&(q=!1,a.css({position:"fixed",bottom:"",top:c}).trigger("sticky_kit:unbottom")),r<y&&(k=!1,c=n,"left"!==t&&"right"!==t||a.insertAfter(g),g.detach(),b={position:"",width:"",top:""},a.css(b).removeClass(s).trigger("sticky_kit:unstick")),u&&(b=m.height(),p>b&&!q&&(c-=h,c=Math.max(b-p,c),c=Math.min(n,c),k&&a.css({top:c+"px"})))):r>y&&(k=!0,b={position:"fixed",top:c},b.width="border-box"===a.css("box-sizing")?a.outerWidth()+
"px":a.width()+"px",a.css(b).addClass(s).after(g),"left"!==t&&"right"!==t||g.append(a),a.trigger("sticky_kit:stick"));if(k&&(null==f&&(f=r+p+c>v+l),!q&&f))return q=!0,"static"===d.css("position")&&d.css({position:"relative"}),a.css({position:"absolute",bottom:e,top:"auto"}).trigger("sticky_kit:bottom")},x=function(){A();return h()},z=function(){m.off("scroll",h);b(document.body).off("sticky_kit:recalc",x);a.off("sticky_kit:detach",z);a.removeData("sticky_kit");a.css({position:"",bottom:"",top:""});
d.position("position","");if(k)return a.insertAfter(g).removeClass(s),g.remove()},m.on("touchmove",h),m.on("scroll",h),m.on("resize",x),b(document.body).on("sticky_kit:recalc",x),a.on("sticky_kit:detach",z),setTimeout(h,0)}};l=0;for(C=this.length;l<C;l++)e=this[l],B(b(e));return this}}).call(this);
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\stickykit\\stickykit.shim.js":[function(require,module,exports){
'use strict';
module.exports = require('./jquery.sticky-kit.js');
},{"./jquery.sticky-kit.js":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\stickykit\\jquery.sticky-kit.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\summernote\\summernote.js":[function(require,module,exports){
/**
 * Super simple wysiwyg editor on Bootstrap v0.5.2
 * http://hackerwins.github.io/summernote/
 *
 * summernote.js
 * Copyright 2013 Alan Hong. and outher contributors
 * summernote may be freely distributed under the MIT license./
 *
 * Date: 2014-07-20T03:22Z
 */
(function (factory) {
  /* global define */
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else {
    // Browser globals: jQuery
    factory(window.jQuery);
  }
}(function ($) {
  


  if ('function' !== typeof Array.prototype.reduce) {
    /**
     * Array.prototype.reduce fallback
     *
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
     */
    Array.prototype.reduce = function (callback, optInitialValue) {
      var idx, value, length = this.length >>> 0, isValueSet = false;
      if (1 < arguments.length) {
        value = optInitialValue;
        isValueSet = true;
      }
      for (idx = 0; length > idx; ++idx) {
        if (this.hasOwnProperty(idx)) {
          if (isValueSet) {
            value = callback(value, this[idx], idx, this);
          } else {
            value = this[idx];
            isValueSet = true;
          }
        }
      }
      if (!isValueSet) {
        throw new TypeError('Reduce of empty array with no initial value');
      }
      return value;
    };
  }

  var isSupportAmd = typeof define === 'function' && define.amd;

  /**
   * returns whether font is installed or not.
   * @param {String} fontName
   * @return {Boolean}
   */
  var isFontInstalled = function (fontName) {
    var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS';
    var $tester = $('<div>').css({
      position: 'absolute',
      left: '-9999px',
      top: '-9999px',
      fontSize: '200px'
    }).text('mmmmmmmmmwwwwwww').appendTo(document.body);

    var originalWidth = $tester.css('fontFamily', testFontName).width();
    var width = $tester.css('fontFamily', fontName + ',' + testFontName).width();

    $tester.remove();

    return originalWidth !== width;
  };

  /**
   * Object which check platform and agent
   */
  var agent = {
    isMac: navigator.appVersion.indexOf('Mac') > -1,
    isMSIE: navigator.userAgent.indexOf('MSIE') > -1 || navigator.userAgent.indexOf('Trident') > -1,
    isFF: navigator.userAgent.indexOf('Firefox') > -1,
    jqueryVersion: parseFloat($.fn.jquery),
    isSupportAmd: isSupportAmd,
    hasCodeMirror: isSupportAmd ? require.specified('CodeMirror') : !!window.CodeMirror,
    isFontInstalled: isFontInstalled
  };

  /**
   * func utils (for high-order func's arg)
   */
  var func = (function () {
    var eq = function (elA) {
      return function (elB) {
        return elA === elB;
      };
    };

    var eq2 = function (elA, elB) {
      return elA === elB;
    };

    var ok = function () {
      return true;
    };

    var fail = function () {
      return false;
    };

    var not = function (f) {
      return function () {
        return !f.apply(f, arguments);
      };
    };

    var self = function (a) {
      return a;
    };

    var idCounter = 0;

    /**
     * generate a globally-unique id
     *
     * @param {String} [prefix]
     */
    var uniqueId = function (prefix) {
      var id = ++idCounter + '';
      return prefix ? prefix + id : id;
    };

    /**
     * returns bnd (bounds) from rect
     *
     * - IE Compatability Issue: http://goo.gl/sRLOAo
     * - Scroll Issue: http://goo.gl/sNjUc
     *
     * @param {Rect} rect
     * @return {Object} bounds
     * @return {Number} bounds.top
     * @return {Number} bounds.left
     * @return {Number} bounds.width
     * @return {Number} bounds.height
     */
    var rect2bnd = function (rect) {
      var $document = $(document);
      return {
        top: rect.top + $document.scrollTop(),
        left: rect.left + $document.scrollLeft(),
        width: rect.right - rect.left,
        height: rect.bottom - rect.top
      };
    };

    /**
     * returns a copy of the object where the keys have become the values and the values the keys.
     * @param {Object} obj
     * @return {Object}
     */
    var invertObject = function (obj) {
      var inverted = {};
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          inverted[obj[key]] = key;
        }
      }
      return inverted;
    };

    return {
      eq: eq,
      eq2: eq2,
      ok: ok,
      fail: fail,
      not: not,
      self: self,
      uniqueId: uniqueId,
      rect2bnd: rect2bnd,
      invertObject: invertObject
    };
  })();

  /**
   * list utils
   */
  var list = (function () {
    /**
     * returns the first element of an array.
     * @param {Array} array
     */
    var head = function (array) {
      return array[0];
    };

    /**
     * returns the last element of an array.
     * @param {Array} array
     */
    var last = function (array) {
      return array[array.length - 1];
    };

    /**
     * returns everything but the last entry of the array.
     * @param {Array} array
     */
    var initial = function (array) {
      return array.slice(0, array.length - 1);
    };

    /**
     * returns the rest of the elements in an array.
     * @param {Array} array
     */
    var tail = function (array) {
      return array.slice(1);
    };

    /**
     * returns next item.
     * @param {Array} array
     */
    var next = function (array, item) {
      var idx = array.indexOf(item);
      if (idx === -1) { return null; }

      return array[idx + 1];
    };

    /**
     * returns prev item.
     * @param {Array} array
     */
    var prev = function (array, item) {
      var idx = array.indexOf(item);
      if (idx === -1) { return null; }

      return array[idx - 1];
    };
  
    /**
     * get sum from a list
     * @param {Array} array - array
     * @param {Function} fn - iterator
     */
    var sum = function (array, fn) {
      fn = fn || func.self;
      return array.reduce(function (memo, v) {
        return memo + fn(v);
      }, 0);
    };
  
    /**
     * returns a copy of the collection with array type.
     * @param {Collection} collection - collection eg) node.childNodes, ...
     */
    var from = function (collection) {
      var result = [], idx = -1, length = collection.length;
      while (++idx < length) {
        result[idx] = collection[idx];
      }
      return result;
    };
  
    /**
     * cluster elements by predicate function.
     * @param {Array} array - array
     * @param {Function} fn - predicate function for cluster rule
     * @param {Array[]}
     */
    var clusterBy = function (array, fn) {
      if (!array.length) { return []; }
      var aTail = tail(array);
      return aTail.reduce(function (memo, v) {
        var aLast = last(memo);
        if (fn(last(aLast), v)) {
          aLast[aLast.length] = v;
        } else {
          memo[memo.length] = [v];
        }
        return memo;
      }, [[head(array)]]);
    };
  
    /**
     * returns a copy of the array with all falsy values removed
     * @param {Array} array - array
     * @param {Function} fn - predicate function for cluster rule
     */
    var compact = function (array) {
      var aResult = [];
      for (var idx = 0, sz = array.length; idx < sz; idx ++) {
        if (array[idx]) { aResult.push(array[idx]); }
      }
      return aResult;
    };
  
    return { head: head, last: last, initial: initial, tail: tail,
             prev: prev, next: next, sum: sum, from: from,
             compact: compact, clusterBy: clusterBy };
  })();

  /**
   * Dom functions
   */
  var dom = (function () {
    /**
     * returns whether node is `note-editable` or not.
     *
     * @param {Element} node
     * @return {Boolean}
     */
    var isEditable = function (node) {
      return node && $(node).hasClass('note-editable');
    };
  
    var isControlSizing = function (node) {
      return node && $(node).hasClass('note-control-sizing');
    };

    /**
     * build layoutInfo from $editor(.note-editor)
     *
     * @param {jQuery} $editor
     * @return {Object}
     */
    var buildLayoutInfo = function ($editor) {
      var makeFinder;

      // air mode
      if ($editor.hasClass('note-air-editor')) {
        var id = list.last($editor.attr('id').split('-'));
        makeFinder = function (sIdPrefix) {
          return function () { return $(sIdPrefix + id); };
        };

        return {
          editor: function () { return $editor; },
          editable: function () { return $editor; },
          popover: makeFinder('#note-popover-'),
          handle: makeFinder('#note-handle-'),
          dialog: makeFinder('#note-dialog-')
        };

      // frame mode
      } else {
        makeFinder = function (sClassName) {
          return function () { return $editor.find(sClassName); };
        };
        return {
          editor: function () { return $editor; },
          dropzone: makeFinder('.note-dropzone'),
          toolbar: makeFinder('.note-toolbar'),
          editable: makeFinder('.note-editable'),
          codable: makeFinder('.note-codable'),
          statusbar: makeFinder('.note-statusbar'),
          popover: makeFinder('.note-popover'),
          handle: makeFinder('.note-handle'),
          dialog: makeFinder('.note-dialog')
        };
      }
    };

    /**
     * returns predicate which judge whether nodeName is same
     * @param {String} sNodeName
     */
    var makePredByNodeName = function (sNodeName) {
      // nodeName is always uppercase.
      return function (node) {
        return node && node.nodeName === sNodeName;
      };
    };
  
    var isPara = function (node) {
      // Chrome(v31.0), FF(v25.0.1) use DIV for paragraph
      return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName);
    };
  
    var isList = function (node) {
      return node && /^UL|^OL/.test(node.nodeName);
    };

    var isCell = function (node) {
      return node && /^TD|^TH/.test(node.nodeName);
    };
  
    /**
     * find nearest ancestor predicate hit
     *
     * @param {Element} node
     * @param {Function} pred - predicate function
     */
    var ancestor = function (node, pred) {
      while (node) {
        if (pred(node)) { return node; }
        if (isEditable(node)) { break; }

        node = node.parentNode;
      }
      return null;
    };
  
    /**
     * returns new array of ancestor nodes (until predicate hit).
     *
     * @param {Element} node
     * @param {Function} [optional] pred - predicate function
     */
    var listAncestor = function (node, pred) {
      pred = pred || func.fail;
  
      var aAncestor = [];
      ancestor(node, function (el) {
        aAncestor.push(el);
        return pred(el);
      });
      return aAncestor;
    };
  
    /**
     * returns common ancestor node between two nodes.
     *
     * @param {Element} nodeA
     * @param {Element} nodeB
     */
    var commonAncestor = function (nodeA, nodeB) {
      var aAncestor = listAncestor(nodeA);
      for (var n = nodeB; n; n = n.parentNode) {
        if ($.inArray(n, aAncestor) > -1) { return n; }
      }
      return null; // difference document area
    };
  
    /**
     * listing all Nodes between two nodes.
     * FIXME: nodeA and nodeB must be sorted, use comparePoints later.
     *
     * @param {Element} nodeA
     * @param {Element} nodeB
     */
    var listBetween = function (nodeA, nodeB) {
      var aNode = [];
  
      var isStart = false, isEnd = false;

      // DFS(depth first search) with commonAcestor.
      (function fnWalk(node) {
        if (!node) { return; } // traverse fisnish
        if (node === nodeA) { isStart = true; } // start point
        if (isStart && !isEnd) { aNode.push(node); } // between
        if (node === nodeB) { isEnd = true; return; } // end point

        for (var idx = 0, sz = node.childNodes.length; idx < sz; idx++) {
          fnWalk(node.childNodes[idx]);
        }
      })(commonAncestor(nodeA, nodeB));
  
      return aNode;
    };
  
    /**
     * listing all previous siblings (until predicate hit).
     * @param {Element} node
     * @param {Function} [optional] pred - predicate function
     */
    var listPrev = function (node, pred) {
      pred = pred || func.fail;
  
      var aNext = [];
      while (node) {
        aNext.push(node);
        if (pred(node)) { break; }
        node = node.previousSibling;
      }
      return aNext;
    };
  
    /**
     * listing next siblings (until predicate hit).
     *
     * @param {Element} node
     * @param {Function} [pred] - predicate function
     */
    var listNext = function (node, pred) {
      pred = pred || func.fail;
  
      var aNext = [];
      while (node) {
        aNext.push(node);
        if (pred(node)) { break; }
        node = node.nextSibling;
      }
      return aNext;
    };

    /**
     * listing descendant nodes
     *
     * @param {Element} node
     * @param {Function} [pred] - predicate function
     */
    var listDescendant = function (node, pred) {
      var aDescendant = [];
      pred = pred || func.ok;

      // start DFS(depth first search) with node
      (function fnWalk(current) {
        if (node !== current && pred(current)) {
          aDescendant.push(current);
        }
        for (var idx = 0, sz = current.childNodes.length; idx < sz; idx++) {
          fnWalk(current.childNodes[idx]);
        }
      })(node);

      return aDescendant;
    };
  
    /**
     * insert node after preceding
     *
     * @param {Element} node
     * @param {Element} preceding - predicate function
     */
    var insertAfter = function (node, preceding) {
      var next = preceding.nextSibling, parent = preceding.parentNode;
      if (next) {
        parent.insertBefore(node, next);
      } else {
        parent.appendChild(node);
      }
      return node;
    };
  
    /**
     * append elements.
     *
     * @param {Element} node
     * @param {Collection} aChild
     */
    var appends = function (node, aChild) {
      $.each(aChild, function (idx, child) {
        node.appendChild(child);
      });
      return node;
    };
  
    var isText = makePredByNodeName('#text');
  
    /**
     * returns #text's text size or element's childNodes size
     *
     * @param {Element} node
     */
    var length = function (node) {
      if (isText(node)) { return node.nodeValue.length; }
      return node.childNodes.length;
    };

    /**
     * returns whether boundaryPoint is edge or not.
     *
     * @param {BoundaryPoint} boundaryPoitn
     * @return {Boolean}
     */
    var isEdgeBP = function (boundaryPoint) {
      return boundaryPoint.offset === 0 ||
             boundaryPoint.offset === length(boundaryPoint.node);
    };

    /**
     * returns offset from parent.
     *
     * @param {Element} node
     */
    var position = function (node) {
      var offset = 0;
      while ((node = node.previousSibling)) { offset += 1; }
      return offset;
    };

    var hasChildren = function (node) {
      return node && node.childNodes && node.childNodes.length;
    };

    /**
     * returns previous boundaryPoint
     *
     * @param {BoundaryPoint} boundaryPoitn
     * @return {BoundaryPoint}
     */
    var prevBP = function (boundaryPoint) {
      var node = boundaryPoint.node,
          offset = boundaryPoint.offset;

      if (offset === 0) {
        if (isEditable(node)) { return null; }
        return {node: node.parentNode, offset: position(node)};
      } else {
        if (hasChildren(node)) {
          var child = node.childNodes[offset - 1];
          return {node: child, offset: length(child)};
        } else {
          return {node: node, offset: offset - 1};
        }
      }
    };
  
    /**
     * return offsetPath(array of offset) from ancestor
     *
     * @param {Element} ancestor - ancestor node
     * @param {Element} node
     */
    var makeOffsetPath = function (ancestor, node) {
      var aAncestor = list.initial(listAncestor(node, func.eq(ancestor)));
      return $.map(aAncestor, position).reverse();
    };
  
    /**
     * return element from offsetPath(array of offset)
     *
     * @param {Element} ancestor - ancestor node
     * @param {array} aOffset - offsetPath
     */
    var fromOffsetPath = function (ancestor, aOffset) {
      var current = ancestor;
      for (var i = 0, sz = aOffset.length; i < sz; i++) {
        current = current.childNodes[aOffset[i]];
      }
      return current;
    };
  
    /**
     * split element or #text
     *
     * @param {Element} node
     * @param {Number} offset
     */
    var split = function (node, offset) {
      if (offset === 0) { return node; }
      if (offset >= length(node)) { return node.nextSibling; }
  
      // splitText
      if (isText(node)) { return node.splitText(offset); }
  
      // splitElement
      var child = node.childNodes[offset];
      node = insertAfter(node.cloneNode(false), node);
      return appends(node, listNext(child));
    };
  
    /**
     * split dom tree by boundaryPoint(pivot and offset)
     *
     * @param {Element} root
     * @param {Element} pivot - this will be boundaryPoint's node
     * @param {Number} offset - this will be boundaryPoint's offset
     */
    var splitTree = function (root, pivot, offset) {
      var aAncestor = listAncestor(pivot, func.eq(root));
      if (aAncestor.length === 1) { return split(pivot, offset); }
      return aAncestor.reduce(function (node, parent) {
        var clone = parent.cloneNode(false);
        insertAfter(clone, parent);
        if (node === pivot) {
          node = split(node, offset);
        }
        appends(clone, listNext(node));
        return clone;
      });
    };

    /**
     * remove node, (bRemoveChild: remove child or not)
     * @param {Element} node
     * @param {Boolean} bRemoveChild
     */
    var remove = function (node, bRemoveChild) {
      if (!node || !node.parentNode) { return; }
      if (node.removeNode) { return node.removeNode(bRemoveChild); }
  
      var elParent = node.parentNode;
      if (!bRemoveChild) {
        var aNode = [];
        var i, sz;
        for (i = 0, sz = node.childNodes.length; i < sz; i++) {
          aNode.push(node.childNodes[i]);
        }
  
        for (i = 0, sz = aNode.length; i < sz; i++) {
          elParent.insertBefore(aNode[i], node);
        }
      }
  
      elParent.removeChild(node);
    };
  
    var html = function ($node) {
      return dom.isTextarea($node[0]) ? $node.val() : $node.html();
    };
  
    return {
      blank: agent.isMSIE ? '&nbsp;' : '<br/>',
      emptyPara: '<p><br/></p>',
      isEditable: isEditable,
      isControlSizing: isControlSizing,
      buildLayoutInfo: buildLayoutInfo,
      isText: isText,
      isPara: isPara,
      isList: isList,
      isTable: makePredByNodeName('TABLE'),
      isCell: isCell,
      isAnchor: makePredByNodeName('A'),
      isDiv: makePredByNodeName('DIV'),
      isLi: makePredByNodeName('LI'),
      isSpan: makePredByNodeName('SPAN'),
      isB: makePredByNodeName('B'),
      isU: makePredByNodeName('U'),
      isS: makePredByNodeName('S'),
      isI: makePredByNodeName('I'),
      isImg: makePredByNodeName('IMG'),
      isTextarea: makePredByNodeName('TEXTAREA'),
      length: length,
      isEdgeBP: isEdgeBP,
      prevBP: prevBP,
      ancestor: ancestor,
      listAncestor: listAncestor,
      listNext: listNext,
      listPrev: listPrev,
      listDescendant: listDescendant,
      commonAncestor: commonAncestor,
      listBetween: listBetween,
      insertAfter: insertAfter,
      position: position,
      makeOffsetPath: makeOffsetPath,
      fromOffsetPath: fromOffsetPath,
      splitTree: splitTree,
      remove: remove,
      html: html
    };
  })();

  var settings = {
    // version
    version: '0.5.2',

    /**
     * options
     */
    options: {
      width: null,                  // set editor width
      height: null,                 // set editor height, ex) 300

      minHeight: null,              // set minimum height of editor
      maxHeight: null,              // set maximum height of editor

      focus: false,                 // set focus to editable area after initializing summernote

      tabsize: 4,                   // size of tab ex) 2 or 4
      styleWithSpan: true,          // style with span (Chrome and FF only)

      disableLinkTarget: false,     // hide link Target Checkbox
      disableDragAndDrop: false,    // disable drag and drop event
      disableResizeEditor: false,   // disable resizing editor

      codemirror: {                 // codemirror options
        mode: 'text/html',
        htmlMode: true,
        lineNumbers: true
      },

      // language
      lang: 'en-US',                // language 'en-US', 'ko-KR', ...
      direction: null,              // text direction, ex) 'rtl'

      // toolbar
      toolbar: [
        ['style', ['style']],
        ['font', ['bold', 'italic', 'underline', 'superscript', 'subscript', 'strikethrough', 'clear']],
        ['fontname', ['fontname']],
        // ['fontsize', ['fontsize']], // Still buggy
        ['color', ['color']],
        ['para', ['ul', 'ol', 'paragraph']],
        ['height', ['height']],
        ['table', ['table']],
        ['insert', ['link', 'picture', 'video', 'hr']],
        ['view', ['fullscreen', 'codeview']],
        ['help', ['help']]
      ],

      // air mode: inline editor
      airMode: false,
      // airPopover: [
      //   ['style', ['style']],
      //   ['font', ['bold', 'italic', 'underline', 'clear']],
      //   ['fontname', ['fontname']],
      //   ['fontsize', ['fontsize']], // Still buggy
      //   ['color', ['color']],
      //   ['para', ['ul', 'ol', 'paragraph']],
      //   ['height', ['height']],
      //   ['table', ['table']],
      //   ['insert', ['link', 'picture', 'video']],
      //   ['help', ['help']]
      // ],
      airPopover: [
        ['color', ['color']],
        ['font', ['bold', 'underline', 'clear']],
        ['para', ['ul', 'paragraph']],
        ['table', ['table']],
        ['insert', ['link', 'picture']]
      ],

      // style tag
      styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],

      // default fontName
      defaultFontName: 'Helvetica Neue',

      // fontName
      fontNames: [
        'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',
        'Helvetica Neue', 'Impact', 'Lucida Grande',
        'Tahoma', 'Times New Roman', 'Verdana'
      ],

      // pallete colors(n x n)
      colors: [
        ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'],
        ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],
        ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],
        ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],
        ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],
        ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],
        ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],
        ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']
      ],

      // fontSize
      fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],

      // lineHeight
      lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],

      // insertTable max size
      insertTableMaxSize: {
        col: 10,
        row: 10
      },

      // callbacks
      oninit: null,             // initialize
      onfocus: null,            // editable has focus
      onblur: null,             // editable out of focus
      onenter: null,            // enter key pressed
      onkeyup: null,            // keyup
      onkeydown: null,          // keydown
      onImageUpload: null,      // imageUpload
      onImageUploadError: null, // imageUploadError
      onToolbarClick: null,

      /**
       * manipulate link address when user create link
       * @param {String} sLinkUrl
       * @return {String}
       */
      onCreateLink: function (sLinkUrl) {
        if (sLinkUrl.indexOf('@') !== -1 && sLinkUrl.indexOf(':') === -1) {
          sLinkUrl =  'mailto:' + sLinkUrl;
        } else if (sLinkUrl.indexOf('://') === -1) {
          sLinkUrl = 'http://' + sLinkUrl;
        }

        return sLinkUrl;
      },

      keyMap: {
        pc: {
          'CTRL+Z': 'undo',
          'CTRL+Y': 'redo',
          'TAB': 'tab',
          'SHIFT+TAB': 'untab',
          'CTRL+B': 'bold',
          'CTRL+I': 'italic',
          'CTRL+U': 'underline',
          'CTRL+SHIFT+S': 'strikethrough',
          'CTRL+BACKSLASH': 'removeFormat',
          'CTRL+SHIFT+L': 'justifyLeft',
          'CTRL+SHIFT+E': 'justifyCenter',
          'CTRL+SHIFT+R': 'justifyRight',
          'CTRL+SHIFT+J': 'justifyFull',
          'CTRL+SHIFT+NUM7': 'insertUnorderedList',
          'CTRL+SHIFT+NUM8': 'insertOrderedList',
          'CTRL+LEFTBRACKET': 'outdent',
          'CTRL+RIGHTBRACKET': 'indent',
          'CTRL+NUM0': 'formatPara',
          'CTRL+NUM1': 'formatH1',
          'CTRL+NUM2': 'formatH2',
          'CTRL+NUM3': 'formatH3',
          'CTRL+NUM4': 'formatH4',
          'CTRL+NUM5': 'formatH5',
          'CTRL+NUM6': 'formatH6',
          'CTRL+ENTER': 'insertHorizontalRule',
          'CTRL+K': 'showLinkDialog'
        },

        mac: {
          'CMD+Z': 'undo',
          'CMD+SHIFT+Z': 'redo',
          'TAB': 'tab',
          'SHIFT+TAB': 'untab',
          'CMD+B': 'bold',
          'CMD+I': 'italic',
          'CMD+U': 'underline',
          'CMD+SHIFT+S': 'strikethrough',
          'CMD+BACKSLASH': 'removeFormat',
          'CMD+SHIFT+L': 'justifyLeft',
          'CMD+SHIFT+E': 'justifyCenter',
          'CMD+SHIFT+R': 'justifyRight',
          'CMD+SHIFT+J': 'justifyFull',
          'CMD+SHIFT+NUM7': 'insertUnorderedList',
          'CMD+SHIFT+NUM8': 'insertOrderedList',
          'CMD+LEFTBRACKET': 'outdent',
          'CMD+RIGHTBRACKET': 'indent',
          'CMD+NUM0': 'formatPara',
          'CMD+NUM1': 'formatH1',
          'CMD+NUM2': 'formatH2',
          'CMD+NUM3': 'formatH3',
          'CMD+NUM4': 'formatH4',
          'CMD+NUM5': 'formatH5',
          'CMD+NUM6': 'formatH6',
          'CMD+ENTER': 'insertHorizontalRule',
          'CMD+K': 'showLinkDialog'
        }
      }
    },

    // default language: en-US
    lang: {
      'en-US': {
        font: {
          bold: 'Bold',
          italic: 'Italic',
          underline: 'Underline',
          strikethrough: 'Strikethrough',
          subscript: 'Subscript',
          superscript: 'Superscript',
          clear: 'Remove Font Style',
          height: 'Line Height',
          name: 'Font Family',
          size: 'Font Size'
        },
        image: {
          image: 'Picture',
          insert: 'Insert Image',
          resizeFull: 'Resize Full',
          resizeHalf: 'Resize Half',
          resizeQuarter: 'Resize Quarter',
          floatLeft: 'Float Left',
          floatRight: 'Float Right',
          floatNone: 'Float None',
          dragImageHere: 'Drag an image here',
          selectFromFiles: 'Select from files',
          url: 'Image URL',
          remove: 'Remove Image'
        },
        link: {
          link: 'Link',
          insert: 'Insert Link',
          unlink: 'Unlink',
          edit: 'Edit',
          textToDisplay: 'Text to display',
          url: 'To what URL should this link go?',
          openInNewWindow: 'Open in new window'
        },
        video: {
          video: 'Video',
          videoLink: 'Video Link',
          insert: 'Insert Video',
          url: 'Video URL?',
          providers: '(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)'
        },
        table: {
          table: 'Table'
        },
        hr: {
          insert: 'Insert Horizontal Rule'
        },
        style: {
          style: 'Style',
          normal: 'Normal',
          blockquote: 'Quote',
          pre: 'Code',
          h1: 'Header 1',
          h2: 'Header 2',
          h3: 'Header 3',
          h4: 'Header 4',
          h5: 'Header 5',
          h6: 'Header 6'
        },
        lists: {
          unordered: 'Unordered list',
          ordered: 'Ordered list'
        },
        options: {
          help: 'Help',
          fullscreen: 'Full Screen',
          codeview: 'Code View'
        },
        paragraph: {
          paragraph: 'Paragraph',
          outdent: 'Outdent',
          indent: 'Indent',
          left: 'Align left',
          center: 'Align center',
          right: 'Align right',
          justify: 'Justify full'
        },
        color: {
          recent: 'Recent Color',
          more: 'More Color',
          background: 'BackColor',
          foreground: 'FontColor',
          transparent: 'Transparent',
          setTransparent: 'Set transparent',
          reset: 'Reset',
          resetToDefault: 'Reset to default'
        },
        shortcut: {
          shortcuts: 'Keyboard shortcuts',
          close: 'Close',
          textFormatting: 'Text formatting',
          action: 'Action',
          paragraphFormatting: 'Paragraph formatting',
          documentStyle: 'Document Style'
        },
        history: {
          undo: 'Undo',
          redo: 'Redo'
        }
      }
    }
  };

  /**
   * Async functions which returns `Promise`
   */
  var async = (function () {
    /**
     * read contents of file as representing URL
     *
     * @param {File} file
     * @return {Promise} - then: sDataUrl
     */
    var readFileAsDataURL = function (file) {
      return $.Deferred(function (deferred) {
        $.extend(new FileReader(), {
          onload: function (e) {
            var sDataURL = e.target.result;
            deferred.resolve(sDataURL);
          },
          onerror: function () {
            deferred.reject(this);
          }
        }).readAsDataURL(file);
      }).promise();
    };
  
    /**
     * create `<image>` from url string
     *
     * @param {String} sUrl
     * @return {Promise} - then: $image
     */
    var createImage = function (sUrl) {
      return $.Deferred(function (deferred) {
        $('<img>').one('load', function () {
          deferred.resolve($(this));
        }).one('error abort', function () {
          deferred.reject($(this));
        }).css({
          display: 'none'
        }).appendTo(document.body).attr('src', sUrl);
      }).promise();
    };

    return {
      readFileAsDataURL: readFileAsDataURL,
      createImage: createImage
    };
  })();

  /**
   * Object for keycodes.
   */
  var key = {
    isEdit: function (keyCode) {
      return [8, 9, 13, 32].indexOf(keyCode) !== -1;
    },
    nameFromCode: {
      '8': 'BACKSPACE',
      '9': 'TAB',
      '13': 'ENTER',
      '32': 'SPACE',

      // Number: 0-9
      '48': 'NUM0',
      '49': 'NUM1',
      '50': 'NUM2',
      '51': 'NUM3',
      '52': 'NUM4',
      '53': 'NUM5',
      '54': 'NUM6',
      '55': 'NUM7',
      '56': 'NUM8',

      // Alphabet: a-z
      '66': 'B',
      '69': 'E',
      '73': 'I',
      '74': 'J',
      '75': 'K',
      '76': 'L',
      '82': 'R',
      '83': 'S',
      '85': 'U',
      '89': 'Y',
      '90': 'Z',

      '191': 'SLASH',
      '219': 'LEFTBRACKET',
      '220': 'BACKSLASH',
      '221': 'RIGHTBRACKET'
    }
  };

  /**
   * Style
   * @class
   */
  var Style = function () {
    /**
     * passing an array of style properties to .css()
     * will result in an object of property-value pairs.
     * (compability with version < 1.9)
     *
     * @param  {jQuery} $obj
     * @param  {Array} propertyNames - An array of one or more CSS properties.
     * @returns {Object}
     */
    var jQueryCSS = function ($obj, propertyNames) {
      if (agent.jqueryVersion < 1.9) {
        var result = {};
        $.each(propertyNames, function (idx, propertyName) {
          result[propertyName] = $obj.css(propertyName);
        });
        return result;
      }
      return $obj.css.call($obj, propertyNames);
    };

    /**
     * paragraph level style
     *
     * @param {WrappedRange} rng
     * @param {Object} oStyle
     */
    this.stylePara = function (rng, oStyle) {
      $.each(rng.nodes(dom.isPara), function (idx, elPara) {
        $(elPara).css(oStyle);
      });
    };

    /**
     * get current style on cursor
     *
     * @param {WrappedRange} rng
     * @param {Element} elTarget - target element on event
     * @return {Object} - object contains style properties.
     */
    this.current = function (rng, elTarget) {
      var $cont = $(dom.isText(rng.sc) ? rng.sc.parentNode : rng.sc);
      var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height'];
      var oStyle = jQueryCSS($cont, properties) || {};

      oStyle['font-size'] = parseInt(oStyle['font-size'], 10);

      // document.queryCommandState for toggle state
      oStyle['font-bold'] = document.queryCommandState('bold') ? 'bold' : 'normal';
      oStyle['font-italic'] = document.queryCommandState('italic') ? 'italic' : 'normal';
      oStyle['font-underline'] = document.queryCommandState('underline') ? 'underline' : 'normal';
      oStyle['font-strikethrough'] = document.queryCommandState('strikeThrough') ? 'strikethrough' : 'normal';
      oStyle['font-superscript'] = document.queryCommandState('superscript') ? 'superscript' : 'normal';
      oStyle['font-subscript'] = document.queryCommandState('subscript') ? 'subscript' : 'normal';

      // list-style-type to list-style(unordered, ordered)
      if (!rng.isOnList()) {
        oStyle['list-style'] = 'none';
      } else {
        var aOrderedType = ['circle', 'disc', 'disc-leading-zero', 'square'];
        var isUnordered = $.inArray(oStyle['list-style-type'], aOrderedType) > -1;
        oStyle['list-style'] = isUnordered ? 'unordered' : 'ordered';
      }

      var elPara = dom.ancestor(rng.sc, dom.isPara);
      if (elPara && elPara.style['line-height']) {
        oStyle['line-height'] = elPara.style.lineHeight;
      } else {
        var lineHeight = parseInt(oStyle['line-height'], 10) / parseInt(oStyle['font-size'], 10);
        oStyle['line-height'] = lineHeight.toFixed(1);
      }

      oStyle.image = dom.isImg(elTarget) && elTarget;
      oStyle.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);
      oStyle.aAncestor = dom.listAncestor(rng.sc, dom.isEditable);
      oStyle.range = rng;

      return oStyle;
    };
  };

  /**
   * range module
   */
  var range = (function () {
    var isW3CRangeSupport = !!document.createRange;
     
    /**
     * return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js
     * @param {TextRange} textRange
     * @param {Boolean} isStart
     * @return {BoundaryPoint}
     */
    var textRange2bp = function (textRange, isStart) {
      var elCont = textRange.parentElement(), nOffset;
  
      var tester = document.body.createTextRange(), elPrevCont;
      var aChild = list.from(elCont.childNodes);
      for (nOffset = 0; nOffset < aChild.length; nOffset++) {
        if (dom.isText(aChild[nOffset])) { continue; }
        tester.moveToElementText(aChild[nOffset]);
        if (tester.compareEndPoints('StartToStart', textRange) >= 0) { break; }
        elPrevCont = aChild[nOffset];
      }
  
      if (nOffset !== 0 && dom.isText(aChild[nOffset - 1])) {
        var textRangeStart = document.body.createTextRange(), elCurText = null;
        textRangeStart.moveToElementText(elPrevCont || elCont);
        textRangeStart.collapse(!elPrevCont);
        elCurText = elPrevCont ? elPrevCont.nextSibling : elCont.firstChild;
  
        var pointTester = textRange.duplicate();
        pointTester.setEndPoint('StartToStart', textRangeStart);
        var nTextCount = pointTester.text.replace(/[\r\n]/g, '').length;
  
        while (nTextCount > elCurText.nodeValue.length && elCurText.nextSibling) {
          nTextCount -= elCurText.nodeValue.length;
          elCurText = elCurText.nextSibling;
        }
  
        /* jshint ignore:start */
        var sDummy = elCurText.nodeValue; //enforce IE to re-reference elCurText, hack
        /* jshint ignore:end */
  
        if (isStart && elCurText.nextSibling && dom.isText(elCurText.nextSibling) &&
            nTextCount === elCurText.nodeValue.length) {
          nTextCount -= elCurText.nodeValue.length;
          elCurText = elCurText.nextSibling;
        }
  
        elCont = elCurText;
        nOffset = nTextCount;
      }
  
      return {cont: elCont, offset: nOffset};
    };
    
    /**
     * return TextRange from boundary point (inspired by google closure-library)
     * @param {BoundaryPoint} bp
     * @return {TextRange}
     */
    var bp2textRange = function (bp) {
      var textRangeInfo = function (elCont, nOffset) {
        var elNode, isCollapseToStart;
  
        if (dom.isText(elCont)) {
          var aPrevText = dom.listPrev(elCont, func.not(dom.isText));
          var elPrevCont = list.last(aPrevText).previousSibling;
          elNode =  elPrevCont || elCont.parentNode;
          nOffset += list.sum(list.tail(aPrevText), dom.length);
          isCollapseToStart = !elPrevCont;
        } else {
          elNode = elCont.childNodes[nOffset] || elCont;
          if (dom.isText(elNode)) {
            return textRangeInfo(elNode, nOffset);
          }
  
          nOffset = 0;
          isCollapseToStart = false;
        }
  
        return {cont: elNode, collapseToStart: isCollapseToStart, offset: nOffset};
      };
  
      var textRange = document.body.createTextRange();
      var info = textRangeInfo(bp.cont, bp.offset);
  
      textRange.moveToElementText(info.cont);
      textRange.collapse(info.collapseToStart);
      textRange.moveStart('character', info.offset);
      return textRange;
    };
    
    /**
     * Wrapped Range
     *
     * @param {Element} sc - start container
     * @param {Number} so - start offset
     * @param {Element} ec - end container
     * @param {Number} eo - end offset
     */
    var WrappedRange = function (sc, so, ec, eo) {
      this.sc = sc;
      this.so = so;
      this.ec = ec;
      this.eo = eo;
  
      // nativeRange: get nativeRange from sc, so, ec, eo
      var nativeRange = function () {
        if (isW3CRangeSupport) {
          var w3cRange = document.createRange();
          w3cRange.setStart(sc, so);
          w3cRange.setEnd(ec, eo);
          return w3cRange;
        } else {
          var textRange = bp2textRange({cont: sc, offset: so});
          textRange.setEndPoint('EndToEnd', bp2textRange({cont: ec, offset: eo}));
          return textRange;
        }
      };

      this.getBPs = function () {
        return {
          sc: sc,
          so: so,
          ec: ec,
          eo: eo
        };
      };

      this.getStartBP = function () {
        return {
          node: sc,
          offset: so
        };
      };

      this.getEndBP = function () {
        return {
          node: ec,
          offset: eo
        };
      };

      /**
       * select update visible range
       */
      this.select = function () {
        var nativeRng = nativeRange();
        if (isW3CRangeSupport) {
          var selection = document.getSelection();
          if (selection.rangeCount > 0) { selection.removeAllRanges(); }
          selection.addRange(nativeRng);
        } else {
          nativeRng.select();
        }
      };

      /**
       * returns matched nodes on range
       *
       * @param {Function} [pred] - predicate function
       * @return {Element[]}
       */
      this.nodes = function (pred) {
        pred = pred || func.ok;

        var aNode = dom.listBetween(sc, ec);
        var aMatched = list.compact($.map(aNode, function (node) {
          return dom.ancestor(node, pred);
        }));
        return $.map(list.clusterBy(aMatched, func.eq2), list.head);
      };

      /**
       * returns commonAncestor of range
       * @return {Element} - commonAncestor
       */
      this.commonAncestor = function () {
        return dom.commonAncestor(sc, ec);
      };

      /**
       * returns expanded range by pred
       *
       * @param {Function} pred - predicate function
       * @return {WrappedRange}
       */
      this.expand = function (pred) {
        var startAncestor = dom.ancestor(sc, pred);
        var endAncestor = dom.ancestor(ec, pred);

        if (!startAncestor && !endAncestor) {
          return new WrappedRange(sc, so, ec, eo);
        }

        var boundaryPoints = this.getBPs();

        if (startAncestor) {
          boundaryPoints.sc = startAncestor;
          boundaryPoints.so = 0;
        }

        if (endAncestor) {
          boundaryPoints.ec = endAncestor;
          boundaryPoints.eo = dom.length(endAncestor);
        }

        return new WrappedRange(
          boundaryPoints.sc,
          boundaryPoints.so,
          boundaryPoints.ec,
          boundaryPoints.eo
        );
      };

      /**
       * @param {Boolean} isCollapseToStart
       * @return {WrappedRange}
       */
      this.collapse = function (isCollapseToStart) {
        if (isCollapseToStart) {
          return new WrappedRange(sc, so, sc, so);
        } else {
          return new WrappedRange(ec, eo, ec, eo);
        }
      };

      /**
       * splitText on range
       */
      this.splitText = function () {
        var isSameContainer = sc === ec;
        var boundaryPoints = this.getBPs();

        if (dom.isText(ec) && !dom.isEdgeBP(this.getEndBP())) {
          ec.splitText(eo);
        }

        if (dom.isText(sc) && !dom.isEdgeBP(this.getStartBP())) {
          boundaryPoints.sc = sc.splitText(so);
          boundaryPoints.so = 0;

          if (isSameContainer) {
            boundaryPoints.ec = boundaryPoints.sc;
            boundaryPoints.eo = eo - so;
          }
        }

        return new WrappedRange(
          boundaryPoints.sc,
          boundaryPoints.so,
          boundaryPoints.ec,
          boundaryPoints.eo
        );
      };

      /**
       * delete contents on range
       * @return {WrappedRange}
       */
      this.deleteContents = function () {
        if (this.isCollapsed()) {
          return this;
        }

        var rng = this.splitText();
        var prevBP = dom.prevBP(rng.getStartBP());

        $.each(rng.nodes(), function (idx, node) {
          dom.remove(node, !dom.isPara(node));
        });

        return new WrappedRange(
          prevBP.node,
          prevBP.offset,
          prevBP.node,
          prevBP.offset
        );
      };
      
      /**
       * makeIsOn: return isOn(pred) function
       */
      var makeIsOn = function (pred) {
        return function () {
          var elAncestor = dom.ancestor(sc, pred);
          return !!elAncestor && (elAncestor === dom.ancestor(ec, pred));
        };
      };
  
      // isOnEditable: judge whether range is on editable or not
      this.isOnEditable = makeIsOn(dom.isEditable);
      // isOnList: judge whether range is on list node or not
      this.isOnList = makeIsOn(dom.isList);
      // isOnAnchor: judge whether range is on anchor node or not
      this.isOnAnchor = makeIsOn(dom.isAnchor);
      // isOnAnchor: judge whether range is on cell node or not
      this.isOnCell = makeIsOn(dom.isCell);
      // isCollapsed: judge whether range was collapsed
      this.isCollapsed = function () { return sc === ec && so === eo; };

      /**
       * insert node at current cursor
       * @param {Element} node
       */
      this.insertNode = function (node) {
        var nativeRng = nativeRange();
        if (isW3CRangeSupport) {
          nativeRng.insertNode(node);
        } else {
          var tmpId = 'node-insert-node-target';
          node.id = tmpId;

          // NOTE: missing node reference.
          nativeRng.pasteHTML(node.outerHTML);
          node = $('#' + tmpId)[0];
        }

        return node;
      };
  
      this.toString = function () {
        var nativeRng = nativeRange();
        return isW3CRangeSupport ? nativeRng.toString() : nativeRng.text;
      };
  
      /**
       * create offsetPath bookmark
       * @param {Element} elEditable
       */
      this.bookmark = function (elEditable) {
        return {
          s: { path: dom.makeOffsetPath(elEditable, sc), offset: so },
          e: { path: dom.makeOffsetPath(elEditable, ec), offset: eo }
        };
      };

      /**
       * getClientRects
       * @return {Rect[]}
       */
      this.getClientRects = function () {
        var nativeRng = nativeRange();
        return nativeRng.getClientRects();
      };
    };
  
    return {
      /**
       * create Range Object From arguments or Browser Selection
       *
       * @param {Element} sc - start container
       * @param {Number} so - start offset
       * @param {Element} ec - end container
       * @param {Number} eo - end offset
       */
      create : function (sc, so, ec, eo) {
        if (!arguments.length) { // from Browser Selection
          if (isW3CRangeSupport) { // webkit, firefox
            var selection = document.getSelection();
            if (selection.rangeCount === 0) { return null; }
  
            var nativeRng = selection.getRangeAt(0);
            sc = nativeRng.startContainer;
            so = nativeRng.startOffset;
            ec = nativeRng.endContainer;
            eo = nativeRng.endOffset;
          } else { // IE8: TextRange
            var textRange = document.selection.createRange();
            var textRangeEnd = textRange.duplicate();
            textRangeEnd.collapse(false);
            var textRangeStart = textRange;
            textRangeStart.collapse(true);
  
            var bpStart = textRange2bp(textRangeStart, true),
            bpEnd = textRange2bp(textRangeEnd, false);
  
            sc = bpStart.cont;
            so = bpStart.offset;
            ec = bpEnd.cont;
            eo = bpEnd.offset;
          }
        } else if (arguments.length === 2) { //collapsed
          ec = sc;
          eo = so;
        }
        return new WrappedRange(sc, so, ec, eo);
      },

      /**
       * create WrappedRange from node
       *
       * @param {Element} node
       * @return {WrappedRange}
       */
      createFromNode: function (node) {
        return this.create(node, 0, node, 1);
      },

      /**
       * create WrappedRange from Bookmark
       *
       * @param {Element} elEditable
       * @param {Obkect} bookmark
       * @return {WrappedRange}
       */
      createFromBookmark : function (elEditable, bookmark) {
        var sc = dom.fromOffsetPath(elEditable, bookmark.s.path);
        var so = bookmark.s.offset;
        var ec = dom.fromOffsetPath(elEditable, bookmark.e.path);
        var eo = bookmark.e.offset;
        return new WrappedRange(sc, so, ec, eo);
      }
    };
  })();

  /**
   * Table
   * @class
   */
  var Table = function () {
    /**
     * handle tab key
     *
     * @param {WrappedRange} rng
     * @param {Boolean} isShift
     */
    this.tab = function (rng, isShift) {
      var elCell = dom.ancestor(rng.commonAncestor(), dom.isCell);
      var elTable = dom.ancestor(elCell, dom.isTable);
      var aCell = dom.listDescendant(elTable, dom.isCell);

      var elNext = list[isShift ? 'prev' : 'next'](aCell, elCell);
      if (elNext) {
        range.create(elNext, 0).select();
      }
    };

    /**
     * create empty table element
     *
     * @param {Number} nRow
     * @param {Number} nCol
     */
    this.createTable = function (nCol, nRow) {
      var aTD = [], sTD;
      for (var idxCol = 0; idxCol < nCol; idxCol++) {
        aTD.push('<td>' + dom.blank + '</td>');
      }
      sTD = aTD.join('');

      var aTR = [], sTR;
      for (var idxRow = 0; idxRow < nRow; idxRow++) {
        aTR.push('<tr>' + sTD + '</tr>');
      }
      sTR = aTR.join('');
      var sTable = '<table class="table table-bordered">' + sTR + '</table>';

      return $(sTable)[0];
    };
  };

  /**
   * Editor
   * @class
   */
  var Editor = function () {

    var style = new Style();
    var table = new Table();

    /**
     * save current range
     *
     * @param {jQuery} $editable
     */
    this.saveRange = function ($editable) {
      $editable.focus();
      $editable.data('range', range.create());
    };

    /**
     * restore lately range
     *
     * @param {jQuery} $editable
     */
    this.restoreRange = function ($editable) {
      var rng = $editable.data('range');
      if (rng) {
        rng.select();
        $editable.focus();
      }
    };

    /**
     * current style
     * @param {Element} elTarget
     */
    this.currentStyle = function (elTarget) {
      var rng = range.create();
      return rng.isOnEditable() && style.current(rng, elTarget);
    };

    /**
     * undo
     * @param {jQuery} $editable
     */
    this.undo = function ($editable) {
      $editable.data('NoteHistory').undo($editable);
    };

    /**
     * redo
     * @param {jQuery} $editable
     */
    this.redo = function ($editable) {
      $editable.data('NoteHistory').redo($editable);
    };

    /**
     * record Undo
     * @param {jQuery} $editable
     */
    var recordUndo = this.recordUndo = function ($editable) {
      $editable.data('NoteHistory').recordUndo($editable);
    };

    /* jshint ignore:start */
    // native commands(with execCommand), generate function for execCommand
    var aCmd = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript',
                'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull',
                'insertOrderedList', 'insertUnorderedList',
                'indent', 'outdent', 'formatBlock', 'removeFormat',
                'backColor', 'foreColor', 'insertHorizontalRule', 'fontName'];

    for (var idx = 0, len = aCmd.length; idx < len; idx ++) {
      this[aCmd[idx]] = (function (sCmd) {
        return function ($editable, sValue) {
          recordUndo($editable);
          document.execCommand(sCmd, false, sValue);
        };
      })(aCmd[idx]);
    }
    /* jshint ignore:end */

    /**
     * @param {jQuery} $editable 
     * @param {WrappedRange} rng
     * @param {Number} nTabsize
     */
    var insertTab = function ($editable, rng, nTabsize) {
      recordUndo($editable);
      var sNbsp = new Array(nTabsize + 1).join('&nbsp;');
      rng.insertNode($('<span id="noteTab">' + sNbsp + '</span>')[0]);
      var $tab = $('#noteTab').removeAttr('id');
      rng = range.create($tab[0], 1);
      rng.select();
      dom.remove($tab[0]);
    };

    /**
     * handle tab key
     * @param {jQuery} $editable 
     * @param {Object} options
     */
    this.tab = function ($editable, options) {
      var rng = range.create();
      if (rng.isCollapsed() && rng.isOnCell()) {
        table.tab(rng);
      } else {
        insertTab($editable, rng, options.tabsize);
      }
    };

    /**
     * handle shift+tab key
     */
    this.untab = function () {
      var rng = range.create();
      if (rng.isCollapsed() && rng.isOnCell()) {
        table.tab(rng, true);
      }
    };

    /**
     * insert image
     *
     * @param {jQuery} $editable
     * @param {String} sUrl
     */
    this.insertImage = function ($editable, sUrl) {
      async.createImage(sUrl).then(function ($image) {
        recordUndo($editable);
        $image.css({
          display: '',
          width: Math.min($editable.width(), $image.width())
        });
        range.create().insertNode($image[0]);
      }).fail(function () {
        var callbacks = $editable.data('callbacks');
        if (callbacks.onImageUploadError) {
          callbacks.onImageUploadError();
        }
      });
    };

    /**
     * insert video
     * @param {jQuery} $editable
     * @param {String} sUrl
     */
    this.insertVideo = function ($editable, sUrl) {
      recordUndo($editable);

      // video url patterns(youtube, instagram, vimeo, dailymotion, youku)
      var ytRegExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
      var ytMatch = sUrl.match(ytRegExp);

      var igRegExp = /\/\/instagram.com\/p\/(.[a-zA-Z0-9]*)/;
      var igMatch = sUrl.match(igRegExp);

      var vRegExp = /\/\/vine.co\/v\/(.[a-zA-Z0-9]*)/;
      var vMatch = sUrl.match(vRegExp);

      var vimRegExp = /\/\/(player.)?vimeo.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/;
      var vimMatch = sUrl.match(vimRegExp);

      var dmRegExp = /.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/;
      var dmMatch = sUrl.match(dmRegExp);

      var youkuRegExp = /\/\/v\.youku\.com\/v_show\/id_(\w+)\.html/;
      var youkuMatch = sUrl.match(youkuRegExp);

      var $video;
      if (ytMatch && ytMatch[2].length === 11) {
        var youtubeId = ytMatch[2];
        $video = $('<iframe>')
          .attr('src', '//www.youtube.com/embed/' + youtubeId)
          .attr('width', '640').attr('height', '360');
      } else if (igMatch && igMatch[0].length) {
        $video = $('<iframe>')
          .attr('src', igMatch[0] + '/embed/')
          .attr('width', '612').attr('height', '710')
          .attr('scrolling', 'no')
          .attr('allowtransparency', 'true');
      } else if (vMatch && vMatch[0].length) {
        $video = $('<iframe>')
          .attr('src', vMatch[0] + '/embed/simple')
          .attr('width', '600').attr('height', '600')
          .attr('class', 'vine-embed');
      } else if (vimMatch && vimMatch[3].length) {
        $video = $('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>')
          .attr('src', '//player.vimeo.com/video/' + vimMatch[3])
          .attr('width', '640').attr('height', '360');
      } else if (dmMatch && dmMatch[2].length) {
        $video = $('<iframe>')
          .attr('src', '//www.dailymotion.com/embed/video/' + dmMatch[2])
          .attr('width', '640').attr('height', '360');
      } else if (youkuMatch && youkuMatch[1].length) {
        $video = $('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>')
          .attr('height', '498')
          .attr('width', '510')
          .attr('src', '//player.youku.com/embed/' + youkuMatch[1]);
      } else {
        // this is not a known video link. Now what, Cat? Now what?
      }

      if ($video) {
        $video.attr('frameborder', 0);
        range.create().insertNode($video[0]);
      }
    };

    /**
     * formatBlock
     *
     * @param {jQuery} $editable
     * @param {String} sTagName
     */
    this.formatBlock = function ($editable, sTagName) {
      recordUndo($editable);
      sTagName = agent.isMSIE ? '<' + sTagName + '>' : sTagName;
      document.execCommand('FormatBlock', false, sTagName);
    };

    this.formatPara = function ($editable) {
      this.formatBlock($editable, 'P');
    };

    /* jshint ignore:start */
    for (var idx = 1; idx <= 6; idx ++) {
      this['formatH' + idx] = function (idx) {
        return function ($editable) {
          this.formatBlock($editable, 'H' + idx);
        };
      }(idx);
    };
    /* jshint ignore:end */

    /**
     * fontsize
     * FIXME: Still buggy
     *
     * @param {jQuery} $editable
     * @param {String} sValue - px
     */
    this.fontSize = function ($editable, sValue) {
      recordUndo($editable);
      document.execCommand('fontSize', false, 3);
      if (agent.isFF) {
        // firefox: <font size="3"> to <span style='font-size={sValue}px;'>, buggy
        $editable.find('font[size=3]').removeAttr('size').css('font-size', sValue + 'px');
      } else {
        // chrome: <span style="font-size: medium"> to <span style='font-size={sValue}px;'>
        $editable.find('span').filter(function () {
          return this.style.fontSize === 'medium';
        }).css('font-size', sValue + 'px');
      }
    };

    /**
     * lineHeight
     * @param {jQuery} $editable
     * @param {String} sValue
     */
    this.lineHeight = function ($editable, sValue) {
      recordUndo($editable);
      style.stylePara(range.create(), {lineHeight: sValue});
    };

    /**
     * unlink
     * @param {jQuery} $editable
     */
    this.unlink = function ($editable) {
      var rng = range.create();
      if (rng.isOnAnchor()) {
        recordUndo($editable);
        var elAnchor = dom.ancestor(rng.sc, dom.isAnchor);
        rng = range.createFromNode(elAnchor);
        rng.select();
        document.execCommand('unlink');
      }
    };

    /**
     * create link
     *
     * @param {jQuery} $editable
     * @param {Object} linkInfo
     * @param {Object} options
     */
    this.createLink = function ($editable, linkInfo, options) {
      var sLinkUrl = linkInfo.url;
      var sLinkText = linkInfo.text;
      var isNewWindow = linkInfo.newWindow;
      var rng = linkInfo.range;

      recordUndo($editable);

      if (options.onCreateLink) {
        sLinkUrl = options.onCreateLink(sLinkUrl);
      }

      rng = rng.deleteContents();

      // Create a new link when there is no anchor on range.
      var anchor = rng.insertNode($('<A>' + sLinkText + '</A>')[0]);
      $(anchor).attr({
        href: sLinkUrl,
        target: isNewWindow ? '_blank' : ''
      });

      rng = range.createFromNode(anchor);
      rng.select();
    };

    /**
     * returns link info
     *
     * @return {Object}
     */
    this.getLinkInfo = function ($editable) {
      $editable.focus();

      var rng = range.create().expand(dom.isAnchor);

      // Get the first anchor on range(for edit).
      var $anchor = $(list.head(rng.nodes(dom.isAnchor)));

      return {
        range: rng,
        text: rng.toString(),
        isNewWindow: $anchor.length ? $anchor.attr('target') === '_blank' : true,
        url: $anchor.length ? $anchor.attr('href') : ''
      };
    };

    /**
     * get video info
     *
     * @param {jQuery} $editable
     * @return {Object}
     */
    this.getVideoInfo = function ($editable) {
      $editable.focus();

      var rng = range.create();

      if (rng.isOnAnchor()) {
        var elAnchor = dom.ancestor(rng.sc, dom.isAnchor);
        rng = range.createFromNode(elAnchor);
      }

      return {
        text: rng.toString()
      };
    };

    this.color = function ($editable, sObjColor) {
      var oColor = JSON.parse(sObjColor);
      var foreColor = oColor.foreColor, backColor = oColor.backColor;

      recordUndo($editable);
      if (foreColor) { document.execCommand('foreColor', false, foreColor); }
      if (backColor) { document.execCommand('backColor', false, backColor); }
    };

    this.insertTable = function ($editable, sDim) {
      recordUndo($editable);
      var aDim = sDim.split('x');
      range.create().insertNode(table.createTable(aDim[0], aDim[1]));
    };

    /**
     * @param {jQuery} $editable
     * @param {String} sValue
     * @param {jQuery} $target
     */
    this.floatMe = function ($editable, sValue, $target) {
      recordUndo($editable);
      $target.css('float', sValue);
    };

    /**
     * resize overlay element
     * @param {jQuery} $editable
     * @param {String} sValue
     * @param {jQuery} $target - target element
     */
    this.resize = function ($editable, sValue, $target) {
      recordUndo($editable);

      $target.css({
        width: $editable.width() * sValue + 'px',
        height: ''
      });
    };

    /**
     * @param {Position} pos
     * @param {jQuery} $target - target element
     * @param {Boolean} [bKeepRatio] - keep ratio
     */
    this.resizeTo = function (pos, $target, bKeepRatio) {
      var szImage;
      if (bKeepRatio) {
        var newRatio = pos.y / pos.x;
        var ratio = $target.data('ratio');
        szImage = {
          width: ratio > newRatio ? pos.x : pos.y / ratio,
          height: ratio > newRatio ? pos.x * ratio : pos.y
        };
      } else {
        szImage = {
          width: pos.x,
          height: pos.y
        };
      }

      $target.css(szImage);
    };

    /**
     * remove media object
     *
     * @param {jQuery} $editable
     * @param {String} sValue - dummy argument (for keep interface)
     * @param {jQuery} $target - target element
     */
    this.removeMedia = function ($editable, sValue, $target) {
      recordUndo($editable);
      $target.detach();
    };
  };

  /**
   * History
   * @class
   */
  var History = function () {
    var aUndo = [], aRedo = [];

    var makeSnap = function ($editable) {
      var elEditable = $editable[0], rng = range.create();
      return {
        contents: $editable.html(),
        bookmark: rng.bookmark(elEditable),
        scrollTop: $editable.scrollTop()
      };
    };

    var applySnap = function ($editable, oSnap) {
      $editable.html(oSnap.contents).scrollTop(oSnap.scrollTop);
      range.createFromBookmark($editable[0], oSnap.bookmark).select();
    };

    this.undo = function ($editable) {
      var oSnap = makeSnap($editable);
      if (!aUndo.length) { return; }
      applySnap($editable, aUndo.pop());
      aRedo.push(oSnap);
    };

    this.redo = function ($editable) {
      var oSnap = makeSnap($editable);
      if (!aRedo.length) { return; }
      applySnap($editable, aRedo.pop());
      aUndo.push(oSnap);
    };

    this.recordUndo = function ($editable) {
      aRedo = [];
      aUndo.push(makeSnap($editable));
    };
  };

  /**
   * Button
   */
  var Button = function () {
    /**
     * update button status
     *
     * @param {jQuery} $container
     * @param {Object} oStyle
     */
    this.update = function ($container, oStyle) {
      /**
       * handle dropdown's check mark (for fontname, fontsize, lineHeight).
       * @param {jQuery} $btn
       * @param {Number} nValue
       */
      var checkDropdownMenu = function ($btn, nValue) {
        $btn.find('.dropdown-menu li a').each(function () {
          // always compare string to avoid creating another func.
          var isChecked = ($(this).data('value') + '') === (nValue + '');
          this.className = isChecked ? 'checked' : '';
        });
      };

      /**
       * update button state(active or not).
       *
       * @param {String} sSelector
       * @param {Function} pred
       */
      var btnState = function (sSelector, pred) {
        var $btn = $container.find(sSelector);
        $btn.toggleClass('active', pred());
      };

      // fontname
      var $fontname = $container.find('.note-fontname');
      if ($fontname.length) {
        var selectedFont = oStyle['font-family'];
        if (!!selectedFont) {
          selectedFont = list.head(selectedFont.split(','));
          selectedFont = selectedFont.replace(/\'/g, '');
          $fontname.find('.note-current-fontname').text(selectedFont);
          checkDropdownMenu($fontname, selectedFont);
        }
      }

      // fontsize
      var $fontsize = $container.find('.note-fontsize');
      $fontsize.find('.note-current-fontsize').text(oStyle['font-size']);
      checkDropdownMenu($fontsize, parseFloat(oStyle['font-size']));

      // lineheight
      var $lineHeight = $container.find('.note-height');
      checkDropdownMenu($lineHeight, parseFloat(oStyle['line-height']));

      btnState('button[data-event="bold"]', function () {
        return oStyle['font-bold'] === 'bold';
      });
      btnState('button[data-event="italic"]', function () {
        return oStyle['font-italic'] === 'italic';
      });
      btnState('button[data-event="underline"]', function () {
        return oStyle['font-underline'] === 'underline';
      });
      btnState('button[data-event="strikethrough"]', function () {
        return oStyle['font-strikethrough'] === 'strikethrough';
      });
      btnState('button[data-event="superscript"]', function () {
        return oStyle['font-superscript'] === 'superscript';
      });
      btnState('button[data-event="subscript"]', function () {
        return oStyle['font-subscript'] === 'subscript';
      });
      btnState('button[data-event="justifyLeft"]', function () {
        return oStyle['text-align'] === 'left' || oStyle['text-align'] === 'start';
      });
      btnState('button[data-event="justifyCenter"]', function () {
        return oStyle['text-align'] === 'center';
      });
      btnState('button[data-event="justifyRight"]', function () {
        return oStyle['text-align'] === 'right';
      });
      btnState('button[data-event="justifyFull"]', function () {
        return oStyle['text-align'] === 'justify';
      });
      btnState('button[data-event="insertUnorderedList"]', function () {
        return oStyle['list-style'] === 'unordered';
      });
      btnState('button[data-event="insertOrderedList"]', function () {
        return oStyle['list-style'] === 'ordered';
      });
    };

    /**
     * update recent color
     *
     * @param {Element} elBtn
     * @param {String} sEvent
     * @param {sValue} sValue
     */
    this.updateRecentColor = function (elBtn, sEvent, sValue) {
      var $color = $(elBtn).closest('.note-color');
      var $recentColor = $color.find('.note-recent-color');
      var oColor = JSON.parse($recentColor.attr('data-value'));
      oColor[sEvent] = sValue;
      $recentColor.attr('data-value', JSON.stringify(oColor));
      var sKey = sEvent === 'backColor' ? 'background-color' : 'color';
      $recentColor.find('i').css(sKey, sValue);
    };
  };

  /**
   * Toolbar
   */
  var Toolbar = function () {
    var button = new Button();

    this.update = function ($toolbar, oStyle) {
      button.update($toolbar, oStyle);
    };

    this.updateRecentColor = function (elBtn, sEvent, sValue) {
      button.updateRecentColor(elBtn, sEvent, sValue);
    };

    /**
     * activate buttons exclude codeview
     * @param {jQuery} $toolbar
     */
    this.activate = function ($toolbar) {
      $toolbar.find('button').not('button[data-event="codeview"]').removeClass('disabled');
    };

    /**
     * deactivate buttons exclude codeview
     * @param {jQuery} $toolbar
     */
    this.deactivate = function ($toolbar) {
      $toolbar.find('button').not('button[data-event="codeview"]').addClass('disabled');
    };

    this.updateFullscreen = function ($container, bFullscreen) {
      var $btn = $container.find('button[data-event="fullscreen"]');
      $btn.toggleClass('active', bFullscreen);
    };

    this.updateCodeview = function ($container, isCodeview) {
      var $btn = $container.find('button[data-event="codeview"]');
      $btn.toggleClass('active', isCodeview);
    };
  };

  /**
   * Popover (http://getbootstrap.com/javascript/#popovers)
   */
  var Popover = function () {
    var button = new Button();

    /**
     * returns position from placeholder
     * @param {Element} placeholder
     * @param {Boolean} isAirMode
     */
    var posFromPlaceholder = function (placeholder, isAirMode) {
      var $placeholder = $(placeholder);
      var pos = isAirMode ? $placeholder.offset() : $placeholder.position();
      var height = $placeholder.outerHeight(true); // include margin

      // popover below placeholder.
      return {
        left: pos.left,
        top: pos.top + height
      };
    };

    /**
     * show popover
     * @param {jQuery} popover
     * @param {Position} pos
     */
    var showPopover = function ($popover, pos) {
      $popover.css({
        display: 'block',
        left: pos.left,
        top: pos.top
      });
    };

    var PX_POPOVER_ARROW_OFFSET_X = 20;

    /**
     * update current state
     * @param {jQuery} $popover - popover container
     * @param {Object} oStyle - style object
     * @param {Boolean} isAirMode
     */
    this.update = function ($popover, oStyle, isAirMode) {
      button.update($popover, oStyle);

      var $linkPopover = $popover.find('.note-link-popover');
      if (oStyle.anchor) {
        var $anchor = $linkPopover.find('a');
        var href = $(oStyle.anchor).attr('href');
        $anchor.attr('href', href).html(href);
        showPopover($linkPopover, posFromPlaceholder(oStyle.anchor, isAirMode));
      } else {
        $linkPopover.hide();
      }

      var $imagePopover = $popover.find('.note-image-popover');
      if (oStyle.image) {
        showPopover($imagePopover, posFromPlaceholder(oStyle.image, isAirMode));
      } else {
        $imagePopover.hide();
      }

      var $airPopover = $popover.find('.note-air-popover');
      if (isAirMode && !oStyle.range.isCollapsed()) {
        var bnd = func.rect2bnd(list.last(oStyle.range.getClientRects()));
        showPopover($airPopover, {
          left: Math.max(bnd.left + bnd.width / 2 - PX_POPOVER_ARROW_OFFSET_X, 0),
          top: bnd.top + bnd.height
        });
      } else {
        $airPopover.hide();
      }
    };

    this.updateRecentColor = function (elBtn, sEvent, sValue) {
      button.updateRecentColor(elBtn, sEvent, sValue);
    };

    /**
     * hide all popovers
     * @param {jQuery} $popover - popover contaienr
     */
    this.hide = function ($popover) {
      $popover.children().hide();
    };
  };

  /**
   * Handle
   */
  var Handle = function () {
    /**
     * update handle
     * @param {jQuery} $handle
     * @param {Object} oStyle
     * @param {Boolean} isAirMode
     */
    this.update = function ($handle, oStyle, isAirMode) {
      var $selection = $handle.find('.note-control-selection');
      if (oStyle.image) {
        var $image = $(oStyle.image);
        var pos = isAirMode ? $image.offset() : $image.position();

        // include margin
        var szImage = {
          w: $image.outerWidth(true),
          h: $image.outerHeight(true)
        };

        $selection.css({
          display: 'block',
          left: pos.left,
          top: pos.top,
          width: szImage.w,
          height: szImage.h
        }).data('target', oStyle.image); // save current image element.
        var sSizing = szImage.w + 'x' + szImage.h;
        $selection.find('.note-control-selection-info').text(sSizing);
      } else {
        $selection.hide();
      }
    };

    this.hide = function ($handle) {
      $handle.children().hide();
    };
  };

  /**
   * Dialog 
   *
   * @class
   */
  var Dialog = function () {

    /**
     * toggle button status
     *
     * @param {jQuery} $btn
     * @param {Boolean} isEnable
     */
    var toggleBtn = function ($btn, isEnable) {
      $btn.toggleClass('disabled', !isEnable);
      $btn.attr('disabled', !isEnable);
    };

    /**
     * show image dialog
     *
     * @param {jQuery} $editable
     * @param {jQuery} $dialog
     * @return {Promise}
     */
    this.showImageDialog = function ($editable, $dialog) {
      return $.Deferred(function (deferred) {
        var $imageDialog = $dialog.find('.note-image-dialog');

        var $imageInput = $dialog.find('.note-image-input'),
            $imageUrl = $dialog.find('.note-image-url'),
            $imageBtn = $dialog.find('.note-image-btn');

        $imageDialog.one('shown.bs.modal', function () {
          // Cloning imageInput to clear element.
          $imageInput.replaceWith($imageInput.clone()
            .on('change', function () {
              deferred.resolve(this.files);
              $imageDialog.modal('hide');
            })
          );

          $imageBtn.click(function (event) {
            event.preventDefault();

            deferred.resolve($imageUrl.val());
            $imageDialog.modal('hide');
          });

          $imageUrl.on('keyup paste', function (event) {
            var url;
            
            if (event.type === 'paste') {
              url = event.originalEvent.clipboardData.getData('text');
            } else {
              url = $imageUrl.val();
            }
            
            toggleBtn($imageBtn, url);
          }).val('').trigger('focus');
        }).one('hidden.bs.modal', function () {
          $imageInput.off('change');
          $imageUrl.off('keyup paste');
          $imageBtn.off('click');

          if (deferred.state() === 'pending') {
            deferred.reject();
          }
        }).modal('show');
      });
    };

    /**
     * Show video dialog and set event handlers on dialog controls.
     *
     * @param {jQuery} $dialog 
     * @param {Object} videoInfo 
     * @return {Promise}
     */
    this.showVideoDialog = function ($editable, $dialog, videoInfo) {
      return $.Deferred(function (deferred) {
        var $videoDialog = $dialog.find('.note-video-dialog');
        var $videoUrl = $videoDialog.find('.note-video-url'),
            $videoBtn = $videoDialog.find('.note-video-btn');

        $videoDialog.one('shown.bs.modal', function () {
          $videoUrl.val(videoInfo.text).keyup(function () {
            toggleBtn($videoBtn, $videoUrl.val());
          }).trigger('keyup').trigger('focus');

          $videoBtn.click(function (event) {
            event.preventDefault();

            deferred.resolve($videoUrl.val());
            $videoDialog.modal('hide');
          });
        }).one('hidden.bs.modal', function () {
          $videoUrl.off('keyup');
          $videoBtn.off('click');

          if (deferred.state() === 'pending') {
            deferred.reject();
          }
        }).modal('show');
      });
    };

    /**
     * Show link dialog and set event handlers on dialog controls.
     *
     * @param {jQuery} $dialog
     * @param {Object} linkInfo
     * @return {Promise}
     */
    this.showLinkDialog = function ($editable, $dialog, linkInfo) {
      return $.Deferred(function (deferred) {
        var $linkDialog = $dialog.find('.note-link-dialog');

        var $linkText = $linkDialog.find('.note-link-text'),
        $linkUrl = $linkDialog.find('.note-link-url'),
        $linkBtn = $linkDialog.find('.note-link-btn'),
        $openInNewWindow = $linkDialog.find('input[type=checkbox]');

        $linkDialog.one('shown.bs.modal', function () {
          $linkText.val(linkInfo.text);

          $linkText.keyup(function () {
            // if linktext was modified by keyup,
            // stop cloning text from linkUrl
            linkInfo.text = $linkText.val();
          });

          // if no url was given, copy text to url
          if (!linkInfo.url) {
            linkInfo.url = linkInfo.text;
            toggleBtn($linkBtn, linkInfo.text);
          }

          $linkUrl.keyup(function () {
            toggleBtn($linkBtn, $linkUrl.val());
            // display same link on `Text to display` input
            // when create a new link
            if (!linkInfo.text) {
              $linkText.val($linkUrl.val());
            }
          }).val(linkInfo.url).trigger('focus').trigger('select');

          $openInNewWindow.prop('checked', linkInfo.newWindow);

          $linkBtn.one('click', function (event) {
            event.preventDefault();

            deferred.resolve({
              range: linkInfo.range,
              url: $linkUrl.val(),
              text: $linkText.val(),
              newWindow: $openInNewWindow.is(':checked')
            });
            $linkDialog.modal('hide');
          });
        }).one('hidden.bs.modal', function () {
          $linkUrl.off('keyup');

          if (deferred.state() === 'pending') {
            deferred.reject();
          }
        }).modal('show');
      }).promise();
    };

    /**
     * show help dialog
     *
     * @param {jQuery} $dialog
     */
    this.showHelpDialog = function ($editable, $dialog) {
      return $.Deferred(function (deferred) {
        var $helpDialog = $dialog.find('.note-help-dialog');

        $helpDialog.one('hidden.bs.modal', function () {
          deferred.resolve();
        }).modal('show');
      }).promise();
    };
  };


  var CodeMirror;
  if (agent.hasCodeMirror) {
    if (agent.isSupportAmd) {
      require(['CodeMirror'], function (cm) {
        CodeMirror = cm;
      });
    } else {
      CodeMirror = window.CodeMirror;
    }
  }

  /**
   * EventHandler
   */
  var EventHandler = function () {
    var $window = $(window);
    var $document = $(document);
    var $scrollbar = $('html, body');

    var editor = new Editor();
    var toolbar = new Toolbar(), popover = new Popover();
    var handle = new Handle(), dialog = new Dialog();

    /**
     * returns makeLayoutInfo from editor's descendant node.
     *
     * @param {Element} descendant
     * @returns {Object}
     */
    var makeLayoutInfo = function (descendant) {
      var $target = $(descendant).closest('.note-editor, .note-air-editor, .note-air-layout');

      if (!$target.length) { return null; }

      var $editor;
      if ($target.is('.note-editor, .note-air-editor')) {
        $editor = $target;
      } else {
        $editor = $('#note-editor-' + list.last($target.attr('id').split('-')));
      }

      return dom.buildLayoutInfo($editor);
    };

    /**
     * insert Images from file array.
     *
     * @param {jQuery} $editable
     * @param {File[]} files
     */
    var insertImages = function ($editable, files) {
      editor.restoreRange($editable);
      var callbacks = $editable.data('callbacks');

      // If onImageUpload options setted
      if (callbacks.onImageUpload) {
        callbacks.onImageUpload(files, editor, $editable);
      // else insert Image as dataURL
      } else {
        $.each(files, function (idx, file) {
          async.readFileAsDataURL(file).then(function (sDataURL) {
            editor.insertImage($editable, sDataURL);
          }).fail(function () {
            if (callbacks.onImageUploadError) {
              callbacks.onImageUploadError();
            }
          });
        });
      }
    };

    var commands = {
      /**
       * @param {Object} oLayoutInfo
       */
      showLinkDialog: function (oLayoutInfo) {
        var $editor = oLayoutInfo.editor(),
            $dialog = oLayoutInfo.dialog(),
            $editable = oLayoutInfo.editable(),
            linkInfo = editor.getLinkInfo($editable);

        var options = $editor.data('options');

        editor.saveRange($editable);
        dialog.showLinkDialog($editable, $dialog, linkInfo).then(function (linkInfo) {
          editor.restoreRange($editable);
          editor.createLink($editable, linkInfo, options);
          // hide popover after creating link
          popover.hide(oLayoutInfo.popover());
        }).fail(function () {
          editor.restoreRange($editable);
        });
      },

      /**
       * @param {Object} oLayoutInfo
       */
      showImageDialog: function (oLayoutInfo) {
        var $dialog = oLayoutInfo.dialog(),
            $editable = oLayoutInfo.editable();

        editor.saveRange($editable);
        dialog.showImageDialog($editable, $dialog).then(function (data) {
          editor.restoreRange($editable);

          if (typeof data === 'string') {
            // image url
            editor.insertImage($editable, data);
          } else {
            // array of files
            insertImages($editable, data);
          }
        }).fail(function () {
          editor.restoreRange($editable);
        });
      },

      /**
       * @param {Object} oLayoutInfo
       */
      showVideoDialog: function (oLayoutInfo) {
        var $dialog = oLayoutInfo.dialog(),
            $editable = oLayoutInfo.editable(),
            videoInfo = editor.getVideoInfo($editable);

        editor.saveRange($editable);
        dialog.showVideoDialog($editable, $dialog, videoInfo).then(function (sUrl) {
          editor.restoreRange($editable);
          editor.insertVideo($editable, sUrl);
        }).fail(function () {
          editor.restoreRange($editable);
        });
      },

      /**
       * @param {Object} oLayoutInfo
       */
      showHelpDialog: function (oLayoutInfo) {
        var $dialog = oLayoutInfo.dialog(),
            $editable = oLayoutInfo.editable();

        editor.saveRange($editable);
        dialog.showHelpDialog($editable, $dialog).then(function () {
          editor.restoreRange($editable);
        });
      },

      fullscreen: function (oLayoutInfo) {
        var $editor = oLayoutInfo.editor(),
        $toolbar = oLayoutInfo.toolbar(),
        $editable = oLayoutInfo.editable(),
        $codable = oLayoutInfo.codable();

        var options = $editor.data('options');

        var resize = function (size) {
          $editor.css('width', size.w);
          $editable.css('height', size.h);
          $codable.css('height', size.h);
          if ($codable.data('cmeditor')) {
            $codable.data('cmeditor').setsize(null, size.h);
          }
        };

        $editor.toggleClass('fullscreen');
        var isFullscreen = $editor.hasClass('fullscreen');
        if (isFullscreen) {
          $editable.data('orgheight', $editable.css('height'));

          $window.on('resize', function () {
            resize({
              w: $window.width(),
              h: $window.height() - $toolbar.outerHeight()
            });
          }).trigger('resize');

          $scrollbar.css('overflow', 'hidden');
        } else {
          $window.off('resize');
          resize({
            w: options.width || '',
            h: $editable.data('orgheight')
          });
          $scrollbar.css('overflow', 'visible');
        }

        toolbar.updateFullscreen($toolbar, isFullscreen);
      },

      codeview: function (oLayoutInfo) {
        var $editor = oLayoutInfo.editor(),
        $toolbar = oLayoutInfo.toolbar(),
        $editable = oLayoutInfo.editable(),
        $codable = oLayoutInfo.codable(),
        $popover = oLayoutInfo.popover();

        var options = $editor.data('options');

        var cmEditor, server;

        $editor.toggleClass('codeview');

        var isCodeview = $editor.hasClass('codeview');
        if (isCodeview) {
          $codable.val($editable.html());
          $codable.height($editable.height());
          toolbar.deactivate($toolbar);
          popover.hide($popover);
          $codable.focus();

          // activate CodeMirror as codable
          if (agent.hasCodeMirror) {
            cmEditor = CodeMirror.fromTextArea($codable[0], options.codemirror);

            // CodeMirror TernServer
            if (options.codemirror.tern) {
              server = new CodeMirror.TernServer(options.codemirror.tern);
              cmEditor.ternServer = server;
              cmEditor.on('cursorActivity', function (cm) {
                server.updateArgHints(cm);
              });
            }

            // CodeMirror hasn't Padding.
            cmEditor.setSize(null, $editable.outerHeight());
            // autoFormatRange If formatting included
            if (cmEditor.autoFormatRange) {
              cmEditor.autoFormatRange({line: 0, ch: 0}, {
                line: cmEditor.lineCount(),
                ch: cmEditor.getTextArea().value.length
              });
            }
            $codable.data('cmEditor', cmEditor);
          }
        } else {
          // deactivate CodeMirror as codable
          if (agent.hasCodeMirror) {
            cmEditor = $codable.data('cmEditor');
            $codable.val(cmEditor.getValue());
            cmEditor.toTextArea();
          }

          $editable.html($codable.val() || dom.emptyPara);
          $editable.height(options.height ? $codable.height() : 'auto');

          toolbar.activate($toolbar);
          $editable.focus();
        }

        toolbar.updateCodeview(oLayoutInfo.toolbar(), isCodeview);
      }
    };

    var hMousedown = function (event) {
      //preventDefault Selection for FF, IE8+
      if (dom.isImg(event.target)) {
        event.preventDefault();
      }
    };

    var hToolbarAndPopoverUpdate = function (event) {
      // delay for range after mouseup
      setTimeout(function () {
        var oLayoutInfo = makeLayoutInfo(event.currentTarget || event.target);
        var oStyle = editor.currentStyle(event.target);
        if (!oStyle) { return; }

        var isAirMode = oLayoutInfo.editor().data('options').airMode;
        if (!isAirMode) {
          toolbar.update(oLayoutInfo.toolbar(), oStyle);
        }

        popover.update(oLayoutInfo.popover(), oStyle, isAirMode);
        handle.update(oLayoutInfo.handle(), oStyle, isAirMode);
      }, 0);
    };

    var hScroll = function (event) {
      var oLayoutInfo = makeLayoutInfo(event.currentTarget || event.target);
      //hide popover and handle when scrolled
      popover.hide(oLayoutInfo.popover());
      handle.hide(oLayoutInfo.handle());
    };

    /**
     * paste clipboard image
     *
     * @param {Event} event
     */
    var hPasteClipboardImage = function (event) {
      var clipboardData = event.originalEvent.clipboardData;
      if (!clipboardData || !clipboardData.items || !clipboardData.items.length) {
        return;
      }

      var oLayoutInfo = makeLayoutInfo(event.currentTarget || event.target);
      var item = list.head(clipboardData.items);
      var isClipboardImage = item.kind === 'file' && item.type.indexOf('image/') !== -1;

      if (isClipboardImage) {
        insertImages(oLayoutInfo.editable(), [item.getAsFile()]);
      }
    };

    /**
     * `mousedown` event handler on $handle
     *  - controlSizing: resize image
     *
     * @param {MouseEvent} event
     */
    var hHandleMousedown = function (event) {
      if (dom.isControlSizing(event.target)) {
        event.preventDefault();
        event.stopPropagation();

        var oLayoutInfo = makeLayoutInfo(event.target),
            $handle = oLayoutInfo.handle(), $popover = oLayoutInfo.popover(),
            $editable = oLayoutInfo.editable(),
            $editor = oLayoutInfo.editor();

        var elTarget = $handle.find('.note-control-selection').data('target'),
            $target = $(elTarget), posStart = $target.offset(),
            scrollTop = $document.scrollTop();

        var isAirMode = $editor.data('options').airMode;

        $document.on('mousemove', function (event) {
          editor.resizeTo({
            x: event.clientX - posStart.left,
            y: event.clientY - (posStart.top - scrollTop)
          }, $target, !event.shiftKey);

          handle.update($handle, {image: elTarget}, isAirMode);
          popover.update($popover, {image: elTarget}, isAirMode);
        }).one('mouseup', function () {
          $document.off('mousemove');
        });

        if (!$target.data('ratio')) { // original ratio.
          $target.data('ratio', $target.height() / $target.width());
        }

        editor.recordUndo($editable);
      }
    };

    var hToolbarAndPopoverMousedown = function (event) {
      // prevent default event when insertTable (FF, Webkit)
      var $btn = $(event.target).closest('[data-event]');
      if ($btn.length) {
        event.preventDefault();
      }
    };

    var hToolbarAndPopoverClick = function (event) {
      var $btn = $(event.target).closest('[data-event]');

      if ($btn.length) {
        var sEvent = $btn.attr('data-event'),
            sValue = $btn.attr('data-value');

        var oLayoutInfo = makeLayoutInfo(event.target);

        event.preventDefault();

        // before command: detect control selection element($target)
        var $target;
        if ($.inArray(sEvent, ['resize', 'floatMe', 'removeMedia']) !== -1) {
          var $selection = oLayoutInfo.handle().find('.note-control-selection');
          $target = $($selection.data('target'));
        }

        if (editor[sEvent]) { // on command
          var $editable = oLayoutInfo.editable();
          $editable.trigger('focus');
          editor[sEvent]($editable, sValue, $target);
        } else if (commands[sEvent]) {
          commands[sEvent].call(this, oLayoutInfo);
        }

        // after command
        if ($.inArray(sEvent, ['backColor', 'foreColor']) !== -1) {
          var options = oLayoutInfo.editor().data('options', options);
          var module = options.airMode ? popover : toolbar;
          module.updateRecentColor(list.head($btn), sEvent, sValue);
        }

        hToolbarAndPopoverUpdate(event);
      }
    };

    var EDITABLE_PADDING = 24;
    /**
     * `mousedown` event handler on statusbar
     *
     * @param {MouseEvent} event
     */
    var hStatusbarMousedown = function (event) {
      event.preventDefault();
      event.stopPropagation();

      var $editable = makeLayoutInfo(event.target).editable();
      var nEditableTop = $editable.offset().top - $document.scrollTop();

      var oLayoutInfo = makeLayoutInfo(event.currentTarget || event.target);
      var options = oLayoutInfo.editor().data('options');

      $document.on('mousemove', function (event) {
        var nHeight = event.clientY - (nEditableTop + EDITABLE_PADDING);

        nHeight = (options.minHeight > 0) ? Math.max(nHeight, options.minHeight) : nHeight;
        nHeight = (options.maxHeight > 0) ? Math.min(nHeight, options.maxHeight) : nHeight;

        $editable.height(nHeight);
      }).one('mouseup', function () {
        $document.off('mousemove');
      });
    };

    var PX_PER_EM = 18;
    var hDimensionPickerMove = function (event, options) {
      var $picker = $(event.target.parentNode); // target is mousecatcher
      var $dimensionDisplay = $picker.next();
      var $catcher = $picker.find('.note-dimension-picker-mousecatcher');
      var $highlighted = $picker.find('.note-dimension-picker-highlighted');
      var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');

      var posOffset;
      // HTML5 with jQuery - e.offsetX is undefined in Firefox
      if (event.offsetX === undefined) {
        var posCatcher = $(event.target).offset();
        posOffset = {
          x: event.pageX - posCatcher.left,
          y: event.pageY - posCatcher.top
        };
      } else {
        posOffset = {
          x: event.offsetX,
          y: event.offsetY
        };
      }

      var dim = {
        c: Math.ceil(posOffset.x / PX_PER_EM) || 1,
        r: Math.ceil(posOffset.y / PX_PER_EM) || 1
      };

      $highlighted.css({ width: dim.c + 'em', height: dim.r + 'em' });
      $catcher.attr('data-value', dim.c + 'x' + dim.r);

      if (3 < dim.c && dim.c < options.insertTableMaxSize.col) {
        $unhighlighted.css({ width: dim.c + 1 + 'em'});
      }

      if (3 < dim.r && dim.r < options.insertTableMaxSize.row) {
        $unhighlighted.css({ height: dim.r + 1 + 'em'});
      }

      $dimensionDisplay.html(dim.c + ' x ' + dim.r);
    };

    /**
     * attach Drag and Drop Events
     *
     * @param {Object} oLayoutInfo - layout Informations
     */
    var attachDragAndDropEvent = function (oLayoutInfo) {
      var collection = $(), $dropzone = oLayoutInfo.dropzone,
          $dropzoneMessage = oLayoutInfo.dropzone.find('.note-dropzone-message');

      // show dropzone on dragenter when dragging a object to document.
      $document.on('dragenter', function (e) {
        var isCodeview = oLayoutInfo.editor.hasClass('codeview');
        if (!isCodeview && !collection.length) {
          oLayoutInfo.editor.addClass('dragover');
          $dropzone.width(oLayoutInfo.editor.width());
          $dropzone.height(oLayoutInfo.editor.height());
          $dropzoneMessage.text('Drag Image Here');
        }
        collection = collection.add(e.target);
      }).on('dragleave', function (e) {
        collection = collection.not(e.target);
        if (!collection.length) {
          oLayoutInfo.editor.removeClass('dragover');
        }
      }).on('drop', function () {
        collection = $();
        oLayoutInfo.editor.removeClass('dragover');
      });

      // change dropzone's message on hover.
      $dropzone.on('dragenter', function () {
        $dropzone.addClass('hover');
        $dropzoneMessage.text('Drop Image');
      }).on('dragleave', function () {
        $dropzone.removeClass('hover');
        $dropzoneMessage.text('Drag Image Here');
      });

      // attach dropImage
      $dropzone.on('drop', function (event) {
        event.preventDefault();

        var dataTransfer = event.originalEvent.dataTransfer;
        if (dataTransfer && dataTransfer.files) {
          var oLayoutInfo = makeLayoutInfo(event.currentTarget || event.target);
          oLayoutInfo.editable().focus();
          insertImages(oLayoutInfo.editable(), dataTransfer.files);
        }
      }).on('dragover', false); // prevent default dragover event
    };


    /**
     * bind KeyMap on keydown
     *
     * @param {Object} oLayoutInfo
     * @param {Object} keyMap
     */
    this.bindKeyMap = function (oLayoutInfo, keyMap) {
      var $editor = oLayoutInfo.editor;
      var $editable = oLayoutInfo.editable;

      oLayoutInfo = makeLayoutInfo($editable);

      $editable.on('keydown', function (event) {
        var aKey = [];

        // modifier
        if (event.metaKey) { aKey.push('CMD'); }
        if (event.ctrlKey && !event.altKey) { aKey.push('CTRL'); }
        if (event.shiftKey) { aKey.push('SHIFT'); }

        // keycode
        var keyName = key.nameFromCode[event.keyCode];
        if (keyName) { aKey.push(keyName); }

        var sEvent = keyMap[aKey.join('+')];
        if (sEvent) {
          event.preventDefault();

          if (editor[sEvent]) {
            editor[sEvent]($editable, $editor.data('options'));
          } else if (commands[sEvent]) {
            commands[sEvent].call(this, oLayoutInfo);
          }
        } else if (key.isEdit(event.keyCode)) {
          editor.recordUndo($editable);
        }
      });
    };

    /**
     * attach eventhandler
     *
     * @param {Object} oLayoutInfo - layout Informations
     * @param {Object} options - user options include custom event handlers
     * @param {Function} options.enter - enter key handler
     */
    this.attach = function (oLayoutInfo, options) {
      // handlers for editable
      this.bindKeyMap(oLayoutInfo, options.keyMap[agent.isMac ? 'mac' : 'pc']);
      oLayoutInfo.editable.on('mousedown', hMousedown);
      oLayoutInfo.editable.on('keyup mouseup', hToolbarAndPopoverUpdate);
      oLayoutInfo.editable.on('scroll', hScroll);
      oLayoutInfo.editable.on('paste', hPasteClipboardImage);

      // handler for handle and popover
      oLayoutInfo.handle.on('mousedown', hHandleMousedown);
      oLayoutInfo.popover.on('click', hToolbarAndPopoverClick);
      oLayoutInfo.popover.on('mousedown', hToolbarAndPopoverMousedown);

      // handlers for frame mode (toolbar, statusbar)
      if (!options.airMode) {
        // handler for drag and drop
        if (!options.disableDragAndDrop) {
          attachDragAndDropEvent(oLayoutInfo);
        }

        // handler for toolbar
        oLayoutInfo.toolbar.on('click', hToolbarAndPopoverClick);
        oLayoutInfo.toolbar.on('mousedown', hToolbarAndPopoverMousedown);

        // handler for statusbar
        if (!options.disableResizeEditor) {
          oLayoutInfo.statusbar.on('mousedown', hStatusbarMousedown);
        }
      }

      // handler for table dimension
      var $catcherContainer = options.airMode ? oLayoutInfo.popover :
                                                oLayoutInfo.toolbar;
      var $catcher = $catcherContainer.find('.note-dimension-picker-mousecatcher');
      $catcher.css({
        width: options.insertTableMaxSize.col + 'em',
        height: options.insertTableMaxSize.row + 'em'
      }).on('mousemove', function (event) {
        hDimensionPickerMove(event, options);
      });

      // save options on editor
      oLayoutInfo.editor.data('options', options);

      // ret styleWithCSS for backColor / foreColor clearing with 'inherit'.
      if (options.styleWithSpan && !agent.isMSIE) {
        // protect FF Error: NS_ERROR_FAILURE: Failure
        setTimeout(function () {
          document.execCommand('styleWithCSS', 0, true);
        }, 0);
      }

      // History
      oLayoutInfo.editable.data('NoteHistory', new History());

      // basic event callbacks (lowercase)
      // enter, focus, blur, keyup, keydown
      if (options.onenter) {
        oLayoutInfo.editable.keypress(function (event) {
          if (event.keyCode === key.ENTER) { options.onenter(event); }
        });
      }

      if (options.onfocus) { oLayoutInfo.editable.focus(options.onfocus); }
      if (options.onblur) { oLayoutInfo.editable.blur(options.onblur); }
      if (options.onkeyup) { oLayoutInfo.editable.keyup(options.onkeyup); }
      if (options.onkeydown) { oLayoutInfo.editable.keydown(options.onkeydown); }
      if (options.onpaste) { oLayoutInfo.editable.on('paste', options.onpaste); }

      // callbacks for advanced features (camel)
      if (options.onToolbarClick) { oLayoutInfo.toolbar.click(options.onToolbarClick); }
      if (options.onChange) {
        var hChange = function () {
          options.onChange(oLayoutInfo.editable, oLayoutInfo.editable.html());
        };

        if (agent.isMSIE) {
          var sDomEvents = 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted';
          oLayoutInfo.editable.on(sDomEvents, hChange);
        } else {
          oLayoutInfo.editable.on('input', hChange);
        }
      }

      // All editor status will be saved on editable with jquery's data
      // for support multiple editor with singleton object.
      oLayoutInfo.editable.data('callbacks', {
        onAutoSave: options.onAutoSave,
        onImageUpload: options.onImageUpload,
        onImageUploadError: options.onImageUploadError,
        onFileUpload: options.onFileUpload,
        onFileUploadError: options.onFileUpload
      });
    };

    this.dettach = function (oLayoutInfo, options) {
      oLayoutInfo.editable.off();

      oLayoutInfo.popover.off();
      oLayoutInfo.handle.off();
      oLayoutInfo.dialog.off();

      if (!options.airMode) {
        oLayoutInfo.dropzone.off();
        oLayoutInfo.toolbar.off();
        oLayoutInfo.statusbar.off();
      }
    };
  };

  /**
   * renderer
   *
   * rendering toolbar and editable
   */
  var Renderer = function () {

    /**
     * bootstrap button template
     *
     * @param {String} sLabel
     * @param {Object} [options]
     * @param {String} [options.event]
     * @param {String} [options.value]
     * @param {String} [options.title]
     * @param {String} [options.dropdown]
     */
    var tplButton = function (sLabel, options) {
      var event = options.event;
      var value = options.value;
      var title = options.title;
      var className = options.className;
      var dropdown = options.dropdown;

      return '<button type="button"' +
                 ' class="btn btn-default btn-sm btn-small' +
                   (className ? ' ' + className : '') +
                   (dropdown ? ' dropdown-toggle' : '') +
                 '"' +
                 (dropdown ? ' data-toggle="dropdown"' : '') +
                 (title ? ' title="' + title + '"' : '') +
                 (event ? ' data-event="' + event + '"' : '') +
                 (value ? ' data-value=\'' + value + '\'' : '') +
                 ' tabindex="-1">' +
               sLabel +
               (dropdown ? ' <span class="caret"></span>' : '') +
             '</button>' +
             (dropdown || '');
    };

    /**
     * bootstrap icon button template
     *
     * @param {String} sIconClass
     * @param {Object} [options]
     * @param {String} [options.event]
     * @param {String} [options.value]
     * @param {String} [options.title]
     * @param {String} [options.dropdown]
     */
    var tplIconButton = function (sIconClass, options) {
      var sLabel = '<i class="' + sIconClass + '"></i>';
      return tplButton(sLabel, options);
    };

    /**
     * bootstrap popover template
     *
     * @param {String} className
     * @param {String} content
     */
    var tplPopover = function (className, content) {
      return '<div class="' + className + ' popover bottom in" style="display: none;">' +
               '<div class="arrow"></div>' +
               '<div class="popover-content">' +
                 content +
               '</div>' +
             '</div>';
    };

    /**
     * bootstrap dialog template
     *
     * @param {String} className
     * @param {String} [title]
     * @param {String} body
     * @param {String} [footer]
     */
    var tplDialog = function (className, title, body, footer) {
      return '<div class="' + className + ' modal" aria-hidden="false">' +
               '<div class="modal-dialog">' +
                 '<div class="modal-content">' +
                   (title ?
                   '<div class="modal-header">' +
                     '<button type="button" class="close" aria-hidden="true" tabindex="-1">&times;</button>' +
                     '<h4 class="modal-title">' + title + '</h4>' +
                   '</div>' : ''
                   ) +
                   '<form class="note-modal-form">' +
                     '<div class="modal-body">' +
                       '<div class="row-fluid">' + body + '</div>' +
                     '</div>' +
                     (footer ?
                     '<div class="modal-footer">' + footer + '</div>' : ''
                     ) +
                   '</form>' +
                 '</div>' +
               '</div>' +
             '</div>';
    };

    var tplButtonInfo = {
      picture: function (lang) {
        return tplIconButton('fa fa-picture-o icon-picture', {
          event: 'showImageDialog',
          title: lang.image.image
        });
      },
      link: function (lang) {
        return tplIconButton('fa fa-link icon-link', {
          event: 'showLinkDialog',
          title: lang.link.link
        });
      },
      video: function (lang) {
        return tplIconButton('fa fa-youtube-play icon-play', {
          event: 'showVideoDialog',
          title: lang.video.video
        });
      },
      table: function (lang) {
        var dropdown = '<ul class="dropdown-menu">' +
                         '<div class="note-dimension-picker">' +
                           '<div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"></div>' +
                           '<div class="note-dimension-picker-highlighted"></div>' +
                           '<div class="note-dimension-picker-unhighlighted"></div>' +
                         '</div>' +
                         '<div class="note-dimension-display"> 1 x 1 </div>' +
                       '</ul>';
        return tplIconButton('fa fa-table icon-table', {
          title: lang.table.table,
          dropdown: dropdown
        });
      },
      style: function (lang, options) {
        var items = options.styleTags.reduce(function (memo, v) {
          var label = lang.style[v === 'p' ? 'normal' : v];
          return memo + '<li><a data-event="formatBlock" href="#" data-value="' + v + '">' +
                   (
                     (v === 'p' || v === 'pre') ? label :
                     '<' + v + '>' + label + '</' + v + '>'
                   ) +
                 '</a></li>';
        }, '');

        return tplIconButton('fa fa-magic icon-magic', {
          title: lang.style.style,
          dropdown: '<ul class="dropdown-menu">' + items + '</ul>'
        });
      },
      fontname: function (lang, options) {
        var items = options.fontNames.reduce(function (memo, v) {
          if (!agent.isFontInstalled(v)) { return memo; }
          return memo + '<li><a data-event="fontName" href="#" data-value="' + v + '">' +
                          '<i class="fa fa-check icon-ok"></i> ' + v +
                        '</a></li>';
        }, '');
        var sLabel = '<span class="note-current-fontname">' +
                       options.defaultFontName +
                     '</span>';
        return tplButton(sLabel, {
          title: lang.font.name,
          dropdown: '<ul class="dropdown-menu">' + items + '</ul>'
        });
      },
      fontsize: function (lang, options) {
        var items = options.fontSizes.reduce(function (memo, v) {
          return memo + '<li><a data-event="fontSize" href="#" data-value="' + v + '">' +
                          '<i class="fa fa-check icon-ok"></i> ' + v +
                        '</a></li>';
        }, '');

        var sLabel = '<span class="note-current-fontsize">11</span>';
        return tplButton(sLabel, {
          title: lang.font.size,
          dropdown: '<ul class="dropdown-menu">' + items + '</ul>'
        });
      },

      color: function (lang) {
        var colorButtonLabel = '<i class="fa fa-font icon-font" style="color:black;background-color:yellow;"></i>';
        var colorButton = tplButton(colorButtonLabel, {
          className: 'note-recent-color',
          title: lang.color.recent,
          event: 'color',
          value: '{"backColor":"yellow"}'
        });

        var dropdown = '<ul class="dropdown-menu">' +
                         '<li>' +
                           '<div class="btn-group">' +
                             '<div class="note-palette-title">' + lang.color.background + '</div>' +
                             '<div class="note-color-reset" data-event="backColor"' +
                               ' data-value="inherit" title="' + lang.color.transparent + '">' +
                               lang.color.setTransparent +
                             '</div>' +
                             '<div class="note-color-palette" data-target-event="backColor"></div>' +
                           '</div>' +
                           '<div class="btn-group">' +
                             '<div class="note-palette-title">' + lang.color.foreground + '</div>' +
                             '<div class="note-color-reset" data-event="foreColor" data-value="inherit" title="' + lang.color.reset + '">' +
                               lang.color.resetToDefault +
                             '</div>' +
                             '<div class="note-color-palette" data-target-event="foreColor"></div>' +
                           '</div>' +
                         '</li>' +
                       '</ul>';

        var moreButton = tplButton('', {
          title: lang.color.more,
          dropdown: dropdown
        });

        return colorButton + moreButton;
      },
      bold: function (lang) {
        return tplIconButton('fa fa-bold icon-bold', {
          event: 'bold',
          title: lang.font.bold
        });
      },
      italic: function (lang) {
        return tplIconButton('fa fa-italic icon-italic', {
          event: 'italic',
          title: lang.font.italic
        });
      },
      underline: function (lang) {
        return tplIconButton('fa fa-underline icon-underline', {
          event: 'underline',
          title: lang.font.underline
        });
      },
      strikethrough: function (lang) {
        return tplIconButton('fa fa-strikethrough icon-strikethrough', {
          event: 'strikethrough',
          title: lang.font.strikethrough
        });
      },
      superscript: function (lang) {
        return tplIconButton('fa fa-superscript icon-superscript', {
          event: 'superscript',
          title: lang.font.superscript
        });
      },
      subscript: function (lang) {
        return tplIconButton('fa fa-subscript icon-subscript', {
          event: 'subscript',
          title: lang.font.subscript
        });
      },
      clear: function (lang) {
        return tplIconButton('fa fa-eraser icon-eraser', {
          event: 'removeFormat',
          title: lang.font.clear
        });
      },
      ul: function (lang) {
        return tplIconButton('fa fa-list-ul icon-list-ul', {
          event: 'insertUnorderedList',
          title: lang.lists.unordered
        });
      },
      ol: function (lang) {
        return tplIconButton('fa fa-list-ol icon-list-ol', {
          event: 'insertOrderedList',
          title: lang.lists.ordered
        });
      },
      paragraph: function (lang) {
        var leftButton = tplIconButton('fa fa-align-left icon-align-left', {
          title: lang.paragraph.left,
          event: 'justifyLeft'
        });
        var centerButton = tplIconButton('fa fa-align-center icon-align-center', {
          title: lang.paragraph.center,
          event: 'justifyCenter'
        });
        var rightButton = tplIconButton('fa fa-align-right icon-align-right', {
          title: lang.paragraph.right,
          event: 'justifyRight'
        });
        var justifyButton = tplIconButton('fa fa-align-justify icon-align-justify', {
          title: lang.paragraph.justify,
          event: 'justifyFull'
        });

        var outdentButton = tplIconButton('fa fa-outdent icon-indent-left', {
          title: lang.paragraph.outdent,
          event: 'outdent'
        });
        var indentButton = tplIconButton('fa fa-indent icon-indent-right', {
          title: lang.paragraph.indent,
          event: 'indent'
        });

        var dropdown = '<div class="dropdown-menu">' +
                         '<div class="note-align btn-group">' +
                           leftButton + centerButton + rightButton + justifyButton +
                         '</div>' +
                         '<div class="note-list btn-group">' +
                           indentButton + outdentButton +
                         '</div>' +
                       '</div>';

        return tplIconButton('fa fa-align-left icon-align-left', {
          title: lang.paragraph.paragraph,
          dropdown: dropdown
        });
      },
      height: function (lang, options) {
        var items = options.lineHeights.reduce(function (memo, v) {
          return memo + '<li><a data-event="lineHeight" href="#" data-value="' + parseFloat(v) + '">' +
                          '<i class="fa fa-check icon-ok"></i> ' + v +
                        '</a></li>';
        }, '');

        return tplIconButton('fa fa-text-height icon-text-height', {
          title: lang.font.height,
          dropdown: '<ul class="dropdown-menu">' + items + '</ul>'
        });

      },
      help: function (lang) {
        return tplIconButton('fa fa-question icon-question', {
          event: 'showHelpDialog',
          title: lang.options.help
        });
      },
      fullscreen: function (lang) {
        return tplIconButton('fa fa-arrows-alt icon-fullscreen', {
          event: 'fullscreen',
          title: lang.options.fullscreen
        });
      },
      codeview: function (lang) {
        return tplIconButton('fa fa-code icon-code', {
          event: 'codeview',
          title: lang.options.codeview
        });
      },
      undo: function (lang) {
        return tplIconButton('fa fa-undo icon-undo', {
          event: 'undo',
          title: lang.history.undo
        });
      },
      redo: function (lang) {
        return tplIconButton('fa fa-repeat icon-repeat', {
          event: 'redo',
          title: lang.history.redo
        });
      },
      hr: function (lang) {
        return tplIconButton('fa fa-minus icon-hr', {
          event: 'insertHorizontalRule',
          title: lang.hr.insert
        });
      }
    };

    var tplPopovers = function (lang, options) {
      var tplLinkPopover = function () {
        var linkButton = tplIconButton('fa fa-edit icon-edit', {
          title: lang.link.edit,
          event: 'showLinkDialog'
        });
        var unlinkButton = tplIconButton('fa fa-unlink icon-unlink', {
          title: lang.link.unlink,
          event: 'unlink'
        });
        var content = '<a href="http://www.google.com" target="_blank">www.google.com</a>&nbsp;&nbsp;' +
                      '<div class="note-insert btn-group">' +
                        linkButton + unlinkButton +
                      '</div>';
        return tplPopover('note-link-popover', content);
      };

      var tplImagePopover = function () {
        var fullButton = tplButton('<span class="note-fontsize-10">100%</span>', {
          title: lang.image.resizeFull,
          event: 'resize',
          value: '1'
        });
        var halfButton = tplButton('<span class="note-fontsize-10">50%</span>', {
          title: lang.image.resizeHalf,
          event: 'resize',
          value: '0.5'
        });
        var quarterButton = tplButton('<span class="note-fontsize-10">25%</span>', {
          title: lang.image.resizeQuarter,
          event: 'resize',
          value: '0.25'
        });

        var leftButton = tplIconButton('fa fa-align-left icon-align-left', {
          title: lang.image.floatLeft,
          event: 'floatMe',
          value: 'left'
        });
        var rightButton = tplIconButton('fa fa-align-right icon-align-right', {
          title: lang.image.floatRight,
          event: 'floatMe',
          value: 'right'
        });
        var justifyButton = tplIconButton('fa fa-align-justify icon-align-justify', {
          title: lang.image.floatNone,
          event: 'floatMe',
          value: 'none'
        });

        var removeButton = tplIconButton('fa fa-trash-o icon-trash', {
          title: lang.image.remove,
          event: 'removeMedia',
          value: 'none'
        });

        var content = '<div class="btn-group">' + fullButton + halfButton + quarterButton + '</div>' +
                      '<div class="btn-group">' + leftButton + rightButton + justifyButton + '</div>' +
                      '<div class="btn-group">' + removeButton + '</div>';
        return tplPopover('note-image-popover', content);
      };

      var tplAirPopover = function () {
        var content = '';
        for (var idx = 0, sz = options.airPopover.length; idx < sz; idx ++) {
          var group = options.airPopover[idx];
          content += '<div class="note-' + group[0] + ' btn-group">';
          for (var i = 0, szGroup = group[1].length; i < szGroup; i++) {
            content += tplButtonInfo[group[1][i]](lang, options);
          }
          content += '</div>';
        }

        return tplPopover('note-air-popover', content);
      };

      return '<div class="note-popover">' +
               tplLinkPopover() +
               tplImagePopover() +
               (options.airMode ?  tplAirPopover() : '') +
             '</div>';
    };

    var tplHandles = function () {
      return '<div class="note-handle">' +
               '<div class="note-control-selection">' +
                 '<div class="note-control-selection-bg"></div>' +
                 '<div class="note-control-holder note-control-nw"></div>' +
                 '<div class="note-control-holder note-control-ne"></div>' +
                 '<div class="note-control-holder note-control-sw"></div>' +
                 '<div class="note-control-sizing note-control-se"></div>' +
                 '<div class="note-control-selection-info"></div>' +
               '</div>' +
             '</div>';
    };

    /**
     * shortcut table template
     * @param {String} title
     * @param {String} body
     */
    var tplShortcut = function (title, body) {
      return '<table class="note-shortcut">' +
               '<thead>' +
                 '<tr><th></th><th>' + title + '</th></tr>' +
               '</thead>' +
               '<tbody>' + body + '</tbody>' +
             '</table>';
    };

    var tplShortcutText = function (lang) {
      var body = '<tr><td>âŒ˜ + B</td><td>' + lang.font.bold + '</td></tr>' +
                 '<tr><td>âŒ˜ + I</td><td>' + lang.font.italic + '</td></tr>' +
                 '<tr><td>âŒ˜ + U</td><td>' + lang.font.underline + '</td></tr>' +
                 '<tr><td>âŒ˜ + â‡§ + S</td><td>' + lang.font.strikethrough + '</td></tr>' +
                 '<tr><td>âŒ˜ + \\</td><td>' + lang.font.clear + '</td></tr>';

      return tplShortcut(lang.shortcut.textFormatting, body);
    };

    var tplShortcutAction = function (lang) {
      var body = '<tr><td>âŒ˜ + Z</td><td>' + lang.history.undo + '</td></tr>' +
                 '<tr><td>âŒ˜ + â‡§ + Z</td><td>' + lang.history.redo + '</td></tr>' +
                 '<tr><td>âŒ˜ + ]</td><td>' + lang.paragraph.indent + '</td></tr>' +
                 '<tr><td>âŒ˜ + [</td><td>' + lang.paragraph.outdent + '</td></tr>' +
                 '<tr><td>âŒ˜ + ENTER</td><td>' + lang.hr.insert + '</td></tr>';

      return tplShortcut(lang.shortcut.action, body);
    };

    var tplShortcutPara = function (lang) {
      var body = '<tr><td>âŒ˜ + â‡§ + L</td><td>' + lang.paragraph.left + '</td></tr>' +
                 '<tr><td>âŒ˜ + â‡§ + E</td><td>' + lang.paragraph.center + '</td></tr>' +
                 '<tr><td>âŒ˜ + â‡§ + R</td><td>' + lang.paragraph.right + '</td></tr>' +
                 '<tr><td>âŒ˜ + â‡§ + J</td><td>' + lang.paragraph.justify + '</td></tr>' +
                 '<tr><td>âŒ˜ + â‡§ + NUM7</td><td>' + lang.lists.ordered + '</td></tr>' +
                 '<tr><td>âŒ˜ + â‡§ + NUM8</td><td>' + lang.lists.unordered + '</td></tr>';

      return tplShortcut(lang.shortcut.paragraphFormatting, body);
    };

    var tplShortcutStyle = function (lang) {
      var body = '<tr><td>âŒ˜ + NUM0</td><td>' + lang.style.normal + '</td></tr>' +
                 '<tr><td>âŒ˜ + NUM1</td><td>' + lang.style.h1 + '</td></tr>' +
                 '<tr><td>âŒ˜ + NUM2</td><td>' + lang.style.h2 + '</td></tr>' +
                 '<tr><td>âŒ˜ + NUM3</td><td>' + lang.style.h3 + '</td></tr>' +
                 '<tr><td>âŒ˜ + NUM4</td><td>' + lang.style.h4 + '</td></tr>' +
                 '<tr><td>âŒ˜ + NUM5</td><td>' + lang.style.h5 + '</td></tr>' +
                 '<tr><td>âŒ˜ + NUM6</td><td>' + lang.style.h6 + '</td></tr>';

      return tplShortcut(lang.shortcut.documentStyle, body);
    };

    var tplExtraShortcuts = function (lang, options) {
      var extraKeys = options.extraKeys;
      var body = '';
      for (var key in extraKeys) {
        if (extraKeys.hasOwnProperty(key)) {
          body += '<tr><td>' + key + '</td><td>' + extraKeys[key] + '</td></tr>';
        }
      }

      return tplShortcut(lang.shortcut.extraKeys, body);
    };

    var tplShortcutTable = function (lang, options) {
      var template = '<table class="note-shortcut-layout">' +
                       '<tbody>' +
                         '<tr><td>' + tplShortcutAction(lang, options) + '</td><td>' + tplShortcutText(lang, options) + '</td></tr>' +
                         '<tr><td>' + tplShortcutStyle(lang, options) + '</td><td>' + tplShortcutPara(lang, options) + '</td></tr>';
      if (options.extraKeys) {
        template += '<tr><td colspan="2">' + tplExtraShortcuts(lang, options) + '</td></tr>';
      }
      template += '</tbody</table>';
      return template;
    };

    var replaceMacKeys = function (sHtml) {
      return sHtml.replace(/âŒ˜/g, 'Ctrl').replace(/â‡§/g, 'Shift');
    };

    var tplDialogs = function (lang, options) {
      var tplImageDialog = function () {
        var body = '<h5>' + lang.image.selectFromFiles + '</h5>' +
                   '<input class="note-image-input" type="file" name="files" accept="image/*" />' +
                   '<h5>' + lang.image.url + '</h5>' +
                   '<input class="note-image-url form-control span12" type="text" />';
        var footer = '<button href="#" class="btn btn-primary note-image-btn disabled" disabled>' + lang.image.insert + '</button>';
        return tplDialog('note-image-dialog', lang.image.insert, body, footer);
      };

      var tplLinkDialog = function () {
        var body = '<div class="form-group">' +
                     '<label>' + lang.link.textToDisplay + '</label>' +
                     '<input class="note-link-text form-control span12" type="text" />' +
                   '</div>' +
                   '<div class="form-group">' +
                     '<label>' + lang.link.url + '</label>' +
                     '<input class="note-link-url form-control span12" type="text" />' +
                   '</div>' +
                   (!options.disableLinkTarget ?
                     '<div class="checkbox">' +
                       '<label>' + '<input type="checkbox" checked> ' +
                         lang.link.openInNewWindow +
                       '</label>' +
                     '</div>' : ''
                   );
        var footer = '<button href="#" class="btn btn-primary note-link-btn disabled" disabled>' + lang.link.insert + '</button>';
        return tplDialog('note-link-dialog', lang.link.insert, body, footer);
      };

      var tplVideoDialog = function () {
        var body = '<div class="form-group">' +
                     '<label>' + lang.video.url + '</label>&nbsp;<small class="text-muted">' + lang.video.providers + '</small>' +
                     '<input class="note-video-url form-control span12" type="text" />' +
                   '</div>';
        var footer = '<button href="#" class="btn btn-primary note-video-btn disabled" disabled>' + lang.video.insert + '</button>';
        return tplDialog('note-video-dialog', lang.video.insert, body, footer);
      };

      var tplHelpDialog = function () {
        var body = '<a class="modal-close pull-right" aria-hidden="true" tabindex="-1">' + lang.shortcut.close + '</a>' +
                   '<div class="title">' + lang.shortcut.shortcuts + '</div>' +
                   (agent.isMac ? tplShortcutTable(lang, options) : replaceMacKeys(tplShortcutTable(lang, options))) +
                   '<p class="text-center">' +
                     '<a href="//hackerwins.github.io/summernote/" target="_blank">Summernote 0.5.2</a> Â· ' +
                     '<a href="//github.com/HackerWins/summernote" target="_blank">Project</a> Â· ' +
                     '<a href="//github.com/HackerWins/summernote/issues" target="_blank">Issues</a>' +
                   '</p>';
        return tplDialog('note-help-dialog', '', body, '');
      };

      return '<div class="note-dialog">' +
               tplImageDialog() +
               tplLinkDialog() +
               tplVideoDialog() +
               tplHelpDialog() +
             '</div>';
    };

    var tplStatusbar = function () {
      return '<div class="note-resizebar">' +
               '<div class="note-icon-bar"></div>' +
               '<div class="note-icon-bar"></div>' +
               '<div class="note-icon-bar"></div>' +
             '</div>';
    };

    var representShortcut = function (str) {
      if (agent.isMac) {
        str = str.replace('CMD', 'âŒ˜').replace('SHIFT', 'â‡§');
      }

      return str.replace('BACKSLASH', '\\')
                .replace('SLASH', '/')
                .replace('LEFTBRACKET', '[')
                .replace('RIGHTBRACKET', ']');
    };

    /**
     * createTooltip
     *
     * @param {jQuery} $container
     * @param {Object} keyMap
     * @param {String} [sPlacement]
     */
    var createTooltip = function ($container, keyMap, sPlacement) {
      var invertedKeyMap = func.invertObject(keyMap);
      var $buttons = $container.find('button');

      $buttons.each(function (i, elBtn) {
        var $btn = $(elBtn);
        var sShortcut = invertedKeyMap[$btn.data('event')];
        if (sShortcut) {
          $btn.attr('title', function (i, v) {
            return v + ' (' + representShortcut(sShortcut) + ')';
          });
        }
      // bootstrap tooltip on btn-group bug
      // https://github.com/twbs/bootstrap/issues/5687
      }).tooltip({
        container: 'body',
        trigger: 'hover',
        placement: sPlacement || 'top'
      }).on('click', function () {
        $(this).tooltip('hide');
      });
    };

    // createPalette
    var createPalette = function ($container, options) {
      var aaColor = options.colors;
      $container.find('.note-color-palette').each(function () {
        var $palette = $(this), sEvent = $palette.attr('data-target-event');
        var aPaletteContents = [];
        for (var row = 0, szRow = aaColor.length; row < szRow; row++) {
          var aColor = aaColor[row];
          var aButton = [];
          for (var col = 0, szCol = aColor.length; col < szCol; col++) {
            var sColor = aColor[col];
            aButton.push(['<button type="button" class="note-color-btn" style="background-color:', sColor,
                           ';" data-event="', sEvent,
                           '" data-value="', sColor,
                           '" title="', sColor,
                           '" data-toggle="button" tabindex="-1"></button>'].join(''));
          }
          aPaletteContents.push('<div>' + aButton.join('') + '</div>');
        }
        $palette.html(aPaletteContents.join(''));
      });
    };

    /**
     * create summernote layout (air mode)
     *
     * @param {jQuery} $holder
     * @param {Object} options
     */
    this.createLayoutByAirMode = function ($holder, options) {
      var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];
      var langInfo = $.summernote.lang[options.lang];

      var id = func.uniqueId();

      $holder.addClass('note-air-editor note-editable');
      $holder.attr({
        'id': 'note-editor-' + id,
        'contentEditable': true
      });

      var body = document.body;

      // create Popover
      var $popover = $(tplPopovers(langInfo, options));
      $popover.addClass('note-air-layout');
      $popover.attr('id', 'note-popover-' + id);
      $popover.appendTo(body);
      createTooltip($popover, keyMap);
      createPalette($popover, options);

      // create Handle
      var $handle = $(tplHandles());
      $handle.addClass('note-air-layout');
      $handle.attr('id', 'note-handle-' + id);
      $handle.appendTo(body);

      // create Dialog
      var $dialog = $(tplDialogs(langInfo, options));
      $dialog.addClass('note-air-layout');
      $dialog.attr('id', 'note-dialog-' + id);
      $dialog.find('button.close, a.modal-close').click(function () {
        $(this).closest('.modal').modal('hide');
      });
      $dialog.appendTo(body);
    };

    /**
     * create summernote layout (normal mode)
     *
     * @param {jQuery} $holder
     * @param {Object} options
     */
    this.createLayoutByFrame = function ($holder, options) {
      //01. create Editor
      var $editor = $('<div class="note-editor"></div>');
      if (options.width) {
        $editor.width(options.width);
      }

      //02. statusbar (resizebar)
      if (options.height > 0) {
        $('<div class="note-statusbar">' + (options.disableResizeEditor ? '' : tplStatusbar()) + '</div>').prependTo($editor);
      }

      //03. create Editable
      var isContentEditable = !$holder.is(':disabled');
      var $editable = $('<div class="note-editable" contentEditable="' + isContentEditable + '"></div>')
          .prependTo($editor);
      if (options.height) {
        $editable.height(options.height);
      }
      if (options.direction) {
        $editable.attr('dir', options.direction);
      }

      $editable.html(dom.html($holder) || dom.emptyPara);

      //031. create codable
      $('<textarea class="note-codable"></textarea>').prependTo($editor);

      var langInfo = $.summernote.lang[options.lang];

      //04. create Toolbar
      var sToolbar = '';
      for (var idx = 0, sz = options.toolbar.length; idx < sz; idx ++) {
        var group = options.toolbar[idx];
        sToolbar += '<div class="note-' + group[0] + ' btn-group">';
        for (var i = 0, szGroup = group[1].length; i < szGroup; i++) {
          sToolbar += tplButtonInfo[group[1][i]](langInfo, options);
        }
        sToolbar += '</div>';
      }

      sToolbar = '<div class="note-toolbar btn-toolbar">' + sToolbar + '</div>';

      var $toolbar = $(sToolbar).prependTo($editor);
      var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];
      createPalette($toolbar, options);
      createTooltip($toolbar, keyMap, 'bottom');

      //05. create Popover
      var $popover = $(tplPopovers(langInfo, options)).prependTo($editor);
      createPalette($popover, options);
      createTooltip($popover, keyMap);

      //06. handle(control selection, ...)
      $(tplHandles()).prependTo($editor);

      //07. create Dialog
      var $dialog = $(tplDialogs(langInfo, options)).prependTo($editor);
      $dialog.find('button.close, a.modal-close').click(function () {
        $(this).closest('.modal').modal('hide');
      });

      //08. create Dropzone
      $('<div class="note-dropzone"><div class="note-dropzone-message"></div></div>').prependTo($editor);

      //09. Editor/Holder switch
      $editor.insertAfter($holder);
      $holder.hide();
    };

    this.noteEditorFromHolder = function ($holder) {
      if ($holder.hasClass('note-air-editor')) {
        return $holder;
      } else if ($holder.next().hasClass('note-editor')) {
        return $holder.next();
      } else {
        return $();
      }
    };

    /**
     * create summernote layout
     *
     * @param {jQuery} $holder
     * @param {Object} options
     */
    this.createLayout = function ($holder, options) {
      if (this.noteEditorFromHolder($holder).length) {
        return;
      }

      if (options.airMode) {
        this.createLayoutByAirMode($holder, options);
      } else {
        this.createLayoutByFrame($holder, options);
      }
    };

    /**
     * returns layoutInfo from holder
     *
     * @param {jQuery} $holder - placeholder
     * @returns {Object}
     */
    this.layoutInfoFromHolder = function ($holder) {
      var $editor = this.noteEditorFromHolder($holder);
      if (!$editor.length) { return; }

      var layoutInfo = dom.buildLayoutInfo($editor);
      // cache all properties.
      for (var key in layoutInfo) {
        if (layoutInfo.hasOwnProperty(key)) {
          layoutInfo[key] = layoutInfo[key].call();
        }
      }
      return layoutInfo;
    };

    /**
     * removeLayout
     *
     * @param {jQuery} $holder - placeholder
     * @param {Object} oLayoutInfo
     * @param {Object} options
     *
     */
    this.removeLayout = function ($holder, oLayoutInfo, options) {
      if (options.airMode) {
        $holder.removeClass('note-air-editor note-editable')
               .removeAttr('id contentEditable');

        oLayoutInfo.popover.remove();
        oLayoutInfo.handle.remove();
        oLayoutInfo.dialog.remove();
      } else {
        $holder.html(oLayoutInfo.editable.html());

        oLayoutInfo.editor.remove();
        $holder.show();
      }
    };
  };

  // jQuery namespace for summernote
  $.summernote = $.summernote || {};

  // extends default `settings`
  $.extend($.summernote, settings);

  var renderer = new Renderer();
  var eventHandler = new EventHandler();

  /**
   * extend jquery fn
   */
  $.fn.extend({
    /**
     * initialize summernote
     *  - create editor layout and attach Mouse and keyboard events.
     *
     * @param {Object} options
     * @returns {this}
     */
    summernote: function (options) {
      // extend default options
      options = $.extend({}, $.summernote.options, options);

      this.each(function (idx, elHolder) {
        var $holder = $(elHolder);

        // createLayout with options
        renderer.createLayout($holder, options);

        var info = renderer.layoutInfoFromHolder($holder);
        eventHandler.attach(info, options);

        // Textarea: auto filling the code before form submit.
        if (dom.isTextarea($holder[0])) {
          $holder.closest('form').submit(function () {
            $holder.html($holder.code());
          });
        }
      });

      // focus on first editable element
      if (this.first().length && options.focus) {
        var info = renderer.layoutInfoFromHolder(this.first());
        info.editable.focus();
      }

      // callback on init
      if (this.length && options.oninit) {
        options.oninit();
      }

      return this;
    },
    // 

    /**
     * get the HTML contents of note or set the HTML contents of note.
     *
     * @param {String} [sHTML] - HTML contents(optional, set)
     * @returns {this|String} - context(set) or HTML contents of note(get).
     */
    code: function (sHTML) {
      // get the HTML contents of note
      if (sHTML === undefined) {
        var $holder = this.first();
        if (!$holder.length) { return; }
        var info = renderer.layoutInfoFromHolder($holder);
        if (!!(info && info.editable)) {
          var isCodeview = info.editor.hasClass('codeview');
          if (isCodeview && agent.hasCodeMirror) {
            info.codable.data('cmEditor').save();
          }
          return isCodeview ? info.codable.val() : info.editable.html();
        }
        return $holder.html();
      }

      // set the HTML contents of note
      this.each(function (i, elHolder) {
        var info = renderer.layoutInfoFromHolder($(elHolder));
        if (info && info.editable) { info.editable.html(sHTML); }
      });

      return this;
    },

    /**
     * destroy Editor Layout and dettach Key and Mouse Event
     * @returns {this}
     */
    destroy: function () {
      this.each(function (idx, elHolder) {
        var $holder = $(elHolder);

        var info = renderer.layoutInfoFromHolder($holder);
        if (!info || !info.editable) { return; }

        var options = info.editor.data('options');

        eventHandler.dettach(info, options);
        renderer.removeLayout($holder, info, options);
      });

      return this;
    }
  });
}));
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\traverse\\index.js":[function(require,module,exports){
var traverse = module.exports = function (obj) {
    return new Traverse(obj);
};

function Traverse (obj) {
    this.value = obj;
}

Traverse.prototype.get = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i ++) {
        var key = ps[i];
        if (!node || !hasOwnProperty.call(node, key)) {
            node = undefined;
            break;
        }
        node = node[key];
    }
    return node;
};

Traverse.prototype.has = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i ++) {
        var key = ps[i];
        if (!node || !hasOwnProperty.call(node, key)) {
            return false;
        }
        node = node[key];
    }
    return true;
};

Traverse.prototype.set = function (ps, value) {
    var node = this.value;
    for (var i = 0; i < ps.length - 1; i ++) {
        var key = ps[i];
        if (!hasOwnProperty.call(node, key)) node[key] = {};
        node = node[key];
    }
    node[ps[i]] = value;
    return value;
};

Traverse.prototype.map = function (cb) {
    return walk(this.value, cb, true);
};

Traverse.prototype.forEach = function (cb) {
    this.value = walk(this.value, cb, false);
    return this.value;
};

Traverse.prototype.reduce = function (cb, init) {
    var skip = arguments.length === 1;
    var acc = skip ? this.value : init;
    this.forEach(function (x) {
        if (!this.isRoot || !skip) {
            acc = cb.call(this, acc, x);
        }
    });
    return acc;
};

Traverse.prototype.paths = function () {
    var acc = [];
    this.forEach(function (x) {
        acc.push(this.path); 
    });
    return acc;
};

Traverse.prototype.nodes = function () {
    var acc = [];
    this.forEach(function (x) {
        acc.push(this.node);
    });
    return acc;
};

Traverse.prototype.clone = function () {
    var parents = [], nodes = [];
    
    return (function clone (src) {
        for (var i = 0; i < parents.length; i++) {
            if (parents[i] === src) {
                return nodes[i];
            }
        }
        
        if (typeof src === 'object' && src !== null) {
            var dst = copy(src);
            
            parents.push(src);
            nodes.push(dst);
            
            forEach(objectKeys(src), function (key) {
                dst[key] = clone(src[key]);
            });
            
            parents.pop();
            nodes.pop();
            return dst;
        }
        else {
            return src;
        }
    })(this.value);
};

function walk (root, cb, immutable) {
    var path = [];
    var parents = [];
    var alive = true;
    
    return (function walker (node_) {
        var node = immutable ? copy(node_) : node_;
        var modifiers = {};
        
        var keepGoing = true;
        
        var state = {
            node : node,
            node_ : node_,
            path : [].concat(path),
            parent : parents[parents.length - 1],
            parents : parents,
            key : path.slice(-1)[0],
            isRoot : path.length === 0,
            level : path.length,
            circular : null,
            update : function (x, stopHere) {
                if (!state.isRoot) {
                    state.parent.node[state.key] = x;
                }
                state.node = x;
                if (stopHere) keepGoing = false;
            },
            'delete' : function (stopHere) {
                delete state.parent.node[state.key];
                if (stopHere) keepGoing = false;
            },
            remove : function (stopHere) {
                if (isArray(state.parent.node)) {
                    state.parent.node.splice(state.key, 1);
                }
                else {
                    delete state.parent.node[state.key];
                }
                if (stopHere) keepGoing = false;
            },
            keys : null,
            before : function (f) { modifiers.before = f },
            after : function (f) { modifiers.after = f },
            pre : function (f) { modifiers.pre = f },
            post : function (f) { modifiers.post = f },
            stop : function () { alive = false },
            block : function () { keepGoing = false }
        };
        
        if (!alive) return state;
        
        function updateState() {
            if (typeof state.node === 'object' && state.node !== null) {
                if (!state.keys || state.node_ !== state.node) {
                    state.keys = objectKeys(state.node)
                }
                
                state.isLeaf = state.keys.length == 0;
                
                for (var i = 0; i < parents.length; i++) {
                    if (parents[i].node_ === node_) {
                        state.circular = parents[i];
                        break;
                    }
                }
            }
            else {
                state.isLeaf = true;
                state.keys = null;
            }
            
            state.notLeaf = !state.isLeaf;
            state.notRoot = !state.isRoot;
        }
        
        updateState();
        
        // use return values to update if defined
        var ret = cb.call(state, state.node);
        if (ret !== undefined && state.update) state.update(ret);
        
        if (modifiers.before) modifiers.before.call(state, state.node);
        
        if (!keepGoing) return state;
        
        if (typeof state.node == 'object'
        && state.node !== null && !state.circular) {
            parents.push(state);
            
            updateState();
            
            forEach(state.keys, function (key, i) {
                path.push(key);
                
                if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
                
                var child = walker(state.node[key]);
                if (immutable && hasOwnProperty.call(state.node, key)) {
                    state.node[key] = child.node;
                }
                
                child.isLast = i == state.keys.length - 1;
                child.isFirst = i == 0;
                
                if (modifiers.post) modifiers.post.call(state, child);
                
                path.pop();
            });
            parents.pop();
        }
        
        if (modifiers.after) modifiers.after.call(state, state.node);
        
        return state;
    })(root).node;
}

function copy (src) {
    if (typeof src === 'object' && src !== null) {
        var dst;
        
        if (isArray(src)) {
            dst = [];
        }
        else if (isDate(src)) {
            dst = new Date(src.getTime ? src.getTime() : src);
        }
        else if (isRegExp(src)) {
            dst = new RegExp(src);
        }
        else if (isError(src)) {
            dst = { message: src.message };
        }
        else if (isBoolean(src)) {
            dst = new Boolean(src);
        }
        else if (isNumber(src)) {
            dst = new Number(src);
        }
        else if (isString(src)) {
            dst = new String(src);
        }
        else if (Object.create && Object.getPrototypeOf) {
            dst = Object.create(Object.getPrototypeOf(src));
        }
        else if (src.constructor === Object) {
            dst = {};
        }
        else {
            var proto =
                (src.constructor && src.constructor.prototype)
                || src.__proto__
                || {}
            ;
            var T = function () {};
            T.prototype = proto;
            dst = new T;
        }
        
        forEach(objectKeys(src), function (key) {
            dst[key] = src[key];
        });
        return dst;
    }
    else return src;
}

var objectKeys = Object.keys || function keys (obj) {
    var res = [];
    for (var key in obj) res.push(key)
    return res;
};

function toS (obj) { return Object.prototype.toString.call(obj) }
function isDate (obj) { return toS(obj) === '[object Date]' }
function isRegExp (obj) { return toS(obj) === '[object RegExp]' }
function isError (obj) { return toS(obj) === '[object Error]' }
function isBoolean (obj) { return toS(obj) === '[object Boolean]' }
function isNumber (obj) { return toS(obj) === '[object Number]' }
function isString (obj) { return toS(obj) === '[object String]' }

var isArray = Array.isArray || function isArray (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

forEach(objectKeys(Traverse.prototype), function (key) {
    traverse[key] = function (obj) {
        var args = [].slice.call(arguments, 1);
        var t = new Traverse(obj);
        return t[key].apply(t, args);
    };
});

var hasOwnProperty = Object.hasOwnProperty || function (obj, key) {
    return key in obj;
};

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\Promise.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function (require) {

	var makePromise = require('./makePromise');
	var Scheduler = require('./Scheduler');
	var async = require('./env').asap;

	return makePromise({
		scheduler: new Scheduler(async)
	});

});
})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });

},{"./Scheduler":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\Scheduler.js","./env":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\env.js","./makePromise":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\makePromise.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\Scheduler.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	// Credit to Twisol (https://github.com/Twisol) for suggesting
	// this type of extensible queue + trampoline approach for next-tick conflation.

	/**
	 * Async task scheduler
	 * @param {function} async function to schedule a single async function
	 * @constructor
	 */
	function Scheduler(async) {
		this._async = async;
		this._running = false;

		this._queue = this;
		this._queueLen = 0;
		this._afterQueue = {};
		this._afterQueueLen = 0;

		var self = this;
		this.drain = function() {
			self._drain();
		};
	}

	/**
	 * Enqueue a task
	 * @param {{ run:function }} task
	 */
	Scheduler.prototype.enqueue = function(task) {
		this._queue[this._queueLen++] = task;
		this.run();
	};

	/**
	 * Enqueue a task to run after the main task queue
	 * @param {{ run:function }} task
	 */
	Scheduler.prototype.afterQueue = function(task) {
		this._afterQueue[this._afterQueueLen++] = task;
		this.run();
	};

	Scheduler.prototype.run = function() {
		if (!this._running) {
			this._running = true;
			this._async(this.drain);
		}
	};

	/**
	 * Drain the handler queue entirely, and then the after queue
	 */
	Scheduler.prototype._drain = function() {
		var i = 0;
		for (; i < this._queueLen; ++i) {
			this._queue[i].run();
			this._queue[i] = void 0;
		}

		this._queueLen = 0;
		this._running = false;

		for (i = 0; i < this._afterQueueLen; ++i) {
			this._afterQueue[i].run();
			this._afterQueue[i] = void 0;
		}

		this._afterQueueLen = 0;
	};

	return Scheduler;

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\TimeoutError.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	/**
	 * Custom error type for promises rejected by promise.timeout
	 * @param {string} message
	 * @constructor
	 */
	function TimeoutError (message) {
		Error.call(this);
		this.message = message;
		this.name = TimeoutError.name;
		if (typeof Error.captureStackTrace === 'function') {
			Error.captureStackTrace(this, TimeoutError);
		}
	}

	TimeoutError.prototype = Object.create(Error.prototype);
	TimeoutError.prototype.constructor = TimeoutError;

	return TimeoutError;
});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\apply.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	makeApply.tryCatchResolve = tryCatchResolve;

	return makeApply;

	function makeApply(Promise, call) {
		if(arguments.length < 2) {
			call = tryCatchResolve;
		}

		return apply;

		function apply(f, thisArg, args) {
			var p = Promise._defer();
			var l = args.length;
			var params = new Array(l);
			callAndResolve({ f:f, thisArg:thisArg, args:args, params:params, i:l-1, call:call }, p._handler);

			return p;
		}

		function callAndResolve(c, h) {
			if(c.i < 0) {
				return call(c.f, c.thisArg, c.params, h);
			}

			var handler = Promise._handler(c.args[c.i]);
			handler.fold(callAndResolveNext, c, void 0, h);
		}

		function callAndResolveNext(c, x, h) {
			c.params[c.i] = x;
			c.i -= 1;
			callAndResolve(c, h);
		}
	}

	function tryCatchResolve(f, thisArg, args, resolver) {
		try {
			resolver.resolve(f.apply(thisArg, args));
		} catch(e) {
			resolver.reject(e);
		}
	}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));



},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\array.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function(require) {

	var state = require('../state');
	var applier = require('../apply');

	return function array(Promise) {

		var applyFold = applier(Promise);
		var toPromise = Promise.resolve;
		var all = Promise.all;

		var ar = Array.prototype.reduce;
		var arr = Array.prototype.reduceRight;
		var slice = Array.prototype.slice;

		// Additional array combinators

		Promise.any = any;
		Promise.some = some;
		Promise.settle = settle;

		Promise.map = map;
		Promise.filter = filter;
		Promise.reduce = reduce;
		Promise.reduceRight = reduceRight;

		/**
		 * When this promise fulfills with an array, do
		 * onFulfilled.apply(void 0, array)
		 * @param {function} onFulfilled function to apply
		 * @returns {Promise} promise for the result of applying onFulfilled
		 */
		Promise.prototype.spread = function(onFulfilled) {
			return this.then(all).then(function(array) {
				return onFulfilled.apply(this, array);
			});
		};

		return Promise;

		/**
		 * One-winner competitive race.
		 * Return a promise that will fulfill when one of the promises
		 * in the input array fulfills, or will reject when all promises
		 * have rejected.
		 * @param {array} promises
		 * @returns {Promise} promise for the first fulfilled value
		 */
		function any(promises) {
			var p = Promise._defer();
			var resolver = p._handler;
			var l = promises.length>>>0;

			var pending = l;
			var errors = [];

			for (var h, x, i = 0; i < l; ++i) {
				x = promises[i];
				if(x === void 0 && !(i in promises)) {
					--pending;
					continue;
				}

				h = Promise._handler(x);
				if(h.state() > 0) {
					resolver.become(h);
					Promise._visitRemaining(promises, i, h);
					break;
				} else {
					h.visit(resolver, handleFulfill, handleReject);
				}
			}

			if(pending === 0) {
				resolver.reject(new RangeError('any(): array must not be empty'));
			}

			return p;

			function handleFulfill(x) {
				/*jshint validthis:true*/
				errors = null;
				this.resolve(x); // this === resolver
			}

			function handleReject(e) {
				/*jshint validthis:true*/
				if(this.resolved) { // this === resolver
					return;
				}

				errors.push(e);
				if(--pending === 0) {
					this.reject(errors);
				}
			}
		}

		/**
		 * N-winner competitive race
		 * Return a promise that will fulfill when n input promises have
		 * fulfilled, or will reject when it becomes impossible for n
		 * input promises to fulfill (ie when promises.length - n + 1
		 * have rejected)
		 * @param {array} promises
		 * @param {number} n
		 * @returns {Promise} promise for the earliest n fulfillment values
		 *
		 * @deprecated
		 */
		function some(promises, n) {
			/*jshint maxcomplexity:7*/
			var p = Promise._defer();
			var resolver = p._handler;

			var results = [];
			var errors = [];

			var l = promises.length>>>0;
			var nFulfill = 0;
			var nReject;
			var x, i; // reused in both for() loops

			// First pass: count actual array items
			for(i=0; i<l; ++i) {
				x = promises[i];
				if(x === void 0 && !(i in promises)) {
					continue;
				}
				++nFulfill;
			}

			// Compute actual goals
			n = Math.max(n, 0);
			nReject = (nFulfill - n + 1);
			nFulfill = Math.min(n, nFulfill);

			if(n > nFulfill) {
				resolver.reject(new RangeError('some(): array must contain at least '
				+ n + ' item(s), but had ' + nFulfill));
			} else if(nFulfill === 0) {
				resolver.resolve(results);
			}

			// Second pass: observe each array item, make progress toward goals
			for(i=0; i<l; ++i) {
				x = promises[i];
				if(x === void 0 && !(i in promises)) {
					continue;
				}

				Promise._handler(x).visit(resolver, fulfill, reject, resolver.notify);
			}

			return p;

			function fulfill(x) {
				/*jshint validthis:true*/
				if(this.resolved) { // this === resolver
					return;
				}

				results.push(x);
				if(--nFulfill === 0) {
					errors = null;
					this.resolve(results);
				}
			}

			function reject(e) {
				/*jshint validthis:true*/
				if(this.resolved) { // this === resolver
					return;
				}

				errors.push(e);
				if(--nReject === 0) {
					results = null;
					this.reject(errors);
				}
			}
		}

		/**
		 * Apply f to the value of each promise in a list of promises
		 * and return a new list containing the results.
		 * @param {array} promises
		 * @param {function(x:*, index:Number):*} f mapping function
		 * @returns {Promise}
		 */
		function map(promises, f) {
			return Promise._traverse(f, promises);
		}

		/**
		 * Filter the provided array of promises using the provided predicate.  Input may
		 * contain promises and values
		 * @param {Array} promises array of promises and values
		 * @param {function(x:*, index:Number):boolean} predicate filtering predicate.
		 *  Must return truthy (or promise for truthy) for items to retain.
		 * @returns {Promise} promise that will fulfill with an array containing all items
		 *  for which predicate returned truthy.
		 */
		function filter(promises, predicate) {
			var a = slice.call(promises);
			return Promise._traverse(predicate, a).then(function(keep) {
				return filterSync(a, keep);
			});
		}

		function filterSync(promises, keep) {
			// Safe because we know all promises have fulfilled if we've made it this far
			var l = keep.length;
			var filtered = new Array(l);
			for(var i=0, j=0; i<l; ++i) {
				if(keep[i]) {
					filtered[j++] = Promise._handler(promises[i]).value;
				}
			}
			filtered.length = j;
			return filtered;

		}

		/**
		 * Return a promise that will always fulfill with an array containing
		 * the outcome states of all input promises.  The returned promise
		 * will never reject.
		 * @param {Array} promises
		 * @returns {Promise} promise for array of settled state descriptors
		 */
		function settle(promises) {
			return all(promises.map(settleOne));
		}

		function settleOne(p) {
			var h = Promise._handler(p);
			if(h.state() === 0) {
				return toPromise(p).then(state.fulfilled, state.rejected);
			}

			h._unreport();
			return state.inspect(h);
		}

		/**
		 * Traditional reduce function, similar to `Array.prototype.reduce()`, but
		 * input may contain promises and/or values, and reduceFunc
		 * may return either a value or a promise, *and* initialValue may
		 * be a promise for the starting value.
		 * @param {Array|Promise} promises array or promise for an array of anything,
		 *      may contain a mix of promises and values.
		 * @param {function(accumulated:*, x:*, index:Number):*} f reduce function
		 * @returns {Promise} that will resolve to the final reduced value
		 */
		function reduce(promises, f /*, initialValue */) {
			return arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2])
					: ar.call(promises, liftCombine(f));
		}

		/**
		 * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but
		 * input may contain promises and/or values, and reduceFunc
		 * may return either a value or a promise, *and* initialValue may
		 * be a promise for the starting value.
		 * @param {Array|Promise} promises array or promise for an array of anything,
		 *      may contain a mix of promises and values.
		 * @param {function(accumulated:*, x:*, index:Number):*} f reduce function
		 * @returns {Promise} that will resolve to the final reduced value
		 */
		function reduceRight(promises, f /*, initialValue */) {
			return arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2])
					: arr.call(promises, liftCombine(f));
		}

		function liftCombine(f) {
			return function(z, x, i) {
				return applyFold(f, void 0, [z,x,i]);
			};
		}
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{"../apply":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\apply.js","../state":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\state.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\flow.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function flow(Promise) {

		var resolve = Promise.resolve;
		var reject = Promise.reject;
		var origCatch = Promise.prototype['catch'];

		/**
		 * Handle the ultimate fulfillment value or rejection reason, and assume
		 * responsibility for all errors.  If an error propagates out of result
		 * or handleFatalError, it will be rethrown to the host, resulting in a
		 * loud stack track on most platforms and a crash on some.
		 * @param {function?} onResult
		 * @param {function?} onError
		 * @returns {undefined}
		 */
		Promise.prototype.done = function(onResult, onError) {
			this._handler.visit(this._handler.receiver, onResult, onError);
		};

		/**
		 * Add Error-type and predicate matching to catch.  Examples:
		 * promise.catch(TypeError, handleTypeError)
		 *   .catch(predicate, handleMatchedErrors)
		 *   .catch(handleRemainingErrors)
		 * @param onRejected
		 * @returns {*}
		 */
		Promise.prototype['catch'] = Promise.prototype.otherwise = function(onRejected) {
			if (arguments.length < 2) {
				return origCatch.call(this, onRejected);
			}

			if(typeof onRejected !== 'function') {
				return this.ensure(rejectInvalidPredicate);
			}

			return origCatch.call(this, createCatchFilter(arguments[1], onRejected));
		};

		/**
		 * Wraps the provided catch handler, so that it will only be called
		 * if the predicate evaluates truthy
		 * @param {?function} handler
		 * @param {function} predicate
		 * @returns {function} conditional catch handler
		 */
		function createCatchFilter(handler, predicate) {
			return function(e) {
				return evaluatePredicate(e, predicate)
					? handler.call(this, e)
					: reject(e);
			};
		}

		/**
		 * Ensures that onFulfilledOrRejected will be called regardless of whether
		 * this promise is fulfilled or rejected.  onFulfilledOrRejected WILL NOT
		 * receive the promises' value or reason.  Any returned value will be disregarded.
		 * onFulfilledOrRejected may throw or return a rejected promise to signal
		 * an additional error.
		 * @param {function} handler handler to be called regardless of
		 *  fulfillment or rejection
		 * @returns {Promise}
		 */
		Promise.prototype['finally'] = Promise.prototype.ensure = function(handler) {
			if(typeof handler !== 'function') {
				return this;
			}

			return this.then(function(x) {
				return runSideEffect(handler, this, identity, x);
			}, function(e) {
				return runSideEffect(handler, this, reject, e);
			});
		};

		function runSideEffect (handler, thisArg, propagate, value) {
			var result = handler.call(thisArg);
			return maybeThenable(result)
				? propagateValue(result, propagate, value)
				: propagate(value);
		}

		function propagateValue (result, propagate, x) {
			return resolve(result).then(function () {
				return propagate(x);
			});
		}

		/**
		 * Recover from a failure by returning a defaultValue.  If defaultValue
		 * is a promise, it's fulfillment value will be used.  If defaultValue is
		 * a promise that rejects, the returned promise will reject with the
		 * same reason.
		 * @param {*} defaultValue
		 * @returns {Promise} new promise
		 */
		Promise.prototype['else'] = Promise.prototype.orElse = function(defaultValue) {
			return this.then(void 0, function() {
				return defaultValue;
			});
		};

		/**
		 * Shortcut for .then(function() { return value; })
		 * @param  {*} value
		 * @return {Promise} a promise that:
		 *  - is fulfilled if value is not a promise, or
		 *  - if value is a promise, will fulfill with its value, or reject
		 *    with its reason.
		 */
		Promise.prototype['yield'] = function(value) {
			return this.then(function() {
				return value;
			});
		};

		/**
		 * Runs a side effect when this promise fulfills, without changing the
		 * fulfillment value.
		 * @param {function} onFulfilledSideEffect
		 * @returns {Promise}
		 */
		Promise.prototype.tap = function(onFulfilledSideEffect) {
			return this.then(onFulfilledSideEffect)['yield'](this);
		};

		return Promise;
	};

	function rejectInvalidPredicate() {
		throw new TypeError('catch predicate must be a function');
	}

	function evaluatePredicate(e, predicate) {
		return isError(predicate) ? e instanceof predicate : predicate(e);
	}

	function isError(predicate) {
		return predicate === Error
			|| (predicate != null && predicate.prototype instanceof Error);
	}

	function maybeThenable(x) {
		return (typeof x === 'object' || typeof x === 'function') && x !== null;
	}

	function identity(x) {
		return x;
	}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\fold.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */
/** @author Jeff Escalante */

(function(define) { 'use strict';
define(function() {

	return function fold(Promise) {

		Promise.prototype.fold = function(f, z) {
			var promise = this._beget();

			this._handler.fold(function(z, x, to) {
				Promise._handler(z).fold(function(x, z, to) {
					to.resolve(f.call(this, z, x));
				}, x, this, to);
			}, z, promise._handler.receiver, promise._handler);

			return promise;
		};

		return Promise;
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\inspect.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function(require) {

	var inspect = require('../state').inspect;

	return function inspection(Promise) {

		Promise.prototype.inspect = function() {
			return inspect(Promise._handler(this));
		};

		return Promise;
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{"../state":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\state.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\iterate.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function generate(Promise) {

		var resolve = Promise.resolve;

		Promise.iterate = iterate;
		Promise.unfold = unfold;

		return Promise;

		/**
		 * @deprecated Use github.com/cujojs/most streams and most.iterate
		 * Generate a (potentially infinite) stream of promised values:
		 * x, f(x), f(f(x)), etc. until condition(x) returns true
		 * @param {function} f function to generate a new x from the previous x
		 * @param {function} condition function that, given the current x, returns
		 *  truthy when the iterate should stop
		 * @param {function} handler function to handle the value produced by f
		 * @param {*|Promise} x starting value, may be a promise
		 * @return {Promise} the result of the last call to f before
		 *  condition returns true
		 */
		function iterate(f, condition, handler, x) {
			return unfold(function(x) {
				return [x, f(x)];
			}, condition, handler, x);
		}

		/**
		 * @deprecated Use github.com/cujojs/most streams and most.unfold
		 * Generate a (potentially infinite) stream of promised values
		 * by applying handler(generator(seed)) iteratively until
		 * condition(seed) returns true.
		 * @param {function} unspool function that generates a [value, newSeed]
		 *  given a seed.
		 * @param {function} condition function that, given the current seed, returns
		 *  truthy when the unfold should stop
		 * @param {function} handler function to handle the value produced by unspool
		 * @param x {*|Promise} starting value, may be a promise
		 * @return {Promise} the result of the last value produced by unspool before
		 *  condition returns true
		 */
		function unfold(unspool, condition, handler, x) {
			return resolve(x).then(function(seed) {
				return resolve(condition(seed)).then(function(done) {
					return done ? seed : resolve(unspool(seed)).spread(next);
				});
			});

			function next(item, newSeed) {
				return resolve(handler(item)).then(function() {
					return unfold(unspool, condition, handler, newSeed);
				});
			}
		}
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\progress.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function progress(Promise) {

		/**
		 * @deprecated
		 * Register a progress handler for this promise
		 * @param {function} onProgress
		 * @returns {Promise}
		 */
		Promise.prototype.progress = function(onProgress) {
			return this.then(void 0, void 0, onProgress);
		};

		return Promise;
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\timed.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function(require) {

	var env = require('../env');
	var TimeoutError = require('../TimeoutError');

	function setTimeout(f, ms, x, y) {
		return env.setTimer(function() {
			f(x, y, ms);
		}, ms);
	}

	return function timed(Promise) {
		/**
		 * Return a new promise whose fulfillment value is revealed only
		 * after ms milliseconds
		 * @param {number} ms milliseconds
		 * @returns {Promise}
		 */
		Promise.prototype.delay = function(ms) {
			var p = this._beget();
			this._handler.fold(handleDelay, ms, void 0, p._handler);
			return p;
		};

		function handleDelay(ms, x, h) {
			setTimeout(resolveDelay, ms, x, h);
		}

		function resolveDelay(x, h) {
			h.resolve(x);
		}

		/**
		 * Return a new promise that rejects after ms milliseconds unless
		 * this promise fulfills earlier, in which case the returned promise
		 * fulfills with the same value.
		 * @param {number} ms milliseconds
		 * @param {Error|*=} reason optional rejection reason to use, defaults
		 *   to a TimeoutError if not provided
		 * @returns {Promise}
		 */
		Promise.prototype.timeout = function(ms, reason) {
			var p = this._beget();
			var h = p._handler;

			var t = setTimeout(onTimeout, ms, reason, p._handler);

			this._handler.visit(h,
				function onFulfill(x) {
					env.clearTimer(t);
					this.resolve(x); // this = h
				},
				function onReject(x) {
					env.clearTimer(t);
					this.reject(x); // this = h
				},
				h.notify);

			return p;
		};

		function onTimeout(reason, h, ms) {
			var e = typeof reason === 'undefined'
				? new TimeoutError('timed out after ' + ms + 'ms')
				: reason;
			h.reject(e);
		}

		return Promise;
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{"../TimeoutError":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\TimeoutError.js","../env":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\env.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\unhandledRejection.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function(require) {

	var setTimer = require('../env').setTimer;
	var format = require('../format');

	return function unhandledRejection(Promise) {

		var logError = noop;
		var logInfo = noop;
		var localConsole;

		if(typeof console !== 'undefined') {
			// Alias console to prevent things like uglify's drop_console option from
			// removing console.log/error. Unhandled rejections fall into the same
			// category as uncaught exceptions, and build tools shouldn't silence them.
			localConsole = console;
			logError = typeof localConsole.error !== 'undefined'
				? function (e) { localConsole.error(e); }
				: function (e) { localConsole.log(e); };

			logInfo = typeof localConsole.info !== 'undefined'
				? function (e) { localConsole.info(e); }
				: function (e) { localConsole.log(e); };
		}

		Promise.onPotentiallyUnhandledRejection = function(rejection) {
			enqueue(report, rejection);
		};

		Promise.onPotentiallyUnhandledRejectionHandled = function(rejection) {
			enqueue(unreport, rejection);
		};

		Promise.onFatalRejection = function(rejection) {
			enqueue(throwit, rejection.value);
		};

		var tasks = [];
		var reported = [];
		var running = null;

		function report(r) {
			if(!r.handled) {
				reported.push(r);
				logError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));
			}
		}

		function unreport(r) {
			var i = reported.indexOf(r);
			if(i >= 0) {
				reported.splice(i, 1);
				logInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));
			}
		}

		function enqueue(f, x) {
			tasks.push(f, x);
			if(running === null) {
				running = setTimer(flush, 0);
			}
		}

		function flush() {
			running = null;
			while(tasks.length > 0) {
				tasks.shift()(tasks.shift());
			}
		}

		return Promise;
	};

	function throwit(e) {
		throw e;
	}

	function noop() {}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{"../env":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\env.js","../format":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\format.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\with.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function addWith(Promise) {
		/**
		 * Returns a promise whose handlers will be called with `this` set to
		 * the supplied receiver.  Subsequent promises derived from the
		 * returned promise will also have their handlers called with receiver
		 * as `this`. Calling `with` with undefined or no arguments will return
		 * a promise whose handlers will again be called in the usual Promises/A+
		 * way (no `this`) thus safely undoing any previous `with` in the
		 * promise chain.
		 *
		 * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+
		 * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)
		 *
		 * @param {object} receiver `this` value for all handlers attached to
		 *  the returned promise.
		 * @returns {Promise}
		 */
		Promise.prototype['with'] = Promise.prototype.withThis = function(receiver) {
			var p = this._beget();
			var child = p._handler;
			child.receiver = receiver;
			this._handler.chain(child, receiver);
			return p;
		};

		return Promise;
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));


},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\env.js":[function(require,module,exports){
(function (process){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/
(function(define) { 'use strict';
define(function(require) {
	/*jshint maxcomplexity:6*/

	// Sniff "best" async scheduling option
	// Prefer process.nextTick or MutationObserver, then check for
	// setTimeout, and finally vertx, since its the only env that doesn't
	// have setTimeout

	var MutationObs;
	var capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;

	// Default env
	var setTimer = function(f, ms) { return setTimeout(f, ms); };
	var clearTimer = function(t) { return clearTimeout(t); };
	var asap = function (f) { return capturedSetTimeout(f, 0); };

	// Detect specific env
	if (isNode()) { // Node
		asap = function (f) { return process.nextTick(f); };

	} else if (MutationObs = hasMutationObserver()) { // Modern browser
		asap = initMutationObserver(MutationObs);

	} else if (!capturedSetTimeout) { // vert.x
		var vertxRequire = require;
		var vertx = vertxRequire('vertx');
		setTimer = function (f, ms) { return vertx.setTimer(ms, f); };
		clearTimer = vertx.cancelTimer;
		asap = vertx.runOnLoop || vertx.runOnContext;
	}

	return {
		setTimer: setTimer,
		clearTimer: clearTimer,
		asap: asap
	};

	function isNode () {
		return typeof process !== 'undefined' && process !== null &&
			typeof process.nextTick === 'function';
	}

	function hasMutationObserver () {
		return (typeof MutationObserver === 'function' && MutationObserver) ||
			(typeof WebKitMutationObserver === 'function' && WebKitMutationObserver);
	}

	function initMutationObserver(MutationObserver) {
		var scheduled;
		var node = document.createTextNode('');
		var o = new MutationObserver(run);
		o.observe(node, { characterData: true });

		function run() {
			var f = scheduled;
			scheduled = void 0;
			f();
		}

		var i = 0;
		return function (f) {
			scheduled = f;
			node.data = (i ^= 1);
		};
	}
});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

}).call(this,require('_process'))
},{"_process":"C:\\Users\\Swapnil Desai\\AppData\\Roaming\\npm\\node_modules\\watchify\\node_modules\\browserify\\node_modules\\process\\browser.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\format.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return {
		formatError: formatError,
		formatObject: formatObject,
		tryStringify: tryStringify
	};

	/**
	 * Format an error into a string.  If e is an Error and has a stack property,
	 * it's returned.  Otherwise, e is formatted using formatObject, with a
	 * warning added about e not being a proper Error.
	 * @param {*} e
	 * @returns {String} formatted string, suitable for output to developers
	 */
	function formatError(e) {
		var s = typeof e === 'object' && e !== null && e.stack ? e.stack : formatObject(e);
		return e instanceof Error ? s : s + ' (WARNING: non-Error used)';
	}

	/**
	 * Format an object, detecting "plain" objects and running them through
	 * JSON.stringify if possible.
	 * @param {Object} o
	 * @returns {string}
	 */
	function formatObject(o) {
		var s = String(o);
		if(s === '[object Object]' && typeof JSON !== 'undefined') {
			s = tryStringify(o, s);
		}
		return s;
	}

	/**
	 * Try to return the result of JSON.stringify(x).  If that fails, return
	 * defaultValue
	 * @param {*} x
	 * @param {*} defaultValue
	 * @returns {String|*} JSON.stringify(x) or defaultValue
	 */
	function tryStringify(x, defaultValue) {
		try {
			return JSON.stringify(x);
		} catch(e) {
			return defaultValue;
		}
	}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\makePromise.js":[function(require,module,exports){
(function (process){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function makePromise(environment) {

		var tasks = environment.scheduler;
		var emitRejection = initEmitRejection();

		var objectCreate = Object.create ||
			function(proto) {
				function Child() {}
				Child.prototype = proto;
				return new Child();
			};

		/**
		 * Create a promise whose fate is determined by resolver
		 * @constructor
		 * @returns {Promise} promise
		 * @name Promise
		 */
		function Promise(resolver, handler) {
			this._handler = resolver === Handler ? handler : init(resolver);
		}

		/**
		 * Run the supplied resolver
		 * @param resolver
		 * @returns {Pending}
		 */
		function init(resolver) {
			var handler = new Pending();

			try {
				resolver(promiseResolve, promiseReject, promiseNotify);
			} catch (e) {
				promiseReject(e);
			}

			return handler;

			/**
			 * Transition from pre-resolution state to post-resolution state, notifying
			 * all listeners of the ultimate fulfillment or rejection
			 * @param {*} x resolution value
			 */
			function promiseResolve (x) {
				handler.resolve(x);
			}
			/**
			 * Reject this promise with reason, which will be used verbatim
			 * @param {Error|*} reason rejection reason, strongly suggested
			 *   to be an Error type
			 */
			function promiseReject (reason) {
				handler.reject(reason);
			}

			/**
			 * @deprecated
			 * Issue a progress event, notifying all progress listeners
			 * @param {*} x progress event payload to pass to all listeners
			 */
			function promiseNotify (x) {
				handler.notify(x);
			}
		}

		// Creation

		Promise.resolve = resolve;
		Promise.reject = reject;
		Promise.never = never;

		Promise._defer = defer;
		Promise._handler = getHandler;

		/**
		 * Returns a trusted promise. If x is already a trusted promise, it is
		 * returned, otherwise returns a new trusted Promise which follows x.
		 * @param  {*} x
		 * @return {Promise} promise
		 */
		function resolve(x) {
			return isPromise(x) ? x
				: new Promise(Handler, new Async(getHandler(x)));
		}

		/**
		 * Return a reject promise with x as its reason (x is used verbatim)
		 * @param {*} x
		 * @returns {Promise} rejected promise
		 */
		function reject(x) {
			return new Promise(Handler, new Async(new Rejected(x)));
		}

		/**
		 * Return a promise that remains pending forever
		 * @returns {Promise} forever-pending promise.
		 */
		function never() {
			return foreverPendingPromise; // Should be frozen
		}

		/**
		 * Creates an internal {promise, resolver} pair
		 * @private
		 * @returns {Promise}
		 */
		function defer() {
			return new Promise(Handler, new Pending());
		}

		// Transformation and flow control

		/**
		 * Transform this promise's fulfillment value, returning a new Promise
		 * for the transformed result.  If the promise cannot be fulfilled, onRejected
		 * is called with the reason.  onProgress *may* be called with updates toward
		 * this promise's fulfillment.
		 * @param {function=} onFulfilled fulfillment handler
		 * @param {function=} onRejected rejection handler
		 * @param {function=} onProgress @deprecated progress handler
		 * @return {Promise} new promise
		 */
		Promise.prototype.then = function(onFulfilled, onRejected, onProgress) {
			var parent = this._handler;
			var state = parent.join().state();

			if ((typeof onFulfilled !== 'function' && state > 0) ||
				(typeof onRejected !== 'function' && state < 0)) {
				// Short circuit: value will not change, simply share handler
				return new this.constructor(Handler, parent);
			}

			var p = this._beget();
			var child = p._handler;

			parent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);

			return p;
		};

		/**
		 * If this promise cannot be fulfilled due to an error, call onRejected to
		 * handle the error. Shortcut for .then(undefined, onRejected)
		 * @param {function?} onRejected
		 * @return {Promise}
		 */
		Promise.prototype['catch'] = function(onRejected) {
			return this.then(void 0, onRejected);
		};

		/**
		 * Creates a new, pending promise of the same type as this promise
		 * @private
		 * @returns {Promise}
		 */
		Promise.prototype._beget = function() {
			return begetFrom(this._handler, this.constructor);
		};

		function begetFrom(parent, Promise) {
			var child = new Pending(parent.receiver, parent.join().context);
			return new Promise(Handler, child);
		}

		// Array combinators

		Promise.all = all;
		Promise.race = race;
		Promise._traverse = traverse;

		/**
		 * Return a promise that will fulfill when all promises in the
		 * input array have fulfilled, or will reject when one of the
		 * promises rejects.
		 * @param {array} promises array of promises
		 * @returns {Promise} promise for array of fulfillment values
		 */
		function all(promises) {
			return traverseWith(snd, null, promises);
		}

		/**
		 * Array<Promise<X>> -> Promise<Array<f(X)>>
		 * @private
		 * @param {function} f function to apply to each promise's value
		 * @param {Array} promises array of promises
		 * @returns {Promise} promise for transformed values
		 */
		function traverse(f, promises) {
			return traverseWith(tryCatch2, f, promises);
		}

		function traverseWith(tryMap, f, promises) {
			var handler = typeof f === 'function' ? mapAt : settleAt;

			var resolver = new Pending();
			var pending = promises.length >>> 0;
			var results = new Array(pending);

			for (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {
				x = promises[i];

				if (x === void 0 && !(i in promises)) {
					--pending;
					continue;
				}

				traverseAt(promises, handler, i, x, resolver);
			}

			if(pending === 0) {
				resolver.become(new Fulfilled(results));
			}

			return new Promise(Handler, resolver);

			function mapAt(i, x, resolver) {
				if(!resolver.resolved) {
					traverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);
				}
			}

			function settleAt(i, x, resolver) {
				results[i] = x;
				if(--pending === 0) {
					resolver.become(new Fulfilled(results));
				}
			}
		}

		function traverseAt(promises, handler, i, x, resolver) {
			if (maybeThenable(x)) {
				var h = getHandlerMaybeThenable(x);
				var s = h.state();

				if (s === 0) {
					h.fold(handler, i, void 0, resolver);
				} else if (s > 0) {
					handler(i, h.value, resolver);
				} else {
					resolver.become(h);
					visitRemaining(promises, i+1, h);
				}
			} else {
				handler(i, x, resolver);
			}
		}

		Promise._visitRemaining = visitRemaining;
		function visitRemaining(promises, start, handler) {
			for(var i=start; i<promises.length; ++i) {
				markAsHandled(getHandler(promises[i]), handler);
			}
		}

		function markAsHandled(h, handler) {
			if(h === handler) {
				return;
			}

			var s = h.state();
			if(s === 0) {
				h.visit(h, void 0, h._unreport);
			} else if(s < 0) {
				h._unreport();
			}
		}

		/**
		 * Fulfill-reject competitive race. Return a promise that will settle
		 * to the same state as the earliest input promise to settle.
		 *
		 * WARNING: The ES6 Promise spec requires that race()ing an empty array
		 * must return a promise that is pending forever.  This implementation
		 * returns a singleton forever-pending promise, the same singleton that is
		 * returned by Promise.never(), thus can be checked with ===
		 *
		 * @param {array} promises array of promises to race
		 * @returns {Promise} if input is non-empty, a promise that will settle
		 * to the same outcome as the earliest input promise to settle. if empty
		 * is empty, returns a promise that will never settle.
		 */
		function race(promises) {
			if(typeof promises !== 'object' || promises === null) {
				return reject(new TypeError('non-iterable passed to race()'));
			}

			// Sigh, race([]) is untestable unless we return *something*
			// that is recognizable without calling .then() on it.
			return promises.length === 0 ? never()
				 : promises.length === 1 ? resolve(promises[0])
				 : runRace(promises);
		}

		function runRace(promises) {
			var resolver = new Pending();
			var i, x, h;
			for(i=0; i<promises.length; ++i) {
				x = promises[i];
				if (x === void 0 && !(i in promises)) {
					continue;
				}

				h = getHandler(x);
				if(h.state() !== 0) {
					resolver.become(h);
					visitRemaining(promises, i+1, h);
					break;
				} else {
					h.visit(resolver, resolver.resolve, resolver.reject);
				}
			}
			return new Promise(Handler, resolver);
		}

		// Promise internals
		// Below this, everything is @private

		/**
		 * Get an appropriate handler for x, without checking for cycles
		 * @param {*} x
		 * @returns {object} handler
		 */
		function getHandler(x) {
			if(isPromise(x)) {
				return x._handler.join();
			}
			return maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);
		}

		/**
		 * Get a handler for thenable x.
		 * NOTE: You must only call this if maybeThenable(x) == true
		 * @param {object|function|Promise} x
		 * @returns {object} handler
		 */
		function getHandlerMaybeThenable(x) {
			return isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);
		}

		/**
		 * Get a handler for potentially untrusted thenable x
		 * @param {*} x
		 * @returns {object} handler
		 */
		function getHandlerUntrusted(x) {
			try {
				var untrustedThen = x.then;
				return typeof untrustedThen === 'function'
					? new Thenable(untrustedThen, x)
					: new Fulfilled(x);
			} catch(e) {
				return new Rejected(e);
			}
		}

		/**
		 * Handler for a promise that is pending forever
		 * @constructor
		 */
		function Handler() {}

		Handler.prototype.when
			= Handler.prototype.become
			= Handler.prototype.notify // deprecated
			= Handler.prototype.fail
			= Handler.prototype._unreport
			= Handler.prototype._report
			= noop;

		Handler.prototype._state = 0;

		Handler.prototype.state = function() {
			return this._state;
		};

		/**
		 * Recursively collapse handler chain to find the handler
		 * nearest to the fully resolved value.
		 * @returns {object} handler nearest the fully resolved value
		 */
		Handler.prototype.join = function() {
			var h = this;
			while(h.handler !== void 0) {
				h = h.handler;
			}
			return h;
		};

		Handler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {
			this.when({
				resolver: to,
				receiver: receiver,
				fulfilled: fulfilled,
				rejected: rejected,
				progress: progress
			});
		};

		Handler.prototype.visit = function(receiver, fulfilled, rejected, progress) {
			this.chain(failIfRejected, receiver, fulfilled, rejected, progress);
		};

		Handler.prototype.fold = function(f, z, c, to) {
			this.when(new Fold(f, z, c, to));
		};

		/**
		 * Handler that invokes fail() on any handler it becomes
		 * @constructor
		 */
		function FailIfRejected() {}

		inherit(Handler, FailIfRejected);

		FailIfRejected.prototype.become = function(h) {
			h.fail();
		};

		var failIfRejected = new FailIfRejected();

		/**
		 * Handler that manages a queue of consumers waiting on a pending promise
		 * @constructor
		 */
		function Pending(receiver, inheritedContext) {
			Promise.createContext(this, inheritedContext);

			this.consumers = void 0;
			this.receiver = receiver;
			this.handler = void 0;
			this.resolved = false;
		}

		inherit(Handler, Pending);

		Pending.prototype._state = 0;

		Pending.prototype.resolve = function(x) {
			this.become(getHandler(x));
		};

		Pending.prototype.reject = function(x) {
			if(this.resolved) {
				return;
			}

			this.become(new Rejected(x));
		};

		Pending.prototype.join = function() {
			if (!this.resolved) {
				return this;
			}

			var h = this;

			while (h.handler !== void 0) {
				h = h.handler;
				if (h === this) {
					return this.handler = cycle();
				}
			}

			return h;
		};

		Pending.prototype.run = function() {
			var q = this.consumers;
			var handler = this.handler;
			this.handler = this.handler.join();
			this.consumers = void 0;

			for (var i = 0; i < q.length; ++i) {
				handler.when(q[i]);
			}
		};

		Pending.prototype.become = function(handler) {
			if(this.resolved) {
				return;
			}

			this.resolved = true;
			this.handler = handler;
			if(this.consumers !== void 0) {
				tasks.enqueue(this);
			}

			if(this.context !== void 0) {
				handler._report(this.context);
			}
		};

		Pending.prototype.when = function(continuation) {
			if(this.resolved) {
				tasks.enqueue(new ContinuationTask(continuation, this.handler));
			} else {
				if(this.consumers === void 0) {
					this.consumers = [continuation];
				} else {
					this.consumers.push(continuation);
				}
			}
		};

		/**
		 * @deprecated
		 */
		Pending.prototype.notify = function(x) {
			if(!this.resolved) {
				tasks.enqueue(new ProgressTask(x, this));
			}
		};

		Pending.prototype.fail = function(context) {
			var c = typeof context === 'undefined' ? this.context : context;
			this.resolved && this.handler.join().fail(c);
		};

		Pending.prototype._report = function(context) {
			this.resolved && this.handler.join()._report(context);
		};

		Pending.prototype._unreport = function() {
			this.resolved && this.handler.join()._unreport();
		};

		/**
		 * Wrap another handler and force it into a future stack
		 * @param {object} handler
		 * @constructor
		 */
		function Async(handler) {
			this.handler = handler;
		}

		inherit(Handler, Async);

		Async.prototype.when = function(continuation) {
			tasks.enqueue(new ContinuationTask(continuation, this));
		};

		Async.prototype._report = function(context) {
			this.join()._report(context);
		};

		Async.prototype._unreport = function() {
			this.join()._unreport();
		};

		/**
		 * Handler that wraps an untrusted thenable and assimilates it in a future stack
		 * @param {function} then
		 * @param {{then: function}} thenable
		 * @constructor
		 */
		function Thenable(then, thenable) {
			Pending.call(this);
			tasks.enqueue(new AssimilateTask(then, thenable, this));
		}

		inherit(Pending, Thenable);

		/**
		 * Handler for a fulfilled promise
		 * @param {*} x fulfillment value
		 * @constructor
		 */
		function Fulfilled(x) {
			Promise.createContext(this);
			this.value = x;
		}

		inherit(Handler, Fulfilled);

		Fulfilled.prototype._state = 1;

		Fulfilled.prototype.fold = function(f, z, c, to) {
			runContinuation3(f, z, this, c, to);
		};

		Fulfilled.prototype.when = function(cont) {
			runContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);
		};

		var errorId = 0;

		/**
		 * Handler for a rejected promise
		 * @param {*} x rejection reason
		 * @constructor
		 */
		function Rejected(x) {
			Promise.createContext(this);

			this.id = ++errorId;
			this.value = x;
			this.handled = false;
			this.reported = false;

			this._report();
		}

		inherit(Handler, Rejected);

		Rejected.prototype._state = -1;

		Rejected.prototype.fold = function(f, z, c, to) {
			to.become(this);
		};

		Rejected.prototype.when = function(cont) {
			if(typeof cont.rejected === 'function') {
				this._unreport();
			}
			runContinuation1(cont.rejected, this, cont.receiver, cont.resolver);
		};

		Rejected.prototype._report = function(context) {
			tasks.afterQueue(new ReportTask(this, context));
		};

		Rejected.prototype._unreport = function() {
			if(this.handled) {
				return;
			}
			this.handled = true;
			tasks.afterQueue(new UnreportTask(this));
		};

		Rejected.prototype.fail = function(context) {
			this.reported = true;
			emitRejection('unhandledRejection', this);
			Promise.onFatalRejection(this, context === void 0 ? this.context : context);
		};

		function ReportTask(rejection, context) {
			this.rejection = rejection;
			this.context = context;
		}

		ReportTask.prototype.run = function() {
			if(!this.rejection.handled && !this.rejection.reported) {
				this.rejection.reported = true;
				emitRejection('unhandledRejection', this.rejection) ||
					Promise.onPotentiallyUnhandledRejection(this.rejection, this.context);
			}
		};

		function UnreportTask(rejection) {
			this.rejection = rejection;
		}

		UnreportTask.prototype.run = function() {
			if(this.rejection.reported) {
				emitRejection('rejectionHandled', this.rejection) ||
					Promise.onPotentiallyUnhandledRejectionHandled(this.rejection);
			}
		};

		// Unhandled rejection hooks
		// By default, everything is a noop

		Promise.createContext
			= Promise.enterContext
			= Promise.exitContext
			= Promise.onPotentiallyUnhandledRejection
			= Promise.onPotentiallyUnhandledRejectionHandled
			= Promise.onFatalRejection
			= noop;

		// Errors and singletons

		var foreverPendingHandler = new Handler();
		var foreverPendingPromise = new Promise(Handler, foreverPendingHandler);

		function cycle() {
			return new Rejected(new TypeError('Promise cycle'));
		}

		// Task runners

		/**
		 * Run a single consumer
		 * @constructor
		 */
		function ContinuationTask(continuation, handler) {
			this.continuation = continuation;
			this.handler = handler;
		}

		ContinuationTask.prototype.run = function() {
			this.handler.join().when(this.continuation);
		};

		/**
		 * Run a queue of progress handlers
		 * @constructor
		 */
		function ProgressTask(value, handler) {
			this.handler = handler;
			this.value = value;
		}

		ProgressTask.prototype.run = function() {
			var q = this.handler.consumers;
			if(q === void 0) {
				return;
			}

			for (var c, i = 0; i < q.length; ++i) {
				c = q[i];
				runNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);
			}
		};

		/**
		 * Assimilate a thenable, sending it's value to resolver
		 * @param {function} then
		 * @param {object|function} thenable
		 * @param {object} resolver
		 * @constructor
		 */
		function AssimilateTask(then, thenable, resolver) {
			this._then = then;
			this.thenable = thenable;
			this.resolver = resolver;
		}

		AssimilateTask.prototype.run = function() {
			var h = this.resolver;
			tryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);

			function _resolve(x) { h.resolve(x); }
			function _reject(x)  { h.reject(x); }
			function _notify(x)  { h.notify(x); }
		};

		function tryAssimilate(then, thenable, resolve, reject, notify) {
			try {
				then.call(thenable, resolve, reject, notify);
			} catch (e) {
				reject(e);
			}
		}

		/**
		 * Fold a handler value with z
		 * @constructor
		 */
		function Fold(f, z, c, to) {
			this.f = f; this.z = z; this.c = c; this.to = to;
			this.resolver = failIfRejected;
			this.receiver = this;
		}

		Fold.prototype.fulfilled = function(x) {
			this.f.call(this.c, this.z, x, this.to);
		};

		Fold.prototype.rejected = function(x) {
			this.to.reject(x);
		};

		Fold.prototype.progress = function(x) {
			this.to.notify(x);
		};

		// Other helpers

		/**
		 * @param {*} x
		 * @returns {boolean} true iff x is a trusted Promise
		 */
		function isPromise(x) {
			return x instanceof Promise;
		}

		/**
		 * Test just enough to rule out primitives, in order to take faster
		 * paths in some code
		 * @param {*} x
		 * @returns {boolean} false iff x is guaranteed *not* to be a thenable
		 */
		function maybeThenable(x) {
			return (typeof x === 'object' || typeof x === 'function') && x !== null;
		}

		function runContinuation1(f, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.become(h);
			}

			Promise.enterContext(h);
			tryCatchReject(f, h.value, receiver, next);
			Promise.exitContext();
		}

		function runContinuation3(f, x, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.become(h);
			}

			Promise.enterContext(h);
			tryCatchReject3(f, x, h.value, receiver, next);
			Promise.exitContext();
		}

		/**
		 * @deprecated
		 */
		function runNotify(f, x, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.notify(x);
			}

			Promise.enterContext(h);
			tryCatchReturn(f, x, receiver, next);
			Promise.exitContext();
		}

		function tryCatch2(f, a, b) {
			try {
				return f(a, b);
			} catch(e) {
				return reject(e);
			}
		}

		/**
		 * Return f.call(thisArg, x), or if it throws return a rejected promise for
		 * the thrown exception
		 */
		function tryCatchReject(f, x, thisArg, next) {
			try {
				next.become(getHandler(f.call(thisArg, x)));
			} catch(e) {
				next.become(new Rejected(e));
			}
		}

		/**
		 * Same as above, but includes the extra argument parameter.
		 */
		function tryCatchReject3(f, x, y, thisArg, next) {
			try {
				f.call(thisArg, x, y, next);
			} catch(e) {
				next.become(new Rejected(e));
			}
		}

		/**
		 * @deprecated
		 * Return f.call(thisArg, x), or if it throws, *return* the exception
		 */
		function tryCatchReturn(f, x, thisArg, next) {
			try {
				next.notify(f.call(thisArg, x));
			} catch(e) {
				next.notify(e);
			}
		}

		function inherit(Parent, Child) {
			Child.prototype = objectCreate(Parent.prototype);
			Child.prototype.constructor = Child;
		}

		function snd(x, y) {
			return y;
		}

		function noop() {}

		function initEmitRejection() {
			/*global process, self, CustomEvent*/
			if(typeof process !== 'undefined' && process !== null
				&& typeof process.emit === 'function') {
				// Returning falsy here means to call the default
				// onPotentiallyUnhandledRejection API.  This is safe even in
				// browserify since process.emit always returns falsy in browserify:
				// https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46
				return function(type, rejection) {
					return type === 'unhandledRejection'
						? process.emit(type, rejection.value, rejection)
						: process.emit(type, rejection);
				};
			} else if(typeof self !== 'undefined' && typeof CustomEvent === 'function') {
				return (function(noop, self, CustomEvent) {
					var hasCustomEvent = false;
					try {
						var ev = new CustomEvent('unhandledRejection');
						hasCustomEvent = ev instanceof CustomEvent;
					} catch (e) {}

					return !hasCustomEvent ? noop : function(type, rejection) {
						var ev = new CustomEvent(type, {
							detail: {
								reason: rejection.value,
								key: rejection
							},
							bubbles: false,
							cancelable: true
						});

						return !self.dispatchEvent(ev);
					};
				}(noop, self, CustomEvent));
			}

			return noop;
		}

		return Promise;
	};
});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

}).call(this,require('_process'))
},{"_process":"C:\\Users\\Swapnil Desai\\AppData\\Roaming\\npm\\node_modules\\watchify\\node_modules\\browserify\\node_modules\\process\\browser.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\state.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return {
		pending: toPendingState,
		fulfilled: toFulfilledState,
		rejected: toRejectedState,
		inspect: inspect
	};

	function toPendingState() {
		return { state: 'pending' };
	}

	function toRejectedState(e) {
		return { state: 'rejected', reason: e };
	}

	function toFulfilledState(x) {
		return { state: 'fulfilled', value: x };
	}

	function inspect(handler) {
		var state = handler.state();
		return state === 0 ? toPendingState()
			 : state > 0   ? toFulfilledState(handler.value)
			               : toRejectedState(handler.value);
	}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\when.js":[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */

/**
 * Promises/A+ and when() implementation
 * when is part of the cujoJS family of libraries (http://cujojs.com/)
 * @author Brian Cavalier
 * @author John Hann
 * @version 3.7.1
 */
(function(define) { 'use strict';
define(function (require) {

	var timed = require('./lib/decorators/timed');
	var array = require('./lib/decorators/array');
	var flow = require('./lib/decorators/flow');
	var fold = require('./lib/decorators/fold');
	var inspect = require('./lib/decorators/inspect');
	var generate = require('./lib/decorators/iterate');
	var progress = require('./lib/decorators/progress');
	var withThis = require('./lib/decorators/with');
	var unhandledRejection = require('./lib/decorators/unhandledRejection');
	var TimeoutError = require('./lib/TimeoutError');

	var Promise = [array, flow, fold, generate, progress,
		inspect, withThis, timed, unhandledRejection]
		.reduce(function(Promise, feature) {
			return feature(Promise);
		}, require('./lib/Promise'));

	var apply = require('./lib/apply')(Promise);

	// Public API

	when.promise     = promise;              // Create a pending promise
	when.resolve     = Promise.resolve;      // Create a resolved promise
	when.reject      = Promise.reject;       // Create a rejected promise

	when.lift        = lift;                 // lift a function to return promises
	when['try']      = attempt;              // call a function and return a promise
	when.attempt     = attempt;              // alias for when.try

	when.iterate     = Promise.iterate;      // DEPRECATED (use cujojs/most streams) Generate a stream of promises
	when.unfold      = Promise.unfold;       // DEPRECATED (use cujojs/most streams) Generate a stream of promises

	when.join        = join;                 // Join 2 or more promises

	when.all         = all;                  // Resolve a list of promises
	when.settle      = settle;               // Settle a list of promises

	when.any         = lift(Promise.any);    // One-winner race
	when.some        = lift(Promise.some);   // Multi-winner race
	when.race        = lift(Promise.race);   // First-to-settle race

	when.map         = map;                  // Array.map() for promises
	when.filter      = filter;               // Array.filter() for promises
	when.reduce      = lift(Promise.reduce);       // Array.reduce() for promises
	when.reduceRight = lift(Promise.reduceRight);  // Array.reduceRight() for promises

	when.isPromiseLike = isPromiseLike;      // Is something promise-like, aka thenable

	when.Promise     = Promise;              // Promise constructor
	when.defer       = defer;                // Create a {promise, resolve, reject} tuple

	// Error types

	when.TimeoutError = TimeoutError;

	/**
	 * Get a trusted promise for x, or by transforming x with onFulfilled
	 *
	 * @param {*} x
	 * @param {function?} onFulfilled callback to be called when x is
	 *   successfully fulfilled.  If promiseOrValue is an immediate value, callback
	 *   will be invoked immediately.
	 * @param {function?} onRejected callback to be called when x is
	 *   rejected.
	 * @param {function?} onProgress callback to be called when progress updates
	 *   are issued for x. @deprecated
	 * @returns {Promise} a new promise that will fulfill with the return
	 *   value of callback or errback or the completion value of promiseOrValue if
	 *   callback and/or errback is not supplied.
	 */
	function when(x, onFulfilled, onRejected, onProgress) {
		var p = Promise.resolve(x);
		if (arguments.length < 2) {
			return p;
		}

		return p.then(onFulfilled, onRejected, onProgress);
	}

	/**
	 * Creates a new promise whose fate is determined by resolver.
	 * @param {function} resolver function(resolve, reject, notify)
	 * @returns {Promise} promise whose fate is determine by resolver
	 */
	function promise(resolver) {
		return new Promise(resolver);
	}

	/**
	 * Lift the supplied function, creating a version of f that returns
	 * promises, and accepts promises as arguments.
	 * @param {function} f
	 * @returns {Function} version of f that returns promises
	 */
	function lift(f) {
		return function() {
			for(var i=0, l=arguments.length, a=new Array(l); i<l; ++i) {
				a[i] = arguments[i];
			}
			return apply(f, this, a);
		};
	}

	/**
	 * Call f in a future turn, with the supplied args, and return a promise
	 * for the result.
	 * @param {function} f
	 * @returns {Promise}
	 */
	function attempt(f /*, args... */) {
		/*jshint validthis:true */
		for(var i=0, l=arguments.length-1, a=new Array(l); i<l; ++i) {
			a[i] = arguments[i+1];
		}
		return apply(f, this, a);
	}

	/**
	 * Creates a {promise, resolver} pair, either or both of which
	 * may be given out safely to consumers.
	 * @return {{promise: Promise, resolve: function, reject: function, notify: function}}
	 */
	function defer() {
		return new Deferred();
	}

	function Deferred() {
		var p = Promise._defer();

		function resolve(x) { p._handler.resolve(x); }
		function reject(x) { p._handler.reject(x); }
		function notify(x) { p._handler.notify(x); }

		this.promise = p;
		this.resolve = resolve;
		this.reject = reject;
		this.notify = notify;
		this.resolver = { resolve: resolve, reject: reject, notify: notify };
	}

	/**
	 * Determines if x is promise-like, i.e. a thenable object
	 * NOTE: Will return true for *any thenable object*, and isn't truly
	 * safe, since it may attempt to access the `then` property of x (i.e.
	 *  clever/malicious getters may do weird things)
	 * @param {*} x anything
	 * @returns {boolean} true if x is promise-like
	 */
	function isPromiseLike(x) {
		return x && typeof x.then === 'function';
	}

	/**
	 * Return a promise that will resolve only once all the supplied arguments
	 * have resolved. The resolution value of the returned promise will be an array
	 * containing the resolution values of each of the arguments.
	 * @param {...*} arguments may be a mix of promises and values
	 * @returns {Promise}
	 */
	function join(/* ...promises */) {
		return Promise.all(arguments);
	}

	/**
	 * Return a promise that will fulfill once all input promises have
	 * fulfilled, or reject when any one input promise rejects.
	 * @param {array|Promise} promises array (or promise for an array) of promises
	 * @returns {Promise}
	 */
	function all(promises) {
		return when(promises, Promise.all);
	}

	/**
	 * Return a promise that will always fulfill with an array containing
	 * the outcome states of all input promises.  The returned promise
	 * will only reject if `promises` itself is a rejected promise.
	 * @param {array|Promise} promises array (or promise for an array) of promises
	 * @returns {Promise} promise for array of settled state descriptors
	 */
	function settle(promises) {
		return when(promises, Promise.settle);
	}

	/**
	 * Promise-aware array map function, similar to `Array.prototype.map()`,
	 * but input array may contain promises or values.
	 * @param {Array|Promise} promises array of anything, may contain promises and values
	 * @param {function(x:*, index:Number):*} mapFunc map function which may
	 *  return a promise or value
	 * @returns {Promise} promise that will fulfill with an array of mapped values
	 *  or reject if any input promise rejects.
	 */
	function map(promises, mapFunc) {
		return when(promises, function(promises) {
			return Promise.map(promises, mapFunc);
		});
	}

	/**
	 * Filter the provided array of promises using the provided predicate.  Input may
	 * contain promises and values
	 * @param {Array|Promise} promises array of promises and values
	 * @param {function(x:*, index:Number):boolean} predicate filtering predicate.
	 *  Must return truthy (or promise for truthy) for items to retain.
	 * @returns {Promise} promise that will fulfill with an array containing all items
	 *  for which predicate returned truthy.
	 */
	function filter(promises, predicate) {
		return when(promises, function(promises) {
			return Promise.filter(promises, predicate);
		});
	}

	return when;
});
})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });

},{"./lib/Promise":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\Promise.js","./lib/TimeoutError":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\TimeoutError.js","./lib/apply":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\apply.js","./lib/decorators/array":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\array.js","./lib/decorators/flow":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\flow.js","./lib/decorators/fold":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\fold.js","./lib/decorators/inspect":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\inspect.js","./lib/decorators/iterate":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\iterate.js","./lib/decorators/progress":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\progress.js","./lib/decorators/timed":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\timed.js","./lib/decorators/unhandledRejection":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\unhandledRejection.js","./lib/decorators/with":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\when\\lib\\decorators\\with.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\activity-channels\\activity-channels.js":[function(require,module,exports){
'use strict';
var helpModalTemplate = require('./partials/help-modal-template.html');
var newMessageTemplate = require('./partials/new-message-modal.html');
module.exports = [
	'$scope',
	'$location',
	'$state',
	'builtApi',
	'alertService',
	'utilsService',
	'modalService',
  'dataGridService',
	function($scope, $location, $state, builtApi, Alert, Utils, Modal, dataGrid) {
		var dataTableContainer = $('.data-tbl');

		$scope.loading = true;
		
		//Table data
		$scope.dataGrid = dataGrid;
		$scope.listRows = [];
		$scope.actions = ['edit', 'delete'];
		$scope.classColumns = [{
			'label': 'Channel',
			'key': 'channel'
		}, {
			'label': 'Message',
			'key': 'message'
		}];

		dataGrid.addResponsiveAttrs($scope.classColumns, 'phone, tablet');

		//paging
		var pagno = (parseInt($location.search().p) - 1);
		$scope.myPageItemsCount = 50;
		$scope.mycurrentPage = (pagno < 0 ? 0 : pagno) || 0;

		$scope.onServerSideItemsRequested = function(currentPage, filterBy, filterByFields, orderBy, orderByReverse, myPageItemsCount, gridItemuid) {
			$scope.loading = true;

			var skip = currentPage * myPageItemsCount;

			var params = {
			  options: {
			    pathId: 'custom_notifications',
			    query: {
			      include_count: true,
			      skip: skip,
			      desc: 'created_at',
			      limit: myPageItemsCount
			    }
			  }
			}

			builtApi.Notifications.getAll(params)
				.then(function(data) {
					$scope.listRows = data.custom_notifications;
					$scope.myItemsTotalCount = data.count;

					dataGrid.initFootable(dataTableContainer);

					/*url paging allocation*/
					$location.search({
						p: currentPage + 1
					})
				})
				.finally(function() {
          $scope.loading = false;
        });;
		}

		$scope.action = function(act, activity) {
			if (act === 'delete') {
				deleteMessage(activity);
				return;
			}

			if (act === 'edit') {
				editMessage(activity)
				return
			}

			if (act === 'create') {
				createNewMessage()
				return
			}
		}

		//Delete Notification
		function deleteMessage(activity) {
			var index = $scope.listRows.indexOf(activity);

			Alert.confirm({
					title: 'Delete class',
					content: 'Are you sure you want to delete this Notification?'
				})
				.then(function() {
					builtApi.Notifications.deleteOne({
							options: {
								objectUid: activity.uid,
								pathId: 'custom_notifications'
							}
						})
						.then(function(data) {
							data = data.entity;
							$scope.listRows.splice(index, 1);
							Alert.notify({
								title: 'Success',
								content: data.notice,
								type: 'success'
							});
						}, function(xhr) {
							Alert.notify({
								title: xhr.entity.error_message,
								content: Utils.parseError(xhr.entity),
								type: 'error'
							});
						})
				})
		};

		//Edit activity channel message
		function editMessage(activity) {
			var index = $scope.listRows.indexOf(activity);
			Modal.openModal({
					channel: activity.channel,
					message: activity.message,
					uid: activity.uid,
					type: "edit"
				}, newMessageTemplate, editMessageCtrl)
				.then(function(editedMessage) {
					$scope.listRows[index] = editedMessage;
				})
		}

		var editMessageCtrl = function($scope, $modalInstance, data) {
			$scope.data = data;
			$scope.btnStatus = false;
			$scope.ok = function() {
				$scope.btnStatus = true;
				builtApi.Notifications.editOne({
						options: {
							pathId: 'custom_notifications',
							objectUid: $scope.data.uid
						},
						body: {
							custom_notification: {
								channel: $scope.data.channel,
								message: $scope.data.message
							}
						}
					})
					.then(function(res) {
						$scope.btnStatus = false;
						Alert.notify({
							title: 'Success',
							content: res.notice,
							type: 'success'
						});
						$modalInstance.close(res.custom_notification);
					}, function(xhr) {
						$scope.btnStatus = false;
						Alert.notify({
							title: xhr.entity.error_message,
							content: Utils.parseError(xhr.entity),
							type: 'error'
						})
					})
			};
			//Cancel Modal Selection
			$scope.cancel = function() {
				$modalInstance.dismiss('cancel');
			};
		}

		//Create New Mesasge
		function createNewMessage() {
			Modal.openModal({
					channel: "",
					message: "",
					type: "create"
				}, newMessageTemplate, newMessageCtrl)
				.then(function(newMessage) {
					$scope.listRows.push(newMessage);
				})
		};

		var newMessageCtrl = function($scope, $modalInstance, data) {
			$scope.data = data;
			$scope.btnStatus = false;
			$scope.ok = function() {
				$scope.btnStatus = true;
				builtApi.Notifications.addOne({
						options: {
							pathId: 'custom_notifications',
						},
						body: {
							custom_notification: {
								channel: $scope.data.channel,
								message: $scope.data.message
							}
						}
					})
					.then(function(res) {
						$scope.btnStatus = false;
						Alert.notify({
							title: 'Success',
							content: res.notice,
							type: 'success'
						});
						$modalInstance.close(res.custom_notification);
					}, function(xhr) {
						$scope.btnStatus = false;
						Alert.notify({
							title: xhr.entity.error_message,
							content: Utils.parseError(xhr.entity),
							type: 'error'
						})
					})
			};
			//Cancel Modal Selection
			$scope.cancel = function() {
				$modalInstance.dismiss('cancel');
			};
		}


		$scope.getHelp = function() {
			Modal.openModal({}, helpModalTemplate, helpCtrl)
		}

		//Get help modal Controller
		var helpCtrl = function($scope, $modalInstance, data) {
			$scope.data = data;
			$scope.ok = function() {
				$modalInstance.close();
			};
			//Cancel Modal Selection
			$scope.cancel = function() {
				$modalInstance.dismiss('cancel');
			};
		}
	}
]
},{"./partials/help-modal-template.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\activity-channels\\partials\\help-modal-template.html","./partials/new-message-modal.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\activity-channels\\partials\\new-message-modal.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\activity-channels\\partials\\activity-channels.html":[function(require,module,exports){
module.exports = '<div class="button-wrap mb10">\n' +
    '    <a  class="btn btn-labeled btn-primary pull-left" ng-click="action(\'create\')">\n' +
    '        <span class="btn-label"><i class="fa fa-plus-square"></i>\n' +
    '        </span>Set new message\n' +
    '    </a>\n' +
    '    <i class="fa fa-info-circle help-icon pull-left ml10" ng-click="getHelp()"></i>\n' +
    '</div>\n' +
    '<div class="data-tbl-wrap">\n' +
    '    <table tr-ng-grid="" items="listRows" class="table data-tbl" page-items="myPageItemsCount" total-items="myItemsTotalCount" current-page="mycurrentPage" on-data-required="onServerSideItemsRequested(mycurrentPage, filterBy, filterByFields, orderBy, orderByReverse,myPageItemsCount, gridItem.uid)" enable-selections="false">\n' +
    '        <thead>\n' +
    '            <tr class="dt-tools">\n' +
    '                <th colspan="100">\n' +
    '                    <div class="row">\n' +
    '                        <div class="col-md-8 col-xs-12 pull-right">\n' +
    '                            <span tr-ng-grid-pager=""></span>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '            <tr class="dt-head-tr" ng-show="loading || listRows.length">\n' +
    '                <th class="dt-{{column.key}}-th" ng-repeat=\'column in classColumns\' field-name="{{column.label}}" data-toggle="{{column.dataToggle}}" data-hide="{{column.dataHide}}">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        {{column.label}} \n' +
    '                    </div>\n' +
    '                </th>\n' +
    '                <th class="dt-actions-th" class="">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        Actions\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '        </thead>\n' +
    '        <tbody ng-show="!loading">\n' +
    '            <tr class="">\n' +
    '                <td class="dt-{{column.key}}-td" ng-repeat=\'column in classColumns\' field-name="{{column.label}}">\n' +
    '                    <span>{{dataGrid.getCell(gridItem, column)}}</span>\n' +
    '                </td>\n' +
    '                <td class="">\n' +
    '                    <span title="{{act}}" ng-repeat=\'act in actions\' ng-click=\'action(act, gridItem)\' class="hand fa fa-lg edit_evnt ml10 dt-action-item" ng-class="{\'fa-pencil\' : act == \'edit\', \'fa-trash-o\' : act == \'delete\'}"></span>\n' +
    '                </td>\n' +
    '            </tr>\n' +
    '        </tbody>\n' +
    '        <tfoot class="hidden">\n' +
    '        </tfoot>\n' +
    '    </table>\n' +
    '    <div class="tab-loader" ng-show="loading">\n' +
    '        <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '    </div>\n' +
    '    <div class="no-msg" ng-show="!loading && !listRows.length">\n' +
    '        No activity channels created yet.\n' +
    '    </div>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\activity-channels\\partials\\help-modal-template.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click=\'cancel()\'>\n' +
    '        ×\n' +
    '    </button>\n' +
    '    <h3 class="modal-title">Activity Channels</h3>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '    <p>Activity channels allow you to set a custom message for an event. </p>\n' +
    '    <p>Mobile devices can subscribe to events in your application, such as creation of an object in a class. When the event is triggered, a generic message consisting of the channel name is sent. You may wish to change this to a more appropriate message.</p>\n' +
    '    <p>Channels are a string that encodes information regarding the event. You specify the message against a channel. The mobile devices listen on the same channels as well.</p>\n' +
    '    <p>Channels have the following syntax:</p> <pre class="prettyprint">{class_uid}.{object_uid}.{event}</pre>\n' +
    '    <p>The structure for create/update/delete on a class, object or upload:</p> <pre class="prettyprint">class.{create|update|delete} <br>{class_uid}.object.{create|update|delete}      <br>upload.create<br>{upload_uid}.update<br>{upload_uid}.delete     </pre>\n' +
    '    <p>There are also more generic events: </p>\n' +
    '    <p>* when any event is triggered on any class:</p> <pre class="prettyprint">class.{create|update|delete}</pre>\n' +
    '    <p>* when any event is triggered on any object of a particular class:</p> <pre class="prettyprint">{class_uid}.object.{create|update|delete}</pre>\n' +
    '    <p>* when any event is triggered on any object:</p> <pre class="prettyprint">object.{create|update|delete}</pre>\n' +
    '    <p>* when any event is triggered on any upload:</p> <pre class="prettyprint">upload.delete<br>upload.update</pre>\n' +
    '    <p>For example, suppose you have a "News" app, and users may choose to subscribe for notifications on breaking news. This means they are subscribed for creation of objects in the class "news". The channel\'s would then be as follows:</p> <pre class="prettyprint">post.object.create</pre>\n' +
    '    <p>With this, we may specify a more interesting message as follows:</p> <pre class="prettyprint">"Breaking News: {title}"</pre>\n' +
    '    <p>Here, {title} is substituted with the news title that may exist in the news object. In this way you can use any field in the object (must be of the String/Text/Number datatype). To access fields which are in a group, you may employ the dot "." notation. For example:</p> <pre class="prettyprint">{content.title}</pre> </div>\n' +
    '<div class="modal-footer">\n' +
    '    <a class="btn btn-labeled btn-default btn-sm pull-left" ng-click=\'cancel()\'>\n' +
    '        <span class="btn-label">\n' +
    '          <i class="fa fa-arrow-left"></i>\n' +
    '        </span>\n' +
    '        <span>\n' +
    '          Close\n' +
    '        </span>\n' +
    '    </a>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\activity-channels\\partials\\new-message-modal.html":[function(require,module,exports){
module.exports = '<div class="modal-header">\n' +
    '    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ng-click="cancel()">\n' +
    '        ×\n' +
    '    </button>\n' +
    '    <h3 class="modal-title">Set New Message</h3>\n' +
    '</div>\n' +
    '<div class="modal-body">\n' +
    '    <div class="form-horizontal">\n' +
    '        <fieldset>\n' +
    '            <div class="form-group">\n' +
    '                <label class="col-md-2 control-label">Channel</label>\n' +
    '                <div class="col-md-10">\n' +
    '                    <input type="text" placeholder="Enter channel" ng-model="data.channel" class="form-control" />\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="form-group">\n' +
    '                <label class="col-md-2 control-label">Message</label>\n' +
    '                <div class="col-md-10">\n' +
    '                    <textarea ng-model="data.message" class="form-control"></textarea>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '    </div>\n' +
    '</div>\n' +
    '\n' +
    '<div class="modal-footer">\n' +
    '    <div class="button-wrap">\n' +
    '        <button ng-show="data.type===\'create\'" btn-loader="btnStatus" loading-text="Creating..." type="submit" class="btn btn-labeled btn-primary btn-sm pull-right" ng-click="ok()">\n' +
    '            <span class="btn-label">\n' +
    '              <i class="fa fa-check"></i>\n' +
    '            </span>\n' +
    '            <span class="js-btn-text">\n' +
    '        Create \n' +
    '           </span>\n' +
    '        </button>\n' +
    '        <button ng-show="data.type===\'edit\'"  btn-loader="btnStatus" loading-text="Updating..." type="submit" class="btn btn-labeled btn-primary btn-sm pull-right" ng-click="ok()">\n' +
    '            <span class="btn-label">\n' +
    '              <i class="fa fa-check"></i>\n' +
    '            </span>\n' +
    '\n' +
    '            <span class="js-btn-text">\n' +
    'Update \n' +
    '           </span>\n' +
    '        </button>\n' +
    '        <button ng-click=\'cancel()\' class="btn btn-labeled btn-default btn-sm pull-left">\n' +
    '            <span class="btn-label"><i class="fa fa-arrow-left"></i>\n' +
    '            </span>Cancel\n' +
    '        </button>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\broadcasts\\broadcasts-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  'constants',
  'dataGridService',
  function($scope, $location, $state, builtApi, Alert, Utils, constants, dataGrid) {
    var dataTableContainer = $('.data-tbl');

    $scope.loading = true;

    //Table data
    $scope.dataGrid = dataGrid;
    $scope.listRows = [];
    $scope.actions = ['delete'];
    $scope.classColumns = [{
      'label': 'Text',
      'key': 'message'
    }, {
      'label': 'Sent At',
      'key': 'timestamp'
    }, {
      'label': 'Badge',
      'key': 'badge'
    }, {
      'label': 'Sender',
      'key': 'sender'
    }, {
      'label': 'Status',
      'key': 'status'
    }];

    dataGrid.addResponsiveAttrs($scope.classColumns, 'phone, tablet');

    //paging
    var pagno = (parseInt($location.search().p) - 1);
    $scope.myPageItemsCount = constants.queryLimit;
    $scope.mycurrentPage = (pagno < 0 ? 0 : pagno) || 0;

    $scope.onServerSideItemsRequested = function(currentPage, filterBy, filterByFields, orderBy, orderByReverse, myPageItemsCount, gridItemuid) {
      $scope.loading = true;

      var skip = currentPage * myPageItemsCount;
      var params = {
        options: {
          pathId: 'broadcasts',
          query: {
            include_count: true,
            skip: skip,
            desc: 'created_at',
            limit: myPageItemsCount
          }
        }
      }

      builtApi.Notifications.getAll(params)
        .then(function(data) {
          $scope.listRows = data.broadcasts;
          $scope.myItemsTotalCount = data.count;
          dataGrid.initFootable(dataTableContainer);

          /*url paging allocation*/
          $location.search({
            p: currentPage + 1
          })
        })
        .finally(function() {
          $scope.loading = false;
        });
    }

    $scope.action = function(act, notification) {
      if (act === 'delete') {
        deleteNotifications(notification);
        return;
      }

      if (act === 'create') {
        createNotifications()
        return
      }
    }

    //Delete Notification
    function deleteNotifications(notification) {
      var index = $scope.listRows.indexOf(notification);

      Alert.confirm({
          title: 'Delete class',
          content: 'Are you sure you want to delete this Notification?'
        })
        .then(function() {
          builtApi.Notifications.deleteOne({
              options: {
                objectUid: notification.uid,
                pathId: "broadcasts"
              }
            })
            .then(function(data) {
              data = data.entity;
              // console.log("data", data, data.notice);
              $scope.listRows.splice(index, 1);
              Alert.notify({
                title: 'Success',
                content: data.notice,
                type: 'success'
              });
            }, function(xhr) {
              Alert.notify({
                title: xhr.entity.error_message,
                content: Utils.parseError(xhr.entity),
                type: 'error'
              });
            })
        })
    };

    //Create Notification
    function createNotifications() {
      $state.go('app.dashboard.notifications-broadcasts-new', {
        api_key: $state.params.api_key
      })
    };
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\broadcasts\\new-notification-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$location',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  'constants',
  '$q',
  'tip',
  function($scope, $location, $state, builtApi, Alert, Utils, constants, $q, TIP) {
    var specifiedTarget = "";
    var notificationWrap = $('.new-notification-wrap');
    $scope.apiKey = $state.params.api_key;
    $scope.steps = ['compose message', 'specify targets', 'schedule delivery'];
    $scope.alertMessages = {};
    $scope.bookmarksData = {}
    $scope.timeZone = Utils.getTimeZoneOffset();
    $scope.zone = getlocalTimeZone();
    $scope.userSpecificTimezoneStatus = false;
    $scope.deliveryType = "immediate";
    $scope.dateTime = moment().format();
    $scope.btnStatus = false;

    builtApi.Bookmarks.get()
      .then(function(bookmarks) {
          $scope.bookmarksData = bookmarks;
      });

    // querybuilder
    $scope.intQuery = [];
    $scope.getNotificationQueryNow = false;

    // Location query
    $scope.geoFencingArray = [];
    $scope.locationQueryClass = {
      id: "built_io_installation_data",
      text: "Installation Data"
    };

    //
    // Notification query built by notification querybuilder.
    $scope.installationDataQuery = {};
    $scope.idqValidationPromise = $q.defer();

    // Actual notification query sent in the call
    $scope.notificationRequestPayload = {
      badge: "",
      message: ""
    };

    // This query is a subset and clubs into the notificationRequestPayload later.
    $scope.notificationQuery = {}

    // By default active notification step is set to first value in array
    $scope.currentStep = $scope.steps[0];

    // $scope.$watch('intermediateQuery', function() {
    //  // console.log("current intermediateQuery", JSON.stringify($scope.intermediateQuery))
    //   console.log("--------------------------------------------------------------------");
    // })

    $scope.toggleCollapse = function(e) {
      destroyTips();
      $(e.currentTarget).parent().toggleClass('active');
      google.maps.event.trigger(document.getElementById('geo-fencing-map'), "resize");
    }


    // Select2 for Device Type Selection
    $('#js-select2-deviceType').select2({
      allowClear: true,
      minimumResultsForSearch: -1,
      data: [{
        id: 0,
        text: 'All'
      }, {
        id: 1,
        text: 'iOS'
      }, {
        id: 2,
        text: 'Android'
      }]
    });

    //Assign default date
    $('#js-select2-deviceType').select2('data', {
      id: 0,
      text: 'All'
    });

    $('#js-select2-deviceType').on('change', function() {
      var selectTargetArray = [];
      var selectedTarget = $('#js-select2-deviceType').select2('data');
      if (selectedTarget.text !== "All") {
        selectTargetArray.push(selectedTarget.text);
        $scope.notificationQuery.device_type = {
          '$in': selectTargetArray
        };
      }
    });

    //Select2 for Device Time-Zones
    $('#js-select2-timeZones').select2({
      placeholder: "Choose timezone(s)",
      data: constants.timezones,
      multiple: true
    })
    $('#js-select2-timeZones').on('change', function() {

      var selectTargetArray = $('#js-select2-timeZones').select2('data');
      if (!_.isEmpty(selectTargetArray)) {

        $scope.notificationQuery.timezone = {
          '$in': selectTargetArray.map(function(target) {
            return target.id
          })
        };
      }
    });

    $scope.$watch('deliveryType', function() {
      //If Specified delivery time is selected set the date time scope
      if ($scope.deliveryType === "specified") {
        setDateTimeScope();
      }
    })

    //Select Notification step
    $scope.validateStep = function(step) {

      if (step == $scope.currentStep)
        return;

      if ($scope.currentStep === $scope.steps[0]) {
        if (!messageValidation())
          return;
        else
          switchStep(step);
      } else if ($scope.currentStep === $scope.steps[1]) {

        // Signal notification query builder to begin validaton.
        $scope.getNotificationQueryNow = true;

        // Register a validation promise. This promise gets resolved or rejected depending upon the output
        // of the notification querybuilder validation callback (notificationQueryCallback).
        $scope.idqValidationPromise.promise
          .then(function() {

            // check for a blank object in installation data query.
            if (!_.isEmpty($scope.installationDataQuery))
              switchStep(step);
          })
          .finally(function() {

            // Reset notification querybuilder validation signal.
            $scope.getNotificationQueryNow = false;
            $scope.idqValidationPromise = $q.defer();
          });
      } else {
        switchStep(step);
      }
    }

    function switchStep(step) {
      destroyTips();
      $scope.currentStep = step;
    }

    function destroyTips() {
      TIP.destroyAll(notificationWrap);
    }


    function validateInstallationDataQuery() {
      var deferred = $q.defer();
      $scope.getNotificationQueryNow = true;

    }

    $scope.notificationQueryCallback = function(getQuery) {
      getQuery.then(function(res) {
        console.log("Notification query callback success: ", res);
        $scope.installationDataQuery = res;
        $scope.idqValidationPromise.resolve();
      }, function() {
        console.log('Notification query callback fail');
        $scope.idqValidationPromise.reject();
      });
    }

    function constructLocationQuery() {
      var shapeArray = $scope.geoFencingArray;
      var queryArray = [];
      var obj = {
        "app_user_object_uid": {
          "$select": {
            "class_uid": $scope.locationQueryClass.id,
            "key": "app_user_object_uid"
          }
        }
      }
      var select = obj["app_user_object_uid"]["$select"]


      if ($scope.locationQueryClass == "built_io_application_user")
        select["key"] = "uid";


      for (var i = 0; i < shapeArray.length; i++) {
        if (shapeArray[i] && shapeArray[i].getMap()) {
          if (shapeArray[i].type === "polygon") {
            var vertices = shapeArray[i].getPath();
            var cordArray = [];
            // Iterate over the vertices.
            for (var j = 0; j < vertices.getLength(); j++) {
              var xy = vertices.getAt(j);
              cordArray.push([xy.lng(), xy.lat()])
            }
            select["query"] = {
              $within: cordArray
            }


          } else if (shapeArray[i].type === "circle") {
            var cords = shapeArray[i].getCenter();
            var radius = shapeArray[i].getRadius();
            select["query"] = {
              $near: {
                radius: radius,
                coords: _.values(cords).reverse()
              }
            }
          }
          queryArray.push($.extend(true, {}, obj))
        }
      };
      return queryArray;
    }

    //Send Notification
    $scope.sendNotification = function() {
      $scope.btnStatus = true;
      // construct location query if drawing shapes are created.
      if ($scope.geoFencingArray.length)
        $scope.notificationQuery['$or'] = constructLocationQuery();

      // Stringify the whole query and set it in the query key.
      $scope.notificationRequestPayload['query'] = 'query=' + JSON.stringify(_.assign($scope.installationDataQuery, $scope.notificationQuery));

      builtApi.Notifications.addOne({
        options: {
          pathId: "broadcasts"
        },
        body: {
          app_api_key: $state.params.api_key,
          notification: $scope.notificationRequestPayload
        }
      }).then(function(res) {
        $scope.btnStatus = false;
        Alert.notify({
          title: 'Success',
          content: res.notice,
          type: 'success'
        });

        $state.go('app.dashboard.notifications-broadcasts', {
          api_key: $scope.apiKey
        });

      }, function(xhr) {
        $scope.btnStatus = false;
        Alert.notify({
          title: xhr.entity.error_message,
          content: Utils.parseError(xhr.entity),
          type: 'error'
        })
      })
    }

    //Set if user's specific timezone is checked as true
    $scope.$watch('userSpecificTimezoneStatus', function(isTrue) {
      if (isTrue)
        $scope.notificationRequestPayload.local_push = isTrue;
    })

    //Validation for compose message step
    function messageValidation() {

      var tipOptions = {
        content: {
          text: function(api) {
            // Retrieve content from custom attribute of the $('.selector') elements.
            return $(this).attr('data-error-text');
          }
        }
      }

      var errorEls = [];
      if (_.isEmpty($scope.notificationRequestPayload.message)) {
        errorEls.push(notificationWrap.find('.n-msg-textarea'));
      } else if (!_.isEmpty($scope.notificationRequestPayload.badge) && isNaN($scope.notificationRequestPayload.badge)) {
        errorEls.push(notificationWrap.find('.n-badge-count'));
      }

      if (errorEls.length) {
        TIP.qbTip(errorEls, tipOptions);
        return false;
      } else {
        return true;
      }
    }

    function getlocalTimeZone() {
      var date = moment().format();
      return date.substring(getDateIndex(date), date.length).split(':').join('');
    }

    function setDateTimeScope() {
      $scope.dateTime = moment().format();
      $scope.$watch('dateTime', function(newValue) {
        // Set the notification runtime payload only if date time is specified
        if ($scope.deliveryType === "specified") {
          $scope.notificationRequestPayload.run_at = newValue;
        }
      })
    }

    function getISODateTime(date) {
      return new Date(date).toISOString();
    }

    function getDateIndex(isoDate) {
      if (isoDate.lastIndexOf('.') !== -1)
        return isoDate.lastIndexOf('.');
      else if (isoDate.lastIndexOf('+') !== -1)
        return isoDate.lastIndexOf('+');
      else if (isoDate.lastIndexOf('-') !== -1)
        return isoDate.lastIndexOf('-');
    }


    function getMomentDateTime(date) {
      return moment(date).format('MMMM Do YYYY, h:mm:ss a');
    }

    Utils.tip({
      container: 'body'
    });

  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\broadcasts\\partials\\broadcasts.html":[function(require,module,exports){
module.exports = '<div class="button-wrap mb10">\n' +
    '    <a  class="btn btn-labeled btn-primary pull-left mr10" ng-click="action(\'create\')">\n' +
    '        <span class="btn-label"><i class="fa fa-plus-square"></i>\n' +
    '        </span>New Notification\n' +
    '    </a>\n' +
    '</div>\n' +
    '<div class="data-tbl-wrap broadcasts-table-wrap">\n' +
    '    <table tr-ng-grid="" items="listRows" class="table data-tbl" page-items="myPageItemsCount" total-items="myItemsTotalCount" current-page="mycurrentPage" on-data-required="onServerSideItemsRequested(mycurrentPage, filterBy, filterByFields, orderBy, orderByReverse,myPageItemsCount, gridItem.uid)" enable-selections="false">\n' +
    '        <thead>\n' +
    '            <tr class="dt-tools">\n' +
    '                <th colspan="100">\n' +
    '                    <div class="row">\n' +
    '                        <div class="col-md-8 col-xs-12 pull-right">\n' +
    '                            <span tr-ng-grid-pager=""></span>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '            <tr class="dt-head-tr" ng-show="loading || listRows.length">\n' +
    '                <th class="dt-{{column.key}}-th" ng-repeat=\'column in classColumns\' field-name="{{column.label}}" data-toggle="{{column.dataToggle}}" data-hide="{{column.dataHide}}">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        {{column.label}}\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '                <th class="dt-actions-th" class="">\n' +
    '                    <div class="tr-ng-title">\n' +
    '                        Actions\n' +
    '                    </div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '        </thead>\n' +
    '        <tbody ng-show="!loading">\n' +
    '            <tr class="">\n' +
    '                <td class="dt-{{column.key}}-td" ng-repeat=\'column in classColumns\' field-name="{{column.label}}">\n' +
    '                    <span ng-if="column.key != \'status\'">{{dataGrid.getCell(gridItem, column)}}</span>\n' +
    '                    <span ng-if="column.key == \'status\'" class="b-label">\n' +
    '                        <span ng-if="gridItem[column.key] == \'delivered\'" class="label label-success">{{dataGrid.getCell(gridItem, column)}}</span>\n' +
    '                        <span ng-if="gridItem[column.key] == \'pending\'" class="label label-warning">{{dataGrid.getCell(gridItem, column)}}</span>\n' +
    '                        <span ng-if="gridItem[column.key] == \'failed\'" class="label label-danger">{{dataGrid.getCell(gridItem, column)}}</span>\n' +
    '                    </span>\n' +
    '                </td>\n' +
    '                <td class="">\n' +
    '                    <span title="{{act}}" ng-repeat=\'act in actions\' ng-click=\'action(act, gridItem)\' class="hand fa fa-lg edit_evnt ml10 dt-action-item" ng-class="{\'fa-pencil\' : act == \'edit\', \'fa-trash-o\' : act == \'delete\'}"></span>\n' +
    '                    \n' +
    '                </td>\n' +
    '            </tr>\n' +
    '        </tbody>\n' +
    '        <tfoot class="hidden">\n' +
    '        </tfoot>\n' +
    '    </table>\n' +
    '    <div class="tab-loader" ng-show="loading">\n' +
    '        <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '    </div>\n' +
    '    <div class="no-msg" ng-show="!loading && !listRows.length">\n' +
    '        No broadcasts created yet.\n' +
    '    </div>\n' +
    '</div>\n' +
    '';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\broadcasts\\partials\\new-notification.html":[function(require,module,exports){
module.exports = '<div class="well well-sm new-notification-wrap">\n' +
    '    <div class="">\n' +
    '        <legend class="pg-header">\n' +
    '            New notification\n' +
    '        </legend>\n' +
    '        <ul class="breadcrumb">\n' +
    '            <li ng-repeat="step in steps" ng-class="{\'active\' : step === currentStep}">\n' +
    '                <a ng-click="validateStep(step)">\n' +
    '                    {{step}} <span class="fa fa-angle-double-right" ng-if="!$last"></span>\n' +
    '                </a>\n' +
    '            </li>\n' +
    '        </ul>\n' +
    '        <div ng-show="currentStep === steps[0]">\n' +
    '            <div class="form-horizontal">\n' +
    '                <fieldset>\n' +
    '                    <div class="form-group">\n' +
    '                        <label class="col-md-2 control-label">Message</label>\n' +
    '                        <div class="col-md-10">\n' +
    '                            <textarea rows="4" class="form-control n-msg-textarea" ng-model="notificationRequestPayload.message" data-error-text="Message cannot be blank!"></textarea>\n' +
    '                            <p ng-if="alertMessages.message">{{alertMessages.message}}</p>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                    <div class="form-group">\n' +
    '                        <label class="col-md-2 control-label">Badge</label>\n' +
    '                        <div class="col-md-10">\n' +
    '                            <input class="form-control n-badge-count" type="text" ng-model="notificationRequestPayload.badge" data-error-text="Please enter a valid number!"/>\n' +
    '\n' +
    '                            <p class="note">\n' +
    '                                <b>iOS only: </b> Specify a badge count. If left blank, any existing badge count will be incremented. Enter \'-1\' to leave the badge count unchanged.\n' +
    '                            </p>\n' +
    '                            <div class="txt-color-red" ng-if="alertMessages.batchCount">\n' +
    '                                {{alertMessages.batchCount}}\n' +
    '                            </div>\n' +
    '\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </fieldset>\n' +
    '            </div>\n' +
    '            <div class="n-head-bar">\n' +
    '                <div class="button-wrap">\n' +
    '                    <button class="btn btn-primary pull-right" ng-click="validateStep(steps[1])">\n' +
    '                        Continue\n' +
    '                    </button>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <div ng-show="currentStep ===steps[1]">\n' +
    '            <div class="collapsible-wrap form-horizontal n-select-device-wrap">\n' +
    '                <div class="collapsible-group active">\n' +
    '                    <div class="cl-header" ng-click="toggleCollapse($event)">\n' +
    '                        <i class="fa fa-caret-right"></i> Select device\n' +
    '                    </div>\n' +
    '                    <div class="cl-body">\n' +
    '                        <fieldset>\n' +
    '                            <div class="form-group">\n' +
    '                                <label class="col-md-2 control-label">Device type</label>\n' +
    '                                <div class="col-md-10">\n' +
    '                                    <div id="js-select2-deviceType"></div>\n' +
    '                                </div>\n' +
    '                            </div>\n' +
    '                            <div class="form-group">\n' +
    '                                <label class="col-md-2 control-label">Device tokens</label>\n' +
    '                                <div class="col-md-10">\n' +
    '                                    <input type="hidden" placeholder="Enter comma separated device tokens..." select-device-selectbox notification-query="notificationQuery" query-param="device_token">\n' +
    '                                </div>\n' +
    '                            </div>\n' +
    '                            <div class="form-group">\n' +
    '                                <label class="col-md-2 control-label">Installation UID</label>\n' +
    '                                <div class="col-md-10">\n' +
    '                                    <input type="hidden" select-device-selectbox placeholder="Enter comma separated UIDs..." notification-query="notificationQuery" query-param="uid">\n' +
    '                                </div>\n' +
    '                            </div>\n' +
    '                            <div class="form-group">\n' +
    '                                <label class="col-md-2 control-label">Channels</label>\n' +
    '                                <div class="col-md-10">\n' +
    '                                    <input type="hidden" placeholder="Enter comma separated channels..." select-device-selectbox notification-query="notificationQuery" query-param="subscribed_to_channels">\n' +
    '                                </div>\n' +
    '                            </div>\n' +
    '                            <div class="form-group">\n' +
    '                                <label class="col-md-2 control-label">Timezones</label>\n' +
    '                                <div class="col-md-10">\n' +
    '                                    <div id="js-select2-timeZones"></div>\n' +
    '                                </div>\n' +
    '                            </div>\n' +
    '                        </fieldset>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '                <div class="collapsible-group">\n' +
    '                    <div class="cl-header" ng-click="toggleCollapse($event)">\n' +
    '                        <i class="fa fa-caret-right"></i> Location\n' +
    '                    </div>\n' +
    '                    <div class="cl-body">\n' +
    '                        <div geofencing></div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '                <div class="collapsible-group">\n' +
    '                    <div class="cl-header" ng-click="toggleCollapse($event)">\n' +
    '                        <i class="fa fa-caret-right"></i> Query\n' +
    '                    </div>\n' +
    '                    <div class="cl-body">\n' +
    '                        <div class="n-query-builder-wrap">\n' +
    '                            <div notification-query-builder=\'intQuery\' bookmarks-data="bookmarksData" api-key="apiKey" get-notification-query-now="getNotificationQueryNow" notification-query-callback="notificationQueryCallback"></div>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="n-head-bar">\n' +
    '                <div class="button-wrap">\n' +
    '                    <button class="btn btn-primary pull-right" ng-click="validateStep(steps[2])">\n' +
    '                        Continue\n' +
    '                    </button>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '        <!--Schedule Delivery-->\n' +
    '        <div ng-show="currentStep ===steps[2]" class="n-schedule-delivery-wrap">\n' +
    '            <div class="form-horizontal">\n' +
    '                <div class="radio">\n' +
    '                    <label>\n' +
    '                        <input type="radio" name="schedule-delivery-type" ng-model="deliveryType" value="immediate" class="radiobox style-0">\n' +
    '                        <span>Immediately <span class="help-text">Your message will be sent ASAP</span></span>\n' +
    '                    </label>\n' +
    '                </div>\n' +
    '\n' +
    '                <hr />\n' +
    '\n' +
    '                <div class="radio">\n' +
    '                    <label>\n' +
    '                        <input type="radio" name="schedule-delivery-type" ng-model="deliveryType" value="specified" class="radiobox style-0">\n' +
    '                        <span>Specify the time</span>\n' +
    '                    </label>\n' +
    '                    <div class="form-group mt20">\n' +
    '                        <label class="col-md-2 control-label">Send at</label>\n' +
    '                        <div class="col-md-10">\n' +
    '                            <div class="n-send-at-wrap clearfix">\n' +
    '                               <input bootstrap-date-picker date-time="dateTime">\n' +
    '                            </div>\n' +
    '                            <div class="checkbox animated fadeIn" ng-show="deliveryType === \'specified\'">\n' +
    '                                <label>\n' +
    '                                    <input type="checkbox" class="checkbox style-0" ng-model="userSpecificTimezoneStatus" ng-change="userSpecificTimezoneStatus!=userSpecificTimezoneStatus">\n' +
    '                                    <span>Send this notification in user\'s specific timezone.</span>\n' +
    '                                </label>\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <div class="n-head-bar">\n' +
    '                <div class="button-wrap">\n' +
    '                    <button  btn-loader="btnStatus" loading-text="Sending..." class="btn btn-primary pull-right" ng-click="sendNotification()" data-loading-text="Sending...">\n' +
    '                        <span class="js-btn-text">Send Notification</span>\n' +
    '                    </button>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\notification-credentials\\notification-credentials-ctrl.js":[function(require,module,exports){
'use strict';
module.exports = [
  '$scope',
  '$state',
  'builtApi',
  'alertService',
  'utilsService',
  'currentUser',
  '$sce',
  '$timeout',
  'postMessageUploadService',
  function($scope, $state, builtApi, Alert, Utils, currentUser, $sce, $timeout, postMessageUploadService) {
    var nCSelector = $('#js-notification-credentials');
    var randvalue = Utils.getRand();
    var defaultIOSCredentials = {
        name: "",
        dev_certificate: "",
        prod_certificate: "",
        prod_environment: false
    };

    var defaultAndroidCredentials = {
        name: "",
        gcm_api_key: ""
      };
    
    $scope.credentials = {
      ios_credentials : [],
      android_credentials :[]
    };

    $scope.loadingCredentials = false;
    $scope.apiKey = $state.params.api_key;
    $scope.currentUser = currentUser;
    $scope.host = window.location.protocol + '//' + window.location.host;
    $scope.actionurl = $sce.trustAsResourceUrl('/v1/notification_credentials.postmessage?postmessage_payload=' + randvalue);
    
    getNotificationCredentials();

    $(document).on('change', '.js-cert-select', function(e) {
      $(e.target).attr('name', $(e.target).attr('data-name'));
      $scope.$apply();
      $(e.target).parent().find('.js-plug-input').html('')
    });

    $scope.postCredentials = function(e) {
      var button = $(e.currentTarget);
      button.button('loading');
      nCSelector.find('form').trigger('submit');

      postMessageUploadService
        .getPostMessage(randvalue)
        .then(function(res) {
          if (res.hasOwnProperty('error_code')) {

              Alert.notify({
                title: "Error!",
                content: res.error_message,
                type: 'error'
              });
            }else {
              Utils.sa($scope, function() {
                $scope.credentials = res.notification_credentials;
              })
              Alert.notify({
                title: 'Success',
                content: res.notice,
                type: 'success'
              });
            }
        })
        .finally(function() {
          button.button('reset');
        });
    }

    $scope.removeCertificate = function(name, index) {
      var input = '<input type="hidden" name="notification_credentials[ios_credentials][INDEX][CERT]" value="false">';
      input     =  input.replace('CERT', name);
      input     = input.replace('INDEX', index)
      
      $scope.credentials.ios_credentials[index][name] = "";
      $('#js-' + name + '-'+ index+' > .js-plug-input').html(input);
    }

    $scope.addIOSCredentials = function() {
      $scope.credentials.ios_credentials.push(_.cloneDeep(defaultIOSCredentials));
    }

    $scope.removeIOSCredential = function(index) {
      if ($scope.credentials.ios_credentials.length > 1)
        $scope.credentials.ios_credentials.splice(index, 1);
    }

    $scope.addAndroidCredentials = function() {
      $scope.credentials.android_credentials.push(_.cloneDeep(defaultAndroidCredentials));
    }

    $scope.removeAndroidCredential = function(index) {
      if ($scope.credentials.android_credentials.length > 1)
        $scope.credentials.android_credentials.splice(index, 1);
    }

    function getNotificationCredentials() {
      $scope.loadingCredentials = true;
      
      builtApi.Notifications.getCredentialsDetails()
        .then(function(res) {
          $scope.credentials = res;
        }, function(xhr) {})
        .finally(function() {
          $scope.loadingCredentials = false;
          setDefaultCredentials();
      });
    }

    function setDefaultCredentials(){
      $scope.addIOSCredentials();
      $scope.addAndroidCredentials();
    }
    
  }
]
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\notification-credentials\\partials\\notification-credentials.html":[function(require,module,exports){
module.exports = '<div id="js-notification-credentials" class="n-c-wrap well well-sm">\n' +
    '    <legend class="pg-header">\n' +
    '        Setup your notification credentials\n' +
    '    </legend>\n' +
    '    <div class="pg-tagline">\n' +
    '        Specify credentials for iOS and Android notifications such as iOS certificates or the Android GCM (Google Cloud Messaging) key. For iOS, specify the environment as well to choose which certificate to use.\n' +
    '    </div>\n' +
    '\n' +
    '    <iframe height="1" width="1" name="n-c-iframe" class="hidden" src=""></iframe>\n' +
    '    <form class="form-horizontal" action="{{actionurl}}" method="POST" target="n-c-iframe" enctype="multipart/form-data" multipart="" ng-show="!loadingCredentials">\n' +
    '        <input type="hidden" name="host" value="{{host}}" />\n' +
    '        <input type="hidden" name="APPLICATION_API_KEY" value="{{apiKey}}" />\n' +
    '        <input type="hidden" name="AUTHTOKEN" value="{{currentUser.authtoken}}" />\n' +
    '        <fieldset>\n' +
    '            <legend>iOS credentials</legend>\n' +
    '            <div class="row">\n' +
    '                <div class="col-md-6">\n' +
    '                    <a class="btn btn-labeled btn-primary btn-lg" ng-click="addIOSCredentials()"><span class="btn-label"><i class="fa fa-plus-square"></i></span> Click to add a ios credentials</a>\n' +
    '                </div>\n' +
    '                <div class="col-md-6" ng-repeat="iosCredential in credentials.ios_credentials">\n' +
    '                    <a href="" ng-click="removeIOSCredential($index)" ng-show="$index!=0">[X]</a>\n' +
    '                    <div class="well well-sm">\n' +
    '                        <div class="form-group">\n' +
    '                            <label>Certificate name</label>\n' +
    '                            <input class="form-control" type="text" value="default" ng-if="$index===0" name="notification_credentials[ios_credentials][{{$index}}][name]">\n' +
    '\n' +
    '                            <input class="form-control" placeholder="Enter name" type="text" ng-model="iosCredential.name" ng-value="iosCredential.name" ng-if="$index!=0" name="notification_credentials[ios_credentials][{{$index}}][name]">\n' +
    '\n' +
    '                        </div>\n' +
    '                        <div class="form-group">\n' +
    '                            <label>Development certificate</label>\n' +
    '                            <p id="js-dev_certificate-{{$index}}" ng-show="!iosCredential.dev_certificate">\n' +
    '                                <input type="file" class="btn btn-default js-cert-select" data-name="notification_credentials[ios_credentials][{{$index}}][dev_certificate]">\n' +
    '                                <span class="js-plug-input"></span>\n' +
    '                            </p>\n' +
    '                            <p ng-show="iosCredential.dev_certificate" class="cert-link-wrap">\n' +
    '                                <a target="_blank" ng-href="{{iosCredential.dev_certificate}}?APPLICATION_API_KEY={{apiKey}}" class="">view certificate</a>\n' +
    '                                <span title="Remove certificate" class="close remove-certificate" ng-click="removeCertificate(\'dev_certificate\', $index)">×</span>\n' +
    '                            </p>\n' +
    '                        </div>\n' +
    '                        <div class="form-group">\n' +
    '                            <label>Production certificate</label>\n' +
    '                            <p id="js-prod_certificate-{{$index}}" ng-show="!iosCredential.prod_certificate">\n' +
    '                                <input type="file" class="btn btn-default js-cert-select" data-name="notification_credentials[ios_credentials][{{$index}}][prod_certificate]">\n' +
    '                                <span class="js-plug-input">\n' +
    '                                </span>\n' +
    '                            </p>\n' +
    '                            <p ng-show="iosCredential.prod_certificate" class="cert-link-wrap">\n' +
    '                                <a target="_blank" ng-href="{{credentials.ios_credentials.prod_certificate}}?APPLICATION_API_KEY={{apiKey}}" class="">view certificate</a>\n' +
    '                                <span title="Remove certificate" class="close remove-certificate" ng-click="removeCertificate(\'prod_certificate\', $index)">×</span>\n' +
    '                            </p>\n' +
    '                        </div>\n' +
    '                        <div class="form-group" ng-init="iosCredential.prod_environment =iosCredential.prod_environment || false">\n' +
    '                            <label>Environment</label>\n' +
    '                            <div class="radio">\n' +
    '                                <label>\n' +
    '                                    <input class="radiobox style-0 ng-pristine ng-valid" type="radio" ng-value="false" ng-model="iosCredential.prod_environment" name="notification_credentials[ios_credentials][{{$index}}][prod_environment]" /><span>Switch to development environment.</span>\n' +
    '                                </label>\n' +
    '                            </div>\n' +
    '                            <div class="radio">\n' +
    '                                <label>\n' +
    '                                    <input class="radiobox style-0 ng-pristine ng-valid" type="radio" ng-value="true" ng-model="iosCredential.prod_environment" name="notification_credentials[ios_credentials][{{$index}}][prod_environment]" /><span>Switch to production environment.</span>\n' +
    '                                </label>\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </fieldset>\n' +
    '        <fieldset>\n' +
    '            <legend>Android credentials</legend>\n' +
    '            <div class="row">\n' +
    '                <div class="col-md-6">\n' +
    '                    <a class="btn btn-labeled btn-primary btn-lg" ng-click="addAndroidCredentials()"><span class="btn-label"><i class="fa fa-plus-square"></i></span> Click to add a andriod credentials</a>\n' +
    '                </div>\n' +
    '                <div class="col-md-6" ng-repeat="androidCredential in credentials.android_credentials">\n' +
    '                    <a href="" ng-click="removeAndroidCredential($index)" ng-show="$index!=0">[X]</a>\n' +
    '                    <div class="well well-sm">\n' +
    '                        <div class="form-group">\n' +
    '                            <label>Certificate name</label>\n' +
    '                            <input class="form-control" placeholder="Enter name" type="text" ng-model="androidCredential.name" ng-value="androidCredential.name" ng-if="$index!=0" name="notification_credentials[android_credentials][{{$index}}][name]" />\n' +
    '                            <input class="form-control" name="notification_credentials[android_credentials][{{$index}}][name]" type="text" value="default" ng-if="$index==0" disabled />\n' +
    '                        </div>\n' +
    '                        <div class="form-group">\n' +
    '                            <label class="col-md-3 control-label">GCM API Key</label>\n' +
    '                            <div class="col-md-7">\n' +
    '                                <input type="text" class="u-input form-control" ng-model="androidCredential.gcm_api_key" name="notification_credentials[android_credentials][{{$index}}][gcm_api_key]" ng-value="androidCredential.gcm_api_key" />\n' +
    '                            </div>\n' +
    '                        </div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '\n' +
    '        </fieldset>\n' +
    '        <div class="form-actions">\n' +
    '            <button class="btn btn-primary" type="submit" ng-click="postCredentials($event)" data-loading-text="Saving...">\n' +
    '                Save credentials\n' +
    '            </button>\n' +
    '        </div>\n' +
    '    </form>\n' +
    '\n' +
    '    <div class="tab-loader" ng-if="loadingCredentials">\n' +
    '        <img alt="" src="images/loaders/block-loader.gif" />\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\geo-fencing.js":[function(require,module,exports){
'use strict';
var geoFencingTmpl = require('./partials/geo-fencing.html');
module.exports = [
  'builtApi',
  '$q',
  'constants',
  'utilsService',
  'libraryService',
  function(builtApi, $q, constants, Utils, LIB) {
    return {
      template: geoFencingTmpl,
      restrict: 'A',
      replace: true,
      link: function(scope, elem, attrs) {


        scope.latlng = {
          lat: constants.googleMaps.defaults.lat,
          lng: constants.googleMaps.defaults.lng
        };

        scope.activeDrawingMode = 'hand';
        scope.selectedShape = undefined;

        //Initialize geo-location on resolving GoogleMaps promise
        LIB.get('googleMaps').then(function() {
          initializeGeoLocationMap();
        });


        initClassSelect();

        initLocationSelect();


        function initClassSelect() {
          var classSelectBox = elem.find('#js-class-select2');

          //Initialize locaction search select box.
          classSelectBox.select2({
            minimumInputLength: 1,
            containerCssClass: 'select2-sm',
            dropdownCssClass: 'select2-sm',
            escapeMarkup: function(m) {
              return m;
            },
            //Set Installation data class as Default
            initSelection: function(element, callback) {
              return callback(scope.locationQueryClass)
            },
            query: function(query) {
              Utils.getClassSearch(builtApi, query.term)().then(query.callback);
            }
          });

          classSelectBox.on('change', function(e) {
            scope.locationQueryClass = classSelectBox.select2('data');
          });
        }


        function initLocationSelect() {
          //Initialize Select2 for Map Search Box
          scope.searchRef = _.throttle(function(query) {
            var deferred = $q.defer();
            var geocoder = new google.maps.Geocoder();
            var objResults = {};
            geocoder.geocode({
              'address': query
            }, function(locationData, status) {
              if (locationData) {
                objResults = {
                  results: locationData.map(function(location) {
                    return {
                      id: location.formatted_address,
                      text: location.formatted_address,
                      other: location
                    }
                  })
                }
                deferred.resolve(objResults);
              }
            })
            return deferred.promise;
          }, 10);

          //On selected search location from select2 box
          scope.onSelectedSearchlocation = function(result) {
            result = result.other;
            scope.$apply(function() {
              scope.latlng.lat = result["geometry"]["location"].lat();
              scope.latlng.lng = result["geometry"]["location"].lng();
              if (scope.mapObject) {
                var latlng = new google.maps.LatLng(scope.latlng.lat, scope.latlng.lng)
                scope.mapObject.setCenter(latlng);
              } else {
                initializeGeoLocationMap();
              }
            })
          }
        }

        scope.changeDrawingMode = function(mode) {

          console.log('changing drawing mode: ', mode)
          scope.clearSelection();

          switch (mode) {
            case "hand":
              scope.drawingManager.setDrawingMode(null);
              break;
            case "circle":
              scope.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);
              break;
            case "polygon":
              scope.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
              break;
            default:
              scope.drawingManager.setDrawingMode(null);
          }
          scope.activeDrawingMode = mode;
        }

        scope.clearSelection = function() {
          Utils.sa(scope, function() {
            if (scope.selectedShape) {
              scope.selectedShape.setEditable(false);
              scope.selectedShape = void 0;
            }
          });
        }

        scope.setSelection = function(shape) {
          Utils.sa(scope, function() {
            scope.clearSelection();
            scope.selectedShape = shape;
            shape.setEditable(true);
          });
        }

        scope.saveShapeObject = function(shape) {
          scope.geoFencingArray.push(shape)
        }

        scope.deleteSelectedShape = function() {
          if (scope.selectedShape) {
            scope.selectedShape.setMap(null);
            scope.clearSelection();
          }
        };

        //Initializing Map data
        function initializeGeoLocationMap() {
          google.maps.visualRefresh = true;
          var latlng = new google.maps.LatLng(scope.latlng.lat, scope.latlng.lng)

          var mapOptions = {
            zoom: 6,
            center: latlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            zoomControl: true
          }

          scope.mapObject = new google.maps.Map(document.getElementById("geo-fencing-map"), mapOptions);
          var drawOptions = {
            strokeWeight: 0,
            fillOpacity: 0.45,
            editable: true,
            fillColor: '#1E90FF'
          };

          // Creates a drawing manager attached to the map that allows the user to draw markers, lines, and shapes.
          scope.drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: null,
            drawingControl: false,
            circleOptions: drawOptions,
            polygonOptions: drawOptions,
            map: scope.mapObject
          })

          // Add listeners

          google.maps.event.addListener(scope.mapObject, 'click', scope.clearSelection);
          google.maps.event.addListener(scope.drawingManager, 'drawingmode_changed', scope.clearSelection);
          google.maps.event.addDomListener(document.getElementById('btn-delete-shape'), 'click', scope.deleteSelectedShape);
          google.maps.event.addListener(scope.drawingManager, 'overlaycomplete', function(e) {
            if (e.type != google.maps.drawing.OverlayType.MARKER) {

              Utils.sa(scope, function() {
                scope.changeDrawingMode('hand');

                // Add an event listener that selects the newly-drawn shape when the user
                // mouses down on it.
                var newShape = e.overlay;
                newShape.type = e.type;
                google.maps.event.addListener(newShape, 'click', function() {
                  scope.setSelection(newShape);
                });

                scope.setSelection(newShape);

                //push the newly made shape in the geoFencingArray.
                scope.saveShapeObject(newShape);

              })
            }
          });

        }
      }
    }
  }
]
},{"./partials/geo-fencing.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\partials\\geo-fencing.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\notification-query-builder.js":[function(require,module,exports){
'use strict';

var queryBuilderTmpl = require('./partials/notification-query-builder.html');

module.exports = [
  'builtApi',
  'utilsService',
  'alertService',
  '$q',
  'tip',
  function(builtApi, Utils, Alert, $q, TIP) {
    return {
      template: queryBuilderTmpl,
      restrict: 'A',
      scope: {
        apiKey: "=",
        query: "=notificationQueryBuilder",
        getNotificationQueryNow: "=",
        notificationQueryCallback: "=",
        bookmarksData: "="
      },

      link: function(scope, elem, attrs) {

        var defaultNotificationQuery = {
          __key: '$and',
          __value: [{
            __key: "app_user_object_uid",
            __value: {
              "$select": {
                "class_uid": "",
                "key": "app_user_object_uid",
                "query": []
              }
            },
            classData: {}
          }]
        }

        var mainConstraintSelector = elem.find('.js-notification-select2');
        scope.notificationValidationArray = [];
        scope.validateNotificationQueryNow = false;
        scope.$watch('bookmarksData', function() {
          if (!_.isEmpty(scope.bookmarksData))
            scope.bookmarks = scope.bookmarksData;
        });
        initNotificationQueryBuilder();


        scope.$watch('query', function(oldValue, newValue) {
          if (_.isEmpty(newValue)) {
            TIP.destroyAll($(elem));
          } else {
            mainConstraintSelector.select2('val', newValue[0].__key);
          }
        })

        scope.$watch('getNotificationQueryNow', function() {
          if (scope.getNotificationQueryNow) {
            var actualQuery = getNotificationQuery();
            scope.notificationQueryCallback(actualQuery);
          }
        })

        //Default Operator Assignment
        function initNotificationQueryBuilder() {
          if (!scope.query.length)
            scope.query.push(_.cloneDeep(defaultNotificationQuery))

          // Initialize contst
          mainConstraintSelector.select2({
            containerCssClass: 'select2-sm',
            minimumResultsForSearch: -1
          });

          mainConstraintSelector.select2('val', scope.query[0].__key);
        }


        function constructQuery(query) {
          var q = {};
          if (query.__key === undefined)
            return query;
          q[query.__key] = query.__value instanceof Array ? _.map(query.__value, constructQuery) : constructQuery(query.__value);
          return q;
        }

        // On change constriant Operator
        mainConstraintSelector.on('change', function() {
          scope.query[0].__key = mainConstraintSelector.select2('val');
        })


        scope.onSelectBookmark = function(bookmarkQuery) {
          destroyTips();
          //scope.query = [];
          scope.query = JSON.parse(bookmarkQuery.data)
        }

        scope.onSaveBookmark = function(inputbookmark, callback) {

          if (!_.isEmpty(inputbookmark))
            builtApi.Bookmarks.add({
              body: {
                "query_bookmark": {
                  "name": inputbookmark,
                  "data": JSON.stringify(Utils.removeKey(_.cloneDeep(scope.query)), '$$hashKey')
                }
              }
            }).then(function(res) {
              //hide bookmark input
              callback();
              Alert.notify({
                title: 'Success',
                content: res.notice,
                type: 'success'
              });
            }, function(xhr) {
              Alert.notify({
                title: xhr.entity.error_message,
                content: Utils.parseError(xhr.entity),
                type: 'error'
              })
            });
        }

        scope.onDeleteBookmark = function(bookmark, onDeletedCallback) {
          var index = scope.bookmarks.indexOf(bookmark);

          builtApi.Bookmarks.delete({
            options: {
              paramId: bookmark.uid
            },
            body: {
              "app_api_key": scope.apiKey,
              "bookmark_uid": bookmark.uid
            }
          }).then(function(res) {
            onDeletedCallback();
            scope.bookmarks.splice(index, 1);
            Alert.notify({
              title: 'Success',
              content: res.notice,
              type: 'success'
            });
          }, function(xhr) {
            Alert.notify({
              title: xhr.entity.error_message,
              content: Utils.parseError(xhr.entity),
              type: 'error'
            })
          })
        }

        function destroyTips() {
          TIP.destroyAll($('.n-query-builder-wrap'));
        }

        scope.addRow = function() {
          destroyTips();
          scope.query[0].__value.push(_.cloneDeep(defaultNotificationQuery.__value[0]));
        }

        function getNotificationQuery() {
          scope.validateNotificationQueryNow = true;
          return validateNotificationQuery()
            .then(function(res) {
              return constructNotificationQuery(res);
            }, function(xhr) {
              throw xhr;
            }).finally(function() {
              scope.validateNotificationQueryNow = false;
            });
        }

        function validateNotificationQuery() {
          return $q.all(scope.notificationValidationArray.map(function(promiseObj) {
            return promiseObj.promise;
          }));
        }

        function constructNotificationQuery(queryArray) {
          var actualQuery = {
            __key: scope.query[0].__key,
            __value: queryArray
          }
          return constructQuery(actualQuery);
        }
      }
    }
  }
]
},{"./partials/notification-query-builder.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\partials\\notification-query-builder.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\notification-row-view.js":[function(require,module,exports){
'use strict';

var queryBuilderTmpl = require('./partials/notification-row-view.html');

module.exports = [
  'utilsService',
  '$q',
  'builtApi',
  '$timeout',
  'oqService',
  'tip',
  function(Utils, $q, builtApi, $timeout, qbService, TIP) {
    return {
      template: queryBuilderTmpl,
      restrict: 'A',
      scope: {
        query: "=",
        queryIndex: "=",
        notificationQueryArray: "=",
        validateNotificationQueryNow: "=",
        notificationValidationArray: "="
      },

      link: function(scope, elem, attrs) {

        var classSelectBox = elem.find('.js-notification-class-selector');
        var deferred = $q.defer();
        var defaultPromiseObject = {
          promise: deferred.promise
        }
        scope.notificationValidationArray.push(defaultPromiseObject);
        scope.selectedClass = {};
        scope.selectedClassSet = false;
        scope.currentQuery = scope.query.__value.$select.query;
        scope.currentQuery.fieldData = {};
        scope.getQueryNow = false;

        initialClassCheck();

        function initialClassCheck() {
          initClassSelect();
          if (!_.isEmpty(scope.query.__value.$select.class_uid)) {
            classSelectBox.select2('data', {
              id: scope.query.__value.$select.class_uid,
              text: scope.query.classData.title
            })
            scope.selectedClass = scope.query.classData;
            scope.selectedClassSet = true;
          }
        }


        //Watch on validate Query
        scope.$watch('validateNotificationQueryNow', function() {

          if (scope.validateNotificationQueryNow === false)
            return

          // If there is only one notification row, resolve the promise by
          // sending an empty object to bypass validation.
          if (onlyOneRow() && _.isEmpty(classSelectBox.select2('data'))) {
            deferred.resolve({});
            setDefaultPromise();
          } else {
            validateRow();
          }

        })

        scope.queryCallback = function(getQuery) {
          getQuery.then(function(res) {
            deferred.resolve(constructNotificationRowQuery(res));
          }, function() {
            deferred.reject();
          }).finally(function() {
            scope.getQueryNow = false;
            setDefaultPromise();
          });
        }

        function constructNotificationRowQuery(query) {
          var notificationQuery = _.cloneDeep(scope.query);
          notificationQuery.__value.$select.query = query;
          return notificationQuery;
        }

        function validateRow() {
          var classData = classSelectBox.select2('data');
          var errorEls = [];
          if (_.isEmpty(classData)) {
            deferred.reject();
            errorEls.push(elem.find('div.js-notification-class-selector'));

            // show error tooltips on elements.
            if (errorEls.length)
              qbService.showErrorTips(errorEls);

            setDefaultPromise();
          } else {
            // signal querybuilder to validate query.
            scope.getQueryNow = true;
          }
        }

        function onlyOneRow() {
          return scope.notificationQueryArray.length === 1;
        }

        function setDefaultPromise() {
          deferred = $q.defer();
          defaultPromiseObject.promise = deferred.promise;
        }

        function initClassSelect() {
          var getClasses = _.memoize(function(query) {
            return Utils.getClassSearch(query)
          }, function(query) {
            return query;
          });

          //Initialize locaction search select box.
          classSelectBox.select2({
            minimumInputLength: 1,
            containerCssClass: 'select2-sm',
            dropdownCssClass: 'select2-sm',
            placeholder: "Select class",
            escapeMarkup: function(m) {
              return m;
            },
            query: function(query) {
              //Search Class Throttling call
              Utils.getClassSearch(builtApi, query.term)().then(query.callback);
            }
          });

          classSelectBox.off('select2-open').on('select2-open', function() {
            qbService.destroyTip(elem.find('div.js-notification-class-selector'));
          });

          classSelectBox.on('change', function(e) {
            if (!_.isEmpty(classSelectBox.select2('data')))
              changeClass(classSelectBox.select2('data'))
          });

          function changeClass(klass) {
            Utils.sa(scope, function() {
              scope.selectedClass = klass;
              scope.selectedClassSet = false;

              // If user selects 'built_io_application_user', the key will be 'uid' else 'app_user_object_uid';
              setKey();

              scope.query.__value.$select.query = [];
              $timeout(function() {
                scope.selectedClassSet = true;
                scope.query.__value.$select.class_uid = scope.selectedClass.uid;
                scope.query.classData = scope.selectedClass;
              }, 0);
            })
          }
        }

        function setKey() {
          if (scope.selectedClass.uid === "built_io_application_user")
            scope.query.__value.$select.key = "uid";
          else
            scope.query.__value.$select.key = "app_user_object_uid";
        }
        scope.removeRow = function() {
          // Destroy all tooltips
          TIP.destroyAll($('.n-query-builder-wrap'));

          if (scope.notificationQueryArray.length === 1) {
            scope.query = {
              __key: "app_user_object_uid",
              __value: {
                "$select": {
                  "class_uid": "",
                  "key": "app_user_object_uid",
                  "query": []
                }
              },
              classData: {}
            };
            scope.notificationQueryArray.splice(scope.queryIndex, 1, scope.query);
          } else {
            scope.notificationQueryArray.splice(scope.queryIndex, 1);
          }
        }

        scope.$on('$destroy', function handleDestroyEvent() {
          // Remove the registered validation promise of this row when the row gets destroyed.
          scope.notificationValidationArray.splice(scope.notificationValidationArray.indexOf(defaultPromiseObject), 1);
        })
      }
    }
  }
]
},{"./partials/notification-row-view.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\partials\\notification-row-view.html"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\partials\\geo-fencing.html":[function(require,module,exports){
module.exports = '<div class="geo-fencing-view">\n' +
    '    <div class="n-head-bar">\n' +
    '        <div>Query location on</div>\n' +
    '        <div id="js-class-select2"></div>\n' +
    '        <div>class</div>\n' +
    '        \n' +
    '    </div>\n' +
    '    <div class="gf-toolbar clearfix">\n' +
    '        <div class="gf-search-wrap">\n' +
    '            <div id="js-select2-loc-search" select-location-search search-reference="searchRef" on-selected-reference="onSelectedSearchlocation"></div>\n' +
    '        </div>\n' +
    '        <div class="gf-tools-wrap">\n' +
    '            <div class="btn-group">\n' +
    '                <button rel="tooltip" class="btn btn-default btn-sm" ng-class="{\'active\': activeDrawingMode === \'hand\'}" ng-click="changeDrawingMode(\'hand\')" title="Hand tool" data-placement="bottom">\n' +
    '                    <i class="fa fa-arrows-alt"></i>\n' +
    '                </button>\n' +
    '                <button rel="tooltip" class="btn btn-default btn-sm" ng-class="{\'active\': activeDrawingMode === \'circle\'}" ng-click="changeDrawingMode(\'circle\')" title="Circle tool" data-placement="bottom">\n' +
    '                    <i class="fa fa-circle-o"></i>\n' +
    '                </button>\n' +
    '                <button rel="tooltip" class="btn btn-default btn-sm" ng-class="{\'active\': activeDrawingMode === \'polygon\'}" ng-click="changeDrawingMode(\'polygon\')" title="Polygon tool" data-placement="bottom">\n' +
    '                    <i class="fa fa-stop"></i>\n' +
    '                </button>\n' +
    '                <button ng-class="{\'disabled\': selectedShape == undefined}" id="btn-delete-shape" rel="tooltip" class="btn btn-default btn-sm ml5" ng-click="deleteShape()" title="Delete shape" data-placement="bottom">\n' +
    '                    <i class="fa fa-trash-o"></i>\n' +
    '                </button>\n' +
    '            </div>\n' +
    '\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div class="gf-map">\n' +
    '        <div id="geo-fencing-map" class="g-map"></div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\partials\\notification-query-builder.html":[function(require,module,exports){
module.exports = '<div>\n' +
    '    <div class="nqb-head n-head-bar clearfix">\n' +
    '        <div class="nqb-text">Users match</div>\n' +
    '        <select class="js-notification-select2 nqb-con-select">\n' +
    '            <option value="$and">All</option>\n' +
    '            <option value="$or">Any</option>\n' +
    '        </select>\n' +
    '        <div class="nqb-text">of the following:</div>\n' +
    '        <div class="nqb-bookmarks-wrap" ng-show="bookmarksData">\n' +
    '            <div bookmarks="bookmarks" on-select-bookmark="onSelectBookmark" on-save-bookmark="onSaveBookmark" on-delete-bookmark="onDeleteBookmark"></div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div class="nqb-body clearfix">\n' +
    '       <div ng-repeat="queryObject in query[0].__value track by $id(queryObject)" class="nqb-row clearfix" notification-row-view query="queryObject" query-index="$index" notification-query-array="query[0].__value" validate-notification-query-now="validateNotificationQueryNow" notification-validation-array="notificationValidationArray">\n' +
    '      </div>\n' +
    '      <div class="nqb-btn-add-wrap">\n' +
    '          <button type="button" class="btn bg-color-blue txt-color-white btn-xs" ng-click="addRow()">\n' +
    '              Add condition\n' +
    '          </button>\n' +
    '      </div>\n' +
    '    </div>\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\partials\\notification-row-view.html":[function(require,module,exports){
module.exports = '<div class="nqb-row-inner">\n' +
    '    <input type="hidden" class="js-notification-class-selector nqb-class-select" rel="tooltip" />\n' +
    '    <div ng-switch on="selectedClassSet" class="nqb-qb-wrap">\n' +
    '        <div ng-switch-when="true" objects-query-builder="query.__value.$select.query" cls="selectedClass" get-query-now="getQueryNow" get-query-callback="queryCallback"></div>\n' +
    '    </div>\n' +
    '   <button type="button" class="close btn-delete-nqb-row" ng-click="removeRow()">\n' +
    '       ×\n' +
    '   </button>\n' +
    '\n' +
    '</div>';
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\select-device-selectbox.js":[function(require,module,exports){
'use strict';
module.exports = function() {
  return {
    template: "",
    restrict: 'A',
    replace: true,
    scope: {
      notificationQuery: '=notificationQuery',
      queryParam: "@queryParam"
    },
    link: function(scope, elem, attrs) {
      elem.select2({
        tags: [],
        'multiple': true,
        tokenSeparators: [',', ' '],
        dropdownCssClass: 'hide-search',
        selectOnBlur: true
      })

      elem.on('change', function(e) {
        if (!_.isEmpty(elem.select2('data'))) {

          var selectData = elem.select2('data').map(function(obj) {
            return obj.text;
          });

          scope.notificationQuery[scope.queryParam] = {
            '$in': selectData
          }
        }
      })

    }
  }
}
},{}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\notifications.js":[function(require,module,exports){
'use strict';

// Dependent Modules
var angular = require('third-party-modules/angular');
var uiRouter = require('angular-ui-router');
var resolvers = require('../manage/resolvers');

// Directives
var selectDeviceSelectbox = require('./directives/select-device-selectbox');
var geoFencing = require('./directives/geo-fencing');
var notificationQueryBuilder = require('./directives/notification-query-builder');
var notificationRowView = require('./directives/notification-row-view');

// Services
var chartService = require('./services/chart');

// Templates
var broadcastsTemplate = require('./controllers/broadcasts/partials/broadcasts.html');
var newNotificationTemplate = require('./controllers/broadcasts/partials/new-notification.html');
var activityChannelsTemplate = require('./controllers/activity-channels/partials/activity-channels.html');
var notificationCredentialsTemplate = require('./controllers/notification-credentials/partials/notification-credentials.html');

// Controllers
var broadcastsCtrl = require('./controllers/broadcasts/broadcasts-ctrl');
var newNotificationCtrl = require('./controllers/broadcasts/new-notification-ctrl');
var activityChannels = require('./controllers/activity-channels/activity-channels');
var notificationCredentials = require('./controllers/notification-credentials/notification-credentials-ctrl');

module.exports = angular.module('built.notifications', ['ui.router'])
  .controller('broadcastsCtrl', broadcastsCtrl)
  .controller('newNotificationCtrl', newNotificationCtrl)
  .controller('activityChannels', activityChannels)
  .controller('notificationCredentials', notificationCredentials)
  .directive('selectDeviceSelectbox', selectDeviceSelectbox)
  .directive('geofencing', geoFencing)
  .directive('notificationQueryBuilder', notificationQueryBuilder)
  .directive('notificationRowView', notificationRowView)
  .config([
    '$stateProvider',
    function($stateProvider) {
      $stateProvider
        .state('app.dashboard.notifications-broadcasts', {
          url: '/notifications/broadcasts?p',
          template: broadcastsTemplate,
          controller: 'broadcastsCtrl',
          data: {
            breadcrumbs: [{
              name: 'Notifications'
            }, {
              name: 'Broadcasts'
            }]
          }
        })
        .state('app.dashboard.notifications-broadcasts-new', {
          url: '/new-notification',
          template: newNotificationTemplate,
          controller: 'newNotificationCtrl',
          data: {
            breadcrumbs: [{
              name: 'Notifications',
              state: 'app.dashboard.notifications-broadcasts',
            }, {
              state: 'app.dashboard.notifications-broadcasts',
              name: 'Broadcasts'
            }, {
              name: 'New notification'
            }]
          }
        })
        .state('app.dashboard.activityChannels', {
          url: '/notifications/activity-channels?p',
          template: activityChannelsTemplate,
          controller: 'activityChannels',
          data: {
            breadcrumbs: [{
              name: 'Notifications'
            }, {
              name: 'Activity channels'
            }]
          }
        })
        .state('app.dashboard.notificationCredentials', {
          url: '/notifications/notification-credentials',
          template: notificationCredentialsTemplate,
          controller: 'notificationCredentials',
          data: {
            breadcrumbs: [{
              name: 'Notifications'
            }, {
              name: 'Credentials'
            }]
          }
        })
    }
  ]).run([
    'menuService',
    function(menu) {
      var menuItem = {
        id: 'notifications',
        title: 'Notifications',
        order: 6,
        icon: 'fa-bell-o',
        sub_menu: [{
          id: 'notificationCredentials',
          title: 'Credentials',
          state: 'app.dashboard.notificationCredentials'
        }, {
          id: 'broadcasts',
          title: 'Broadcasts',
          state: 'app.dashboard.notifications-broadcasts'
        }, {
          id: 'activityChannels',
          title: 'Activity Channels',
          state: 'app.dashboard.activityChannels'
        }]
      }
      menu.add(menuItem);
    }
  ])
},{"../manage/resolvers":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\resolvers.js","./controllers/activity-channels/activity-channels":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\activity-channels\\activity-channels.js","./controllers/activity-channels/partials/activity-channels.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\activity-channels\\partials\\activity-channels.html","./controllers/broadcasts/broadcasts-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\broadcasts\\broadcasts-ctrl.js","./controllers/broadcasts/new-notification-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\broadcasts\\new-notification-ctrl.js","./controllers/broadcasts/partials/broadcasts.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\broadcasts\\partials\\broadcasts.html","./controllers/broadcasts/partials/new-notification.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\broadcasts\\partials\\new-notification.html","./controllers/notification-credentials/notification-credentials-ctrl":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\notification-credentials\\notification-credentials-ctrl.js","./controllers/notification-credentials/partials/notification-credentials.html":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\controllers\\notification-credentials\\partials\\notification-credentials.html","./directives/geo-fencing":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\geo-fencing.js","./directives/notification-query-builder":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\notification-query-builder.js","./directives/notification-row-view":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\notification-row-view.js","./directives/select-device-selectbox":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\directives\\select-device-selectbox.js","./services/chart":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\services\\chart.js","angular-ui-router":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\angular-ui-router\\release\\angular-ui-router.js","third-party-modules/angular":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\angular\\index-browserify.js"}],"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\notifications\\services\\chart.js":[function(require,module,exports){
require('third-party-modules/highcharts');

module.exports = [
  '$rootScope',
  'constants',
	function($rootScope, constants) {

		Highcharts.theme = {
			colors: constants.highCharts.colorPalette
		}
		Highcharts.setOptions(Highcharts.theme);
		
		this.drawChart = function(args){
			args.el.highcharts(args.options);
		}
	}
]
},{"third-party-modules/highcharts":"C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\node_modules\\third-party-modules\\highcharts\\highcharts.shim.js"}]},{},["C:\\xampp\\htdocs\\admin-ui\\admin-ui-node\\public\\manage\\manage.js"]);
